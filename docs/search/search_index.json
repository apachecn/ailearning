{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ApacheCN \u4ee3\u7801: \u8ba9\u5b66\u4e60\u53d8\u5f97\u66f4\u7b80\u5355 \u7ec4\u7ec7\u4ecb\u7ecd \u9996\u9875\u5730\u5740: http://www.apachecn.org \u8d44\u6e90\u6c47\u603b\u5730\u5740: https://apachecn.github.io/home \u5173\u4e8e\u6211\u4eec: https://apachecn.github.io/home/about \u5185\u5bb9\u8be6\u60c5 \u6a21\u5757 \u7ae0\u8282 \u7c7b\u578b \u8d1f\u8d23\u4eba(GitHub) QQ \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 1 \u7ae0: \u673a\u5668\u5b66\u4e60\u57fa\u7840 \u4ecb\u7ecd @\u6bdb\u7ea2\u52a8 1306014226 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 2 \u7ae0: KNN \u8fd1\u90bb\u7b97\u6cd5 \u5206\u7c7b @\u5c24\u6c38\u6c5f 279393323 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 3 \u7ae0: \u51b3\u7b56\u6811 \u5206\u7c7b @\u666f\u6d9b 844300439 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 4 \u7ae0: \u6734\u7d20\u8d1d\u53f6\u65af \u5206\u7c7b @wnma3mz @\u5206\u6790 1003324213 244970749 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 5 \u7ae0: Logistic\u56de\u5f52 \u5206\u7c7b @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 6 \u7ae0: SVM \u652f\u6301\u5411\u91cf\u673a \u5206\u7c7b @\u738b\u5fb7\u7ea2 934969547 \u7f51\u4e0a\u7ec4\u5408\u5185\u5bb9 \u7b2c 7 \u7ae0: \u96c6\u6210\u65b9\u6cd5\uff08\u968f\u673a\u68ee\u6797\u548c AdaBoost\uff09 \u5206\u7c7b @\u7247\u523b 529815144 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 8 \u7ae0: \u56de\u5f52 \u56de\u5f52 @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 9 \u7ae0: \u6811\u56de\u5f52 \u56de\u5f52 @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 10 \u7ae0: K-Means \u805a\u7c7b \u805a\u7c7b @\u5f90\u662d\u6e05 827106588 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 11 \u7ae0: \u5229\u7528 Apriori \u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 \u9891\u7e41\u9879\u96c6 @\u5218\u6d77\u98de 1049498972 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 12 \u7ae0: FP-growth \u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 \u9891\u7e41\u9879\u96c6 @\u7a0b\u5a01 842725815 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 13 \u7ae0: \u5229\u7528 PCA \u6765\u7b80\u5316\u6570\u636e \u5de5\u5177 @\u5ed6\u7acb\u5a1f 835670618 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 14 \u7ae0: \u5229\u7528 SVD \u6765\u7b80\u5316\u6570\u636e \u5de5\u5177 @\u5f20\u4fca\u7693 714974242 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 15 \u7ae0: \u5927\u6570\u636e\u4e0e MapReduce \u5de5\u5177 \u7a7a\u7f3a - \u6709\u5174\u8da3\u79c1\u804a\u7247\u523b 842376188 Ml\u9879\u76ee\u5b9e\u6218 \u7b2c 16 \u7ae0: \u63a8\u8350\u7cfb\u7edf \u9879\u76ee \u7a7a\u7f3a - \u6709\u5174\u8da3\u79c1\u804a\u7247\u523b 842376188","title":"<center>ApacheCN</center>"},{"location":"#apachecn","text":"\u4ee3\u7801: \u8ba9\u5b66\u4e60\u53d8\u5f97\u66f4\u7b80\u5355","title":"ApacheCN"},{"location":"#_1","text":"\u9996\u9875\u5730\u5740: http://www.apachecn.org \u8d44\u6e90\u6c47\u603b\u5730\u5740: https://apachecn.github.io/home \u5173\u4e8e\u6211\u4eec: https://apachecn.github.io/home/about","title":"\u7ec4\u7ec7\u4ecb\u7ecd"},{"location":"#_2","text":"\u6a21\u5757 \u7ae0\u8282 \u7c7b\u578b \u8d1f\u8d23\u4eba(GitHub) QQ \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 1 \u7ae0: \u673a\u5668\u5b66\u4e60\u57fa\u7840 \u4ecb\u7ecd @\u6bdb\u7ea2\u52a8 1306014226 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 2 \u7ae0: KNN \u8fd1\u90bb\u7b97\u6cd5 \u5206\u7c7b @\u5c24\u6c38\u6c5f 279393323 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 3 \u7ae0: \u51b3\u7b56\u6811 \u5206\u7c7b @\u666f\u6d9b 844300439 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 4 \u7ae0: \u6734\u7d20\u8d1d\u53f6\u65af \u5206\u7c7b @wnma3mz @\u5206\u6790 1003324213 244970749 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 5 \u7ae0: Logistic\u56de\u5f52 \u5206\u7c7b @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 6 \u7ae0: SVM \u652f\u6301\u5411\u91cf\u673a \u5206\u7c7b @\u738b\u5fb7\u7ea2 934969547 \u7f51\u4e0a\u7ec4\u5408\u5185\u5bb9 \u7b2c 7 \u7ae0: \u96c6\u6210\u65b9\u6cd5\uff08\u968f\u673a\u68ee\u6797\u548c AdaBoost\uff09 \u5206\u7c7b @\u7247\u523b 529815144 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 8 \u7ae0: \u56de\u5f52 \u56de\u5f52 @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 9 \u7ae0: \u6811\u56de\u5f52 \u56de\u5f52 @\u5fae\u5149\u540c\u5c18 529925688 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 10 \u7ae0: K-Means \u805a\u7c7b \u805a\u7c7b @\u5f90\u662d\u6e05 827106588 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 11 \u7ae0: \u5229\u7528 Apriori \u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 \u9891\u7e41\u9879\u96c6 @\u5218\u6d77\u98de 1049498972 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 12 \u7ae0: FP-growth \u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 \u9891\u7e41\u9879\u96c6 @\u7a0b\u5a01 842725815 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 13 \u7ae0: \u5229\u7528 PCA \u6765\u7b80\u5316\u6570\u636e \u5de5\u5177 @\u5ed6\u7acb\u5a1f 835670618 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 14 \u7ae0: \u5229\u7528 SVD \u6765\u7b80\u5316\u6570\u636e \u5de5\u5177 @\u5f20\u4fca\u7693 714974242 \u673a\u5668\u5b66\u4e60\u5b9e\u6218 \u7b2c 15 \u7ae0: \u5927\u6570\u636e\u4e0e MapReduce \u5de5\u5177 \u7a7a\u7f3a - \u6709\u5174\u8da3\u79c1\u804a\u7247\u523b 842376188 Ml\u9879\u76ee\u5b9e\u6218 \u7b2c 16 \u7ae0: \u63a8\u8350\u7cfb\u7edf \u9879\u76ee \u7a7a\u7f3a - \u6709\u5174\u8da3\u79c1\u804a\u7247\u523b 842376188","title":"\u5185\u5bb9\u8be6\u60c5"},{"location":"join-us/","text":"\u524d\u8a00 \u65e0\u610f\u95f4\uff0c2017 \u5e74\u9a6c\u4e0a\u53c8\u8981\u7ed3\u675f\u4e86\uff0c\u65f6\u95f4\u8fc7\u5f97\u771f\u5feb\u554a\uff0c\u53c8\u8981\u8001\u4e00\u5c81\u4e86 \u3002\u3002\u3002 \u5728 2016 \u5e74 4 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5c31\u662f\u4e00\u4e2a\u4eba\u60f3\u7ffb\u8bd1\u4e0b\u5b98\u65b9\u6587\u6863\uff0c\u611f\u89c9\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5b66\u4e60\u4e1c\u897f\u7684\u8bdd\u4e5f\u4f1a\u5feb\u5f88\u591a\uff0c\u5bf9\u81ea\u5df1\u4e5f\u662f\u4e00\u4e2a\u63d0\u5347\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u5230\u5176\u4ed6\u7684\u670b\u53cb\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462\uff1f\uff1f\uff1f \u6709\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u4e4b\u540e\uff0c\u5c31\u8ddf\u4e00\u4e9b\u670b\u53cb\u804a\u4e86\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u53ef\u884c\u6027\u600e\u4e48\u6837\uff0c\u5927\u5bb6\u90fd\u89c9\u5f97\u6709\u641e\u5934\uff0c\u53ef\u4ee5\u64cd\u4f5c\u4e00\u6ce2\u3002\uff08\u597d\u53ef\u60dc\u5440\uff0c\u8ddf\u597d\u591a\u4eba\u8bf4\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u771f\u6b63\u60f3\u505a\u5e76\u80fd\u575a\u6301\u7684\u670b\u53cb\uff0c\u8c8c\u4f3c\u6ca1\u6709\u51e0\u4e2a\u4e86\uff0c\u575a\u6301\u7740\u4e0d\u8be5\u575a\u6301\u7684\u575a\u6301\uff0c\u6267\u7740\u7740\u4e0d\u8be5\u6267\u7740\u7684\u6267\u7740 \u3002\u3002\u3002\uff09 \u5728 2016 \u5e74 7 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u624d\u771f\u6b63\u7684\u6253\u7b97\u505a\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u90a3\u65f6\u5019\u5e74\u5c11\u8f7b\u72c2\uff0c\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0 \u4f1f\u5927\u7684\u822a\u9053\uff0c\u524d\u5f80\u65b0\u4e16\u754c \uff08 \u6ce8: \u4e86\u89e3 ApacheCN \u5fc5\u8bfb \uff09 \u6587\u7ae0\uff0c\u7b80\u5355\u7684\u8bf4\u4e86\u4e0b\u81ea\u5df1\u7684\u7ecf\u5386\u548c\u60f3\u6cd5\uff0c\u4e00\u4e9b\u60f3\u505a\u7684\u4e8b\u60c5\uff0c\u60f3\u627e\u66f4\u591a\u7684\u670b\u53cb\u4e00\u8d77\u6765\u7ffb\u8bd1\u4e0b\u5b98\u65b9\u6587\u6863\u3002 \u7531\u4e8e\u5f53\u65f6\u505a\u7684\u662f\u5927\u6570\u636e\u65b9\u9762\u7684\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u662f\u7ffb\u8bd1 Spark\uff0cStorm\uff0cKudu\uff0cZeepelin\uff0cKibana\uff0cElasticsearch \u3002\u3002\u3002\u7b49\u7b49\u548c\u5927\u6570\u636e\u76f8\u5173\u7684\u5b98\u65b9\u6587\u6863\u4e86\uff0c\u4e2d\u95f4\u6709\u5f88\u591a\u6545\u4e8b\u7531\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u5c31\u5148\u4e0d\u7ec6\u8bf4\u4e86\u3002\u81f3\u4eca\u4e3a\u6b62\uff0c\u4ee5\u4e0a\u6280\u672f\u76f8\u5173\u7684\u6587\u6863\uff0c\u57fa\u672c\u4e0a\u90fd\u7b97\u662f\u7ffb\u8bd1\u597d\u4e86\uff0c\u7b97\u662f\u80fd\u770b\u4e86\uff0c\u867d\u7136\u8fd8\u9700\u8981\u66f4\u8fdb\u4e00\u6b65\u7684\u5b8c\u5584\uff0c\u81f3\u5c11\u804a\u80dc\u4e8e\u65e0\u554a\uff01~ \u6700\u5f00\u59cb\u7528\u7684\u57df\u540d\u662f le.wiki \uff08\u4e3a\u5565\u7528\u8fd9\u4e2a\u57df\u540d\uff0c\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u90a3\u65f6\u5019\u5728\u4e50\u89c6\u642c\u7816\u561b\uff01\u2190_\u2190 \u8bf4\u5230\u4e50\u89c6\uff0c\u53ef\u80fd\u5927\u5bb6\u4f1a\u8bf4\u4ed6\u54ea\u91cc\u54ea\u91cc\u4e0d\u597d\u4ec0\u4e48\u7684\uff0c\u5f00\u59cb\u5404\u79cd\u9ed1\u4e86\u3002\u6211\u4e0d\u60f3\u8868\u8fbe\u4ec0\u4e48\uff0c\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u81f3\u5c11\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u80fd\u6709\u4e1c\u897f\u5b66\uff0c\u80fd\u8ba9\u81ea\u5df1\u6210\u957f\uff0c\u80fd\u6709\u5de5\u8d44\u62ff\uff0c\u5c31\u4e0d\u9519\u4e86\uff0c\u81f3\u5c11\u6211\u5f88\u611f\u8c22 \u4e50\u89c6 \uff09\u3002 le.wiki \u57df\u540d\u592a\u5c40\u9650\u4e86\uff0c\u4e0d\u591f\u4f53\u73b0\u6211\u4eec\u5927\u5bb6\u7684\u60c5\u6000\uff0c\u6240\u4ee5\u4e0d\u5f97\u4e0d\u6362\u4e00\u4e2a\u57df\u540d\u4e86\u3002 apache.wiki \u57df\u540d\u7684\u5207\u6362\u3002\u7531\u4e8e\u6211\u4eec\u8fd9\u4e9b\u6210\u5458\u5927\u591a\u6570\u90fd\u662f\u505a\u5927\u6570\u636e\u7684\uff0c\u5bf9 Apache \u662f\u5f88\u6709\u60c5\u6000\u7684\uff0c\u975e\u5e38\u611f\u8c22\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u7528\u7684 Hadoop\uff0cHive\uff0cSpark\uff0cFlink \u7b49\u7b49\u7684\u4e00\u4e9b\u6846\u67b6\uff0c\u90fd\u662f Apache \u5f00\u6e90\u51fa\u6765\u7684\u3002\u6240\u4ee5\u7ecf\u8fc7\u5927\u5bb6\u7684\u4e00\u81f4\u8ba8\u8bba\u540e\uff0c\u51c6\u5907\u4f7f\u7528 apache.wiki \u4f7f\u7528\u8fd9\u4e2a\u57df\u540d\u4e86\uff0c\u636e\u8bf4\u770b\u7740\u8fd8\u633a\u6709\u60c5\u6000\uff08\u903c\u683c\uff09\u7684 \u3002\u3002\u3002 \u5728\u8fd9\u671f\u95f4\uff0c\u505a\u4e86\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c\uff0c\u548c\u5927\u5bb6\u8ba8\u8bba\u4e00\u4e9b\u4e8b\u60c5\u7b49\u7b49\uff0c\u5927\u5bb6\u5404\u81ea\u7684\u5c1d\u8bd5\uff0c\u7136\u540e\u5c31\u62d6\u5230 10 \u6708\u4efd\u4e86\u3002 \u5728 2016 \u5e74 10 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u51c6\u786e\u6765\u8bf4\u662f\u56fd\u5e86\u540e\u5427\uff0c\u6b63\u5f0f\u5f00\u59cb\u7ffb\u8bd1\u6587\u6863\u7684\u641e\u4e8b\u4e4b\u9645\uff0c\u9080\u8bf7\u5927\u5bb6\u6765\u64cd\u4f5c\u4e00\u6ce2\uff0c\u4e5f\u4e3a\u4e86\u8ba9\u5927\u5bb6\u4e86\u89e3\u4e0b\u6211\u4eec\u662f\u5e72\u561b\u7684\uff0c\u8fd8\u7279\u610f\u5728 apache.wiki \u4e0a\u5199\u4e86\u5199\u4e86\u4e00\u7bc7 \u5173\u4e8e\u6211\u4eec \uff08 \u6ce8: \u4e86\u89e3 ApacheCN \u5fc5\u8bfb \uff09\uff0c\u6211\u5dee\u70b9\u628a\u81ea\u5df1\u90fd\u611f\u52a8\u4e86 \u3002\u3002\u3002 \u5728 2016 \u5e74\u5e74\u672b\u8bd5\u4e86\u4e0b Spark\uff0cElasticsearch \u6587\u6863\u7684\u7ffb\u8bd1\uff0c\u867d\u7136\u5185\u5bb9\u5f88\u591a\uff0c\u4f46\u8fd8\u7b97\u662f OK \u5427\uff01~ \u5927\u5bb6\u8fd8\u662f\u575a\u6301\u4e86\u4e0b\u6765\uff0c\u975e\u5e38\u611f\u8c22\u5927\u5bb6\uff0c\u6211\u8bb0\u5f97\u6211\u8c03\u683c\u5f0f\u90fd\u8c03\u7684\u8981\u6b7b\u4e86\uff0c\u5fe7\u6851 \u3002\u3002\u3002 \u5728 2017 \u5e74\u6625\u8282\u8fc7\u540e\uff0c\u5927\u5bb6\u53c8\u5f00\u59cb\u4e0a\u73ed\u4e86\uff0c\u4e5f\u8bb8\u4e0a\u73ed\u4e0a\u4e86 3 \u5e74\u89c9\u5f97\u592a\u65e0\u804a\u4e86\u5427\uff0c\u6216\u8005\u8bf4\u662f\u60f3\u641e\u70b9\u4e8b\u60c5\u51fa\u6765\uff0c\u8fd9\u6837\u6bd4\u8f83\u523a\u6fc0\u70b9\u4e86\u3002\u8003\u8651\u4e86\u597d\u4e45\uff0c\u521a\u597d\u4e5f\u6709\u5fd7\u540c\u9053\u5408\u7684\u4f19\u4f34 \u5c0f\u7476 \uff0c \u7247\u523b \uff0c\u5e72\u8106\u4e00\u8d77\u51fa\u6765\u88c5\u903c\u5427\u3002 \u5c31\u8fd9\u6837\uff0c\u5728 2017 \u5e74 6 \u6708\u5e95\uff0c\u8e0f\u4e0a\u4e86\u88c5\u903c\u4e0d\u5f52\u8def\uff0c\u518d\u4e0d\u75af\u72c2\u4e00\u628a\uff0c\u6211\u4eec\u5c31\u771f\u7684\u8001\u4e86\u3002\u3002\u3002 \u88c5\u903c\u7684\u4e0d\u5f52\u8def \u81ea\u4ece\u8d70\u4e0a\u4e86\u88c5\u903c\u7684\u4e0d\u5f52\u8def\u4e4b\u540e\uff0c\u8170\u4e0d\u9178\u4e86\uff0c\u817f\u4e0d\u75bc\u4e86\uff0c\u4e00\u53e3\u6c14\u88c5\u5b8c\u903c\u8138\u4e0d\u7ea2\uff0c\u5fc3\u4e5f\u4e0d\u8df3\u4e86\u3002\u3002\u3002 \u5176\u5b9e\u4f1a\u6709\u5f88\u591a\u4eba\u95ee\u6211\uff0c\u5728\u8fd9\u671f\u95f4\u4f60\u4eec\u7684\u6536\u5165\u6765\u6e90\u600e\u4e48\u529e\u5462\uff1f\uff1f\uff1f \u8fd9\u7279\u4e48\u5c31\u975e\u5e38\u5c34\u5c2c\u4e86\uff0c\u6211\u80fd\u8bf4\u6839\u672c\u6ca1\u6709\u6536\u5165\u6765\u6e90\u4e48\uff0c\u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u8dea\u7740\u4e5f\u8981\u8d70\u5b8c\u5427\uff01~ \u5927\u4e0d\u4e86\u518d\u51fa\u53bb\u627e\u5de5\u4f5c\u5457\uff0c\u614c\u4e2a\u6bdb\u5440\uff0c\u4fd7\u8bdd\u8bf4\u5f97\u597d\uff0c\u4eba\u751f\u82e6\u77ed\uff0c\u53ca\u65f6\u884c\u4e50\u5440\uff0c\u8d81\u7740\u5e74\u8f7b\uff0c\u628a\u81ea\u5df1\u60f3\u505a\u7684\u4e8b\u60c5\u90fd\u505a\u4e86\uff0c\u4e0d\u8981\u7559\u4e0b\u9057\u61be \u3002\u3002\u3002 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4f9d\u7136\u8981\u575a\u6301\u4e0b\u53bb \u3002\u3002\u3002 \u7ec4\u7ec7\u8d8b\u52bf \u524d\u8a00\u8bf4\u4e86\u8fa3\u4e48\u591a\uff0c\u4e5f\u7b80\u5355\u7684\u4ecb\u7ecd\u4e0b\u7ec4\u7ec7\u7684\u4e00\u4e2a\u8d8b\u52bf\u5427: 1. \u8d44\u6e90: \u7ec4\u7ec7\u7684\u8d44\u6e90\u53d8\u5f97\u591a\u4e86\u8d77\u6765\uff0c\u5149\u5b98\u65b9\u6587\u6863\u6765\u8bf4\uff0c\u524d\u524d\u540e\u540e\u4e00\u5171\u7ffb\u8bd1\u4e86\u5dee\u4e0d\u591a 10 \u4e2a\u5b98\u65b9\u6587\u6863\u4e86\uff0c\u8fd8\u5728\u6301\u7eed\u589e\u52a0\u4e2d\u3002\u5177\u4f53\u8be6\u60c5\u8bf7\u770b apachecn.org \u4e2d\u7684\u4e2d\u6587\u6587\u6863\u3002 2. \u5f71\u54cd\u529b: \u6162\u6162\u6709\u4eba\u77e5\u9053\u4e86 ApacheCN \u8fd9\u4e2a\u5f00\u6e90\u7ec4\u7ec7\u7684\u5b58\u5728\u4e86\uff0c\u6216\u8005\u662f\u63a5\u89e6\u5230\u6211\u4eec\u7684\u8d44\u6e90\u4e86\u3002 3. UV: UV \u4ece\u521a\u5f00\u59cb\u7684\u6bcf\u5929 20\uff0c\u4f30\u8ba1\u4e5f\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u70b9\u4e00\u4e0b\u4e86\uff0c\u6da8\u5230\u4e86\u73b0\u5728\u7684 1K+\uff0c\u4e0d\u5bb9\u6613\u5440\uff0c\u5927\u5bb6\u4e00\u628a\u8f9b\u9178\u4e00\u628a\u6cea - - \u3001 4. GitHub: github.com/apachecn \u4e5f\u7b97\u662f\u6709\u6211\u4eec\u81ea\u5df1\u7684 github \u4e86\u3002 5. \u6162\u6162\u5f00\u59cb\u7740\u624b\u5f04\u66f4\u591a\u7684\u4e1c\u897f\u4e86\uff0c\u6bd4\u5982\u4f18\u9177\uff0cB\u7ad9\uff0cA\u7ad9\uff0c\u77e5\u4e4e\uff0c\u609f\u7a7a\u95ee\u7b54\uff0c\u7f51\u6613\u4e91\u8bfe\u5802\uff0cYouTube \u7b49\u7b49\u4e4b\u7c7b\u7684\uff0c\u4e0d\u50cf\u4ee5\u524d\u8fa3\u4e48\u5355\u8c03\u4e86\u3002 \u968f\u7740\u6d41\u91cf\u7684\u589e\u52a0\uff0c\u5f71\u54cd\u529b\u7684\u6269\u5927\uff0c\u8fa3\u4e48\u6211\u4eec\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u66f4\u591a\u4e86\uff0c\u8fd9\u65f6\u5019\u7684\u8bdd\uff0c\u5f53\u7136\u9700\u8981\u66f4\u591a\u5fd7\u540c\u9053\u5408\u7684\u670b\u53cb\u6765\u4e00\u8d77\u6765\u53c2\u4e0e\uff0c\u4e00\u8d77\u6765\u88c5\u903c\u4e86\uff0c23333333 \u3002\u3002\u3002 \u7ec4\u7ec7\u76ee\u6807 \u7b2c\u4e00\u76ee\u6807: \u56fd\u5185\u7b2c\u4e00\u88c5\u903c\u7ec4\u7ec7\uff0c\u5927\u5bb6\u53bb\u54ea\u91cc\u88c5\u903c\u7684\u65f6\u5019\uff0c\u90fd\u80fd\u9047\u5230\u7ec4\u7ec7\u6210\u5458\u5c31\u523a\u6fc0\u4e86\u3002 \u7b2c\u4e8c\u76ee\u6807: \u7b49\u4f60\u6765\u5b9a\u4e49 \u3002\u3002\u3002 \u7ec4\u7ec7\u662f\u505a\u4ec0\u4e48\u7684 \u8bf7\u770b apachecn.org \u7ec4\u7ec7\u9996\u9875\u7684\u4ecb\u7ecd\uff0c\u4e13\u6ce8\u4e8e\u4f18\u79c0\u9879\u76ee\u7ef4\u62a4\u7684\u5f00\u6e90\u7ec4\u7ec7\uff0c\u4e0d\u6b62\u4e8e\u6743\u5a01\u7684\u6587\u6863\u89c6\u9891\u6280\u672f\u652f\u6301\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u4e00\u4e0b\u7684\u662f\uff0c\u7ffb\u8bd1\u6587\u6863\u4e0d\u662f\u6211\u4eec\u8fd9\u4e2a\u7ec4\u7ec7\u552f\u4e00\u7684\u4e8b\u60c5\u3002\u7ffb\u8bd1\u6587\u6863\u53ea\u662f\u8be5\u7ec4\u7ec7\u804c\u80fd\u4e0b\u7684\u4e00\u4e2a\u5206\u652f\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u89e3\u51b3\u6280\u672f\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770b\uff0c\u77a7\u4e00\u77a7\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u54a8\u8be2\u4e2a\u4eba\u95ee\u9898\uff0c\u6bd4\u5982\u5b66\u4e60\u8def\u7ebf\uff0c\u804c\u4e1a\u89c4\u5212\u7b49\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u7ec4\u7ec7\u5185\u7684\u67d0\u4e9b\u8d44\u6e90\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u60c5\u51b5\u63d0\u4f9b\u3002 \u6bd4\u5982\uff0c\u4f60\u6709\u597d\u7684\u60f3\u6cd5\uff0c\u8981\u6765\u641e\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u88c5\u903c\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u88c5\u903c\uff1f\uff1f\uff1f\u90a3\u4e48\u6765\u5bf9\u5730\u65b9\u4e86\uff0c\u6b22\u8fce \u3002\u3002\u3002 \u6bd4\u5982\uff0c\u3002\u3002\u3002\u7b49\u7b49\u3002 \u52a0\u5165\u597d\u5904 \u5982\u679c\u4f60\u559c\u6b22\u88c5\u903c\uff0c\u4ece\u6b64\u4f60\u88c5\u903c\u7684\u65f6\u5019\u4e0d\u662f\u591c\u6df1\u4eba\u9759\u7684\u65f6\u5019\u4e00\u4e2a\u4eba\u3002 \u5982\u679c\u4f60\u559c\u6b22\u5b66\u4e60\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5b66\u4e60\u66f4\u591a\u88c5\u903c\u7684\u77e5\u8bc6\uff0c\u66f4\u5feb\u7684\u63d0\u5347\u81ea\u5df1\u7684\u4e2a\u4eba\u6280\u80fd\u3002 \u5982\u679c\u4f60\u559c\u6b22\u4ea4\u53cb\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u6269\u5927\u81ea\u5df1\u7684\u4eba\u8109\u5708\uff0c\u8ba4\u8bc6\u5404\u79cd\u5404\u6837\u7684\u5927\u4f6c\uff08\u5c0f\u767d\uff09\uff0c\u4ea4\u66f4\u591a\u7684\u670b\u53cb \u3002 \u5982\u679c\u4f60\u662f\u5c0f\u767d\uff0c\u53ef\u4ee5\u8ddf\u6211\u6211\u4eec\u4e00\u8d77\u5b66\u4e60\uff0c\u6709\u66f4\u591a\u7684\u4eba\u5e2e\u52a9\u4f60\uff0c\u6bd4\u5982\u5728\u7ebf\u54a8\u8be2\uff0c\u5b66\u4e60\u8def\u7ebf\u89c4\u5212\uff0c\u804c\u4e1a\u751f\u6daf\u89c4\u5212\uff0c\u5982\u4f55\u6ce1\u59b9\u7eb8 \u3002\u3002\u3002\u7b49\u7b49\u3002 \u5982\u679c\u4f60\u662f\u5927\u4f6c \u3002\u3002\u3002\u597d\u50cf\u6211\u4eec\u90fd\u662f\u5c0f\u767d\uff0c\u8fd9\u7279\u4e48\u5c31\u975e\u5e38\u5c34\u5c2c\u4e86\u3002\u6b22\u8fce\u5927\u4f6c\uff01~ \u5982\u679c\u4f60\u559c\u6b22\u641e\u4e8b\u60c5\uff0c\u90a3\u4e48\u771f\u7684\u662f\u6765\u5bf9\u5730\u65b9\u4e86\uff0c\u7ec4\u7ec7\u6b22\u8fce\u4f60\u3002 \u5982\u679c\u4f60\u559c\u6b22\u641e\u57fa\uff0c\u90a3\u4e48\u6b22\u8fce\u6765\u5230\u641e\u57fa\u7684\u5929\u5802\uff0c\u5982\u679c\u4e0d\u662f\u4e3a\u4e86\u641e\u57fa\uff0c\u90a3\u4e48\u4eba\u751f\u8fd8\u6709\u4ec0\u4e48\u610f\u4e49\u3002 \u5982\u679c\u4f60\u662f\u4f38\u624b\u515a \u3002\u3002\u3002\u8fd9 \u3002\u3002\u3002\u5927\u54e5\u4f60\u6015\u662f\u8d70\u9519\u5730\u65b9\u4e86 - - \uff01 \u7279\u55b5\u7684\uff0c\u6280\u672f\u6ca1\u5b66\u5230\u4ec0\u4e48\uff0c\u56fe\u7247\u5012\u662f\u6536\u85cf\u4e86\u5f88\u591a\u5f20 \u3002\u3002\u3002 \u7ec4\u7ec7\u67b6\u6784 \u4e3a\u4f55\u8981\u5b8c\u5584\u7ec4\u7ec7\u67b6\u6784\uff1f\uff1f\uff1f 1. \u8ba9\u6210\u5458\u66f4\u6709\u53c2\u4e0e\u611f\uff0c\u63d0\u5347\u6210\u5458\u7684\u4f53\u9a8c\uff0c\u4e07\u4e00\u51fa\u540d\u4e86\uff0c\u4ee5\u540e\u53ef\u4ee5\u81ea\u8c6a\u7684\u8bf4\uff0c\u6211\u662f\u7ec4\u7ec7\u91cc\u9762\u7684\u4e00\u5458\u3002 2. \u7ec4\u7ec7\u6210\u5458\u804c\u80fd\u7684\u5212\u5206\uff0c\u53c2\u4e0e\u5404\u79cd\u51b3\u7b56\uff0c\u4e0d\u4f1a\u50cf\u4ee5\u524d\u90a3\u6837\uff0c\u6302\u4e2a\u53f7\u5c31\u5b8c\u4e86\uff0c\u65e2\u7136\u60f3\u88c5\u903c\uff0c\u5c31\u5f97\u628a\u903c\u88c5\u597d\u4e86\u3002 3. \u5229\u4e8e\u7ec4\u7ec7\u7684\u53d1\u5c55\u6269\u5927\uff0c\u5916\u90e8\u6210\u5458\u7684\u52a0\u5165\u3002\u4e00\u4e2a\u597d\u7684\u7ec4\u7ec7\u67b6\u6784\uff0c\u662f\u7ec4\u7ec7\u53d1\u5c55\u66f4\u4e3a\u58ee\u5927\u7684\u91cd\u8981\u4e00\u6b65\uff0c\u867d\u7136\u53ea\u662f\u6211\u4eec\u7ec4\u7ec7\u7684\u4e00\u5c0f\u6b65\uff0c\u786e\u662f\u6574\u4e2a\u4e92\u8054\u7f51\u7684\u4e00\u5927\u6b65 \u3002\u3002\u3002\uff08\u8fd9\u725b\u903c\u5439\u7684\uff0c\u6211\u5dee\u70b9\u5c31\u4fe1\u4e86 - - \u3001\uff09 4. \u5177\u4f53\u7684\u7ec4\u7ec7\u67b6\u6784\uff0c\u4e0d\u5728\u8fd9\u91cc\u7ec6\u8bf4\u4e86\u3002 5. \u3002\u3002\u3002\u7b49\u7b49\u3002 6. \u7adf\u7136\u8fd8\u6709\u5c0f\u4f19\u4f34\u95ee\uff0c\u80fd\u4e0d\u80fd\u5151\u6362\u7fd4 \u3002\u3002\u3002\u6211\u4e5f\u662f\u65e0\u8bdd\u53ef\u8bf4\u3002 \u7ec4\u7ec7\u79ef\u5206\u5236 \u6b63\u5728\u5b8c\u5584\u7ec4\u7ec7\u79ef\u5206\u5236\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u53c2\u4e0e\u7ec4\u7ec7\u7684\u4e00\u4e9b\u6d3b\u52a8\uff0c\u6bd4\u5982\u53c2\u4e0e\u7ffb\u8bd1\uff0c\u53c2\u4e0e\u53cd\u9988\uff0c\u53c2\u4e0e\u5ba3\u4f20\u6d3b\u52a8\u7b49\u7b49\u5565\u7684\uff0c\u90fd\u4f1a\u83b7\u5f97\u76f8\u5e94\u7684\u79ef\u5206\u3002 \u90a3\u4e48\u79ef\u5206\u53ef\u4ee5\u5e72\u561b\u5462\uff0c\u53ef\u4ee5\u5151\u6362\u4ec0\u4e48\u5462\uff1f 1. \u4e91\u68af\u670d\u52a1\uff0c\u9068\u6e38\u4e16\u754c\u3002 2. \u8bdd\u8d39\uff0c\u79ef\u5206\u53ef\u4ee5\u76f4\u63a5\u6298\u5408\u6210\u8bdd\u8d39\uff0c\u5145\u503c\u5230\u4f60\u7684\u624b\u673a\u53f7\u4e2d\u53bb\u3002 3. \u767e\u5ea6\u7f51\u76d8\uff0c\u7231\u5947\u827a\uff0c\u8fc5\u96f7\uff0c\u8fc5\u6e38\uff0c\u4f18\u9177 \u3002\u3002\u3002\u7b49\u7b49\u4f1a\u5458\u3002 4. \u4e0e\u79ef\u5206\u7b49\u4ef7\u7684\u7269\u54c1\uff0c\u6bd4\u5982\u53ef\u80fd\u4f60\u9700\u8981 1080ti\u663e\u5361 \u3002\uff08\u53ea\u8981\u4f60\u79ef\u5206\u591f\uff0c\u663e\u5361\u7ec4\u7ec7\u5f53\u573a\u5151\u6362\uff0c\u4e0d\u89e3\u91ca \u3002\u3002\u3002\uff09 5. \u3002\u3002\u3002\u7b49\u7b49\u3002 \u7ec4\u7ec7\u89c4\u5212 \u5728\u5f80\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7684\u9053\u8def\u65b9\u5411\u524d\u884c\uff0c\u867d\u7136\u8fc7\u7a0b\u5f88\u75db\u82e6\uff0c\u4f46\u662f\u524d\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u5927\u5bb6\u7684\u6b22\u58f0\u7b11\u8bed\u89c9\u5f97\u5f88\u5feb\u4e50\uff0c\u5728\u88c5\u903c\u7684\u9053\u8def\u4e0a\u6e10\u884c\u6e10\u8fdc \u3002\u3002\u3002 \u73b0\u9636\u6bb5\u6d3b\u52a8 \u524d\u7aef\u65f6\u95f4\uff0c\u7ec4\u7ec7\u6839\u636e\u4e66\u7c4d\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b\u5f55\u5236\u4e86\u4e00\u671f\u516c\u76ca\u6027\u7684\u89c6\u9891\uff0c\u653e\u5230 A\u7ad9\uff0cB\u7ad9\uff0c\u4f18\u9177 \u7b49\u89c6\u9891\u7f51\u7ad9\u4e0a\u4e86\uff0c\u76f8\u5e94\u7684\u89c6\u9891\uff0c\u6587\u6863\uff0c\u6e90\u7801\uff0c\u6ce8\u91ca\uff0c\u6570\u636e\u96c6\u53ef\u4ee5\u5728\u6211\u4eec\u7684 GitHub: https://github.com/apachecn/AiLearning/ \u4e2d\u627e\u5230\u3002 \u6700\u8fd1\u7ec4\u7ec7\u7684 scikit-learn 0.19 \u4e2d\u6587\u6587\u6863\u7ffb\u8bd1\u6821\u9a8c\u6d3b\u52a8 \u5373\u5c06\u7ed3\u675f\uff0csklearn 0.19.0 \u4e2d\u6587\u6587\u6863: http://sklearn.apachecn.org/cn/0.19.0/ \u9a6c\u4e0a\u53ef\u4ee5\u6b63\u5f0f\u7684\u4e0a\u7ebf\u4e86\u3002 \u5728\u6b64\u611f\u8c22\u53c2\u4e0e\u6d3b\u52a8\u7684\u8d21\u732e\u8005\u4eec: https://github.com/apachecn/scikit-learn-doc-zh#%E8%B4%A1%E7%8C%AE%E8%80%85 \u8fd1\u671f\u8ba1\u5212 \u51c6\u5907\u9a6c\u4e0a\u5f00\u59cb\u7ec4\u7ec7\u4e00\u671f\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u590d\u4e60\u6d3b\u52a8\u300b\uff0c\u9488\u5bf9\u8be5\u4e66\u7c4d\uff0c\u81ea\u5df1\u590d\u4e60\u7684\u540c\u65f6\uff0c\u63d0\u5347\u5927\u5bb6\u7684\u6280\u672f\u6c34\u5e73\uff08\u9488\u5bf9\u65b0\u624b\u5c0f\u767d\uff09\u3002 \u7ec4\u7ec7\u4e00\u8d77\u5237 kaggle \u7684\u6d3b\u52a8\uff0c\u4ee5\u6b64\u6765\u719f\u6089 sklearn \u5957\u8def\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e86\u89e3 kaggle \u7684\u5957\u8def\u3002 \u52a0\u5165\u8981\u6c42 \u6ca1\u6709\u4ec0\u4e48\u8981\u6c42\uff0c\u53ea\u8981\u4f60\u613f\u610f\u4e3a\u7ec4\u7ec7\u51fa\u4e00\u4efd\u529b\uff0c\u60f3\u8981\u4e00\u8d77\u8d70\u7684\u66f4\u5feb\uff0c\u4e00\u8d77\u8d70\u7684\u66f4\u8fdc\u5373\u53ef\u3002 1. \u5982\u679c\u4f60\u662f\u5c0f\u767d: \u975e\u5e38\u6b22\u8fce\u5c0f\u767d\uff0c\u6211\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8d70\u66f4\u5c11\u7684\u5f2f\u8def\uff0c\u4e00\u8d77\u6210\u957f\uff0c\u53ef\u80fd\u4f60\u4f1a\u60f3\u7740\u8bf4\uff0c\u4f60\u6280\u672f\u4e0d\u591f\u597d\uff0c\u8981\u5148\u4fee\u70bc\u4fee\u70bc\u518d\u52a0\u5165\u6211\u4eec\uff0c\u90a3\u4e48\u6211\u53ea\u80fd\u8bf4\u8fd9\u4e2a\u60f3\u6cd5\u771f\u7684\u6709\u95ee\u9898\u3002\u3002\u3002\u4e0d\u8981\u7b49\u5230\u4f60\u8db3\u591f\u4f18\u79c0\u7684\u65f6\u5019\uff0c\u624d\u53bb\u8ddf\u5973\u795e\u8868\u767d\u3002\u3002\u3002\u56e0\u4e3a\u7b49\u5230\u4f60\u8db3\u591f\u4f18\u79c0\u7684\u65f6\u5019\uff0c\u673a\u4f1a\u5df2\u7ecf\u9519\u8fc7\u4e86 \u3002\u3002\u3002 2. \u5982\u679c\u4f60\u662f\u5927\u4f6c: \u975e\u5e38\u6b22\u8fce\u5927\u4f6c\u4eec\uff0c\u6765\u4e00\u8d77\u88c5\u903c\u3002 3. \u5982\u679c\u4f60\u5355\u7eaf\u7684\u53ea\u662f\u60f3\u627e\u5927\u4f6c\u6765\u5e26\u4f60\uff0c\u6015\u662f\u4f60\u53c8\u6765\u9519\u5730\u65b9\u4e86 \u3002\u3002\u3002- - \u3001 \u4e86\u89e3\u6211\u4eec \u4ee5\u524d\u5199\u7684\u4e00\u4e9b\u6587\u7ae0\uff0c\u5982\u679c\u60f3\u4e86\u89e3\u6211\u4eec\u66f4\u591a\u4e00\u70b9\u7684\u8bdd\uff0c\u5fc5\u770b\u7684\u54df\uff01~ 1. \u4f1f\u5927\u7684\u822a\u9053\uff0c\u524d\u5f80\u65b0\u4e16\u754c 2. \u5173\u4e8e\u6211\u4eec \u652f\u6301\u6211\u4eec \u5982\u679c\u5927\u4f6c\u4eec\u60f3\u8981\u652f\u6301\u4e0b\u6211\u4eec\uff0c\u89c9\u5f97\u6211\u4eec\u7684\u8d44\u6e90\u8fd8\u4e0d\u9519\uff0c\u9ebb\u70e6\u53bb github: https://github.com/apachecn \u7ed9\u6211\u4eec\u70b9\u51e0\u4e2a star \u6211\u4eec\u5c31\u6ee1\u8db3\u4e86\uff0c\u8c22\u8c22\uff01~ \u52a0\u5165\u65b9\u5f0f \u673a\u5668\u5b66\u4e60\u4f01\u9e45\u7fa4: 629470233\uff08MachineLearning\uff09 ps: \u53c8\u7279\u55b5\u7684\u6536\u83b7\u4e86\u4e00\u4e9b\u56fe\u7247 \u3002\u3002\u3002","title":"\u52a0\u5165\u6211\u4eec"},{"location":"join-us/#_1","text":"\u65e0\u610f\u95f4\uff0c2017 \u5e74\u9a6c\u4e0a\u53c8\u8981\u7ed3\u675f\u4e86\uff0c\u65f6\u95f4\u8fc7\u5f97\u771f\u5feb\u554a\uff0c\u53c8\u8981\u8001\u4e00\u5c81\u4e86 \u3002\u3002\u3002 \u5728 2016 \u5e74 4 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5c31\u662f\u4e00\u4e2a\u4eba\u60f3\u7ffb\u8bd1\u4e0b\u5b98\u65b9\u6587\u6863\uff0c\u611f\u89c9\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5b66\u4e60\u4e1c\u897f\u7684\u8bdd\u4e5f\u4f1a\u5feb\u5f88\u591a\uff0c\u5bf9\u81ea\u5df1\u4e5f\u662f\u4e00\u4e2a\u63d0\u5347\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u5230\u5176\u4ed6\u7684\u670b\u53cb\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462\uff1f\uff1f\uff1f \u6709\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u4e4b\u540e\uff0c\u5c31\u8ddf\u4e00\u4e9b\u670b\u53cb\u804a\u4e86\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u53ef\u884c\u6027\u600e\u4e48\u6837\uff0c\u5927\u5bb6\u90fd\u89c9\u5f97\u6709\u641e\u5934\uff0c\u53ef\u4ee5\u64cd\u4f5c\u4e00\u6ce2\u3002\uff08\u597d\u53ef\u60dc\u5440\uff0c\u8ddf\u597d\u591a\u4eba\u8bf4\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u771f\u6b63\u60f3\u505a\u5e76\u80fd\u575a\u6301\u7684\u670b\u53cb\uff0c\u8c8c\u4f3c\u6ca1\u6709\u51e0\u4e2a\u4e86\uff0c\u575a\u6301\u7740\u4e0d\u8be5\u575a\u6301\u7684\u575a\u6301\uff0c\u6267\u7740\u7740\u4e0d\u8be5\u6267\u7740\u7684\u6267\u7740 \u3002\u3002\u3002\uff09 \u5728 2016 \u5e74 7 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u624d\u771f\u6b63\u7684\u6253\u7b97\u505a\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u90a3\u65f6\u5019\u5e74\u5c11\u8f7b\u72c2\uff0c\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0 \u4f1f\u5927\u7684\u822a\u9053\uff0c\u524d\u5f80\u65b0\u4e16\u754c \uff08 \u6ce8: \u4e86\u89e3 ApacheCN \u5fc5\u8bfb \uff09 \u6587\u7ae0\uff0c\u7b80\u5355\u7684\u8bf4\u4e86\u4e0b\u81ea\u5df1\u7684\u7ecf\u5386\u548c\u60f3\u6cd5\uff0c\u4e00\u4e9b\u60f3\u505a\u7684\u4e8b\u60c5\uff0c\u60f3\u627e\u66f4\u591a\u7684\u670b\u53cb\u4e00\u8d77\u6765\u7ffb\u8bd1\u4e0b\u5b98\u65b9\u6587\u6863\u3002 \u7531\u4e8e\u5f53\u65f6\u505a\u7684\u662f\u5927\u6570\u636e\u65b9\u9762\u7684\uff0c\u6240\u4ee5\u66f4\u591a\u7684\u662f\u7ffb\u8bd1 Spark\uff0cStorm\uff0cKudu\uff0cZeepelin\uff0cKibana\uff0cElasticsearch \u3002\u3002\u3002\u7b49\u7b49\u548c\u5927\u6570\u636e\u76f8\u5173\u7684\u5b98\u65b9\u6587\u6863\u4e86\uff0c\u4e2d\u95f4\u6709\u5f88\u591a\u6545\u4e8b\u7531\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u5c31\u5148\u4e0d\u7ec6\u8bf4\u4e86\u3002\u81f3\u4eca\u4e3a\u6b62\uff0c\u4ee5\u4e0a\u6280\u672f\u76f8\u5173\u7684\u6587\u6863\uff0c\u57fa\u672c\u4e0a\u90fd\u7b97\u662f\u7ffb\u8bd1\u597d\u4e86\uff0c\u7b97\u662f\u80fd\u770b\u4e86\uff0c\u867d\u7136\u8fd8\u9700\u8981\u66f4\u8fdb\u4e00\u6b65\u7684\u5b8c\u5584\uff0c\u81f3\u5c11\u804a\u80dc\u4e8e\u65e0\u554a\uff01~ \u6700\u5f00\u59cb\u7528\u7684\u57df\u540d\u662f le.wiki \uff08\u4e3a\u5565\u7528\u8fd9\u4e2a\u57df\u540d\uff0c\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u90a3\u65f6\u5019\u5728\u4e50\u89c6\u642c\u7816\u561b\uff01\u2190_\u2190 \u8bf4\u5230\u4e50\u89c6\uff0c\u53ef\u80fd\u5927\u5bb6\u4f1a\u8bf4\u4ed6\u54ea\u91cc\u54ea\u91cc\u4e0d\u597d\u4ec0\u4e48\u7684\uff0c\u5f00\u59cb\u5404\u79cd\u9ed1\u4e86\u3002\u6211\u4e0d\u60f3\u8868\u8fbe\u4ec0\u4e48\uff0c\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u81f3\u5c11\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u80fd\u6709\u4e1c\u897f\u5b66\uff0c\u80fd\u8ba9\u81ea\u5df1\u6210\u957f\uff0c\u80fd\u6709\u5de5\u8d44\u62ff\uff0c\u5c31\u4e0d\u9519\u4e86\uff0c\u81f3\u5c11\u6211\u5f88\u611f\u8c22 \u4e50\u89c6 \uff09\u3002 le.wiki \u57df\u540d\u592a\u5c40\u9650\u4e86\uff0c\u4e0d\u591f\u4f53\u73b0\u6211\u4eec\u5927\u5bb6\u7684\u60c5\u6000\uff0c\u6240\u4ee5\u4e0d\u5f97\u4e0d\u6362\u4e00\u4e2a\u57df\u540d\u4e86\u3002 apache.wiki \u57df\u540d\u7684\u5207\u6362\u3002\u7531\u4e8e\u6211\u4eec\u8fd9\u4e9b\u6210\u5458\u5927\u591a\u6570\u90fd\u662f\u505a\u5927\u6570\u636e\u7684\uff0c\u5bf9 Apache \u662f\u5f88\u6709\u60c5\u6000\u7684\uff0c\u975e\u5e38\u611f\u8c22\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u7528\u7684 Hadoop\uff0cHive\uff0cSpark\uff0cFlink \u7b49\u7b49\u7684\u4e00\u4e9b\u6846\u67b6\uff0c\u90fd\u662f Apache \u5f00\u6e90\u51fa\u6765\u7684\u3002\u6240\u4ee5\u7ecf\u8fc7\u5927\u5bb6\u7684\u4e00\u81f4\u8ba8\u8bba\u540e\uff0c\u51c6\u5907\u4f7f\u7528 apache.wiki \u4f7f\u7528\u8fd9\u4e2a\u57df\u540d\u4e86\uff0c\u636e\u8bf4\u770b\u7740\u8fd8\u633a\u6709\u60c5\u6000\uff08\u903c\u683c\uff09\u7684 \u3002\u3002\u3002 \u5728\u8fd9\u671f\u95f4\uff0c\u505a\u4e86\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c\uff0c\u548c\u5927\u5bb6\u8ba8\u8bba\u4e00\u4e9b\u4e8b\u60c5\u7b49\u7b49\uff0c\u5927\u5bb6\u5404\u81ea\u7684\u5c1d\u8bd5\uff0c\u7136\u540e\u5c31\u62d6\u5230 10 \u6708\u4efd\u4e86\u3002 \u5728 2016 \u5e74 10 \u6708\u4efd\u7684\u65f6\u5019\uff0c\u51c6\u786e\u6765\u8bf4\u662f\u56fd\u5e86\u540e\u5427\uff0c\u6b63\u5f0f\u5f00\u59cb\u7ffb\u8bd1\u6587\u6863\u7684\u641e\u4e8b\u4e4b\u9645\uff0c\u9080\u8bf7\u5927\u5bb6\u6765\u64cd\u4f5c\u4e00\u6ce2\uff0c\u4e5f\u4e3a\u4e86\u8ba9\u5927\u5bb6\u4e86\u89e3\u4e0b\u6211\u4eec\u662f\u5e72\u561b\u7684\uff0c\u8fd8\u7279\u610f\u5728 apache.wiki \u4e0a\u5199\u4e86\u5199\u4e86\u4e00\u7bc7 \u5173\u4e8e\u6211\u4eec \uff08 \u6ce8: \u4e86\u89e3 ApacheCN \u5fc5\u8bfb \uff09\uff0c\u6211\u5dee\u70b9\u628a\u81ea\u5df1\u90fd\u611f\u52a8\u4e86 \u3002\u3002\u3002 \u5728 2016 \u5e74\u5e74\u672b\u8bd5\u4e86\u4e0b Spark\uff0cElasticsearch \u6587\u6863\u7684\u7ffb\u8bd1\uff0c\u867d\u7136\u5185\u5bb9\u5f88\u591a\uff0c\u4f46\u8fd8\u7b97\u662f OK \u5427\uff01~ \u5927\u5bb6\u8fd8\u662f\u575a\u6301\u4e86\u4e0b\u6765\uff0c\u975e\u5e38\u611f\u8c22\u5927\u5bb6\uff0c\u6211\u8bb0\u5f97\u6211\u8c03\u683c\u5f0f\u90fd\u8c03\u7684\u8981\u6b7b\u4e86\uff0c\u5fe7\u6851 \u3002\u3002\u3002 \u5728 2017 \u5e74\u6625\u8282\u8fc7\u540e\uff0c\u5927\u5bb6\u53c8\u5f00\u59cb\u4e0a\u73ed\u4e86\uff0c\u4e5f\u8bb8\u4e0a\u73ed\u4e0a\u4e86 3 \u5e74\u89c9\u5f97\u592a\u65e0\u804a\u4e86\u5427\uff0c\u6216\u8005\u8bf4\u662f\u60f3\u641e\u70b9\u4e8b\u60c5\u51fa\u6765\uff0c\u8fd9\u6837\u6bd4\u8f83\u523a\u6fc0\u70b9\u4e86\u3002\u8003\u8651\u4e86\u597d\u4e45\uff0c\u521a\u597d\u4e5f\u6709\u5fd7\u540c\u9053\u5408\u7684\u4f19\u4f34 \u5c0f\u7476 \uff0c \u7247\u523b \uff0c\u5e72\u8106\u4e00\u8d77\u51fa\u6765\u88c5\u903c\u5427\u3002 \u5c31\u8fd9\u6837\uff0c\u5728 2017 \u5e74 6 \u6708\u5e95\uff0c\u8e0f\u4e0a\u4e86\u88c5\u903c\u4e0d\u5f52\u8def\uff0c\u518d\u4e0d\u75af\u72c2\u4e00\u628a\uff0c\u6211\u4eec\u5c31\u771f\u7684\u8001\u4e86\u3002\u3002\u3002","title":"\u524d\u8a00"},{"location":"join-us/#_2","text":"\u81ea\u4ece\u8d70\u4e0a\u4e86\u88c5\u903c\u7684\u4e0d\u5f52\u8def\u4e4b\u540e\uff0c\u8170\u4e0d\u9178\u4e86\uff0c\u817f\u4e0d\u75bc\u4e86\uff0c\u4e00\u53e3\u6c14\u88c5\u5b8c\u903c\u8138\u4e0d\u7ea2\uff0c\u5fc3\u4e5f\u4e0d\u8df3\u4e86\u3002\u3002\u3002 \u5176\u5b9e\u4f1a\u6709\u5f88\u591a\u4eba\u95ee\u6211\uff0c\u5728\u8fd9\u671f\u95f4\u4f60\u4eec\u7684\u6536\u5165\u6765\u6e90\u600e\u4e48\u529e\u5462\uff1f\uff1f\uff1f \u8fd9\u7279\u4e48\u5c31\u975e\u5e38\u5c34\u5c2c\u4e86\uff0c\u6211\u80fd\u8bf4\u6839\u672c\u6ca1\u6709\u6536\u5165\u6765\u6e90\u4e48\uff0c\u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u8dea\u7740\u4e5f\u8981\u8d70\u5b8c\u5427\uff01~ \u5927\u4e0d\u4e86\u518d\u51fa\u53bb\u627e\u5de5\u4f5c\u5457\uff0c\u614c\u4e2a\u6bdb\u5440\uff0c\u4fd7\u8bdd\u8bf4\u5f97\u597d\uff0c\u4eba\u751f\u82e6\u77ed\uff0c\u53ca\u65f6\u884c\u4e50\u5440\uff0c\u8d81\u7740\u5e74\u8f7b\uff0c\u628a\u81ea\u5df1\u60f3\u505a\u7684\u4e8b\u60c5\u90fd\u505a\u4e86\uff0c\u4e0d\u8981\u7559\u4e0b\u9057\u61be \u3002\u3002\u3002 \u8fd9\u4ef6\u4e8b\u60c5\uff0c\u4f9d\u7136\u8981\u575a\u6301\u4e0b\u53bb \u3002\u3002\u3002","title":"\u88c5\u903c\u7684\u4e0d\u5f52\u8def"},{"location":"join-us/#_3","text":"\u524d\u8a00\u8bf4\u4e86\u8fa3\u4e48\u591a\uff0c\u4e5f\u7b80\u5355\u7684\u4ecb\u7ecd\u4e0b\u7ec4\u7ec7\u7684\u4e00\u4e2a\u8d8b\u52bf\u5427: 1. \u8d44\u6e90: \u7ec4\u7ec7\u7684\u8d44\u6e90\u53d8\u5f97\u591a\u4e86\u8d77\u6765\uff0c\u5149\u5b98\u65b9\u6587\u6863\u6765\u8bf4\uff0c\u524d\u524d\u540e\u540e\u4e00\u5171\u7ffb\u8bd1\u4e86\u5dee\u4e0d\u591a 10 \u4e2a\u5b98\u65b9\u6587\u6863\u4e86\uff0c\u8fd8\u5728\u6301\u7eed\u589e\u52a0\u4e2d\u3002\u5177\u4f53\u8be6\u60c5\u8bf7\u770b apachecn.org \u4e2d\u7684\u4e2d\u6587\u6587\u6863\u3002 2. \u5f71\u54cd\u529b: \u6162\u6162\u6709\u4eba\u77e5\u9053\u4e86 ApacheCN \u8fd9\u4e2a\u5f00\u6e90\u7ec4\u7ec7\u7684\u5b58\u5728\u4e86\uff0c\u6216\u8005\u662f\u63a5\u89e6\u5230\u6211\u4eec\u7684\u8d44\u6e90\u4e86\u3002 3. UV: UV \u4ece\u521a\u5f00\u59cb\u7684\u6bcf\u5929 20\uff0c\u4f30\u8ba1\u4e5f\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u70b9\u4e00\u4e0b\u4e86\uff0c\u6da8\u5230\u4e86\u73b0\u5728\u7684 1K+\uff0c\u4e0d\u5bb9\u6613\u5440\uff0c\u5927\u5bb6\u4e00\u628a\u8f9b\u9178\u4e00\u628a\u6cea - - \u3001 4. GitHub: github.com/apachecn \u4e5f\u7b97\u662f\u6709\u6211\u4eec\u81ea\u5df1\u7684 github \u4e86\u3002 5. \u6162\u6162\u5f00\u59cb\u7740\u624b\u5f04\u66f4\u591a\u7684\u4e1c\u897f\u4e86\uff0c\u6bd4\u5982\u4f18\u9177\uff0cB\u7ad9\uff0cA\u7ad9\uff0c\u77e5\u4e4e\uff0c\u609f\u7a7a\u95ee\u7b54\uff0c\u7f51\u6613\u4e91\u8bfe\u5802\uff0cYouTube \u7b49\u7b49\u4e4b\u7c7b\u7684\uff0c\u4e0d\u50cf\u4ee5\u524d\u8fa3\u4e48\u5355\u8c03\u4e86\u3002 \u968f\u7740\u6d41\u91cf\u7684\u589e\u52a0\uff0c\u5f71\u54cd\u529b\u7684\u6269\u5927\uff0c\u8fa3\u4e48\u6211\u4eec\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u66f4\u591a\u4e86\uff0c\u8fd9\u65f6\u5019\u7684\u8bdd\uff0c\u5f53\u7136\u9700\u8981\u66f4\u591a\u5fd7\u540c\u9053\u5408\u7684\u670b\u53cb\u6765\u4e00\u8d77\u6765\u53c2\u4e0e\uff0c\u4e00\u8d77\u6765\u88c5\u903c\u4e86\uff0c23333333 \u3002\u3002\u3002","title":"\u7ec4\u7ec7\u8d8b\u52bf"},{"location":"join-us/#_4","text":"\u7b2c\u4e00\u76ee\u6807: \u56fd\u5185\u7b2c\u4e00\u88c5\u903c\u7ec4\u7ec7\uff0c\u5927\u5bb6\u53bb\u54ea\u91cc\u88c5\u903c\u7684\u65f6\u5019\uff0c\u90fd\u80fd\u9047\u5230\u7ec4\u7ec7\u6210\u5458\u5c31\u523a\u6fc0\u4e86\u3002 \u7b2c\u4e8c\u76ee\u6807: \u7b49\u4f60\u6765\u5b9a\u4e49 \u3002\u3002\u3002","title":"\u7ec4\u7ec7\u76ee\u6807"},{"location":"join-us/#_5","text":"\u8bf7\u770b apachecn.org \u7ec4\u7ec7\u9996\u9875\u7684\u4ecb\u7ecd\uff0c\u4e13\u6ce8\u4e8e\u4f18\u79c0\u9879\u76ee\u7ef4\u62a4\u7684\u5f00\u6e90\u7ec4\u7ec7\uff0c\u4e0d\u6b62\u4e8e\u6743\u5a01\u7684\u6587\u6863\u89c6\u9891\u6280\u672f\u652f\u6301\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u4e00\u4e0b\u7684\u662f\uff0c\u7ffb\u8bd1\u6587\u6863\u4e0d\u662f\u6211\u4eec\u8fd9\u4e2a\u7ec4\u7ec7\u552f\u4e00\u7684\u4e8b\u60c5\u3002\u7ffb\u8bd1\u6587\u6863\u53ea\u662f\u8be5\u7ec4\u7ec7\u804c\u80fd\u4e0b\u7684\u4e00\u4e2a\u5206\u652f\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u89e3\u51b3\u6280\u672f\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770b\uff0c\u77a7\u4e00\u77a7\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u54a8\u8be2\u4e2a\u4eba\u95ee\u9898\uff0c\u6bd4\u5982\u5b66\u4e60\u8def\u7ebf\uff0c\u804c\u4e1a\u89c4\u5212\u7b49\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u7ec4\u7ec7\u5185\u7684\u67d0\u4e9b\u8d44\u6e90\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u60c5\u51b5\u63d0\u4f9b\u3002 \u6bd4\u5982\uff0c\u4f60\u6709\u597d\u7684\u60f3\u6cd5\uff0c\u8981\u6765\u641e\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u88c5\u903c\u3002 \u6bd4\u5982\uff0c\u4f60\u60f3\u8981\u88c5\u903c\uff1f\uff1f\uff1f\u90a3\u4e48\u6765\u5bf9\u5730\u65b9\u4e86\uff0c\u6b22\u8fce \u3002\u3002\u3002 \u6bd4\u5982\uff0c\u3002\u3002\u3002\u7b49\u7b49\u3002","title":"\u7ec4\u7ec7\u662f\u505a\u4ec0\u4e48\u7684"},{"location":"join-us/#_6","text":"\u5982\u679c\u4f60\u559c\u6b22\u88c5\u903c\uff0c\u4ece\u6b64\u4f60\u88c5\u903c\u7684\u65f6\u5019\u4e0d\u662f\u591c\u6df1\u4eba\u9759\u7684\u65f6\u5019\u4e00\u4e2a\u4eba\u3002 \u5982\u679c\u4f60\u559c\u6b22\u5b66\u4e60\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5b66\u4e60\u66f4\u591a\u88c5\u903c\u7684\u77e5\u8bc6\uff0c\u66f4\u5feb\u7684\u63d0\u5347\u81ea\u5df1\u7684\u4e2a\u4eba\u6280\u80fd\u3002 \u5982\u679c\u4f60\u559c\u6b22\u4ea4\u53cb\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u6269\u5927\u81ea\u5df1\u7684\u4eba\u8109\u5708\uff0c\u8ba4\u8bc6\u5404\u79cd\u5404\u6837\u7684\u5927\u4f6c\uff08\u5c0f\u767d\uff09\uff0c\u4ea4\u66f4\u591a\u7684\u670b\u53cb \u3002 \u5982\u679c\u4f60\u662f\u5c0f\u767d\uff0c\u53ef\u4ee5\u8ddf\u6211\u6211\u4eec\u4e00\u8d77\u5b66\u4e60\uff0c\u6709\u66f4\u591a\u7684\u4eba\u5e2e\u52a9\u4f60\uff0c\u6bd4\u5982\u5728\u7ebf\u54a8\u8be2\uff0c\u5b66\u4e60\u8def\u7ebf\u89c4\u5212\uff0c\u804c\u4e1a\u751f\u6daf\u89c4\u5212\uff0c\u5982\u4f55\u6ce1\u59b9\u7eb8 \u3002\u3002\u3002\u7b49\u7b49\u3002 \u5982\u679c\u4f60\u662f\u5927\u4f6c \u3002\u3002\u3002\u597d\u50cf\u6211\u4eec\u90fd\u662f\u5c0f\u767d\uff0c\u8fd9\u7279\u4e48\u5c31\u975e\u5e38\u5c34\u5c2c\u4e86\u3002\u6b22\u8fce\u5927\u4f6c\uff01~ \u5982\u679c\u4f60\u559c\u6b22\u641e\u4e8b\u60c5\uff0c\u90a3\u4e48\u771f\u7684\u662f\u6765\u5bf9\u5730\u65b9\u4e86\uff0c\u7ec4\u7ec7\u6b22\u8fce\u4f60\u3002 \u5982\u679c\u4f60\u559c\u6b22\u641e\u57fa\uff0c\u90a3\u4e48\u6b22\u8fce\u6765\u5230\u641e\u57fa\u7684\u5929\u5802\uff0c\u5982\u679c\u4e0d\u662f\u4e3a\u4e86\u641e\u57fa\uff0c\u90a3\u4e48\u4eba\u751f\u8fd8\u6709\u4ec0\u4e48\u610f\u4e49\u3002 \u5982\u679c\u4f60\u662f\u4f38\u624b\u515a \u3002\u3002\u3002\u8fd9 \u3002\u3002\u3002\u5927\u54e5\u4f60\u6015\u662f\u8d70\u9519\u5730\u65b9\u4e86 - - \uff01 \u7279\u55b5\u7684\uff0c\u6280\u672f\u6ca1\u5b66\u5230\u4ec0\u4e48\uff0c\u56fe\u7247\u5012\u662f\u6536\u85cf\u4e86\u5f88\u591a\u5f20 \u3002\u3002\u3002","title":"\u52a0\u5165\u597d\u5904"},{"location":"join-us/#_7","text":"\u4e3a\u4f55\u8981\u5b8c\u5584\u7ec4\u7ec7\u67b6\u6784\uff1f\uff1f\uff1f 1. \u8ba9\u6210\u5458\u66f4\u6709\u53c2\u4e0e\u611f\uff0c\u63d0\u5347\u6210\u5458\u7684\u4f53\u9a8c\uff0c\u4e07\u4e00\u51fa\u540d\u4e86\uff0c\u4ee5\u540e\u53ef\u4ee5\u81ea\u8c6a\u7684\u8bf4\uff0c\u6211\u662f\u7ec4\u7ec7\u91cc\u9762\u7684\u4e00\u5458\u3002 2. \u7ec4\u7ec7\u6210\u5458\u804c\u80fd\u7684\u5212\u5206\uff0c\u53c2\u4e0e\u5404\u79cd\u51b3\u7b56\uff0c\u4e0d\u4f1a\u50cf\u4ee5\u524d\u90a3\u6837\uff0c\u6302\u4e2a\u53f7\u5c31\u5b8c\u4e86\uff0c\u65e2\u7136\u60f3\u88c5\u903c\uff0c\u5c31\u5f97\u628a\u903c\u88c5\u597d\u4e86\u3002 3. \u5229\u4e8e\u7ec4\u7ec7\u7684\u53d1\u5c55\u6269\u5927\uff0c\u5916\u90e8\u6210\u5458\u7684\u52a0\u5165\u3002\u4e00\u4e2a\u597d\u7684\u7ec4\u7ec7\u67b6\u6784\uff0c\u662f\u7ec4\u7ec7\u53d1\u5c55\u66f4\u4e3a\u58ee\u5927\u7684\u91cd\u8981\u4e00\u6b65\uff0c\u867d\u7136\u53ea\u662f\u6211\u4eec\u7ec4\u7ec7\u7684\u4e00\u5c0f\u6b65\uff0c\u786e\u662f\u6574\u4e2a\u4e92\u8054\u7f51\u7684\u4e00\u5927\u6b65 \u3002\u3002\u3002\uff08\u8fd9\u725b\u903c\u5439\u7684\uff0c\u6211\u5dee\u70b9\u5c31\u4fe1\u4e86 - - \u3001\uff09 4. \u5177\u4f53\u7684\u7ec4\u7ec7\u67b6\u6784\uff0c\u4e0d\u5728\u8fd9\u91cc\u7ec6\u8bf4\u4e86\u3002 5. \u3002\u3002\u3002\u7b49\u7b49\u3002 6. \u7adf\u7136\u8fd8\u6709\u5c0f\u4f19\u4f34\u95ee\uff0c\u80fd\u4e0d\u80fd\u5151\u6362\u7fd4 \u3002\u3002\u3002\u6211\u4e5f\u662f\u65e0\u8bdd\u53ef\u8bf4\u3002","title":"\u7ec4\u7ec7\u67b6\u6784"},{"location":"join-us/#_8","text":"\u6b63\u5728\u5b8c\u5584\u7ec4\u7ec7\u79ef\u5206\u5236\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u53c2\u4e0e\u7ec4\u7ec7\u7684\u4e00\u4e9b\u6d3b\u52a8\uff0c\u6bd4\u5982\u53c2\u4e0e\u7ffb\u8bd1\uff0c\u53c2\u4e0e\u53cd\u9988\uff0c\u53c2\u4e0e\u5ba3\u4f20\u6d3b\u52a8\u7b49\u7b49\u5565\u7684\uff0c\u90fd\u4f1a\u83b7\u5f97\u76f8\u5e94\u7684\u79ef\u5206\u3002 \u90a3\u4e48\u79ef\u5206\u53ef\u4ee5\u5e72\u561b\u5462\uff0c\u53ef\u4ee5\u5151\u6362\u4ec0\u4e48\u5462\uff1f 1. \u4e91\u68af\u670d\u52a1\uff0c\u9068\u6e38\u4e16\u754c\u3002 2. \u8bdd\u8d39\uff0c\u79ef\u5206\u53ef\u4ee5\u76f4\u63a5\u6298\u5408\u6210\u8bdd\u8d39\uff0c\u5145\u503c\u5230\u4f60\u7684\u624b\u673a\u53f7\u4e2d\u53bb\u3002 3. \u767e\u5ea6\u7f51\u76d8\uff0c\u7231\u5947\u827a\uff0c\u8fc5\u96f7\uff0c\u8fc5\u6e38\uff0c\u4f18\u9177 \u3002\u3002\u3002\u7b49\u7b49\u4f1a\u5458\u3002 4. \u4e0e\u79ef\u5206\u7b49\u4ef7\u7684\u7269\u54c1\uff0c\u6bd4\u5982\u53ef\u80fd\u4f60\u9700\u8981 1080ti\u663e\u5361 \u3002\uff08\u53ea\u8981\u4f60\u79ef\u5206\u591f\uff0c\u663e\u5361\u7ec4\u7ec7\u5f53\u573a\u5151\u6362\uff0c\u4e0d\u89e3\u91ca \u3002\u3002\u3002\uff09 5. \u3002\u3002\u3002\u7b49\u7b49\u3002","title":"\u7ec4\u7ec7\u79ef\u5206\u5236"},{"location":"join-us/#_9","text":"\u5728\u5f80\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7684\u9053\u8def\u65b9\u5411\u524d\u884c\uff0c\u867d\u7136\u8fc7\u7a0b\u5f88\u75db\u82e6\uff0c\u4f46\u662f\u524d\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u5927\u5bb6\u7684\u6b22\u58f0\u7b11\u8bed\u89c9\u5f97\u5f88\u5feb\u4e50\uff0c\u5728\u88c5\u903c\u7684\u9053\u8def\u4e0a\u6e10\u884c\u6e10\u8fdc \u3002\u3002\u3002","title":"\u7ec4\u7ec7\u89c4\u5212"},{"location":"join-us/#_10","text":"\u524d\u7aef\u65f6\u95f4\uff0c\u7ec4\u7ec7\u6839\u636e\u4e66\u7c4d\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b\u5f55\u5236\u4e86\u4e00\u671f\u516c\u76ca\u6027\u7684\u89c6\u9891\uff0c\u653e\u5230 A\u7ad9\uff0cB\u7ad9\uff0c\u4f18\u9177 \u7b49\u89c6\u9891\u7f51\u7ad9\u4e0a\u4e86\uff0c\u76f8\u5e94\u7684\u89c6\u9891\uff0c\u6587\u6863\uff0c\u6e90\u7801\uff0c\u6ce8\u91ca\uff0c\u6570\u636e\u96c6\u53ef\u4ee5\u5728\u6211\u4eec\u7684 GitHub: https://github.com/apachecn/AiLearning/ \u4e2d\u627e\u5230\u3002 \u6700\u8fd1\u7ec4\u7ec7\u7684 scikit-learn 0.19 \u4e2d\u6587\u6587\u6863\u7ffb\u8bd1\u6821\u9a8c\u6d3b\u52a8 \u5373\u5c06\u7ed3\u675f\uff0csklearn 0.19.0 \u4e2d\u6587\u6587\u6863: http://sklearn.apachecn.org/cn/0.19.0/ \u9a6c\u4e0a\u53ef\u4ee5\u6b63\u5f0f\u7684\u4e0a\u7ebf\u4e86\u3002 \u5728\u6b64\u611f\u8c22\u53c2\u4e0e\u6d3b\u52a8\u7684\u8d21\u732e\u8005\u4eec: https://github.com/apachecn/scikit-learn-doc-zh#%E8%B4%A1%E7%8C%AE%E8%80%85","title":"\u73b0\u9636\u6bb5\u6d3b\u52a8"},{"location":"join-us/#_11","text":"\u51c6\u5907\u9a6c\u4e0a\u5f00\u59cb\u7ec4\u7ec7\u4e00\u671f\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u590d\u4e60\u6d3b\u52a8\u300b\uff0c\u9488\u5bf9\u8be5\u4e66\u7c4d\uff0c\u81ea\u5df1\u590d\u4e60\u7684\u540c\u65f6\uff0c\u63d0\u5347\u5927\u5bb6\u7684\u6280\u672f\u6c34\u5e73\uff08\u9488\u5bf9\u65b0\u624b\u5c0f\u767d\uff09\u3002 \u7ec4\u7ec7\u4e00\u8d77\u5237 kaggle \u7684\u6d3b\u52a8\uff0c\u4ee5\u6b64\u6765\u719f\u6089 sklearn \u5957\u8def\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e86\u89e3 kaggle \u7684\u5957\u8def\u3002","title":"\u8fd1\u671f\u8ba1\u5212"},{"location":"join-us/#_12","text":"\u6ca1\u6709\u4ec0\u4e48\u8981\u6c42\uff0c\u53ea\u8981\u4f60\u613f\u610f\u4e3a\u7ec4\u7ec7\u51fa\u4e00\u4efd\u529b\uff0c\u60f3\u8981\u4e00\u8d77\u8d70\u7684\u66f4\u5feb\uff0c\u4e00\u8d77\u8d70\u7684\u66f4\u8fdc\u5373\u53ef\u3002 1. \u5982\u679c\u4f60\u662f\u5c0f\u767d: \u975e\u5e38\u6b22\u8fce\u5c0f\u767d\uff0c\u6211\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8d70\u66f4\u5c11\u7684\u5f2f\u8def\uff0c\u4e00\u8d77\u6210\u957f\uff0c\u53ef\u80fd\u4f60\u4f1a\u60f3\u7740\u8bf4\uff0c\u4f60\u6280\u672f\u4e0d\u591f\u597d\uff0c\u8981\u5148\u4fee\u70bc\u4fee\u70bc\u518d\u52a0\u5165\u6211\u4eec\uff0c\u90a3\u4e48\u6211\u53ea\u80fd\u8bf4\u8fd9\u4e2a\u60f3\u6cd5\u771f\u7684\u6709\u95ee\u9898\u3002\u3002\u3002\u4e0d\u8981\u7b49\u5230\u4f60\u8db3\u591f\u4f18\u79c0\u7684\u65f6\u5019\uff0c\u624d\u53bb\u8ddf\u5973\u795e\u8868\u767d\u3002\u3002\u3002\u56e0\u4e3a\u7b49\u5230\u4f60\u8db3\u591f\u4f18\u79c0\u7684\u65f6\u5019\uff0c\u673a\u4f1a\u5df2\u7ecf\u9519\u8fc7\u4e86 \u3002\u3002\u3002 2. \u5982\u679c\u4f60\u662f\u5927\u4f6c: \u975e\u5e38\u6b22\u8fce\u5927\u4f6c\u4eec\uff0c\u6765\u4e00\u8d77\u88c5\u903c\u3002 3. \u5982\u679c\u4f60\u5355\u7eaf\u7684\u53ea\u662f\u60f3\u627e\u5927\u4f6c\u6765\u5e26\u4f60\uff0c\u6015\u662f\u4f60\u53c8\u6765\u9519\u5730\u65b9\u4e86 \u3002\u3002\u3002- - \u3001","title":"\u52a0\u5165\u8981\u6c42"},{"location":"join-us/#_13","text":"\u4ee5\u524d\u5199\u7684\u4e00\u4e9b\u6587\u7ae0\uff0c\u5982\u679c\u60f3\u4e86\u89e3\u6211\u4eec\u66f4\u591a\u4e00\u70b9\u7684\u8bdd\uff0c\u5fc5\u770b\u7684\u54df\uff01~ 1. \u4f1f\u5927\u7684\u822a\u9053\uff0c\u524d\u5f80\u65b0\u4e16\u754c 2. \u5173\u4e8e\u6211\u4eec","title":"\u4e86\u89e3\u6211\u4eec"},{"location":"join-us/#_14","text":"\u5982\u679c\u5927\u4f6c\u4eec\u60f3\u8981\u652f\u6301\u4e0b\u6211\u4eec\uff0c\u89c9\u5f97\u6211\u4eec\u7684\u8d44\u6e90\u8fd8\u4e0d\u9519\uff0c\u9ebb\u70e6\u53bb github: https://github.com/apachecn \u7ed9\u6211\u4eec\u70b9\u51e0\u4e2a star \u6211\u4eec\u5c31\u6ee1\u8db3\u4e86\uff0c\u8c22\u8c22\uff01~","title":"\u652f\u6301\u6211\u4eec"},{"location":"join-us/#_15","text":"\u673a\u5668\u5b66\u4e60\u4f01\u9e45\u7fa4: 629470233\uff08MachineLearning\uff09 ps: \u53c8\u7279\u55b5\u7684\u6536\u83b7\u4e86\u4e00\u4e9b\u56fe\u7247 \u3002\u3002\u3002","title":"\u52a0\u5165\u65b9\u5f0f"},{"location":"why-to-record-study-ml-video/","text":"ApacheCN \u4e00\u76f4\u662f\u4e00\u4e2a \u5d07\u5c1a\u5f00\u6e90\uff0c\u9f13\u52b1\u5171\u4eab\uff0c\u5171\u540c\u8fdb\u6b65\uff0c\u8c26(zhuang)\u865a(bi)\u5305(che)\u5bb9(dan) \u7684\u7ec4\u7ec7\uff0c\u6211\u4eec\u7684 github \u5730\u5740\u662f\uff1a https://github.com/apachecn \u3002\u7ec4\u7ec7\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u662f\u4e50\u4e8e\u5206\u4eab\u7684 open source person\uff0c\u4e5f\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u624d\u80fd\u5728\u4eba\u6d77\u832b\u832b\u7684\u4e16\u754c\u4e2d\u76f8\u9047\uff08\u4ece\u6700\u521d\u7684\u7f51\u804a\uff0c\u5230\u540e\u8fb9\u7684\u9762\u57fa\uff0c\u76f4\u5230\u73b0\u5728\u6bcf\u5929\u90fd\u4f1a\u89c1\u9762...\uff09\u3002 \u626f\u4e86\u8fd9\u4e48\u591a\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8bf4\u6b63\u9898\u3002\u3002\u3002 \u5728 2017\u5e742\u670827\u65e5\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u73b0\u5728\u7684\u4e92\u8054\u7f51\u5175\u5bb6\u5fc5\u4e89\u4e4b\u5730\u5df2\u7ecf\u6084\u6084\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4ece\u539f\u6765\u7684 Big Data \uff08\u5927\u6570\u636e\uff09\u6084\u6084\u79fb\u5230\u4e86 AI \uff08\u4eba\u5de5\u667a\u80fd\uff09\u9886\u57df\u3002\u7ecf\u8fc7\u8ba8\u8bba\uff0c\u5f53\u673a\u7acb\u65ad\u5b9a\u4e0b\u4e86\u8fdb\u519b AI \u7684\u76ee\u6807\uff0c\u5177\u4f53\u8ba8\u8bba\u7ec6\u8282\uff0c\u8bf7\u770b 2017-02-27 \u673a\u5668\u5b66\u4e60\u6d3b\u52a8\u6b63\u5f0f\u542f\u52a8 \u3002\u800c\u8fdb\u519b AI \u7684\u9996\u4e2a\u6839\u636e\u5730\u5c31\u662f MachineLearning \uff08\u673a\u5668\u5b66\u4e60\uff09\u3002\u65e2\u7136\u6211\u4eec\u662f ApacheCN \uff0c\u65e2\u7136\u6211\u4eec\u5d07\u5c1a\u5f00\u6e90\uff0c\u65e2\u7136\u6211\u4eec\u4e50\u4e8e\u5206\u4eab\uff0c\u65e2\u7136\u6211\u4eec...\uff08\u54ea\u513f\u90a3\u4e48\u591a\u65e2\u7136...\uff09,\u6211\u4eec\u4f55\u4e0d\u5c06\u6211\u4eec\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7684\u8fc7\u7a0b\u4f7f\u7528\u89c6\u9891\u5f55\u5236\u4e0b\u6765\uff0c\u5206\u4eab\u51fa\u6765\uff0c\u4ee5\u4fbf\u5176\u4ed6\u4eba\u5b66\u4e60\u7684\u65f6\u5019\u4e0d\u518d\u8e29\u8fd9\u4e9b\u5751\u3002\u672c\u7740\u8fd9\u4e2a\u539f\u5219\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u671f\u673a\u5668\u5b66\u4e60\u6d3b\u52a8\u5f00\u59cb\u4e86\uff0c\u968f\u4e4b\u4ea7\u751f\u7684\u662f\u6211\u4eec\u300a\u673a\u5668\u5b66\u4e60\u8ba8\u8bba\u7248\u300b\uff08\u516c\u5f00\u5230\u4e86 bilibili \u548c youku \uff09\u3002 \u300a\u673a\u5668\u5b66\u4e60\u8ba8\u8bba\u7248\u300b\u6bd5\u7adf\u4e5f\u662f\u6211\u4eec\u521a\u5f00\u59cb\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7684\u8bb0\u5f55\u89c6\u9891\uff0c\u5f88\u591a\u5730\u65b9\u7406\u89e3\u4e0d\u900f\u5f7b\uff0c\u8bb2\u89e3\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4f46\u662f\u516c\u5f00\u4ee5\u540e\u540c\u6837\u4e5f\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u89c2\u770b\uff0c\u5f53\u7136\u4e5f\u5f15\u6765\u4e86\u89c2\u770b\u89c6\u9891\u7684\u4eba\u7684\u90e8\u5206\u5410\u69fd\uff08ToT....\u6bd4\u5982\uff0c\u6709\u4eba\u5410\u69fd: \u4f60\u4eec\u5f55\u89c6\u9891\u8fd8\u78d5\u74dc\u5b50 \u3002\u3002\u3002\u56e0\u4e3a\u8fd9\u662f\u7ebf\u4e0b\u4ee5\u8ba8\u8bba\u7ec4\u7684\u65b9\u5f0f\u805a\u5728\u4e00\u8d77\u4ea4\u6d41\u5b66\u4e60\u7684\uff0c\u6240\u4ee5\u74dc\u5b50\u4e5f\u8981\u78d5\uff0c\u4e1c\u897f\u4e5f\u8981\u5403\uff0c\u8fd8\u8981\u559d\u996e\u6599\u5462 \u3002\u3002\u3002\uff09\u3002\u56e0\u4e3a\u5f53\u65f6\u5f55\u5236\u89c6\u9891\u7684\u65b9\u5f0f : \u5171\u540c\u8ba8\u8bba\u548c\u5b66\u4e60\u7684\u8fc7\u7a0b\uff0c\u66f4\u9002\u5408\u7ebf\u4e0b\u4ea4\u6d41\u3010\u7ebf\u4e0b\uff0c\u504f\u5411\u4ea4\u6d41\u3011\uff0c\u8fd9\u4e2a\u4e5f\u662f\u88ab\u7f51\u53cb\u5410\u69fd\u6700\u6fc0\u70c8\u7684\u70b9\u3002\u5f53\u7136\u4e5f\u6709\u7f51\u53cb\u7559\u8a00\uff0c\u867d\u7136\u626f\u6de1\u5f52\u626f\u6de1\uff0c\u4f46\u662f\u5927\u5bb6\u5728\u626f\u6de1\u7684\u8fc7\u7a0b\u4e2d\u5c06\u6bcf\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u8bb2\u89e3\u6e05\u695a\u4e86\uff08\u867d\u7136\u6211\u662f\u4e0d\u82df\u8a00\u7b11\u7684\uff0c\u4f46\u662f\u542c\u5230\u8fd9\u4e2a\u6211\u8fd8\u662f\u7092\u9e21\u5f00\u5fc3 ^_^\uff09\u3002\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u300a\u673a\u5668\u5b66\u4e60\u8ba8\u8bba\u7248\u300b\u5f55\u5236\u5c31\u6162\u6162\u5b8c\u6210\u4e86\uff0c\u4e00\u6b21\u53c8\u4e00\u6b21\u4f20\u5230\u89c6\u9891\u7f51\u7ad9\u4e0a\u3002\u3002\u3002 \u540e\u6765\uff08\u6211\u603b\u7b97\u5b66\u4f1a\u4e86\u5982\u4f55\u53bb\u7231\uff09\uff0c\u5f53\u6211\u4eec\u57fa\u672c\u628a\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b\u6574\u672c\u4e66\u90fd\u5b66\u4e60\u5b8c\u6210\u4e4b\u540e\uff0c\u5bf9\u673a\u5668\u5b66\u4e60\u6709\u4e86\u66f4\u52a0\u6df1\u523b\u7684\u4e86\u89e3\u3002\u57fa\u4e8e\u4e4b\u524d\u6211\u4eec\u7684\u673a\u5668\u5b66\u4e60\u6d3b\u52a8\u7b2c\u4e00\u671f\u5f55\u5236\u7684\u300a\u673a\u5668\u5b66\u4e60\u8ba8\u8bba\u7248\u300b\u4e0d\u591f\u5b8c\u5584\uff0c\u7ec6\u8282\u8bb2\u89e3\u4e0d\u900f\u5f7b\uff0c\u6211\u4eec\u53c8\u4e0a\u8def\u4e86\u3002\u3002\u3002\u57282017\u5e7407\u670807\u65e5\u7684\u65f6\u5019\uff0c \u7ebf\u4e0b\u7ec4\u7ec7\u5b66\u4e60\u6d3b\u52a8 \uff0c\u4e00\u8d77\u8ba8\u8bba\u4e86\u4e00\u4e0b\uff0c\u7b2c\u4e8c\u671f\u673a\u5668\u5b66\u4e60\u89c6\u9891\u5f55\u5236\u662f\u4e0d\u662f\u6709\u5fc5\u8981\uff0c\u6700\u540e\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u65e2\u7136\u505a\uff0c\u6211\u4eec\u5c31\u8981\u505a\u5230\u6700\u597d\uff08\u7ba1\u4ed6\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u4e0a\u53bb\u5c31\u662f\u4e00\u628a\u68ad\u3002\u3002\u3002\uff09\u3002\u9996\u5148\u6211\u4eec\u7ed9\u7b2c\u4e8c\u671f\u673a\u5668\u5b66\u4e60\u89c6\u9891\u6559\u7a0b\u53d6\u4e86\u4e00\u4e2a\u7b80\u5355\u6613\u61c2\u800c\u53c8\u4e0d\u4e4f\u5e05\u6c14\u7684\u540d\u5b57\u2014\u2014\u300a\u673a\u5668\u5b66\u4e60\u6559\u5b66\u7248\u300b\uff0c\u7531\u4e8e\u6559\u5b66\u7248\u76f8\u5bf9\u7b2c\u4e00\u671f\u89c6\u9891\u6765\u8bf4\uff0c\u662f\u66f4\u52a0\u6b63\u5f0f\u7684\uff0c\u6211\u4eec\u5728\u8bb2\u89e3\u89c6\u9891\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c\u9884\u6f14\uff08\u4f46\u662f\u8fd9\u76f8\u5f53\u8017\u8d39\u65f6\u95f4\uff0c\u6211\u8bb0\u5f97\u4e00\u6b21\u5149\u9884\u6f14\u5c31\u82b1\u4e86 4 \u4e2a\u591a\u5c0f\u65f6\uff09\uff0c\u9884\u6f14\u901a\u8fc7\u4e4b\u540e\uff0c\u624d\u4f1a\u8fdb\u884c\u6b63\u5f0f\u7684\u5f55\u5236\u3002\u7ecf\u8fc7\u6211\u4eec\u51e0\u4e2a\u7684\u8fd9\u6bb5\u65f6\u95f4\u7684\u5b66\u4e60\u548c\u5f55\u5236\uff0c\u73b0\u5728\u300a\u673a\u5668\u5b66\u4e60\u6559\u5b66\u7248\u300b\u5df2\u7ecf\u5728\u5404\u5927\u5f71\u9662\uff08 youku \uff0c bilibili \uff0c AcFun \uff09\u4e0a\u7ebf\u4e86\u3002\u3002\u3002\u6559\u5b66\u7248\u73b0\u5728\u4ecd\u5728\u5f55\u5236\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u54ea\u4e00\u5929\u4f60\u4eec\u627e\u4e0d\u5230\u6211\u4eec\u4e86\uff0c\u6211\u4eec\u4e00\u5b9a\u662f\u8eb2\u5728\u67d0\u4e2a\u89d2\u843d\u5f55\u89c6\u9891\u3002\u3002\u3002 \u7b49\u5230\u300a\u673a\u5668\u5b66\u4e60\u6559\u5b66\u7248\u300b\u5f55\u5236\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u6253\u7b97\u5c06\u91cd\u70b9\u653e\u7f6e\u5728 sklearn \u4ee5\u53ca\u66f4\u88c5\u903c\u7684 deep learning \uff0ctensorFlow \u4e0a\uff0c\u65e2\u7136\u8981\u88c5\u903c\uff0c\u600e\u4e48\u80fd\u505c\u4e0b\u811a\u6b65\u5462\uff1f\u53ea\u8981\u4f4e\u5934\u8d70\u8def\u5c31\u597d\u4e86\uff0c\u8bf4\u4e0d\u5b9a\u54ea\u5929\u62ac\u8d77\u5934\u5c31\u80fd\u6478\u5230\u5929\u4e86\uff0c\u662f\u5427\u3002\u3002\u3002 \u5f53\u7136\u6211\u4eec\u4e5f\u77e5\u9053\uff0c\u60f3\u8981\u628a\u8fd9\u4ef6\u4e8b\u60c5\u7ed9\u505a\u597d\u7684\u8bdd\uff0c\u4e0d\u662f\u8bf4\u9760\u4e00\u4e2a\u4eba\u5c31\u80fd\u641e\u5b9a\u7684\u3002\u9700\u8981\u66f4\u591a\u7684\u670b\u53cb\uff0c\u66f4\u591a\u7231\u5206\u4eab\u7684\u4eba\uff0c\u4e00\u8d77\u6765\u505a\u8fd9\u4e48\u4ef6\u4e8b\u60c5\u4e86\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u4e5f\u6709\u60f3\u6cd5\u7684\u8bdd\uff0c\u8d76\u7d27\u8054\u7cfb\u6211\u4eec\uff0c\u4e00\u8d77\u6765\u88c5\u5e01\u5427 \u3002\u3002\u3002\u8054\u7cfb\u65b9\u5f0f\u5728\u6587\u7ae0\u7684\u5c3e\u5df4 \u3002\u3002 QQ : 1042658081\uff08\u5927\u4f6c\u4eec\u8bf7\u79c1\u804a\u6211 \u3002\u3002\u3002\uff09","title":"\u4e3a\u4f55\u5f55\u5236\u6559\u5b66\u7248\u89c6\u9891"},{"location":"ml/1.MLFoundation/","text":"\u7b2c1\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840 \u673a\u5668\u5b66\u4e60 \u6982\u8ff0 \u673a\u5668\u5b66\u4e60(Machine Learning,ML) \u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u6765\u5f70\u663e\u6570\u636e\u80cc\u540e\u7684\u771f\u5b9e\u542b\u4e49\uff0c\u5b83\u4e3a\u4e86\u628a\u65e0\u5e8f\u7684\u6570\u636e\u8f6c\u6362\u6210\u6709\u7528\u7684\u4fe1\u606f\u3002\u662f\u4e00\u95e8\u591a\u9886\u57df\u4ea4\u53c9\u5b66\u79d1\uff0c\u6d89\u53ca\u6982\u7387\u8bba\u3001\u7edf\u8ba1\u5b66\u3001\u903c\u8fd1\u8bba\u3001\u51f8\u5206\u6790\u3001\u7b97\u6cd5\u590d\u6742\u5ea6\u7406\u8bba\u7b49\u591a\u95e8\u5b66\u79d1\u3002\u4e13\u95e8\u7814\u7a76\u8ba1\u7b97\u673a\u600e\u6837\u6a21\u62df\u6216\u5b9e\u73b0\u4eba\u7c7b\u7684\u5b66\u4e60\u884c\u4e3a\uff0c\u4ee5\u83b7\u53d6\u65b0\u7684\u77e5\u8bc6\u6216\u6280\u80fd\uff0c\u91cd\u65b0\u7ec4\u7ec7\u5df2\u6709\u7684\u77e5\u8bc6\u7ed3\u6784\u4f7f\u4e4b\u4e0d\u65ad\u6539\u5584\u81ea\u8eab\u7684\u6027\u80fd\u3002 \u5b83\u662f\u4eba\u5de5\u667a\u80fd\u7684\u6838\u5fc3\uff0c\u662f\u4f7f\u8ba1\u7b97\u673a\u5177\u6709\u667a\u80fd\u7684\u6839\u672c\u9014\u5f84\uff0c\u5176\u5e94\u7528\u904d\u53ca\u4eba\u5de5\u667a\u80fd\u7684\u5404\u4e2a\u9886\u57df\uff0c\u5b83\u4e3b\u8981\u4f7f\u7528\u5f52\u7eb3\u3001\u7efc\u5408\u800c\u4e0d\u662f\u6f14\u7ece\u3002 \u6d77\u91cf\u7684\u6570\u636e \u83b7\u53d6\u6709\u7528\u7684\u4fe1\u606f \u673a\u5668\u5b66\u4e60 \u7814\u7a76\u610f\u4e49 \u673a\u5668\u5b66\u4e60\u662f\u4e00\u95e8\u4eba\u5de5\u667a\u80fd\u7684\u79d1\u5b66\uff0c\u8be5\u9886\u57df\u7684\u4e3b\u8981\u7814\u7a76\u5bf9\u8c61\u662f\u4eba\u5de5\u667a\u80fd\uff0c\u7279\u522b\u662f\u5982\u4f55\u5728\u7ecf\u9a8c\u5b66\u4e60\u4e2d\u6539\u5584\u5177\u4f53\u7b97\u6cd5\u7684\u6027\u80fd\u201d\u3002 \u201c\u673a\u5668\u5b66\u4e60\u662f\u5bf9\u80fd\u901a\u8fc7\u7ecf\u9a8c\u81ea\u52a8\u6539\u8fdb\u7684\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u7814\u7a76\u201d\u3002 \u201c\u673a\u5668\u5b66\u4e60\u662f\u7528\u6570\u636e\u6216\u4ee5\u5f80\u7684\u7ecf\u9a8c\uff0c\u4ee5\u6b64\u4f18\u5316\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6027\u80fd\u6807\u51c6\u3002\u201d \u4e00\u79cd\u7ecf\u5e38\u5f15\u7528\u7684\u82f1\u6587\u5b9a\u4e49\u662f\uff1aA computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E. \u673a\u5668\u5b66\u4e60\u5df2\u7ecf\u6709\u4e86\u5341\u5206\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4f8b\u5982\uff1a\u6570\u636e\u6316\u6398\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u751f\u7269\u7279\u5f81\u8bc6\u522b\u3001\u641c\u7d22\u5f15\u64ce\u3001\u533b\u5b66\u8bca\u65ad\u3001\u68c0\u6d4b\u4fe1\u7528\u5361\u6b3a\u8bc8\u3001\u8bc1\u5238\u5e02\u573a\u5206\u6790\u3001DNA\u5e8f\u5217\u6d4b\u5e8f\u3001\u8bed\u97f3\u548c\u624b\u5199\u8bc6\u522b\u3001\u6218\u7565\u6e38\u620f\u548c\u673a\u5668\u4eba\u8fd0\u7528\u3002 \u673a\u5668\u5b66\u4e60 \u573a\u666f \u4f8b\u5982\uff1a\u8bc6\u522b\u52a8\u7269\u732b \u6a21\u5f0f\u8bc6\u522b\uff08\u5b98\u65b9\u6807\u51c6\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u5927\u91cf\u7684\u7ecf\u9a8c\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002 \u673a\u5668\u5b66\u4e60\uff08\u6570\u636e\u5b66\u4e60\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u9605\u8bfb\u8fdb\u884c\u5b66\u4e60\uff0c\u89c2\u5bdf\u5b83\u4f1a\u53eb\u3001\u5c0f\u773c\u775b\u3001\u4e24\u53ea\u8033\u6735\u3001\u56db\u6761\u817f\u3001\u4e00\u6761\u5c3e\u5df4\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002 \u6df1\u5ea6\u5b66\u4e60\uff08\u6df1\u5165\u6570\u636e\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u6df1\u5165\u4e86\u89e3\u5b83\uff0c\u53d1\u73b0\u5b83\u4f1a'\u55b5\u55b5'\u7684\u53eb\u3001\u4e0e\u540c\u7c7b\u7684\u732b\u79d1\u52a8\u7269\u5f88\u7c7b\u4f3c\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002\uff08\u6df1\u5ea6\u5b66\u4e60\u5e38\u7528\u9886\u57df\uff1a\u8bed\u97f3\u8bc6\u522b\u3001\u56fe\u50cf\u8bc6\u522b\uff09 \u6a21\u5f0f\u8bc6\u522b\uff08pattern recognition\uff09: \u6a21\u5f0f\u8bc6\u522b\u662f\u6700\u53e4\u8001\u7684\uff08\u4f5c\u4e3a\u4e00\u4e2a\u672f\u8bed\u800c\u8a00\uff0c\u53ef\u4ee5\u8bf4\u662f\u5f88\u8fc7\u65f6\u7684\uff09\u3002 \u6211\u4eec\u628a\u73af\u5883\u4e0e\u5ba2\u4f53\u7edf\u79f0\u4e3a\u201c\u6a21\u5f0f\u201d\uff0c\u8bc6\u522b\u662f\u5bf9\u6a21\u5f0f\u7684\u4e00\u79cd\u8ba4\u77e5\uff0c\u662f\u5982\u4f55\u8ba9\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u53bb\u505a\u4e00\u4e9b\u770b\u8d77\u6765\u5f88\u201c\u667a\u80fd\u201d\u7684\u4e8b\u60c5\u3002 \u901a\u8fc7\u878d\u4e8e\u667a\u6167\u548c\u76f4\u89c9\u540e\uff0c\u901a\u8fc7\u6784\u5efa\u7a0b\u5e8f\uff0c\u8bc6\u522b\u4e00\u4e9b\u4e8b\u7269\uff0c\u800c\u4e0d\u662f\u4eba\uff0c\u4f8b\u5982: \u8bc6\u522b\u6570\u5b57\u3002 \u673a\u5668\u5b66\u4e60\uff08machine learning\uff09: \u673a\u5668\u5b66\u4e60\u662f\u6700\u57fa\u7840\u7684\uff08\u5f53\u4e0b\u521d\u521b\u516c\u53f8\u548c\u7814\u7a76\u5b9e\u9a8c\u5ba4\u7684\u70ed\u70b9\u9886\u57df\u4e4b\u4e00\uff09\u3002 \u572890\u5e74\u4ee3\u521d\uff0c\u4eba\u4eec\u5f00\u59cb\u610f\u8bc6\u5230\u4e00\u79cd\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u6784\u5efa\u6a21\u5f0f\u8bc6\u522b\u7b97\u6cd5\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u7528\u6570\u636e\uff08\u53ef\u4ee5\u901a\u8fc7\u5ec9\u4ef7\u52b3\u52a8\u529b\u91c7\u96c6\u83b7\u5f97\uff09\u53bb\u66ff\u6362\u4e13\u5bb6\uff08\u5177\u6709\u5f88\u591a\u56fe\u50cf\u65b9\u9762\u77e5\u8bc6\u7684\u4eba\uff09\u3002 \u201c\u673a\u5668\u5b66\u4e60\u201d\u5f3a\u8c03\u7684\u662f\uff0c\u5728\u7ed9\u8ba1\u7b97\u673a\u7a0b\u5e8f\uff08\u6216\u8005\u673a\u5668\uff09\u8f93\u5165\u4e00\u4e9b\u6570\u636e\u540e\uff0c\u5b83\u5fc5\u987b\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u5b66\u4e60\u8fd9\u4e9b\u6570\u636e\uff0c\u800c\u8fd9\u4e2a\u5b66\u4e60\u7684\u6b65\u9aa4\u662f\u660e\u786e\u7684\u3002 \u673a\u5668\u5b66\u4e60\uff08Machine Learning\uff09\u662f\u4e00\u95e8\u4e13\u95e8\u7814\u7a76\u8ba1\u7b97\u673a\u600e\u6837\u6a21\u62df\u6216\u5b9e\u73b0\u4eba\u7c7b\u7684\u5b66\u4e60\u884c\u4e3a\uff0c\u4ee5\u83b7\u53d6\u65b0\u7684\u77e5\u8bc6\u6216\u6280\u80fd\uff0c\u91cd\u65b0\u7ec4\u7ec7\u5df2\u6709\u7684\u77e5\u8bc6\u7ed3\u6784\u4f7f\u4e4b\u4e0d\u65ad\u6539\u5584\u81ea\u8eab\u6027\u80fd\u7684\u5b66\u79d1\u3002 \u6df1\u5ea6\u5b66\u4e60\uff08deep learning\uff09: \u6df1\u5ea6\u5b66\u4e60\u662f\u975e\u5e38\u5d2d\u65b0\u548c\u6709\u5f71\u54cd\u529b\u7684\u524d\u6cbf\u9886\u57df\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u4f1a\u53bb\u601d\u8003-\u540e\u6df1\u5ea6\u5b66\u4e60\u65f6\u4ee3\u3002 \u6df1\u5ea6\u5b66\u4e60\u662f\u673a\u5668\u5b66\u4e60\u7814\u7a76\u4e2d\u7684\u4e00\u4e2a\u65b0\u7684\u9886\u57df\uff0c\u5176\u52a8\u673a\u5728\u4e8e\u5efa\u7acb\u3001\u6a21\u62df\u4eba\u8111\u8fdb\u884c\u5206\u6790\u5b66\u4e60\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u6a21\u4eff\u4eba\u8111\u7684\u673a\u5236\u6765\u89e3\u91ca\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u6587\u672c\u3002 \u53c2\u8003\u5730\u5740\uff1a \u6df1\u5ea6\u5b66\u4e60 vs \u673a\u5668\u5b66\u4e60 vs \u6a21\u5f0f\u8bc6\u522b \u6df1\u5ea6\u5b66\u4e60 \u767e\u79d1\u8d44\u6599 \u673a\u5668\u5b66\u4e60\u5df2\u5e94\u7528\u4e8e\u591a\u4e2a\u9886\u57df\uff0c\u8fdc\u8fdc\u8d85\u51fa\u5927\u591a\u6570\u4eba\u7684\u60f3\u8c61\uff0c\u6a2a\u8de8\uff1a\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u5de5\u7a0b\u6280\u672f\u548c\u7edf\u8ba1\u5b66\u7b49\u591a\u4e2a\u5b66\u79d1\u3002 \u641c\u7d22\u5f15\u64ce: \u6839\u636e\u4f60\u7684\u641c\u7d22\u70b9\u51fb\uff0c\u4f18\u5316\u4f60\u4e0b\u6b21\u7684\u641c\u7d22\u7ed3\u679c,\u662f\u673a\u5668\u5b66\u4e60\u6765\u5e2e\u52a9\u641c\u7d22\u5f15\u64ce\u5224\u65ad\u54ea\u4e2a\u7ed3\u679c\u66f4\u9002\u5408\u4f60\uff08\u4e5f\u5224\u65ad\u54ea\u4e2a\u5e7f\u544a\u66f4\u9002\u5408\u4f60\uff09\u3002 \u5783\u573e\u90ae\u4ef6: \u4f1a\u81ea\u52a8\u7684\u8fc7\u6ee4\u5783\u573e\u5e7f\u544a\u90ae\u4ef6\u5230\u5783\u573e\u7bb1\u5185\u3002 \u8d85\u5e02\u4f18\u60e0\u5238: \u4f60\u4f1a\u53d1\u73b0\uff0c\u4f60\u5728\u8d2d\u4e70\u5c0f\u5b69\u5b50\u5c3f\u5e03\u7684\u65f6\u5019\uff0c\u552e\u8d27\u5458\u4f1a\u8d60\u9001\u4f60\u4e00\u5f20\u4f18\u60e0\u5238\u53ef\u4ee5\u5151\u63626\u7f50\u5564\u9152\u3002 \u90ae\u5c40\u90ae\u5bc4: \u624b\u5199\u8f6f\u4ef6\u81ea\u52a8\u8bc6\u522b\u5bc4\u9001\u8d3a\u5361\u7684\u5730\u5740\u3002 \u7533\u8bf7\u8d37\u6b3e: \u901a\u8fc7\u4f60\u6700\u8fd1\u7684\u91d1\u878d\u6d3b\u52a8\u4fe1\u606f\u8fdb\u884c\u7efc\u5408\u8bc4\u5b9a\uff0c\u51b3\u5b9a\u4f60\u662f\u5426\u5408\u683c\u3002 \u673a\u5668\u5b66\u4e60 \u7ec4\u6210 \u4e3b\u8981\u4efb\u52a1 \u5206\u7c7b\uff08classification\uff09\uff1a\u5c06\u5b9e\u4f8b\u6570\u636e\u5212\u5206\u5230\u5408\u9002\u7684\u7c7b\u522b\u4e2d\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a\u5224\u65ad\u7f51\u7ad9\u662f\u5426\u88ab\u9ed1\u5ba2\u5165\u4fb5\uff08\u4e8c\u5206\u7c7b \uff09\uff0c\u624b\u5199\u6570\u5b57\u7684\u81ea\u52a8\u8bc6\u522b\uff08\u591a\u5206\u7c7b\uff09 \u56de\u5f52\uff08regression\uff09\uff1a\u4e3b\u8981\u7528\u4e8e\u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8\u7684\u9884\u6d4b\uff0c\u623f\u5c4b\u4ef7\u683c\u7684\u9884\u6d4b\u7b49\u3002 \u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09 \u5fc5\u987b\u786e\u5b9a\u76ee\u6807\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u4fbf\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u53d1\u73b0\u7279\u5f81\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u6211\u4eec\u77e5\u9053\u6b63\u786e\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u5e76\u4e14\u77e5\u9053\u5728\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u6709\u7740\u4e00\u4e2a\u7279\u5b9a\u7684\u5173\u7cfb\u3002 (\u5305\u62ec\uff1a\u5206\u7c7b\u548c\u56de\u5f52) \u6837\u672c\u96c6\uff1a\u8bad\u7ec3\u6570\u636e + \u6d4b\u8bd5\u6570\u636e \u8bad\u7ec3\u6837\u672c = \u7279\u5f81(feature) + \u76ee\u6807\u53d8\u91cf(label: \u5206\u7c7b-\u79bb\u6563\u503c/\u56de\u5f52-\u8fde\u7eed\u503c) \u7279\u5f81\u901a\u5e38\u662f\u8bad\u7ec3\u6837\u672c\u96c6\u7684\u5217\uff0c\u5b83\u4eec\u662f\u72ec\u7acb\u6d4b\u91cf\u5f97\u5230\u7684\u3002 \u76ee\u6807\u53d8\u91cf: \u76ee\u6807\u53d8\u91cf\u662f\u673a\u5668\u5b66\u4e60\u9884\u6d4b\u7b97\u6cd5\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u5728\u5206\u7c7b\u7b97\u6cd5\u4e2d\u76ee\u6807\u53d8\u91cf\u7684\u7c7b\u578b\u901a\u5e38\u662f\u6807\u79f0\u578b(\u5982\uff1a\u771f\u4e0e\u5047)\uff0c\u800c\u5728\u56de\u5f52\u7b97\u6cd5\u4e2d\u901a\u5e38\u662f\u8fde\u7eed\u578b(\u5982\uff1a1~100)\u3002 \u76d1\u7763\u5b66\u4e60\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a \u504f\u7f6e\u65b9\u5dee\u6743\u8861 \u529f\u80fd\u7684\u590d\u6742\u6027\u548c\u6570\u91cf\u7684\u8bad\u7ec3\u6570\u636e \u8f93\u5165\u7a7a\u95f4\u7684\u7ef4\u6570 \u566a\u58f0\u4e2d\u7684\u8f93\u51fa\u503c \u77e5\u8bc6\u8868\u793a \uff1a \u53ef\u4ee5\u91c7\u7528\u89c4\u5219\u96c6\u7684\u5f62\u5f0f\u3010\u4f8b\u5982\uff1a\u6570\u5b66\u6210\u7ee9\u5927\u4e8e90\u5206\u4e3a\u4f18\u79c0\u3011 \u53ef\u4ee5\u91c7\u7528\u6982\u7387\u5206\u5e03\u7684\u5f62\u5f0f\u3010\u4f8b\u5982\uff1a\u901a\u8fc7\u7edf\u8ba1\u5206\u5e03\u53d1\u73b0\uff0c90%\u7684\u540c\u5b66\u6570\u5b66\u6210\u7ee9\uff0c\u572870\u5206\u4ee5\u4e0b\uff0c\u90a3\u4e48\u5927\u4e8e70\u5206\u5b9a\u4e3a\u4f18\u79c0\u3011 \u53ef\u4ee5\u4f7f\u7528\u8bad\u7ec3\u6837\u672c\u96c6\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3010\u4f8b\u5982\uff1a\u901a\u8fc7\u6837\u672c\u96c6\u5408\uff0c\u6211\u4eec\u8bad\u7ec3\u51fa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff0c\u5f97\u51fa \u5e74\u8f7b\uff0c\u6570\u5b66\u6210\u7ee9\u4e2d\u9ad8\u7b49\uff0c\u8c08\u5410\u4f18\u96c5\uff0c\u6211\u4eec\u8ba4\u4e3a\u662f\u4f18\u79c0\u3011 \u975e\u76d1\u7763\u5b66\u4e60\uff08unsupervised learing\uff09 \u5728\u673a\u5668\u5b66\u4e60\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u95ee\u9898\u662f\uff0c\u5728\u672a\u52a0\u6807\u7b7e\u7684\u6570\u636e\u4e2d\uff0c\u8bd5\u56fe\u627e\u5230\u9690\u85cf\u7684\u7ed3\u6784\u3002\u56e0\u4e3a\u63d0\u4f9b\u7ed9\u5b66\u4e60\u8005\u7684\u5b9e\u4f8b\u662f\u672a\u6807\u8bb0\u7684\uff0c\u56e0\u6b64\u6ca1\u6709\u9519\u8bef\u6216\u62a5\u916c\u4fe1\u53f7\u6765\u8bc4\u4f30\u6f5c\u5728\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u65e0\u76d1\u7763\u5b66\u4e60\u662f\u5bc6\u5207\u76f8\u5173\u7684\u7edf\u8ba1\u6570\u636e\u5bc6\u5ea6\u4f30\u8ba1\u7684\u95ee\u9898\u3002\u7136\u800c\u65e0\u76d1\u7763\u5b66\u4e60\u8fd8\u5305\u62ec\u5bfb\u6c42\uff0c\u603b\u7ed3\u548c\u89e3\u91ca\u6570\u636e\u7684\u4e3b\u8981\u7279\u70b9\u7b49\u8bf8\u591a\u6280\u672f\u3002\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4f7f\u7528\u7684\u8bb8\u591a\u65b9\u6cd5\u662f\u57fa\u4e8e\u7528\u4e8e\u5904\u7406\u6570\u636e\u7684\u6570\u636e\u6316\u6398\u65b9\u6cd5\u3002 \u6570\u636e\u6ca1\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u7ed9\u5b9a\u76ee\u6807\u503c\u3002 \u975e\u76d1\u7763\u5b66\u4e60\u5305\u62ec\u7684\u7c7b\u578b\uff1a \u805a\u7c7b\uff1a\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u5c06\u6570\u636e\u96c6\u5206\u6210\u7531\u7c7b\u4f3c\u7684\u5bf9\u8c61\u7ec4\u6210\u591a\u4e2a\u7c7b\u7684\u8fc7\u7a0b\u79f0\u4e3a\u805a\u7c7b\u3002 \u5bc6\u5ea6\u4f30\u8ba1\uff1a\u901a\u8fc7\u6837\u672c\u5206\u5e03\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u6765\u4f30\u8ba1\u4e0e\u5206\u7ec4\u7684\u76f8\u4f3c\u6027\u3002 \u6b64\u5916\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u8fd8\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u7279\u5f81\u7684\u7ef4\u5ea6\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u6216\u4e09\u7ef4\u56fe\u5f62\u66f4\u52a0\u76f4\u89c2\u5730\u5c55\u793a\u6570\u636e\u4fe1\u606f\u3002 \u5f3a\u5316\u5b66\u4e60 \u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u8bad\u7ec3\u7a0b\u5e8f\u505a\u51fa\u67d0\u4e00\u51b3\u5b9a\u3002\u7a0b\u5e8f\u5728\u67d0\u4e00\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u6240\u6709\u7684\u53ef\u80fd\u884c\u52a8\uff0c\u8bb0\u5f55\u4e0d\u540c\u884c\u52a8\u7684\u7ed3\u679c\u5e76\u8bd5\u7740\u627e\u51fa\u6700\u597d\u7684\u4e00\u6b21\u5c1d\u8bd5\u6765\u505a\u51b3\u5b9a\u3002 \u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u7b97\u6cd5\u7684\u6709\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\u3002 \u8bad\u7ec3\u8fc7\u7a0b \u7b97\u6cd5\u6c47\u603b \u673a\u5668\u5b66\u4e60 \u4f7f\u7528 \u9009\u62e9\u7b97\u6cd5\u9700\u8981\u8003\u8651\u7684\u4e24\u4e2a\u95ee\u9898 \u7b97\u6cd5\u573a\u666f \u9884\u6d4b\u660e\u5929\u662f\u5426\u4e0b\u96e8\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u5386\u53f2\u7684\u5929\u6c14\u60c5\u51b5\u505a\u9884\u6d4b\uff0c\u6240\u4ee5\u9009\u62e9\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5 \u7ed9\u4e00\u7fa4\u964c\u751f\u7684\u4eba\u8fdb\u884c\u5206\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u8fd9\u4e9b\u4eba\u7684\u7c7b\u522b\u4fe1\u606f\uff0c\u6240\u4ee5\u9009\u62e9\u65e0\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3001\u901a\u8fc7\u4ed6\u4eec\u8eab\u9ad8\u3001\u4f53\u91cd\u7b49\u7279\u5f81\u8fdb\u884c\u5904\u7406\u3002 \u9700\u8981\u6536\u96c6\u6216\u5206\u6790\u7684\u6570\u636e\u662f\u4ec0\u4e48 \u4e3e\u4f8b \u673a\u5668\u5b66\u4e60 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u6536\u96c6\u6837\u672c\u6570\u636e \u51c6\u5907\u6570\u636e: \u6ce8\u610f\u6570\u636e\u7684\u683c\u5f0f \u5206\u6790\u6570\u636e: \u4e3a\u4e86\u786e\u4fdd\u6570\u636e\u96c6\u4e2d\u6ca1\u6709\u5783\u573e\u6570\u636e\uff1b \u5982\u679c\u662f\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u7684\u6570\u636e\u683c\u5f0f\u6216\u53ef\u4fe1\u4efb\u7684\u6570\u636e\u6e90\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u8be5\u6b65\u9aa4\uff1b \u53e6\u5916\u8be5\u6b65\u9aa4\u9700\u8981\u4eba\u5de5\u5e72\u9884\uff0c\u4f1a\u964d\u4f4e\u81ea\u52a8\u5316\u7cfb\u7edf\u7684\u4ef7\u503c\u3002 \u8bad\u7ec3\u7b97\u6cd5: [\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6838\u5fc3]\u5982\u679c\u4f7f\u7528\u65e0\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\uff0c\u7531\u4e8e\u4e0d\u5b58\u5728\u76ee\u6807\u53d8\u91cf\u503c\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u8be5\u6b65\u9aa4 \u6d4b\u8bd5\u7b97\u6cd5: [\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6838\u5fc3]\u8bc4\u4f30\u7b97\u6cd5\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u5c06\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8f6c\u4e3a\u5e94\u7528\u7a0b\u5e8f \u673a\u5668\u5b66\u4e60 \u6570\u5b66\u57fa\u7840 \u5fae\u79ef\u5206 \u7edf\u8ba1\u5b66/\u6982\u7387\u8bba \u7ebf\u6027\u4ee3\u6570 \u673a\u5668\u5b66\u4e60 \u5de5\u5177 Python\u8bed\u8a00 \u53ef\u6267\u884c\u4f2a\u4ee3\u7801 Python\u6bd4\u8f83\u6d41\u884c\uff1a\u4f7f\u7528\u5e7f\u6cdb\u3001\u4ee3\u7801\u8303\u4f8b\u591a\u3001\u4e30\u5bcc\u6a21\u5757\u5e93\uff0c\u5f00\u53d1\u5468\u671f\u77ed Python\u8bed\u8a00\u7684\u7279\u8272\uff1a\u6e05\u6670\u7b80\u7ec3\u3001\u6613\u4e8e\u7406\u89e3 Python\u8bed\u8a00\u7684\u7f3a\u70b9\uff1a\u552f\u4e00\u4e0d\u8db3\u7684\u662f\u6027\u80fd\u95ee\u9898 Python\u76f8\u5173\u7684\u5e93 \u79d1\u5b66\u51fd\u6570\u5e93\uff1a SciPy \u3001 NumPy (\u5e95\u5c42\u8bed\u8a00\uff1aC\u548cFortran) \u7ed8\u56fe\u5de5\u5177\u5e93\uff1a Matplotlib \u6570\u636e\u5206\u6790\u5e93 Pandas \u6570\u5b66\u5de5\u5177 Matlab \u9644\uff1a\u673a\u5668\u5b66\u4e60\u4e13\u4e1a\u672f\u8bed \u6a21\u578b\uff08model\uff09\uff1a\u8ba1\u7b97\u673a\u5c42\u9762\u7684\u8ba4\u77e5 \u5b66\u4e60\u7b97\u6cd5\uff08learning algorithm\uff09\uff0c\u4ece\u6570\u636e\u4e2d\u4ea7\u751f\u6a21\u578b\u7684\u65b9\u6cd5 \u6570\u636e\u96c6\uff08data set\uff09\uff1a\u4e00\u7ec4\u8bb0\u5f55\u7684\u5408\u96c6 \u793a\u4f8b\uff08instance\uff09\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u5bf9\u8c61\u7684\u63cf\u8ff0 \u6837\u672c\uff08sample\uff09\uff1a\u4e5f\u53eb\u793a\u4f8b \u5c5e\u6027\uff08attribute\uff09\uff1a\u5bf9\u8c61\u7684\u67d0\u65b9\u9762\u8868\u73b0\u6216\u7279\u5f81 \u7279\u5f81\uff08feature\uff09\uff1a\u540c\u5c5e\u6027 \u5c5e\u6027\u503c\uff08attribute value\uff09\uff1a\u5c5e\u6027\u4e0a\u7684\u53d6\u503c \u5c5e\u6027\u7a7a\u95f4\uff08attribute space\uff09\uff1a\u5c5e\u6027\u5f20\u6210\u7684\u7a7a\u95f4 \u6837\u672c\u7a7a\u95f4/\u8f93\u5165\u7a7a\u95f4\uff08samplespace\uff09\uff1a\u540c\u5c5e\u6027\u7a7a\u95f4 \u7279\u5f81\u5411\u91cf\uff08feature vector\uff09\uff1a\u5728\u5c5e\u6027\u7a7a\u95f4\u91cc\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5750\u6807\u5411\u91cf\uff0c\u628a\u4e00\u4e2a\u793a\u4f8b\u79f0\u4f5c\u7279\u5f81\u5411\u91cf \u7ef4\u6570\uff08dimensionality\uff09\uff1a\u63cf\u8ff0\u6837\u672c\u53c2\u6570\u7684\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u7a7a\u95f4\u662f\u51e0\u7ef4\u7684\uff09 \u5b66\u4e60\uff08learning\uff09/\u8bad\u7ec3\uff08training\uff09\uff1a\u4ece\u6570\u636e\u4e2d\u5b66\u5f97\u6a21\u578b \u8bad\u7ec3\u6570\u636e\uff08training data\uff09\uff1a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7528\u5230\u7684\u6570\u636e \u8bad\u7ec3\u6837\u672c\uff08training sample\uff09:\u8bad\u7ec3\u7528\u5230\u7684\u6bcf\u4e2a\u6837\u672c \u8bad\u7ec3\u96c6\uff08training set\uff09\uff1a\u8bad\u7ec3\u6837\u672c\u7ec4\u6210\u7684\u96c6\u5408 \u5047\u8bbe\uff08hypothesis\uff09\uff1a\u5b66\u4e60\u6a21\u578b\u5bf9\u5e94\u4e86\u5173\u4e8e\u6570\u636e\u7684\u67d0\u79cd\u6f5c\u5728\u89c4\u5219 \u771f\u76f8\uff08ground-truth\uff09:\u771f\u6b63\u5b58\u5728\u7684\u6f5c\u5728\u89c4\u5f8b \u5b66\u4e60\u5668\uff08learner\uff09\uff1a\u6a21\u578b\u7684\u53e6\u4e00\u79cd\u53eb\u6cd5\uff0c\u628a\u5b66\u4e60\u7b97\u6cd5\u5728\u7ed9\u5b9a\u6570\u636e\u548c\u53c2\u6570\u7a7a\u95f4\u7684\u5b9e\u4f8b\u5316 \u9884\u6d4b\uff08prediction\uff09\uff1a\u5224\u65ad\u4e00\u4e2a\u4e1c\u897f\u7684\u5c5e\u6027 \u6807\u8bb0\uff08label\uff09\uff1a\u5173\u4e8e\u793a\u4f8b\u7684\u7ed3\u679c\u4fe1\u606f\uff0c\u6bd4\u5982\u6211\u662f\u4e00\u4e2a\u201c\u597d\u4eba\u201d\u3002 \u6837\u4f8b\uff08example\uff09\uff1a\u62e5\u6709\u6807\u8bb0\u7684\u793a\u4f8b \u6807\u8bb0\u7a7a\u95f4/\u8f93\u51fa\u7a7a\u95f4\uff08label space\uff09\uff1a\u6240\u6709\u6807\u8bb0\u7684\u96c6\u5408 \u5206\u7c7b\uff08classification\uff09\uff1a\u9884\u6d4b\u65f6\u79bb\u6563\u503c\uff0c\u6bd4\u5982\u628a\u4eba\u5206\u4e3a\u597d\u4eba\u548c\u574f\u4eba\u4e4b\u7c7b\u7684\u5b66\u4e60\u4efb\u52a1 \u56de\u5f52\uff08regression\uff09\uff1a\u9884\u6d4b\u503c\u65f6\u8fde\u7eed\u503c\uff0c\u6bd4\u5982\u4f60\u7684\u597d\u4eba\u7a0b\u5ea6\u8fbe\u5230\u4e860.9\uff0c0.6\u4e4b\u7c7b\u7684 \u4e8c\u5206\u7c7b\uff08binary classification\uff09\uff1a\u53ea\u6d89\u53ca\u4e24\u4e2a\u7c7b\u522b\u7684\u5206\u7c7b\u4efb\u52a1 \u6b63\u7c7b\uff08positive class\uff09\uff1a\u4e8c\u5206\u7c7b\u91cc\u7684\u4e00\u4e2a \u53cd\u7c7b\uff08negative class\uff09\uff1a\u4e8c\u5206\u7c7b\u91cc\u7684\u53e6\u5916\u4e00\u4e2a \u591a\u5206\u7c7b\uff08multi-class classification\uff09\uff1a\u6d89\u53ca\u591a\u4e2a\u7c7b\u522b\u7684\u5206\u7c7b \u6d4b\u8bd5\uff08testing\uff09\uff1a\u5b66\u4e60\u5230\u6a21\u578b\u4e4b\u540e\u5bf9\u6837\u672c\u8fdb\u884c\u9884\u6d4b\u7684\u8fc7\u7a0b \u6d4b\u8bd5\u6837\u672c\uff08testing sample\uff09\uff1a\u88ab\u9884\u6d4b\u7684\u6837\u672c \u805a\u7c7b\uff08clustering\uff09\uff1a\u628a\u8bad\u7ec3\u96c6\u4e2d\u7684\u5bf9\u8c61\u5206\u4e3a\u82e5\u5e72\u7ec4 \u7c07\uff08cluster\uff09\uff1a\u6bcf\u4e00\u4e2a\u7ec4\u53eb\u7c07 \u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09\uff1a\u5178\u8303--\u5206\u7c7b\u548c\u56de\u5f52 \u65e0\u76d1\u7763\u5b66\u4e60\uff08unsupervised learning\uff09\uff1a\u5178\u8303--\u805a\u7c7b \u672a\u89c1\u793a\u4f8b\uff08unseen instance\uff09\uff1a\u201c\u65b0\u6837\u672c\u201c\uff0c\u6ca1\u8bad\u7ec3\u8fc7\u7684\u6837\u672c \u6cdb\u5316\uff08generalization\uff09\u80fd\u529b\uff1a\u5b66\u5f97\u7684\u6a21\u578b\u9002\u7528\u4e8e\u65b0\u6837\u672c\u7684\u80fd\u529b \u5206\u5e03\uff08distribution\uff09\uff1a\u6837\u672c\u7a7a\u95f4\u7684\u5168\u4f53\u6837\u672c\u670d\u4ece\u7684\u4e00\u79cd\u89c4\u5f8b \u72ec\u7acb\u540c\u5206\u5e03\uff08independent and identically distributed\uff0c\u7b80\u79f0i,i,d.\uff09:\u83b7\u5f97\u7684\u6bcf\u4e2a\u6837\u672c\u90fd\u662f\u72ec\u7acb\u5730\u4ece\u8fd9\u4e2a\u5206\u5e03\u4e0a\u91c7\u6837\u83b7\u5f97\u7684\u3002 \u673a\u5668\u5b66\u4e60\u57fa\u7840\u8865\u5145 \u6570\u636e\u96c6\u7684\u5212\u5206 \u8bad\u7ec3\u96c6\uff08Training set\uff09 \u2014\u2014 \u5b66\u4e60\u6837\u672c\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u5339\u914d\u4e00\u4e9b\u53c2\u6570\u6765\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\uff0c\u4e3b\u8981\u7528\u6765\u8bad\u7ec3\u6a21\u578b\u3002\u7c7b\u6bd4\u8003\u7814\u524d\u505a\u7684\u89e3\u9898\u5927\u5168\u3002 \u9a8c\u8bc1\u96c6\uff08validation set\uff09 \u2014\u2014 \u5bf9\u5b66\u4e60\u51fa\u6765\u7684\u6a21\u578b\uff0c\u8c03\u6574\u6a21\u578b\u7684\u53c2\u6570\uff0c\u5982\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u9009\u62e9\u9690\u85cf\u5355\u5143\u6570\u3002\u9a8c\u8bc1\u96c6\u8fd8\u7528\u6765\u786e\u5b9a\u7f51\u7edc\u7ed3\u6784\u6216\u8005\u63a7\u5236\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u7684\u53c2\u6570\u3002\u7c7b\u6bd4 \u8003\u7814\u4e4b\u524d\u505a\u7684\u6a21\u62df\u8003\u8bd5\u3002 \u6d4b\u8bd5\u96c6\uff08Test set\uff09 \u2014\u2014 \u6d4b\u8bd5\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u5206\u8fa8\u80fd\u529b\u3002\u7c7b\u6bd4 \u8003\u7814\u3002\u8fd9\u6b21\u771f\u7684\u662f\u4e00\u8003\u5b9a\u7ec8\u8eab\u3002 \u6a21\u578b\u62df\u5408\u7a0b\u5ea6 \u6b20\u62df\u5408\uff08Underfitting\uff09\uff1a\u6a21\u578b\u6ca1\u6709\u5f88\u597d\u5730\u6355\u6349\u5230\u6570\u636e\u7279\u5f81\uff0c\u4e0d\u80fd\u591f\u5f88\u597d\u5730\u62df\u5408\u6570\u636e\uff0c\u5bf9\u8bad\u7ec3\u6837\u672c\u7684\u4e00\u822c\u6027\u8d28\u5c1a\u672a\u5b66\u597d\u3002\u7c7b\u6bd4\uff0c\u5149\u770b\u4e66\u4e0d\u505a\u9898\u89c9\u5f97\u81ea\u5df1\u4ec0\u4e48\u90fd\u4f1a\u4e86\uff0c\u4e0a\u4e86\u8003\u573a\u624d\u77e5\u9053\u81ea\u5df1\u5565\u90fd\u4e0d\u4f1a\u3002 \u8fc7\u62df\u5408\uff08Overfitting\uff09\uff1a\u6a21\u578b\u628a\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u201c\u592a\u597d\u4e86\u201d\uff0c\u53ef\u80fd\u628a\u4e00\u4e9b\u8bad\u7ec3\u6837\u672c\u81ea\u8eab\u7684\u7279\u6027\u5f53\u505a\u4e86\u6240\u6709\u6f5c\u5728\u6837\u672c\u90fd\u6709\u7684\u4e00\u822c\u6027\u8d28\uff0c\u5bfc\u81f4\u6cdb\u5316\u80fd\u529b\u4e0b\u964d\u3002\u7c7b\u6bd4\uff0c\u505a\u8bfe\u540e\u9898\u5168\u90fd\u505a\u5bf9\u4e86\uff0c\u8d85\u7eb2\u9898\u4e5f\u90fd\u8ba4\u4e3a\u662f\u8003\u8bd5\u5fc5\u8003\u9898\u76ee\uff0c\u4e0a\u4e86\u8003\u573a\u8fd8\u662f\u5565\u90fd\u4e0d\u4f1a\u3002 \u901a\u4fd7\u6765\u8bf4\uff0c\u6b20\u62df\u5408\u548c\u8fc7\u62df\u5408\u90fd\u53ef\u4ee5\u7528\u4e00\u53e5\u8bdd\u6765\u8bf4\uff0c\u6b20\u62df\u5408\u5c31\u662f\uff1a\u201c\u4f60\u592a\u5929\u771f\u4e86\uff01\u201d\uff0c\u8fc7\u62df\u5408\u5c31\u662f\uff1a\u201c\u4f60\u60f3\u592a\u591a\u4e86\uff01\u201d\u3002 \u5e38\u89c1\u7684\u6a21\u578b\u6307\u6807 \u6b63\u786e\u7387 \u2014\u2014 \u63d0\u53d6\u51fa\u7684\u6b63\u786e\u4fe1\u606f\u6761\u6570 / \u63d0\u53d6\u51fa\u7684\u4fe1\u606f\u6761\u6570 \u53ec\u56de\u7387 \u2014\u2014 \u63d0\u53d6\u51fa\u7684\u6b63\u786e\u4fe1\u606f\u6761\u6570 / \u6837\u672c\u4e2d\u7684\u4fe1\u606f\u6761\u6570 F \u503c \u2014\u2014 \u6b63\u786e\u7387 * \u53ec\u56de\u7387 * 2 / \uff08\u6b63\u786e\u7387 + \u53ec\u56de\u7387\uff09\uff08F\u503c\u5373\u4e3a\u6b63\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff09 \u4e3e\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a \u4e3e\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a \u67d0\u6c60\u5858\u6709 1400 \u6761\u9ca4\u9c7c\uff0c300 \u53ea\u867e\uff0c300 \u53ea\u4e4c\u9f9f\u3002\u73b0\u5728\u4ee5\u6355\u9ca4\u9c7c\u4e3a\u76ee\u7684\u3002\u6492\u4e86\u4e00\u5f20\u7f51\uff0c\u902e\u4f4f\u4e86 700 \u6761\u9ca4\u9c7c\uff0c200 \u53ea \u867e\uff0c 100 \u53ea\u4e4c\u9f9f\u3002\u90a3\u4e48\u8fd9\u4e9b\u6307\u6807\u5206\u522b\u5982\u4e0b\uff1a \u6b63\u786e\u7387 = 700 / (700 + 200 + 100) = 70% \u53ec\u56de\u7387 = 700 / 1400 = 50% F \u503c = 70% * 50% * 2 / (70% + 50%) = 58.3% \u6a21\u578b \u5206\u7c7b\u95ee\u9898 \u2014\u2014 \u8bf4\u767d\u4e86\u5c31\u662f\u5c06\u4e00\u4e9b\u672a\u77e5\u7c7b\u522b\u7684\u6570\u636e\u5206\u5230\u73b0\u5728\u5df2\u77e5\u7684\u7c7b\u522b\u4e2d\u53bb\u3002\u6bd4\u5982\uff0c\u6839\u636e\u4f60\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5224\u65ad\u4f60\u662f\u9ad8\u5bcc\u5e05\uff0c\u8fd8\u662f\u7a77\u5c4c\u4e1d\u3002\u8bc4\u5224\u5206\u7c7b\u6548\u679c\u597d\u574f\u7684\u4e09\u4e2a\u6307\u6807\u5c31\u662f\u4e0a\u9762\u4ecb\u7ecd\u7684\u4e09\u4e2a\u6307\u6807\uff1a\u6b63\u786e\u7387\uff0c\u53ec\u56de\u7387\uff0cF\u503c\u3002 \u56de\u5f52\u95ee\u9898 \u2014\u2014 \u5bf9\u6570\u503c\u578b\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u8fdb\u884c\u9884\u6d4b\u548c\u5efa\u6a21\u7684\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3002\u56de\u5f52\u5f80\u5f80\u4f1a\u901a\u8fc7\u8ba1\u7b97 \u8bef\u5dee\uff08Error\uff09\u6765\u786e\u5b9a\u6a21\u578b\u7684\u7cbe\u786e\u6027\u3002 \u805a\u7c7b\u95ee\u9898 \u2014\u2014 \u805a\u7c7b\u662f\u4e00\u79cd\u65e0\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u8be5\u7b97\u6cd5\u57fa\u4e8e\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5bfb\u627e\u89c2\u5bdf\u6837\u672c\u7684\u81ea\u7136\u65cf\u7fa4\uff08\u5373\u96c6\u7fa4\uff09\u3002\u805a\u7c7b\u95ee\u9898\u7684\u6807\u51c6\u4e00\u822c\u57fa\u4e8e\u8ddd\u79bb\uff1a\u7c07\u5185\u8ddd\u79bb\uff08Intra-cluster Distance\uff09 \u548c \u7c07\u95f4\u8ddd\u79bb\uff08Inter-cluster Distance\uff09 \u3002\u7c07\u5185\u8ddd\u79bb\u662f\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u7c07\u5185\u7684\u5143\u7d20\u8d8a\u76f8\u4f3c\u8d8a\u597d\uff1b\u800c\u7c07\u95f4\u8ddd\u79bb\u8d8a\u5927\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u7c07\u95f4\uff08\u4e0d\u540c\u7c07\uff09\u5143\u7d20\u8d8a\u4e0d\u76f8\u540c\u8d8a\u597d\u3002\u4e00\u822c\u7684\uff0c\u8861\u91cf\u805a\u7c7b\u95ee\u9898\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u5408\u7c07\u5185\u8ddd\u79bb\u548c\u7c07\u95f4\u8ddd\u79bb\u7684\u516c\u5f0f\u3002 \u4e0b\u9762\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u6bd4\u8f83\u76f4\u89c2\u5730\u5c55\u793a\u51fa\u6765\uff1a \u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u4e9b\u5c0f\u4e1c\u897f \u7279\u5f81\u9009\u62e9 \u2014\u2014 \u4e5f\u53eb\u7279\u5f81\u5b50\u96c6\u9009\u62e9\uff08FSS\uff0cFeature Subset Selection\uff09\u3002\u662f\u6307\u4ece\u5df2\u6709\u7684 M \u4e2a\u7279\u5f81\uff08Feature\uff09\u4e2d\u9009\u62e9 N \u4e2a\u7279\u5f81\u4f7f\u5f97\u7cfb\u7edf\u7684\u7279\u5b9a\u6307\u6807\u6700\u4f18\u5316\uff0c\u662f\u4ece\u539f\u59cb\u7279\u5f81\u4e2d\u9009\u62e9\u51fa\u4e00\u4e9b\u6700\u6709\u6548\u7279\u5f81\u4ee5\u964d\u4f4e\u6570\u636e\u96c6\u7ef4\u5ea6\u7684\u8fc7\u7a0b\uff0c\u662f\u63d0\u9ad8\u7b97\u6cd5\u6027\u80fd\u7684\u4e00\u4e2a\u91cd\u8981\u624b\u6bb5\uff0c\u4e5f\u662f\u6a21\u5f0f\u8bc6\u522b\u4e2d\u5173\u952e\u7684\u6570\u636e\u9884\u5904\u7406\u6b65\u9aa4\u3002 \u7279\u5f81\u63d0\u53d6 \u2014\u2014 \u7279\u5f81\u63d0\u53d6\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u5b83\u6307\u7684\u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u63d0\u53d6\u56fe\u50cf\u4fe1\u606f\uff0c\u51b3\u5b9a\u6bcf\u4e2a\u56fe\u50cf\u7684\u70b9\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u56fe\u50cf\u7279\u5f81\u3002\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c\u662f\u628a\u56fe\u50cf\u4e0a\u7684\u70b9\u5206\u4e3a\u4e0d\u540c\u7684\u5b50\u96c6\uff0c\u8fd9\u4e9b\u5b50\u96c6\u5f80\u5f80\u5c5e\u4e8e\u5b64\u7acb\u7684\u70b9\uff0c\u8fde\u7eed\u7684\u66f2\u7ebf\u6216\u8005\u8fde\u7eed\u7684\u533a\u57df\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7279\u5f81\u5de5\u7a0b\u7684\u56fe\uff1a \u5176\u4ed6 Learning rate \u2014\u2014 \u5b66\u4e60\u7387\uff0c\u901a\u4fd7\u5730\u7406\u89e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6b65\u957f\uff0c\u6b65\u5b50\u5927\u4e86\uff0c\u5f88\u5bb9\u6613\u9519\u8fc7\u6700\u4f73\u7ed3\u679c\u3002\u5c31\u662f\u672c\u6765\u76ee\u6807\u5c3d\u5728\u54ab\u5c3a\uff0c\u53ef\u662f\u56e0\u4e3a\u6211\u8fc8\u7684\u6b65\u5b50\u5f88\u5927\uff0c\u5374\u4e00\u4e0b\u5b50\u8d70\u8fc7\u4e86\u3002\u6b65\u5b50\u5c0f\u4e86\u5462\uff0c\u5c31\u662f\u540c\u6837\u7684\u8ddd\u79bb\uff0c\u6211\u5374\u8981\u8d70\u5f88\u591a\u5f88\u591a\u6b65\uff0c\u8fd9\u6837\u5bfc\u81f4\u8bad\u7ec3\u7684\u8017\u65f6\u8d39\u529b\u8fd8\u4e0d\u8ba8\u597d\u3002 \u4e00\u4e2a\u603b\u7ed3\u7684\u77e5\u8bc6\u70b9\u5f88\u68d2\u7684\u94fe\u63a5 \uff1ahttps://zhuanlan.zhihu.com/p/25197792 \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c1\u7ae0_\u57fa\u7840\u77e5\u8bc6"},{"location":"ml/1.MLFoundation/#1","text":"","title":"\u7b2c1\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"ml/1.MLFoundation/#_1","text":"\u673a\u5668\u5b66\u4e60(Machine Learning,ML) \u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u6765\u5f70\u663e\u6570\u636e\u80cc\u540e\u7684\u771f\u5b9e\u542b\u4e49\uff0c\u5b83\u4e3a\u4e86\u628a\u65e0\u5e8f\u7684\u6570\u636e\u8f6c\u6362\u6210\u6709\u7528\u7684\u4fe1\u606f\u3002\u662f\u4e00\u95e8\u591a\u9886\u57df\u4ea4\u53c9\u5b66\u79d1\uff0c\u6d89\u53ca\u6982\u7387\u8bba\u3001\u7edf\u8ba1\u5b66\u3001\u903c\u8fd1\u8bba\u3001\u51f8\u5206\u6790\u3001\u7b97\u6cd5\u590d\u6742\u5ea6\u7406\u8bba\u7b49\u591a\u95e8\u5b66\u79d1\u3002\u4e13\u95e8\u7814\u7a76\u8ba1\u7b97\u673a\u600e\u6837\u6a21\u62df\u6216\u5b9e\u73b0\u4eba\u7c7b\u7684\u5b66\u4e60\u884c\u4e3a\uff0c\u4ee5\u83b7\u53d6\u65b0\u7684\u77e5\u8bc6\u6216\u6280\u80fd\uff0c\u91cd\u65b0\u7ec4\u7ec7\u5df2\u6709\u7684\u77e5\u8bc6\u7ed3\u6784\u4f7f\u4e4b\u4e0d\u65ad\u6539\u5584\u81ea\u8eab\u7684\u6027\u80fd\u3002 \u5b83\u662f\u4eba\u5de5\u667a\u80fd\u7684\u6838\u5fc3\uff0c\u662f\u4f7f\u8ba1\u7b97\u673a\u5177\u6709\u667a\u80fd\u7684\u6839\u672c\u9014\u5f84\uff0c\u5176\u5e94\u7528\u904d\u53ca\u4eba\u5de5\u667a\u80fd\u7684\u5404\u4e2a\u9886\u57df\uff0c\u5b83\u4e3b\u8981\u4f7f\u7528\u5f52\u7eb3\u3001\u7efc\u5408\u800c\u4e0d\u662f\u6f14\u7ece\u3002 \u6d77\u91cf\u7684\u6570\u636e \u83b7\u53d6\u6709\u7528\u7684\u4fe1\u606f","title":"\u673a\u5668\u5b66\u4e60 \u6982\u8ff0"},{"location":"ml/1.MLFoundation/#_2","text":"\u673a\u5668\u5b66\u4e60\u662f\u4e00\u95e8\u4eba\u5de5\u667a\u80fd\u7684\u79d1\u5b66\uff0c\u8be5\u9886\u57df\u7684\u4e3b\u8981\u7814\u7a76\u5bf9\u8c61\u662f\u4eba\u5de5\u667a\u80fd\uff0c\u7279\u522b\u662f\u5982\u4f55\u5728\u7ecf\u9a8c\u5b66\u4e60\u4e2d\u6539\u5584\u5177\u4f53\u7b97\u6cd5\u7684\u6027\u80fd\u201d\u3002 \u201c\u673a\u5668\u5b66\u4e60\u662f\u5bf9\u80fd\u901a\u8fc7\u7ecf\u9a8c\u81ea\u52a8\u6539\u8fdb\u7684\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u7814\u7a76\u201d\u3002 \u201c\u673a\u5668\u5b66\u4e60\u662f\u7528\u6570\u636e\u6216\u4ee5\u5f80\u7684\u7ecf\u9a8c\uff0c\u4ee5\u6b64\u4f18\u5316\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u6027\u80fd\u6807\u51c6\u3002\u201d \u4e00\u79cd\u7ecf\u5e38\u5f15\u7528\u7684\u82f1\u6587\u5b9a\u4e49\u662f\uff1aA computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E. \u673a\u5668\u5b66\u4e60\u5df2\u7ecf\u6709\u4e86\u5341\u5206\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4f8b\u5982\uff1a\u6570\u636e\u6316\u6398\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u751f\u7269\u7279\u5f81\u8bc6\u522b\u3001\u641c\u7d22\u5f15\u64ce\u3001\u533b\u5b66\u8bca\u65ad\u3001\u68c0\u6d4b\u4fe1\u7528\u5361\u6b3a\u8bc8\u3001\u8bc1\u5238\u5e02\u573a\u5206\u6790\u3001DNA\u5e8f\u5217\u6d4b\u5e8f\u3001\u8bed\u97f3\u548c\u624b\u5199\u8bc6\u522b\u3001\u6218\u7565\u6e38\u620f\u548c\u673a\u5668\u4eba\u8fd0\u7528\u3002","title":"\u673a\u5668\u5b66\u4e60 \u7814\u7a76\u610f\u4e49"},{"location":"ml/1.MLFoundation/#_3","text":"\u4f8b\u5982\uff1a\u8bc6\u522b\u52a8\u7269\u732b \u6a21\u5f0f\u8bc6\u522b\uff08\u5b98\u65b9\u6807\u51c6\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u5927\u91cf\u7684\u7ecf\u9a8c\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002 \u673a\u5668\u5b66\u4e60\uff08\u6570\u636e\u5b66\u4e60\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u9605\u8bfb\u8fdb\u884c\u5b66\u4e60\uff0c\u89c2\u5bdf\u5b83\u4f1a\u53eb\u3001\u5c0f\u773c\u775b\u3001\u4e24\u53ea\u8033\u6735\u3001\u56db\u6761\u817f\u3001\u4e00\u6761\u5c3e\u5df4\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002 \u6df1\u5ea6\u5b66\u4e60\uff08\u6df1\u5165\u6570\u636e\uff09\uff1a\u4eba\u4eec\u901a\u8fc7\u6df1\u5165\u4e86\u89e3\u5b83\uff0c\u53d1\u73b0\u5b83\u4f1a'\u55b5\u55b5'\u7684\u53eb\u3001\u4e0e\u540c\u7c7b\u7684\u732b\u79d1\u52a8\u7269\u5f88\u7c7b\u4f3c\uff0c\u5f97\u5230\u7ed3\u8bba\uff0c\u4ece\u800c\u5224\u65ad\u5b83\u5c31\u662f\u732b\u3002\uff08\u6df1\u5ea6\u5b66\u4e60\u5e38\u7528\u9886\u57df\uff1a\u8bed\u97f3\u8bc6\u522b\u3001\u56fe\u50cf\u8bc6\u522b\uff09 \u6a21\u5f0f\u8bc6\u522b\uff08pattern recognition\uff09: \u6a21\u5f0f\u8bc6\u522b\u662f\u6700\u53e4\u8001\u7684\uff08\u4f5c\u4e3a\u4e00\u4e2a\u672f\u8bed\u800c\u8a00\uff0c\u53ef\u4ee5\u8bf4\u662f\u5f88\u8fc7\u65f6\u7684\uff09\u3002 \u6211\u4eec\u628a\u73af\u5883\u4e0e\u5ba2\u4f53\u7edf\u79f0\u4e3a\u201c\u6a21\u5f0f\u201d\uff0c\u8bc6\u522b\u662f\u5bf9\u6a21\u5f0f\u7684\u4e00\u79cd\u8ba4\u77e5\uff0c\u662f\u5982\u4f55\u8ba9\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u53bb\u505a\u4e00\u4e9b\u770b\u8d77\u6765\u5f88\u201c\u667a\u80fd\u201d\u7684\u4e8b\u60c5\u3002 \u901a\u8fc7\u878d\u4e8e\u667a\u6167\u548c\u76f4\u89c9\u540e\uff0c\u901a\u8fc7\u6784\u5efa\u7a0b\u5e8f\uff0c\u8bc6\u522b\u4e00\u4e9b\u4e8b\u7269\uff0c\u800c\u4e0d\u662f\u4eba\uff0c\u4f8b\u5982: \u8bc6\u522b\u6570\u5b57\u3002 \u673a\u5668\u5b66\u4e60\uff08machine learning\uff09: \u673a\u5668\u5b66\u4e60\u662f\u6700\u57fa\u7840\u7684\uff08\u5f53\u4e0b\u521d\u521b\u516c\u53f8\u548c\u7814\u7a76\u5b9e\u9a8c\u5ba4\u7684\u70ed\u70b9\u9886\u57df\u4e4b\u4e00\uff09\u3002 \u572890\u5e74\u4ee3\u521d\uff0c\u4eba\u4eec\u5f00\u59cb\u610f\u8bc6\u5230\u4e00\u79cd\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u6784\u5efa\u6a21\u5f0f\u8bc6\u522b\u7b97\u6cd5\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u7528\u6570\u636e\uff08\u53ef\u4ee5\u901a\u8fc7\u5ec9\u4ef7\u52b3\u52a8\u529b\u91c7\u96c6\u83b7\u5f97\uff09\u53bb\u66ff\u6362\u4e13\u5bb6\uff08\u5177\u6709\u5f88\u591a\u56fe\u50cf\u65b9\u9762\u77e5\u8bc6\u7684\u4eba\uff09\u3002 \u201c\u673a\u5668\u5b66\u4e60\u201d\u5f3a\u8c03\u7684\u662f\uff0c\u5728\u7ed9\u8ba1\u7b97\u673a\u7a0b\u5e8f\uff08\u6216\u8005\u673a\u5668\uff09\u8f93\u5165\u4e00\u4e9b\u6570\u636e\u540e\uff0c\u5b83\u5fc5\u987b\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u5b66\u4e60\u8fd9\u4e9b\u6570\u636e\uff0c\u800c\u8fd9\u4e2a\u5b66\u4e60\u7684\u6b65\u9aa4\u662f\u660e\u786e\u7684\u3002 \u673a\u5668\u5b66\u4e60\uff08Machine Learning\uff09\u662f\u4e00\u95e8\u4e13\u95e8\u7814\u7a76\u8ba1\u7b97\u673a\u600e\u6837\u6a21\u62df\u6216\u5b9e\u73b0\u4eba\u7c7b\u7684\u5b66\u4e60\u884c\u4e3a\uff0c\u4ee5\u83b7\u53d6\u65b0\u7684\u77e5\u8bc6\u6216\u6280\u80fd\uff0c\u91cd\u65b0\u7ec4\u7ec7\u5df2\u6709\u7684\u77e5\u8bc6\u7ed3\u6784\u4f7f\u4e4b\u4e0d\u65ad\u6539\u5584\u81ea\u8eab\u6027\u80fd\u7684\u5b66\u79d1\u3002 \u6df1\u5ea6\u5b66\u4e60\uff08deep learning\uff09: \u6df1\u5ea6\u5b66\u4e60\u662f\u975e\u5e38\u5d2d\u65b0\u548c\u6709\u5f71\u54cd\u529b\u7684\u524d\u6cbf\u9886\u57df\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u4f1a\u53bb\u601d\u8003-\u540e\u6df1\u5ea6\u5b66\u4e60\u65f6\u4ee3\u3002 \u6df1\u5ea6\u5b66\u4e60\u662f\u673a\u5668\u5b66\u4e60\u7814\u7a76\u4e2d\u7684\u4e00\u4e2a\u65b0\u7684\u9886\u57df\uff0c\u5176\u52a8\u673a\u5728\u4e8e\u5efa\u7acb\u3001\u6a21\u62df\u4eba\u8111\u8fdb\u884c\u5206\u6790\u5b66\u4e60\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u6a21\u4eff\u4eba\u8111\u7684\u673a\u5236\u6765\u89e3\u91ca\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u6587\u672c\u3002 \u53c2\u8003\u5730\u5740\uff1a \u6df1\u5ea6\u5b66\u4e60 vs \u673a\u5668\u5b66\u4e60 vs \u6a21\u5f0f\u8bc6\u522b \u6df1\u5ea6\u5b66\u4e60 \u767e\u79d1\u8d44\u6599 \u673a\u5668\u5b66\u4e60\u5df2\u5e94\u7528\u4e8e\u591a\u4e2a\u9886\u57df\uff0c\u8fdc\u8fdc\u8d85\u51fa\u5927\u591a\u6570\u4eba\u7684\u60f3\u8c61\uff0c\u6a2a\u8de8\uff1a\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u5de5\u7a0b\u6280\u672f\u548c\u7edf\u8ba1\u5b66\u7b49\u591a\u4e2a\u5b66\u79d1\u3002 \u641c\u7d22\u5f15\u64ce: \u6839\u636e\u4f60\u7684\u641c\u7d22\u70b9\u51fb\uff0c\u4f18\u5316\u4f60\u4e0b\u6b21\u7684\u641c\u7d22\u7ed3\u679c,\u662f\u673a\u5668\u5b66\u4e60\u6765\u5e2e\u52a9\u641c\u7d22\u5f15\u64ce\u5224\u65ad\u54ea\u4e2a\u7ed3\u679c\u66f4\u9002\u5408\u4f60\uff08\u4e5f\u5224\u65ad\u54ea\u4e2a\u5e7f\u544a\u66f4\u9002\u5408\u4f60\uff09\u3002 \u5783\u573e\u90ae\u4ef6: \u4f1a\u81ea\u52a8\u7684\u8fc7\u6ee4\u5783\u573e\u5e7f\u544a\u90ae\u4ef6\u5230\u5783\u573e\u7bb1\u5185\u3002 \u8d85\u5e02\u4f18\u60e0\u5238: \u4f60\u4f1a\u53d1\u73b0\uff0c\u4f60\u5728\u8d2d\u4e70\u5c0f\u5b69\u5b50\u5c3f\u5e03\u7684\u65f6\u5019\uff0c\u552e\u8d27\u5458\u4f1a\u8d60\u9001\u4f60\u4e00\u5f20\u4f18\u60e0\u5238\u53ef\u4ee5\u5151\u63626\u7f50\u5564\u9152\u3002 \u90ae\u5c40\u90ae\u5bc4: \u624b\u5199\u8f6f\u4ef6\u81ea\u52a8\u8bc6\u522b\u5bc4\u9001\u8d3a\u5361\u7684\u5730\u5740\u3002 \u7533\u8bf7\u8d37\u6b3e: \u901a\u8fc7\u4f60\u6700\u8fd1\u7684\u91d1\u878d\u6d3b\u52a8\u4fe1\u606f\u8fdb\u884c\u7efc\u5408\u8bc4\u5b9a\uff0c\u51b3\u5b9a\u4f60\u662f\u5426\u5408\u683c\u3002","title":"\u673a\u5668\u5b66\u4e60 \u573a\u666f"},{"location":"ml/1.MLFoundation/#_4","text":"","title":"\u673a\u5668\u5b66\u4e60 \u7ec4\u6210"},{"location":"ml/1.MLFoundation/#_5","text":"\u5206\u7c7b\uff08classification\uff09\uff1a\u5c06\u5b9e\u4f8b\u6570\u636e\u5212\u5206\u5230\u5408\u9002\u7684\u7c7b\u522b\u4e2d\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a\u5224\u65ad\u7f51\u7ad9\u662f\u5426\u88ab\u9ed1\u5ba2\u5165\u4fb5\uff08\u4e8c\u5206\u7c7b \uff09\uff0c\u624b\u5199\u6570\u5b57\u7684\u81ea\u52a8\u8bc6\u522b\uff08\u591a\u5206\u7c7b\uff09 \u56de\u5f52\uff08regression\uff09\uff1a\u4e3b\u8981\u7528\u4e8e\u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\u3002 \u5e94\u7528\u5b9e\u4f8b\uff1a\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8\u7684\u9884\u6d4b\uff0c\u623f\u5c4b\u4ef7\u683c\u7684\u9884\u6d4b\u7b49\u3002","title":"\u4e3b\u8981\u4efb\u52a1"},{"location":"ml/1.MLFoundation/#supervised-learning","text":"\u5fc5\u987b\u786e\u5b9a\u76ee\u6807\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u4fbf\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u53d1\u73b0\u7279\u5f81\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u6211\u4eec\u77e5\u9053\u6b63\u786e\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u5e76\u4e14\u77e5\u9053\u5728\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u6709\u7740\u4e00\u4e2a\u7279\u5b9a\u7684\u5173\u7cfb\u3002 (\u5305\u62ec\uff1a\u5206\u7c7b\u548c\u56de\u5f52) \u6837\u672c\u96c6\uff1a\u8bad\u7ec3\u6570\u636e + \u6d4b\u8bd5\u6570\u636e \u8bad\u7ec3\u6837\u672c = \u7279\u5f81(feature) + \u76ee\u6807\u53d8\u91cf(label: \u5206\u7c7b-\u79bb\u6563\u503c/\u56de\u5f52-\u8fde\u7eed\u503c) \u7279\u5f81\u901a\u5e38\u662f\u8bad\u7ec3\u6837\u672c\u96c6\u7684\u5217\uff0c\u5b83\u4eec\u662f\u72ec\u7acb\u6d4b\u91cf\u5f97\u5230\u7684\u3002 \u76ee\u6807\u53d8\u91cf: \u76ee\u6807\u53d8\u91cf\u662f\u673a\u5668\u5b66\u4e60\u9884\u6d4b\u7b97\u6cd5\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u5728\u5206\u7c7b\u7b97\u6cd5\u4e2d\u76ee\u6807\u53d8\u91cf\u7684\u7c7b\u578b\u901a\u5e38\u662f\u6807\u79f0\u578b(\u5982\uff1a\u771f\u4e0e\u5047)\uff0c\u800c\u5728\u56de\u5f52\u7b97\u6cd5\u4e2d\u901a\u5e38\u662f\u8fde\u7eed\u578b(\u5982\uff1a1~100)\u3002 \u76d1\u7763\u5b66\u4e60\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a \u504f\u7f6e\u65b9\u5dee\u6743\u8861 \u529f\u80fd\u7684\u590d\u6742\u6027\u548c\u6570\u91cf\u7684\u8bad\u7ec3\u6570\u636e \u8f93\u5165\u7a7a\u95f4\u7684\u7ef4\u6570 \u566a\u58f0\u4e2d\u7684\u8f93\u51fa\u503c \u77e5\u8bc6\u8868\u793a \uff1a \u53ef\u4ee5\u91c7\u7528\u89c4\u5219\u96c6\u7684\u5f62\u5f0f\u3010\u4f8b\u5982\uff1a\u6570\u5b66\u6210\u7ee9\u5927\u4e8e90\u5206\u4e3a\u4f18\u79c0\u3011 \u53ef\u4ee5\u91c7\u7528\u6982\u7387\u5206\u5e03\u7684\u5f62\u5f0f\u3010\u4f8b\u5982\uff1a\u901a\u8fc7\u7edf\u8ba1\u5206\u5e03\u53d1\u73b0\uff0c90%\u7684\u540c\u5b66\u6570\u5b66\u6210\u7ee9\uff0c\u572870\u5206\u4ee5\u4e0b\uff0c\u90a3\u4e48\u5927\u4e8e70\u5206\u5b9a\u4e3a\u4f18\u79c0\u3011 \u53ef\u4ee5\u4f7f\u7528\u8bad\u7ec3\u6837\u672c\u96c6\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3010\u4f8b\u5982\uff1a\u901a\u8fc7\u6837\u672c\u96c6\u5408\uff0c\u6211\u4eec\u8bad\u7ec3\u51fa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff0c\u5f97\u51fa \u5e74\u8f7b\uff0c\u6570\u5b66\u6210\u7ee9\u4e2d\u9ad8\u7b49\uff0c\u8c08\u5410\u4f18\u96c5\uff0c\u6211\u4eec\u8ba4\u4e3a\u662f\u4f18\u79c0\u3011","title":"\u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09"},{"location":"ml/1.MLFoundation/#unsupervised-learing","text":"\u5728\u673a\u5668\u5b66\u4e60\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u95ee\u9898\u662f\uff0c\u5728\u672a\u52a0\u6807\u7b7e\u7684\u6570\u636e\u4e2d\uff0c\u8bd5\u56fe\u627e\u5230\u9690\u85cf\u7684\u7ed3\u6784\u3002\u56e0\u4e3a\u63d0\u4f9b\u7ed9\u5b66\u4e60\u8005\u7684\u5b9e\u4f8b\u662f\u672a\u6807\u8bb0\u7684\uff0c\u56e0\u6b64\u6ca1\u6709\u9519\u8bef\u6216\u62a5\u916c\u4fe1\u53f7\u6765\u8bc4\u4f30\u6f5c\u5728\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u65e0\u76d1\u7763\u5b66\u4e60\u662f\u5bc6\u5207\u76f8\u5173\u7684\u7edf\u8ba1\u6570\u636e\u5bc6\u5ea6\u4f30\u8ba1\u7684\u95ee\u9898\u3002\u7136\u800c\u65e0\u76d1\u7763\u5b66\u4e60\u8fd8\u5305\u62ec\u5bfb\u6c42\uff0c\u603b\u7ed3\u548c\u89e3\u91ca\u6570\u636e\u7684\u4e3b\u8981\u7279\u70b9\u7b49\u8bf8\u591a\u6280\u672f\u3002\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4f7f\u7528\u7684\u8bb8\u591a\u65b9\u6cd5\u662f\u57fa\u4e8e\u7528\u4e8e\u5904\u7406\u6570\u636e\u7684\u6570\u636e\u6316\u6398\u65b9\u6cd5\u3002 \u6570\u636e\u6ca1\u6709\u7c7b\u522b\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u7ed9\u5b9a\u76ee\u6807\u503c\u3002 \u975e\u76d1\u7763\u5b66\u4e60\u5305\u62ec\u7684\u7c7b\u578b\uff1a \u805a\u7c7b\uff1a\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u5c06\u6570\u636e\u96c6\u5206\u6210\u7531\u7c7b\u4f3c\u7684\u5bf9\u8c61\u7ec4\u6210\u591a\u4e2a\u7c7b\u7684\u8fc7\u7a0b\u79f0\u4e3a\u805a\u7c7b\u3002 \u5bc6\u5ea6\u4f30\u8ba1\uff1a\u901a\u8fc7\u6837\u672c\u5206\u5e03\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u6765\u4f30\u8ba1\u4e0e\u5206\u7ec4\u7684\u76f8\u4f3c\u6027\u3002 \u6b64\u5916\uff0c\u65e0\u76d1\u7763\u5b66\u4e60\u8fd8\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u7279\u5f81\u7684\u7ef4\u5ea6\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u6216\u4e09\u7ef4\u56fe\u5f62\u66f4\u52a0\u76f4\u89c2\u5730\u5c55\u793a\u6570\u636e\u4fe1\u606f\u3002","title":"\u975e\u76d1\u7763\u5b66\u4e60\uff08unsupervised learing\uff09"},{"location":"ml/1.MLFoundation/#_6","text":"\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u8bad\u7ec3\u7a0b\u5e8f\u505a\u51fa\u67d0\u4e00\u51b3\u5b9a\u3002\u7a0b\u5e8f\u5728\u67d0\u4e00\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u6240\u6709\u7684\u53ef\u80fd\u884c\u52a8\uff0c\u8bb0\u5f55\u4e0d\u540c\u884c\u52a8\u7684\u7ed3\u679c\u5e76\u8bd5\u7740\u627e\u51fa\u6700\u597d\u7684\u4e00\u6b21\u5c1d\u8bd5\u6765\u505a\u51b3\u5b9a\u3002 \u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u7b97\u6cd5\u7684\u6709\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\u3002","title":"\u5f3a\u5316\u5b66\u4e60"},{"location":"ml/1.MLFoundation/#_7","text":"","title":"\u8bad\u7ec3\u8fc7\u7a0b"},{"location":"ml/1.MLFoundation/#_8","text":"","title":"\u7b97\u6cd5\u6c47\u603b"},{"location":"ml/1.MLFoundation/#_9","text":"\u9009\u62e9\u7b97\u6cd5\u9700\u8981\u8003\u8651\u7684\u4e24\u4e2a\u95ee\u9898 \u7b97\u6cd5\u573a\u666f \u9884\u6d4b\u660e\u5929\u662f\u5426\u4e0b\u96e8\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u5386\u53f2\u7684\u5929\u6c14\u60c5\u51b5\u505a\u9884\u6d4b\uff0c\u6240\u4ee5\u9009\u62e9\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5 \u7ed9\u4e00\u7fa4\u964c\u751f\u7684\u4eba\u8fdb\u884c\u5206\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u8fd9\u4e9b\u4eba\u7684\u7c7b\u522b\u4fe1\u606f\uff0c\u6240\u4ee5\u9009\u62e9\u65e0\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3001\u901a\u8fc7\u4ed6\u4eec\u8eab\u9ad8\u3001\u4f53\u91cd\u7b49\u7279\u5f81\u8fdb\u884c\u5904\u7406\u3002 \u9700\u8981\u6536\u96c6\u6216\u5206\u6790\u7684\u6570\u636e\u662f\u4ec0\u4e48 \u4e3e\u4f8b \u673a\u5668\u5b66\u4e60 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u6536\u96c6\u6837\u672c\u6570\u636e \u51c6\u5907\u6570\u636e: \u6ce8\u610f\u6570\u636e\u7684\u683c\u5f0f \u5206\u6790\u6570\u636e: \u4e3a\u4e86\u786e\u4fdd\u6570\u636e\u96c6\u4e2d\u6ca1\u6709\u5783\u573e\u6570\u636e\uff1b \u5982\u679c\u662f\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u7684\u6570\u636e\u683c\u5f0f\u6216\u53ef\u4fe1\u4efb\u7684\u6570\u636e\u6e90\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u8be5\u6b65\u9aa4\uff1b \u53e6\u5916\u8be5\u6b65\u9aa4\u9700\u8981\u4eba\u5de5\u5e72\u9884\uff0c\u4f1a\u964d\u4f4e\u81ea\u52a8\u5316\u7cfb\u7edf\u7684\u4ef7\u503c\u3002 \u8bad\u7ec3\u7b97\u6cd5: [\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6838\u5fc3]\u5982\u679c\u4f7f\u7528\u65e0\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\uff0c\u7531\u4e8e\u4e0d\u5b58\u5728\u76ee\u6807\u53d8\u91cf\u503c\uff0c\u5219\u53ef\u4ee5\u8df3\u8fc7\u8be5\u6b65\u9aa4 \u6d4b\u8bd5\u7b97\u6cd5: [\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6838\u5fc3]\u8bc4\u4f30\u7b97\u6cd5\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u5c06\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8f6c\u4e3a\u5e94\u7528\u7a0b\u5e8f","title":"\u673a\u5668\u5b66\u4e60 \u4f7f\u7528"},{"location":"ml/1.MLFoundation/#_10","text":"\u5fae\u79ef\u5206 \u7edf\u8ba1\u5b66/\u6982\u7387\u8bba \u7ebf\u6027\u4ee3\u6570","title":"\u673a\u5668\u5b66\u4e60 \u6570\u5b66\u57fa\u7840"},{"location":"ml/1.MLFoundation/#_11","text":"","title":"\u673a\u5668\u5b66\u4e60 \u5de5\u5177"},{"location":"ml/1.MLFoundation/#python","text":"\u53ef\u6267\u884c\u4f2a\u4ee3\u7801 Python\u6bd4\u8f83\u6d41\u884c\uff1a\u4f7f\u7528\u5e7f\u6cdb\u3001\u4ee3\u7801\u8303\u4f8b\u591a\u3001\u4e30\u5bcc\u6a21\u5757\u5e93\uff0c\u5f00\u53d1\u5468\u671f\u77ed Python\u8bed\u8a00\u7684\u7279\u8272\uff1a\u6e05\u6670\u7b80\u7ec3\u3001\u6613\u4e8e\u7406\u89e3 Python\u8bed\u8a00\u7684\u7f3a\u70b9\uff1a\u552f\u4e00\u4e0d\u8db3\u7684\u662f\u6027\u80fd\u95ee\u9898 Python\u76f8\u5173\u7684\u5e93 \u79d1\u5b66\u51fd\u6570\u5e93\uff1a SciPy \u3001 NumPy (\u5e95\u5c42\u8bed\u8a00\uff1aC\u548cFortran) \u7ed8\u56fe\u5de5\u5177\u5e93\uff1a Matplotlib \u6570\u636e\u5206\u6790\u5e93 Pandas","title":"Python\u8bed\u8a00"},{"location":"ml/1.MLFoundation/#_12","text":"Matlab","title":"\u6570\u5b66\u5de5\u5177"},{"location":"ml/1.MLFoundation/#_13","text":"\u6a21\u578b\uff08model\uff09\uff1a\u8ba1\u7b97\u673a\u5c42\u9762\u7684\u8ba4\u77e5 \u5b66\u4e60\u7b97\u6cd5\uff08learning algorithm\uff09\uff0c\u4ece\u6570\u636e\u4e2d\u4ea7\u751f\u6a21\u578b\u7684\u65b9\u6cd5 \u6570\u636e\u96c6\uff08data set\uff09\uff1a\u4e00\u7ec4\u8bb0\u5f55\u7684\u5408\u96c6 \u793a\u4f8b\uff08instance\uff09\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u5bf9\u8c61\u7684\u63cf\u8ff0 \u6837\u672c\uff08sample\uff09\uff1a\u4e5f\u53eb\u793a\u4f8b \u5c5e\u6027\uff08attribute\uff09\uff1a\u5bf9\u8c61\u7684\u67d0\u65b9\u9762\u8868\u73b0\u6216\u7279\u5f81 \u7279\u5f81\uff08feature\uff09\uff1a\u540c\u5c5e\u6027 \u5c5e\u6027\u503c\uff08attribute value\uff09\uff1a\u5c5e\u6027\u4e0a\u7684\u53d6\u503c \u5c5e\u6027\u7a7a\u95f4\uff08attribute space\uff09\uff1a\u5c5e\u6027\u5f20\u6210\u7684\u7a7a\u95f4 \u6837\u672c\u7a7a\u95f4/\u8f93\u5165\u7a7a\u95f4\uff08samplespace\uff09\uff1a\u540c\u5c5e\u6027\u7a7a\u95f4 \u7279\u5f81\u5411\u91cf\uff08feature vector\uff09\uff1a\u5728\u5c5e\u6027\u7a7a\u95f4\u91cc\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5750\u6807\u5411\u91cf\uff0c\u628a\u4e00\u4e2a\u793a\u4f8b\u79f0\u4f5c\u7279\u5f81\u5411\u91cf \u7ef4\u6570\uff08dimensionality\uff09\uff1a\u63cf\u8ff0\u6837\u672c\u53c2\u6570\u7684\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u7a7a\u95f4\u662f\u51e0\u7ef4\u7684\uff09 \u5b66\u4e60\uff08learning\uff09/\u8bad\u7ec3\uff08training\uff09\uff1a\u4ece\u6570\u636e\u4e2d\u5b66\u5f97\u6a21\u578b \u8bad\u7ec3\u6570\u636e\uff08training data\uff09\uff1a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7528\u5230\u7684\u6570\u636e \u8bad\u7ec3\u6837\u672c\uff08training sample\uff09:\u8bad\u7ec3\u7528\u5230\u7684\u6bcf\u4e2a\u6837\u672c \u8bad\u7ec3\u96c6\uff08training set\uff09\uff1a\u8bad\u7ec3\u6837\u672c\u7ec4\u6210\u7684\u96c6\u5408 \u5047\u8bbe\uff08hypothesis\uff09\uff1a\u5b66\u4e60\u6a21\u578b\u5bf9\u5e94\u4e86\u5173\u4e8e\u6570\u636e\u7684\u67d0\u79cd\u6f5c\u5728\u89c4\u5219 \u771f\u76f8\uff08ground-truth\uff09:\u771f\u6b63\u5b58\u5728\u7684\u6f5c\u5728\u89c4\u5f8b \u5b66\u4e60\u5668\uff08learner\uff09\uff1a\u6a21\u578b\u7684\u53e6\u4e00\u79cd\u53eb\u6cd5\uff0c\u628a\u5b66\u4e60\u7b97\u6cd5\u5728\u7ed9\u5b9a\u6570\u636e\u548c\u53c2\u6570\u7a7a\u95f4\u7684\u5b9e\u4f8b\u5316 \u9884\u6d4b\uff08prediction\uff09\uff1a\u5224\u65ad\u4e00\u4e2a\u4e1c\u897f\u7684\u5c5e\u6027 \u6807\u8bb0\uff08label\uff09\uff1a\u5173\u4e8e\u793a\u4f8b\u7684\u7ed3\u679c\u4fe1\u606f\uff0c\u6bd4\u5982\u6211\u662f\u4e00\u4e2a\u201c\u597d\u4eba\u201d\u3002 \u6837\u4f8b\uff08example\uff09\uff1a\u62e5\u6709\u6807\u8bb0\u7684\u793a\u4f8b \u6807\u8bb0\u7a7a\u95f4/\u8f93\u51fa\u7a7a\u95f4\uff08label space\uff09\uff1a\u6240\u6709\u6807\u8bb0\u7684\u96c6\u5408 \u5206\u7c7b\uff08classification\uff09\uff1a\u9884\u6d4b\u65f6\u79bb\u6563\u503c\uff0c\u6bd4\u5982\u628a\u4eba\u5206\u4e3a\u597d\u4eba\u548c\u574f\u4eba\u4e4b\u7c7b\u7684\u5b66\u4e60\u4efb\u52a1 \u56de\u5f52\uff08regression\uff09\uff1a\u9884\u6d4b\u503c\u65f6\u8fde\u7eed\u503c\uff0c\u6bd4\u5982\u4f60\u7684\u597d\u4eba\u7a0b\u5ea6\u8fbe\u5230\u4e860.9\uff0c0.6\u4e4b\u7c7b\u7684 \u4e8c\u5206\u7c7b\uff08binary classification\uff09\uff1a\u53ea\u6d89\u53ca\u4e24\u4e2a\u7c7b\u522b\u7684\u5206\u7c7b\u4efb\u52a1 \u6b63\u7c7b\uff08positive class\uff09\uff1a\u4e8c\u5206\u7c7b\u91cc\u7684\u4e00\u4e2a \u53cd\u7c7b\uff08negative class\uff09\uff1a\u4e8c\u5206\u7c7b\u91cc\u7684\u53e6\u5916\u4e00\u4e2a \u591a\u5206\u7c7b\uff08multi-class classification\uff09\uff1a\u6d89\u53ca\u591a\u4e2a\u7c7b\u522b\u7684\u5206\u7c7b \u6d4b\u8bd5\uff08testing\uff09\uff1a\u5b66\u4e60\u5230\u6a21\u578b\u4e4b\u540e\u5bf9\u6837\u672c\u8fdb\u884c\u9884\u6d4b\u7684\u8fc7\u7a0b \u6d4b\u8bd5\u6837\u672c\uff08testing sample\uff09\uff1a\u88ab\u9884\u6d4b\u7684\u6837\u672c \u805a\u7c7b\uff08clustering\uff09\uff1a\u628a\u8bad\u7ec3\u96c6\u4e2d\u7684\u5bf9\u8c61\u5206\u4e3a\u82e5\u5e72\u7ec4 \u7c07\uff08cluster\uff09\uff1a\u6bcf\u4e00\u4e2a\u7ec4\u53eb\u7c07 \u76d1\u7763\u5b66\u4e60\uff08supervised learning\uff09\uff1a\u5178\u8303--\u5206\u7c7b\u548c\u56de\u5f52 \u65e0\u76d1\u7763\u5b66\u4e60\uff08unsupervised learning\uff09\uff1a\u5178\u8303--\u805a\u7c7b \u672a\u89c1\u793a\u4f8b\uff08unseen instance\uff09\uff1a\u201c\u65b0\u6837\u672c\u201c\uff0c\u6ca1\u8bad\u7ec3\u8fc7\u7684\u6837\u672c \u6cdb\u5316\uff08generalization\uff09\u80fd\u529b\uff1a\u5b66\u5f97\u7684\u6a21\u578b\u9002\u7528\u4e8e\u65b0\u6837\u672c\u7684\u80fd\u529b \u5206\u5e03\uff08distribution\uff09\uff1a\u6837\u672c\u7a7a\u95f4\u7684\u5168\u4f53\u6837\u672c\u670d\u4ece\u7684\u4e00\u79cd\u89c4\u5f8b \u72ec\u7acb\u540c\u5206\u5e03\uff08independent and identically distributed\uff0c\u7b80\u79f0i,i,d.\uff09:\u83b7\u5f97\u7684\u6bcf\u4e2a\u6837\u672c\u90fd\u662f\u72ec\u7acb\u5730\u4ece\u8fd9\u4e2a\u5206\u5e03\u4e0a\u91c7\u6837\u83b7\u5f97\u7684\u3002","title":"\u9644\uff1a\u673a\u5668\u5b66\u4e60\u4e13\u4e1a\u672f\u8bed"},{"location":"ml/1.MLFoundation/#_14","text":"","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840\u8865\u5145"},{"location":"ml/1.MLFoundation/#_15","text":"\u8bad\u7ec3\u96c6\uff08Training set\uff09 \u2014\u2014 \u5b66\u4e60\u6837\u672c\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u5339\u914d\u4e00\u4e9b\u53c2\u6570\u6765\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\uff0c\u4e3b\u8981\u7528\u6765\u8bad\u7ec3\u6a21\u578b\u3002\u7c7b\u6bd4\u8003\u7814\u524d\u505a\u7684\u89e3\u9898\u5927\u5168\u3002 \u9a8c\u8bc1\u96c6\uff08validation set\uff09 \u2014\u2014 \u5bf9\u5b66\u4e60\u51fa\u6765\u7684\u6a21\u578b\uff0c\u8c03\u6574\u6a21\u578b\u7684\u53c2\u6570\uff0c\u5982\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u9009\u62e9\u9690\u85cf\u5355\u5143\u6570\u3002\u9a8c\u8bc1\u96c6\u8fd8\u7528\u6765\u786e\u5b9a\u7f51\u7edc\u7ed3\u6784\u6216\u8005\u63a7\u5236\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u7684\u53c2\u6570\u3002\u7c7b\u6bd4 \u8003\u7814\u4e4b\u524d\u505a\u7684\u6a21\u62df\u8003\u8bd5\u3002 \u6d4b\u8bd5\u96c6\uff08Test set\uff09 \u2014\u2014 \u6d4b\u8bd5\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u5206\u8fa8\u80fd\u529b\u3002\u7c7b\u6bd4 \u8003\u7814\u3002\u8fd9\u6b21\u771f\u7684\u662f\u4e00\u8003\u5b9a\u7ec8\u8eab\u3002","title":"\u6570\u636e\u96c6\u7684\u5212\u5206"},{"location":"ml/1.MLFoundation/#_16","text":"\u6b20\u62df\u5408\uff08Underfitting\uff09\uff1a\u6a21\u578b\u6ca1\u6709\u5f88\u597d\u5730\u6355\u6349\u5230\u6570\u636e\u7279\u5f81\uff0c\u4e0d\u80fd\u591f\u5f88\u597d\u5730\u62df\u5408\u6570\u636e\uff0c\u5bf9\u8bad\u7ec3\u6837\u672c\u7684\u4e00\u822c\u6027\u8d28\u5c1a\u672a\u5b66\u597d\u3002\u7c7b\u6bd4\uff0c\u5149\u770b\u4e66\u4e0d\u505a\u9898\u89c9\u5f97\u81ea\u5df1\u4ec0\u4e48\u90fd\u4f1a\u4e86\uff0c\u4e0a\u4e86\u8003\u573a\u624d\u77e5\u9053\u81ea\u5df1\u5565\u90fd\u4e0d\u4f1a\u3002 \u8fc7\u62df\u5408\uff08Overfitting\uff09\uff1a\u6a21\u578b\u628a\u8bad\u7ec3\u6837\u672c\u5b66\u4e60\u201c\u592a\u597d\u4e86\u201d\uff0c\u53ef\u80fd\u628a\u4e00\u4e9b\u8bad\u7ec3\u6837\u672c\u81ea\u8eab\u7684\u7279\u6027\u5f53\u505a\u4e86\u6240\u6709\u6f5c\u5728\u6837\u672c\u90fd\u6709\u7684\u4e00\u822c\u6027\u8d28\uff0c\u5bfc\u81f4\u6cdb\u5316\u80fd\u529b\u4e0b\u964d\u3002\u7c7b\u6bd4\uff0c\u505a\u8bfe\u540e\u9898\u5168\u90fd\u505a\u5bf9\u4e86\uff0c\u8d85\u7eb2\u9898\u4e5f\u90fd\u8ba4\u4e3a\u662f\u8003\u8bd5\u5fc5\u8003\u9898\u76ee\uff0c\u4e0a\u4e86\u8003\u573a\u8fd8\u662f\u5565\u90fd\u4e0d\u4f1a\u3002 \u901a\u4fd7\u6765\u8bf4\uff0c\u6b20\u62df\u5408\u548c\u8fc7\u62df\u5408\u90fd\u53ef\u4ee5\u7528\u4e00\u53e5\u8bdd\u6765\u8bf4\uff0c\u6b20\u62df\u5408\u5c31\u662f\uff1a\u201c\u4f60\u592a\u5929\u771f\u4e86\uff01\u201d\uff0c\u8fc7\u62df\u5408\u5c31\u662f\uff1a\u201c\u4f60\u60f3\u592a\u591a\u4e86\uff01\u201d\u3002","title":"\u6a21\u578b\u62df\u5408\u7a0b\u5ea6"},{"location":"ml/1.MLFoundation/#_17","text":"\u6b63\u786e\u7387 \u2014\u2014 \u63d0\u53d6\u51fa\u7684\u6b63\u786e\u4fe1\u606f\u6761\u6570 / \u63d0\u53d6\u51fa\u7684\u4fe1\u606f\u6761\u6570 \u53ec\u56de\u7387 \u2014\u2014 \u63d0\u53d6\u51fa\u7684\u6b63\u786e\u4fe1\u606f\u6761\u6570 / \u6837\u672c\u4e2d\u7684\u4fe1\u606f\u6761\u6570 F \u503c \u2014\u2014 \u6b63\u786e\u7387 * \u53ec\u56de\u7387 * 2 / \uff08\u6b63\u786e\u7387 + \u53ec\u56de\u7387\uff09\uff08F\u503c\u5373\u4e3a\u6b63\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff09 \u4e3e\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a \u4e3e\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a \u67d0\u6c60\u5858\u6709 1400 \u6761\u9ca4\u9c7c\uff0c300 \u53ea\u867e\uff0c300 \u53ea\u4e4c\u9f9f\u3002\u73b0\u5728\u4ee5\u6355\u9ca4\u9c7c\u4e3a\u76ee\u7684\u3002\u6492\u4e86\u4e00\u5f20\u7f51\uff0c\u902e\u4f4f\u4e86 700 \u6761\u9ca4\u9c7c\uff0c200 \u53ea \u867e\uff0c 100 \u53ea\u4e4c\u9f9f\u3002\u90a3\u4e48\u8fd9\u4e9b\u6307\u6807\u5206\u522b\u5982\u4e0b\uff1a \u6b63\u786e\u7387 = 700 / (700 + 200 + 100) = 70% \u53ec\u56de\u7387 = 700 / 1400 = 50% F \u503c = 70% * 50% * 2 / (70% + 50%) = 58.3%","title":"\u5e38\u89c1\u7684\u6a21\u578b\u6307\u6807"},{"location":"ml/1.MLFoundation/#_18","text":"\u5206\u7c7b\u95ee\u9898 \u2014\u2014 \u8bf4\u767d\u4e86\u5c31\u662f\u5c06\u4e00\u4e9b\u672a\u77e5\u7c7b\u522b\u7684\u6570\u636e\u5206\u5230\u73b0\u5728\u5df2\u77e5\u7684\u7c7b\u522b\u4e2d\u53bb\u3002\u6bd4\u5982\uff0c\u6839\u636e\u4f60\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5224\u65ad\u4f60\u662f\u9ad8\u5bcc\u5e05\uff0c\u8fd8\u662f\u7a77\u5c4c\u4e1d\u3002\u8bc4\u5224\u5206\u7c7b\u6548\u679c\u597d\u574f\u7684\u4e09\u4e2a\u6307\u6807\u5c31\u662f\u4e0a\u9762\u4ecb\u7ecd\u7684\u4e09\u4e2a\u6307\u6807\uff1a\u6b63\u786e\u7387\uff0c\u53ec\u56de\u7387\uff0cF\u503c\u3002 \u56de\u5f52\u95ee\u9898 \u2014\u2014 \u5bf9\u6570\u503c\u578b\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u8fdb\u884c\u9884\u6d4b\u548c\u5efa\u6a21\u7684\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3002\u56de\u5f52\u5f80\u5f80\u4f1a\u901a\u8fc7\u8ba1\u7b97 \u8bef\u5dee\uff08Error\uff09\u6765\u786e\u5b9a\u6a21\u578b\u7684\u7cbe\u786e\u6027\u3002 \u805a\u7c7b\u95ee\u9898 \u2014\u2014 \u805a\u7c7b\u662f\u4e00\u79cd\u65e0\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u8be5\u7b97\u6cd5\u57fa\u4e8e\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u5bfb\u627e\u89c2\u5bdf\u6837\u672c\u7684\u81ea\u7136\u65cf\u7fa4\uff08\u5373\u96c6\u7fa4\uff09\u3002\u805a\u7c7b\u95ee\u9898\u7684\u6807\u51c6\u4e00\u822c\u57fa\u4e8e\u8ddd\u79bb\uff1a\u7c07\u5185\u8ddd\u79bb\uff08Intra-cluster Distance\uff09 \u548c \u7c07\u95f4\u8ddd\u79bb\uff08Inter-cluster Distance\uff09 \u3002\u7c07\u5185\u8ddd\u79bb\u662f\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u7c07\u5185\u7684\u5143\u7d20\u8d8a\u76f8\u4f3c\u8d8a\u597d\uff1b\u800c\u7c07\u95f4\u8ddd\u79bb\u8d8a\u5927\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u7c07\u95f4\uff08\u4e0d\u540c\u7c07\uff09\u5143\u7d20\u8d8a\u4e0d\u76f8\u540c\u8d8a\u597d\u3002\u4e00\u822c\u7684\uff0c\u8861\u91cf\u805a\u7c7b\u95ee\u9898\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u5408\u7c07\u5185\u8ddd\u79bb\u548c\u7c07\u95f4\u8ddd\u79bb\u7684\u516c\u5f0f\u3002 \u4e0b\u9762\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u6bd4\u8f83\u76f4\u89c2\u5730\u5c55\u793a\u51fa\u6765\uff1a","title":"\u6a21\u578b"},{"location":"ml/1.MLFoundation/#_19","text":"\u7279\u5f81\u9009\u62e9 \u2014\u2014 \u4e5f\u53eb\u7279\u5f81\u5b50\u96c6\u9009\u62e9\uff08FSS\uff0cFeature Subset Selection\uff09\u3002\u662f\u6307\u4ece\u5df2\u6709\u7684 M \u4e2a\u7279\u5f81\uff08Feature\uff09\u4e2d\u9009\u62e9 N \u4e2a\u7279\u5f81\u4f7f\u5f97\u7cfb\u7edf\u7684\u7279\u5b9a\u6307\u6807\u6700\u4f18\u5316\uff0c\u662f\u4ece\u539f\u59cb\u7279\u5f81\u4e2d\u9009\u62e9\u51fa\u4e00\u4e9b\u6700\u6709\u6548\u7279\u5f81\u4ee5\u964d\u4f4e\u6570\u636e\u96c6\u7ef4\u5ea6\u7684\u8fc7\u7a0b\uff0c\u662f\u63d0\u9ad8\u7b97\u6cd5\u6027\u80fd\u7684\u4e00\u4e2a\u91cd\u8981\u624b\u6bb5\uff0c\u4e5f\u662f\u6a21\u5f0f\u8bc6\u522b\u4e2d\u5173\u952e\u7684\u6570\u636e\u9884\u5904\u7406\u6b65\u9aa4\u3002 \u7279\u5f81\u63d0\u53d6 \u2014\u2014 \u7279\u5f81\u63d0\u53d6\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u56fe\u50cf\u5904\u7406\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u5b83\u6307\u7684\u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u63d0\u53d6\u56fe\u50cf\u4fe1\u606f\uff0c\u51b3\u5b9a\u6bcf\u4e2a\u56fe\u50cf\u7684\u70b9\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u56fe\u50cf\u7279\u5f81\u3002\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c\u662f\u628a\u56fe\u50cf\u4e0a\u7684\u70b9\u5206\u4e3a\u4e0d\u540c\u7684\u5b50\u96c6\uff0c\u8fd9\u4e9b\u5b50\u96c6\u5f80\u5f80\u5c5e\u4e8e\u5b64\u7acb\u7684\u70b9\uff0c\u8fde\u7eed\u7684\u66f2\u7ebf\u6216\u8005\u8fde\u7eed\u7684\u533a\u57df\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7279\u5f81\u5de5\u7a0b\u7684\u56fe\uff1a","title":"\u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u4e9b\u5c0f\u4e1c\u897f"},{"location":"ml/1.MLFoundation/#_20","text":"Learning rate \u2014\u2014 \u5b66\u4e60\u7387\uff0c\u901a\u4fd7\u5730\u7406\u89e3\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6b65\u957f\uff0c\u6b65\u5b50\u5927\u4e86\uff0c\u5f88\u5bb9\u6613\u9519\u8fc7\u6700\u4f73\u7ed3\u679c\u3002\u5c31\u662f\u672c\u6765\u76ee\u6807\u5c3d\u5728\u54ab\u5c3a\uff0c\u53ef\u662f\u56e0\u4e3a\u6211\u8fc8\u7684\u6b65\u5b50\u5f88\u5927\uff0c\u5374\u4e00\u4e0b\u5b50\u8d70\u8fc7\u4e86\u3002\u6b65\u5b50\u5c0f\u4e86\u5462\uff0c\u5c31\u662f\u540c\u6837\u7684\u8ddd\u79bb\uff0c\u6211\u5374\u8981\u8d70\u5f88\u591a\u5f88\u591a\u6b65\uff0c\u8fd9\u6837\u5bfc\u81f4\u8bad\u7ec3\u7684\u8017\u65f6\u8d39\u529b\u8fd8\u4e0d\u8ba8\u597d\u3002 \u4e00\u4e2a\u603b\u7ed3\u7684\u77e5\u8bc6\u70b9\u5f88\u68d2\u7684\u94fe\u63a5 \uff1ahttps://zhuanlan.zhihu.com/p/25197792 \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u5176\u4ed6"},{"location":"ml/10.KMeans/","text":"\u7b2c 10 \u7ae0 K-Means\uff08K-\u5747\u503c\uff09\u805a\u7c7b\u7b97\u6cd5 \u805a\u7c7b \u805a\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u5e9e\u6742\u6570\u636e\u96c6\u4e2d\u5177\u6709\u76f8\u4f3c\u7279\u5f81\u7684\u6570\u636e\u81ea\u52a8\u5f52\u7c7b\u5230\u4e00\u8d77\uff0c\u79f0\u4e3a\u4e00\u4e2a\u7c07\uff0c\u7c07\u5185\u7684\u5bf9\u8c61\u8d8a\u76f8\u4f3c\uff0c\u805a\u7c7b\u7684\u6548\u679c\u8d8a\u597d\u3002\u5b83\u662f\u4e00\u79cd\u65e0\u76d1\u7763\u7684\u5b66\u4e60(Unsupervised Learning)\u65b9\u6cd5,\u4e0d\u9700\u8981\u9884\u5148\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u96c6\u3002\u805a\u7c7b\u4e0e\u5206\u7c7b\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u5206\u7c7b\u7684\u76ee\u6807\u4e8b\u5148\u5df2\u77e5\uff0c\u4f8b\u5982\u732b\u72d7\u8bc6\u522b\uff0c\u4f60\u5728\u5206\u7c7b\u4e4b\u524d\u5df2\u7ecf\u9884\u5148\u77e5\u9053\u8981\u5c06\u5b83\u5206\u4e3a\u732b\u3001\u72d7\u4e24\u4e2a\u79cd\u7c7b\uff1b\u800c\u5728\u4f60\u805a\u7c7b\u4e4b\u524d\uff0c\u4f60\u5bf9\u4f60\u7684\u76ee\u6807\u662f\u672a\u77e5\u7684\uff0c\u540c\u6837\u4ee5\u52a8\u7269\u4e3a\u4f8b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u52a8\u7269\u96c6\u6765\u8bf4\uff0c\u4f60\u5e76\u4e0d\u6e05\u695a\u8fd9\u4e2a\u6570\u636e\u96c6\u5185\u90e8\u6709\u591a\u5c11\u79cd\u7c7b\u7684\u52a8\u7269\uff0c\u4f60\u80fd\u505a\u7684\u53ea\u662f\u5229\u7528\u805a\u7c7b\u65b9\u6cd5\u5c06\u5b83\u81ea\u52a8\u6309\u7167\u7279\u5f81\u5206\u4e3a\u591a\u7c7b\uff0c\u7136\u540e\u4eba\u4e3a\u7ed9\u51fa\u8fd9\u4e2a\u805a\u7c7b\u7ed3\u679c\u7684\u5b9a\u4e49\uff08\u5373\u7c07\u8bc6\u522b\uff09\u3002\u4f8b\u5982\uff0c\u4f60\u5c06\u4e00\u4e2a\u52a8\u7269\u96c6\u5206\u4e3a\u4e86\u4e09\u7c07\uff08\u7c7b\uff09\uff0c\u7136\u540e\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u7279\u5f81\uff0c\u4f60\u4e3a\u6bcf\u4e00\u4e2a\u7c07\u8d77\u4e00\u4e2a\u540d\u5b57\uff0c\u5982\u5927\u8c61\u3001\u72d7\u3001\u732b\u7b49\uff0c\u8fd9\u5c31\u662f\u805a\u7c7b\u7684\u57fa\u672c\u601d\u60f3\u3002 \u81f3\u4e8e\u201c\u76f8\u4f3c\u201d\u8fd9\u4e00\u6982\u5ff5\uff0c\u662f\u5229\u7528\u8ddd\u79bb\u8fd9\u4e2a\u8bc4\u4ef7\u6807\u51c6\u6765\u8861\u91cf\u7684\uff0c\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u5bf9\u8c61\u4e0e\u5bf9\u8c61\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fdc\u8fd1\u6765\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u7c7b\u522b\uff0c\u5373\u662f\u5426\u662f\u540c\u4e00\u4e2a\u7c07\u3002\u81f3\u4e8e\u8ddd\u79bb\u5982\u4f55\u8ba1\u7b97\uff0c\u79d1\u5b66\u5bb6\u4eec\u63d0\u51fa\u4e86\u8bb8\u591a\u79cd\u8ddd\u79bb\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5176\u4e2d\u6b27\u5f0f\u8ddd\u79bb\u662f\u6700\u4e3a\u7b80\u5355\u548c\u5e38\u7528\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u6027\u8ddd\u79bb\u7b49\u3002 \u6b27\u5f0f\u8ddd\u79bb\uff0c\u6211\u60f3\u5927\u5bb6\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff0c\u4f46\u4e3a\u514d\u6709\u4e00\u4e9b\u57fa\u7840\u8584\u5f31\u7684\u540c\u5b66\uff0c\u5728\u6b64\u518d\u8bf4\u660e\u4e00\u4e0b\uff0c\u5b83\u7684\u5b9a\u4e49\u4e3a\uff1a \u5bf9\u4e8ex\u70b9(\u5750\u6807\u4e3a(x1,x2,x3,...,xn))\u548c y\u70b9\uff08\u5750\u6807\u4e3a(y1,y2,y3,...,yn)\uff09\uff0c\u4e24\u8005\u7684\u6b27\u5f0f\u8ddd\u79bb\u4e3a \u5728\u4e8c\u7ef4\u5e73\u9762\uff0c\u5b83\u5c31\u662f\u6211\u4eec\u521d\u4e2d\u65f6\u5c31\u5b66\u8fc7\u7684\u4e24\u70b9\u8ddd\u79bb\u516c\u5f0f K-Means \u7b97\u6cd5 K-Means \u662f\u53d1\u73b0\u7ed9\u5b9a\u6570\u636e\u96c6\u7684 K \u4e2a\u7c07\u7684\u805a\u7c7b\u7b97\u6cd5, \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a K-\u5747\u503c \u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u53d1\u73b0 K \u4e2a\u4e0d\u540c\u7684\u7c07, \u4e14\u6bcf\u4e2a\u7c07\u7684\u4e2d\u5fc3\u91c7\u7528\u7c07\u4e2d\u6240\u542b\u503c\u7684\u5747\u503c\u8ba1\u7b97\u800c\u6210. \u7c07\u4e2a\u6570 K \u662f\u7528\u6237\u6307\u5b9a\u7684, \u6bcf\u4e00\u4e2a\u7c07\u901a\u8fc7\u5176\u8d28\u5fc3\uff08centroid\uff09, \u5373\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u4e2d\u5fc3\u6765\u63cf\u8ff0. \u805a\u7c7b\u4e0e\u5206\u7c7b\u7b97\u6cd5\u7684\u6700\u5927\u533a\u522b\u5728\u4e8e, \u5206\u7c7b\u7684\u76ee\u6807\u7c7b\u522b\u5df2\u77e5, \u800c\u805a\u7c7b\u7684\u76ee\u6807\u7c7b\u522b\u662f\u672a\u77e5\u7684. \u4f18\u70b9 : \u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u65e0\u987b\u51c6\u5907\u8bad\u7ec3\u96c6 \u539f\u7406\u7b80\u5355\uff0c\u5b9e\u73b0\u8d77\u6765\u8f83\u4e3a\u5bb9\u6613 * \u7ed3\u679c\u53ef\u89e3\u91ca\u6027\u8f83\u597d \u7f3a\u70b9 : \u9700\u624b\u52a8\u8bbe\u7f6ek\u503c \u3002 \u5728\u7b97\u6cd5\u5f00\u59cb\u9884\u6d4b\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u8bbe\u7f6ek\u503c\uff0c\u5373\u4f30\u8ba1\u6570\u636e\u5927\u6982\u7684\u7c7b\u522b\u4e2a\u6570\uff0c\u4e0d\u5408\u7406\u7684k\u503c\u4f1a\u4f7f\u7ed3\u679c\u7f3a\u4e4f\u89e3\u91ca\u6027 \u53ef\u80fd\u6536\u655b\u5230\u5c40\u90e8\u6700\u5c0f\u503c, \u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u6536\u655b\u8f83\u6162 * \u5bf9\u4e8e\u5f02\u5e38\u70b9\u3001\u79bb\u7fa4\u70b9\u654f\u611f \u4f7f\u7528\u6570\u636e\u7c7b\u578b : \u6570\u503c\u578b\u6570\u636e K-Means \u573a\u666f kmeans\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u7528\u4e8e\u6570\u636e\u96c6\u5185\u79cd\u7c7b\u5c5e\u6027\u4e0d\u660e\u6670\uff0c\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u6570\u636e\u6316\u6398\u51fa\u6216\u81ea\u52a8\u5f52\u7c7b\u51fa\u6709\u76f8\u4f3c\u7279\u70b9\u7684\u5bf9\u8c61\u7684\u573a\u666f\u3002\u5176\u5546\u4e1a\u754c\u7684\u5e94\u7528\u573a\u666f\u4e00\u822c\u4e3a\u6316\u6398\u51fa\u5177\u6709\u76f8\u4f3c\u7279\u70b9\u7684\u6f5c\u5728\u5ba2\u6237\u7fa4\u4f53\u4ee5\u4fbf\u516c\u53f8\u80fd\u591f\u91cd\u70b9\u7814\u7a76\u3001\u5bf9\u75c7\u4e0b\u836f\u3002 \u4f8b\u5982\uff0c\u57282000\u5e74\u548c2004\u5e74\u7684\u7f8e\u56fd\u603b\u7edf\u5927\u9009\u4e2d\uff0c\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u6bd4\u8f83\u63a5\u8fd1\u6216\u8005\u8bf4\u975e\u5e38\u63a5\u8fd1\u3002\u4efb\u4e00\u5019\u9009\u4eba\u5f97\u5230\u7684\u666e\u9009\u7968\u6570\u7684\u6700\u5927\u767e\u5206\u6bd4\u4e3a50.7%\u800c\u6700\u5c0f\u767e\u5206\u6bd4\u4e3a47.9% \u5982\u679c1%\u7684\u9009\u6c11\u5c06\u624b\u4e2d\u7684\u9009\u7968\u6295\u5411\u53e6\u5916\u7684\u5019\u9009\u4eba\uff0c\u90a3\u4e48\u9009\u4e3e\u7ed3\u679c\u5c31\u4f1a\u622a\u7136\u4e0d\u540c\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u59a5\u5584\u52a0\u4ee5\u5f15\u5bfc\u4e0e\u5438\u5f15\uff0c\u5c11\u90e8\u5206\u9009\u6c11\u5c31\u4f1a\u8f6c\u6362\u7acb\u573a\u3002\u5c3d\u7ba1\u8fd9\u7c7b\u9009\u4e3e\u8005\u5360\u7684\u6bd4\u4f8b\u8f83\u4f4e\uff0c\u4f46\u5f53\u5019\u9009\u4eba\u7684\u9009\u7968\u63a5\u8fd1\u65f6\uff0c\u8fd9\u4e9b\u4eba\u7684\u7acb\u573a\u65e0\u7591\u4f1a\u5bf9\u9009\u4e3e\u7ed3\u679c\u4ea7\u751f\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002\u5982\u4f55\u627e\u51fa\u8fd9\u7c7b\u9009\u6c11\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u6709\u9650\u7684\u9884\u7b97\u4e0b\u91c7\u53d6\u63aa\u65bd\u6765\u5438\u5f15\u4ed6\u4eec\uff1f \u7b54\u6848\u5c31\u662f\u805a\u7c7b\uff08Clustering)\u3002 \u90a3\u4e48\uff0c\u5177\u4f53\u5982\u4f55\u5b9e\u65bd\u5462\uff1f\u9996\u5148\uff0c\u6536\u96c6\u7528\u6237\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u540c\u65f6\u6536\u96c6\u7528\u6237\u6ee1\u610f\u6216\u4e0d\u6ee1\u610f\u7684\u4fe1\u606f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4efb\u4f55\u5bf9\u7528\u6237\u91cd\u8981\u7684\u5185\u5bb9\u90fd\u53ef\u80fd\u5f71\u54cd\u7528\u6237\u7684\u6295\u7968\u7ed3\u679c\u3002\u7136\u540e\uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u8f93\u5165\u5230\u67d0\u4e2a\u805a\u7c7b\u7b97\u6cd5\u4e2d\u3002\u63a5\u7740\uff0c\u5bf9\u805a\u7c7b\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7c07\uff08\u6700\u597d\u9009\u62e9\u6700\u5927\u7c07 \uff09\uff0c \u7cbe\u5fc3\u6784\u9020\u80fd\u591f\u5438\u5f15\u8be5\u7c07\u9009\u6c11\u7684\u6d88\u606f\u3002\u6700\u540e\uff0c \u5f00\u5c55\u7ade\u9009\u6d3b\u52a8\u5e76\u89c2\u5bdf\u4e0a\u8ff0\u505a\u6cd5\u662f\u5426\u6709\u6548\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u4ea7\u54c1\u90e8\u95e8\u7684\u5e02\u573a\u8c03\u7814\u4e86\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u4e86\u89e3\u81ea\u5df1\u7684\u7528\u6237\uff0c\u4ea7\u54c1\u90e8\u95e8\u53ef\u4ee5\u91c7\u7528\u805a\u7c7b\u7684\u65b9\u6cd5\u5f97\u5230\u4e0d\u540c\u7279\u5f81\u7684\u7528\u6237\u7fa4\u4f53\uff0c\u7136\u540e\u9488\u5bf9\u4e0d\u540c\u7684\u7528\u6237\u7fa4\u4f53\u53ef\u4ee5\u5bf9\u75c7\u4e0b\u836f\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u66f4\u52a0\u7cbe\u51c6\u6709\u6548\u7684\u670d\u52a1\u3002 K-Means \u672f\u8bed \u7c07: \u6240\u6709\u6570\u636e\u7684\u70b9\u96c6\u5408\uff0c\u7c07\u4e2d\u7684\u5bf9\u8c61\u662f\u76f8\u4f3c\u7684\u3002 \u8d28\u5fc3: \u7c07\u4e2d\u6240\u6709\u70b9\u7684\u4e2d\u5fc3\uff08\u8ba1\u7b97\u6240\u6709\u70b9\u7684\u5747\u503c\u800c\u6765\uff09. SSE: Sum of Sqared Error\uff08\u8bef\u5dee\u5e73\u65b9\u548c\uff09, \u5b83\u88ab\u7528\u6765\u8bc4\u4f30\u6a21\u578b\u7684\u597d\u574f\uff0cSSE \u503c\u8d8a\u5c0f\uff0c\u8868\u793a\u8d8a\u63a5\u8fd1\u5b83\u4eec\u7684\u8d28\u5fc3. \u805a\u7c7b\u6548\u679c\u8d8a\u597d\u3002\u7531\u4e8e\u5bf9\u8bef\u5dee\u53d6\u4e86\u5e73\u65b9\uff0c\u56e0\u6b64\u66f4\u52a0\u6ce8\u91cd\u90a3\u4e9b\u8fdc\u79bb\u4e2d\u5fc3\u7684\u70b9\uff08\u4e00\u822c\u4e3a\u8fb9\u754c\u70b9\u6216\u79bb\u7fa4\u70b9\uff09\u3002\u8be6\u60c5\u89c1kmeans\u7684\u8bc4\u4ef7\u6807\u51c6\u3002 \u6709\u5173 \u7c07 \u548c \u8d28\u5fc3 \u672f\u8bed\u66f4\u5f62\u8c61\u7684\u4ecb\u7ecd, \u8bf7\u53c2\u8003\u4e0b\u56fe: K-Means \u5de5\u4f5c\u6d41\u7a0b \u9996\u5148, \u968f\u673a\u786e\u5b9a K \u4e2a\u521d\u59cb\u70b9\u4f5c\u4e3a\u8d28\u5fc3\uff08 \u4e0d\u5fc5\u662f\u6570\u636e\u4e2d\u7684\u70b9 \uff09\u3002 \u7136\u540e\u5c06\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5206\u914d\u5230\u4e00\u4e2a\u7c07\u4e2d, \u5177\u4f53\u6765\u8bb2, \u5c31\u662f\u4e3a\u6bcf\u4e2a\u70b9\u627e\u5230\u8ddd\u5176\u6700\u8fd1\u7684\u8d28\u5fc3, \u5e76\u5c06\u5176\u5206\u914d\u8be5\u8d28\u5fc3\u6240\u5bf9\u5e94\u7684\u7c07. \u8fd9\u4e00\u6b65\u5b8c\u6210\u4e4b\u540e, \u6bcf\u4e2a\u7c07\u7684\u8d28\u5fc3\u66f4\u65b0\u4e3a\u8be5\u7c07\u6240\u6709\u70b9\u7684\u5e73\u5747\u503c. 3.\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u76f4\u5230\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u8ddd\u79bb\u5b83\u6240\u5bf9\u5e94\u7684\u8d28\u5fc3\u6700\u8fd1\u65f6\u7ed3\u675f\u3002 \u4e0a\u8ff0\u8fc7\u7a0b\u7684 \u4f2a\u4ee3\u7801 \u5982\u4e0b: \u521b\u5efa k \u4e2a\u70b9\u4f5c\u4e3a\u8d77\u59cb\u8d28\u5fc3\uff08\u901a\u5e38\u662f\u968f\u673a\u9009\u62e9\uff09 \u5f53\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u53d1\u751f\u6539\u53d8\u65f6\uff08\u4e0d\u6539\u53d8\u65f6\u7b97\u6cd5\u7ed3\u675f\uff09 \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u70b9 \u5bf9\u6bcf\u4e2a\u8d28\u5fc3 \u8ba1\u7b97\u8d28\u5fc3\u4e0e\u6570\u636e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb \u5c06\u6570\u636e\u70b9\u5206\u914d\u5230\u8ddd\u5176\u6700\u8fd1\u7684\u7c07 \u5bf9\u6bcf\u4e00\u4e2a\u7c07, \u8ba1\u7b97\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u5747\u503c\u5e76\u5c06\u5747\u503c\u4f5c\u4e3a\u8d28\u5fc3 K-Means \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\u7c7b\u8ba1\u7b97\u8ddd\u79bb, \u4e5f\u53ef\u4ee5\u5c06\u6807\u79f0\u578b\u6570\u636e\u6620\u5c04\u4e3a\u4e8c\u503c\u578b\u6570\u636e\u518d\u7528\u4e8e\u8ddd\u79bb\u8ba1\u7b97 \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4e0d\u9002\u7528\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u5373\u65e0\u76d1\u7763\u5b66\u4e60\u4e0d\u9700\u8981\u8bad\u7ec3\u6b65\u9aa4 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5e94\u7528\u805a\u7c7b\u7b97\u6cd5\u3001\u89c2\u5bdf\u7ed3\u679c.\u53ef\u4ee5\u4f7f\u7528\u91cf\u5316\u7684\u8bef\u5dee\u6307\u6807\u5982\u8bef\u5dee\u5e73\u65b9\u548c\uff08\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u6765\u8bc4\u4ef7\u7b97\u6cd5\u7684\u7ed3\u679c. \u4f7f\u7528\u7b97\u6cd5\uff1a\u53ef\u4ee5\u7528\u4e8e\u6240\u5e0c\u671b\u7684\u4efb\u4f55\u5e94\u7528.\u901a\u5e38\u60c5\u51b5\u4e0b, \u7c07\u8d28\u5fc3\u53ef\u4ee5\u4ee3\u8868\u6574\u4e2a\u7c07\u7684\u6570\u636e\u6765\u505a\u51fa\u51b3\u7b56. K-Means \u7684\u8bc4\u4ef7\u6807\u51c6 k-means\u7b97\u6cd5\u56e0\u4e3a\u624b\u52a8\u9009\u53d6k\u503c\u548c\u521d\u59cb\u5316\u968f\u673a\u8d28\u5fc3\u7684\u7f18\u6545\uff0c\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u4e0d\u4f1a\u5b8c\u5168\u4e00\u6837\uff0c\u800c\u4e14\u7531\u4e8e\u624b\u52a8\u9009\u53d6k\u503c\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u6211\u4eec\u9009\u53d6\u7684k\u503c\u662f\u5426\u5408\u7406\uff0c\u805a\u7c7b\u6548\u679c\u597d\u4e0d\u597d\uff0c\u90a3\u4e48\u5982\u4f55\u6765\u8bc4\u4ef7\u67d0\u4e00\u6b21\u7684\u805a\u7c7b\u6548\u679c\u5462\uff1f\u4e5f\u8bb8\u5c06\u5b83\u4eec\u753b\u5728\u56fe\u4e0a\u76f4\u63a5\u89c2\u5bdf\u662f\u6700\u597d\u7684\u529e\u6cd5\uff0c\u4f46\u73b0\u5b9e\u662f\uff0c\u6211\u4eec\u7684\u6570\u636e\u4e0d\u4f1a\u4ec5\u4ec5\u53ea\u6709\u4e24\u4e2a\u7279\u5f81\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u6709\u5341\u51e0\u4e2a\u7279\u5f81\uff0c\u800c\u89c2\u5bdf\u5341\u51e0\u7ef4\u7684\u7a7a\u95f4\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e00\u4e2a\u65e0\u6cd5\u5b8c\u6210\u7684\u4efb\u52a1\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u516c\u5f0f\u6765\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u805a\u7c7b\u7684\u6027\u80fd\uff0c\u8fd9\u4e2a\u516c\u5f0f\u5c31\u662f SSE (Sum of Squared Error, \u8bef\u5dee\u5e73\u65b9\u548c \uff09\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u4e2a\u70b9\u5230\u5176\u7c07\u5185\u8d28\u5fc3\u7684\u8ddd\u79bb\u7684\u5e73\u65b9\u503c\u7684\u603b\u548c\uff0c\u8fd9\u4e2a\u6570\u503c\u5bf9\u5e94kmeans\u51fd\u6570\u4e2d clusterAssment \u77e9\u9635\u7684\u7b2c\u4e00\u5217\u4e4b\u548c\u3002 SSE \u503c\u8d8a\u5c0f\u8868\u793a\u6570\u636e\u70b9\u8d8a\u63a5\u8fd1\u4e8e\u5b83\u4eec\u7684\u8d28\u5fc3\uff0c\u805a\u7c7b\u6548\u679c\u4e5f\u8d8a\u597d\u3002 \u56e0\u4e3a\u5bf9\u8bef\u5dee\u53d6\u4e86\u5e73\u65b9\uff0c\u56e0\u6b64\u66f4\u52a0\u91cd\u89c6\u90a3\u4e9b\u8fdc\u79bb\u4e2d\u5fc3\u7684\u70b9\u3002\u4e00\u79cd\u80af\u5b9a\u53ef\u4ee5\u964d\u4f4e SSE \u503c\u7684\u65b9\u6cd5\u662f\u589e\u52a0\u7c07\u7684\u4e2a\u6570\uff0c\u4f46\u8fd9\u8fdd\u80cc\u4e86\u805a\u7c7b\u7684\u76ee\u6807\u3002\u805a\u7c7b\u7684\u76ee\u6807\u662f\u5728\u4fdd\u6301\u7c07\u6570\u76ee\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\u63d0\u9ad8\u7c07\u7684\u8d28\u91cf\u3002 K-Means \u805a\u7c7b\u7b97\u6cd5\u51fd\u6570 \u4ece\u6587\u4ef6\u52a0\u8f7d\u6570\u636e\u96c6 # \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u77e9\u9635\uff0c\u52a0\u8f7d\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u5904\u7406 def loadDataSet(fileName): # \u901a\u7528\u51fd\u6570\uff0c\u7528\u6765\u89e3\u6790\u4ee5 tab \u952e\u5206\u9694\u7684 floats\uff08\u6d6e\u70b9\u6570\uff09\uff0c\u4f8b\u5982: 1.658985 4.285136 dataMat = [] fr = open(fileName) for line in fr.readlines(): curLine = line.strip().split('\\t') fltLine = map(float,curLine) # \u6620\u5c04\u6240\u6709\u7684\u5143\u7d20\u4e3a float\uff08\u6d6e\u70b9\u6570\uff09\u7c7b\u578b dataMat.append(fltLine) return dataMat \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u6b27\u6c0f\u8ddd\u79bb # \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u6b27\u5f0f\u8ddd\u79bb\uff08\u53ef\u6839\u636e\u573a\u666f\u9009\u62e9\u5176\u4ed6\u8ddd\u79bb\u516c\u5f0f\uff09 def distEclud(vecA, vecB): return sqrt(sum(power(vecA - vecB, 2))) # la.norm(vecA-vecB) \u6784\u5efa\u4e00\u4e2a\u5305\u542b K \u4e2a\u968f\u673a\u8d28\u5fc3\u7684\u96c6\u5408 # \u4e3a\u7ed9\u5b9a\u6570\u636e\u96c6\u6784\u5efa\u4e00\u4e2a\u5305\u542b k \u4e2a\u968f\u673a\u8d28\u5fc3\u7684\u96c6\u5408\u3002\u968f\u673a\u8d28\u5fc3\u5fc5\u987b\u8981\u5728\u6574\u4e2a\u6570\u636e\u96c6\u7684\u8fb9\u754c\u4e4b\u5185\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u627e\u5230\u6570\u636e\u96c6\u6bcf\u4e00\u7ef4\u7684\u6700\u5c0f\u548c\u6700\u5927\u503c\u6765\u5b8c\u6210\u3002\u7136\u540e\u751f\u6210 0~1.0 \u4e4b\u95f4\u7684\u968f\u673a\u6570\u5e76\u901a\u8fc7\u53d6\u503c\u8303\u56f4\u548c\u6700\u5c0f\u503c\uff0c\u4ee5\u4fbf\u786e\u4fdd\u968f\u673a\u70b9\u5728\u6570\u636e\u7684\u8fb9\u754c\u4e4b\u5185\u3002 def randCent(dataSet, k): n = shape(dataSet)[1] # \u5217\u7684\u6570\u91cf\uff0c\u5373\u6570\u636e\u7684\u7279\u5f81\u4e2a\u6570 centroids = mat(zeros((k,n))) # \u521b\u5efak\u4e2a\u8d28\u5fc3\u77e9\u9635 for j in range(n): # \u521b\u5efa\u968f\u673a\u7c07\u8d28\u5fc3\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u7ef4\u7684\u8fb9\u754c\u5185 minJ = min(dataSet[:,j]) # \u6700\u5c0f\u503c rangeJ = float(max(dataSet[:,j]) - minJ) # \u8303\u56f4 = \u6700\u5927\u503c - \u6700\u5c0f\u503c centroids[:,j] = mat(minJ + rangeJ * random.rand(k,1)) # \u968f\u673a\u751f\u6210\uff0cmat\u4e3anumpy\u51fd\u6570\uff0c\u9700\u8981\u5728\u6700\u5f00\u59cb\u5199\u4e0a from numpy import * return centroids K-Means \u805a\u7c7b\u7b97\u6cd5 # k-means \u805a\u7c7b\u7b97\u6cd5 # \u8be5\u7b97\u6cd5\u4f1a\u521b\u5efak\u4e2a\u8d28\u5fc3\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u70b9\u5206\u914d\u5230\u6700\u8fd1\u7684\u8d28\u5fc3\uff0c\u518d\u91cd\u65b0\u8ba1\u7b97\u8d28\u5fc3\u3002 # \u8fd9\u4e2a\u8fc7\u7a0b\u91cd\u590d\u6570\u6b21\uff0c\u76f4\u5230\u6570\u636e\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u4e0d\u518d\u6539\u53d8\u4f4d\u7f6e\u3002 # \u8fd0\u884c\u7ed3\u679c\uff08\u591a\u6b21\u8fd0\u884c\u7ed3\u679c\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u8bd5\u8bd5\uff0c\u539f\u56e0\u4e3a\u968f\u673a\u8d28\u5fc3\u7684\u5f71\u54cd\uff0c\u4f46\u603b\u7684\u7ed3\u679c\u662f\u5bf9\u7684\uff0c \u56e0\u4e3a\u6570\u636e\u8db3\u591f\u76f8\u4f3c\uff0c\u4e5f\u53ef\u80fd\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff09 def kMeans(dataSet, k, distMeas=distEclud, createCent=randCent): m = shape(dataSet)[0] # \u884c\u6570\uff0c\u5373\u6570\u636e\u4e2a\u6570 clusterAssment = mat(zeros((m, 2))) # \u521b\u5efa\u4e00\u4e2a\u4e0e dataSet \u884c\u6570\u4e00\u6837\uff0c\u4f46\u662f\u6709\u4e24\u5217\u7684\u77e9\u9635\uff0c\u7528\u6765\u4fdd\u5b58\u7c07\u5206\u914d\u7ed3\u679c centroids = createCent(dataSet, k) # \u521b\u5efa\u8d28\u5fc3\uff0c\u968f\u673ak\u4e2a\u8d28\u5fc3 clusterChanged = True while clusterChanged: clusterChanged = False for i in range(m): # \u5faa\u73af\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\u5e76\u5206\u914d\u5230\u6700\u8fd1\u7684\u8d28\u5fc3\u4e2d\u53bb minDist = inf; minIndex = -1 for j in range(k): distJI = distMeas(centroids[j,:],dataSet[i,:]) # \u8ba1\u7b97\u6570\u636e\u70b9\u5230\u8d28\u5fc3\u7684\u8ddd\u79bb if distJI < minDist: # \u5982\u679c\u8ddd\u79bb\u6bd4 minDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u8fd8\u5c0f\uff0c\u66f4\u65b0 minDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u548c\u6700\u5c0f\u8d28\u5fc3\u7684 index\uff08\u7d22\u5f15\uff09 minDist = distJI; minIndex = j if clusterAssment[i, 0] != minIndex: # \u7c07\u5206\u914d\u7ed3\u679c\u6539\u53d8 clusterChanged = True # \u7c07\u6539\u53d8 clusterAssment[i, :] = minIndex,minDist**2 # \u66f4\u65b0\u7c07\u5206\u914d\u7ed3\u679c\u4e3a\u6700\u5c0f\u8d28\u5fc3\u7684 index\uff08\u7d22\u5f15\uff09\uff0cminDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u7684\u5e73\u65b9 print centroids for cent in range(k): # \u66f4\u65b0\u8d28\u5fc3 ptsInClust = dataSet[nonzero(clusterAssment[:, 0].A==cent)[0]] # \u83b7\u53d6\u8be5\u7c07\u4e2d\u7684\u6240\u6709\u70b9 centroids[cent,:] = mean(ptsInClust, axis=0) # \u5c06\u8d28\u5fc3\u4fee\u6539\u4e3a\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u5e73\u5747\u503c\uff0cmean \u5c31\u662f\u6c42\u5e73\u5747\u503c\u7684 return centroids, clusterAssment \u6d4b\u8bd5\u51fd\u6570 \u6d4b\u8bd5\u4e00\u4e0b\u4ee5\u4e0a\u7684\u57fa\u7840\u51fd\u6570\u662f\u5426\u53ef\u4ee5\u5982\u9884\u671f\u8fd0\u884c, \u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u6d4b\u8bd5\u4e00\u4e0b kMeans \u51fd\u6570\u662f\u5426\u53ef\u4ee5\u5982\u9884\u671f\u8fd0\u884c, \u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u53c2\u8003\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: K-Means \u805a\u7c7b\u7b97\u6cd5\u7684\u7f3a\u9677 \u5728 kMeans \u7684\u51fd\u6570\u6d4b\u8bd5\u4e2d\uff0c\u53ef\u80fd\u5076\u5c14\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff08\u5c40\u90e8\u6700\u4f18\u7684\u7ed3\u679c\uff0c\u4f46\u4e0d\u662f\u5168\u5c40\u6700\u4f18\u7684\u7ed3\u679c\uff09. \u5c40\u90e8\u6700\u5c0f\u503c\u7684\u7684\u60c5\u51b5\u5982\u4e0b: \u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u6709\u5f88\u591a\u539f\u56e0\uff0c\u53ef\u80fd\u662fk\u503c\u53d6\u7684\u4e0d\u5408\u9002\uff0c\u53ef\u80fd\u662f\u8ddd\u79bb\u51fd\u6570\u4e0d\u5408\u9002\uff0c\u53ef\u80fd\u662f\u6700\u521d\u968f\u673a\u9009\u53d6\u7684\u8d28\u5fc3\u9760\u7684\u592a\u8fd1\uff0c\u4e5f\u53ef\u80fd\u662f\u6570\u636e\u672c\u8eab\u5206\u5e03\u7684\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u751f\u6210\u7684\u7c07\u8fdb\u884c\u540e\u5904\u7406\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5177\u6709\u6700\u5927 SSE \u503c\u7684\u7c07\u5212\u5206\u6210\u4e24\u4e2a\u7c07\u3002\u5177\u4f53\u5b9e\u73b0\u65f6\u53ef\u4ee5\u5c06\u6700\u5927\u7c07\u5305\u542b\u7684\u70b9\u8fc7\u6ee4\u51fa\u6765\u5e76\u5728\u8fd9\u4e9b\u70b9\u4e0a\u8fd0\u884cK-\u5747\u503c\u7b97\u6cd5\uff0c\u4ee4k\u8bbe\u4e3a2\u3002 \u4e3a\u4e86\u4fdd\u6301\u7c07\u603b\u6570\u4e0d\u53d8\uff0c\u53ef\u4ee5\u5c06\u67d0\u4e24\u4e2a\u7c07\u8fdb\u884c\u5408\u5e76\u3002\u4ece\u4e0a\u56fe\u4e2d\u5f88\u660e\u663e\u5c31\u53ef\u4ee5\u770b\u51fa\uff0c\u5e94\u8be5\u5c06\u4e0a\u56fe\u4e0b\u90e8\u4e24\u4e2a\u51fa\u9519\u7684\u7c07\u8d28\u5fc3\u8fdb\u884c\u5408\u5e76\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5bf9\u4e8c\u7ef4\u6570\u636e\u4e0a\u7684\u805a\u7c7b\u8fdb\u884c\u53ef\u89c6\u5316\uff0c \u4f46\u662f\u5982\u679c\u9047\u523040\u7ef4\u7684\u6570\u636e\u5e94\u8be5\u5982\u4f55\u53bb\u505a\uff1f \u6709\u4e24\u79cd\u53ef\u4ee5\u91cf\u5316\u7684\u529e\u6cd5\uff1a\u5408\u5e76\u6700\u8fd1\u7684\u8d28\u5fc3\uff0c\u6216\u8005\u5408\u5e76\u4e24\u4e2a\u4f7f\u5f97 SSE \u589e\u5e45\u6700\u5c0f\u7684\u8d28\u5fc3\u3002 \u7b2c\u4e00\u79cd\u601d\u8def\u901a\u8fc7\u8ba1\u7b97\u6240\u6709\u8d28\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c \u7136\u540e\u5408\u5e76\u8ddd\u79bb\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\u6765\u5b9e\u73b0\u3002\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u9700\u8981\u5408\u5e76\u4e24\u4e2a\u7c07\u7136\u540e\u8ba1\u7b97\u603b SSE \u503c\u3002\u5fc5\u987b\u5728\u6240\u6709\u53ef\u80fd\u7684\u4e24\u4e2a\u7c07\u4e0a\u91cd\u590d\u4e0a\u8ff0\u5904\u7406\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u5408\u5e76\u6700\u4f73\u7684\u4e24\u4e2a\u7c07\u4e3a\u6b62\u3002 \u56e0\u4e3a\u4e0a\u8ff0\u540e\u5904\u7406\u8fc7\u7a0b\u5b9e\u5728\u662f\u6709\u4e9b\u7e41\u7410\uff0c\u6240\u4ee5\u6709\u66f4\u5389\u5bb3\u7684\u5927\u4f6c\u63d0\u51fa\u4e86\u53e6\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u4e8c\u5206K-\u5747\u503c\uff08bisecting K-Means\uff09\u7684\u7b97\u6cd5. \u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5 \u8be5\u7b97\u6cd5\u9996\u5148\u5c06\u6240\u6709\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u7c07\uff0c\u7136\u540e\u5c06\u8be5\u7c07\u4e00\u5206\u4e3a\u4e8c\u3002 \u4e4b\u540e\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u7c07\u7ee7\u7eed\u8fdb\u884c\u5212\u5206\uff0c\u9009\u62e9\u54ea\u4e00\u4e2a\u7c07\u8fdb\u884c\u5212\u5206\u53d6\u51b3\u4e8e\u5bf9\u5176\u5212\u5206\u65f6\u5019\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e SSE\uff08\u5e73\u65b9\u548c\u8bef\u5dee\uff09\u7684\u503c\u3002 \u4e0a\u8ff0\u57fa\u4e8e SSE \u7684\u5212\u5206\u8fc7\u7a0b\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u5f97\u5230\u7528\u6237\u6307\u5b9a\u7684\u7c07\u6570\u76ee\u4e3a\u6b62\u3002 \u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5\u4f2a\u4ee3\u7801 \u5c06\u6240\u6709\u70b9\u770b\u6210\u4e00\u4e2a\u7c07 \u5f53\u7c07\u6570\u76ee\u5c0f\u4e8e k \u65f6 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7c07 \u8ba1\u7b97\u603b\u8bef\u5dee \u5728\u7ed9\u5b9a\u7684\u7c07\u4e0a\u9762\u8fdb\u884c KMeans \u805a\u7c7b\uff08k=2\uff09 \u8ba1\u7b97\u5c06\u8be5\u7c07\u4e00\u5206\u4e3a\u4e8c\u4e4b\u540e\u7684\u603b\u8bef\u5dee \u9009\u62e9\u4f7f\u5f97\u8bef\u5dee\u6700\u5c0f\u7684\u90a3\u4e2a\u7c07\u8fdb\u884c\u5212\u5206\u64cd\u4f5c \u53e6\u4e00\u79cd\u505a\u6cd5\u662f\u9009\u62e9 SSE \u6700\u5927\u7684\u7c07\u8fdb\u884c\u5212\u5206\uff0c\u76f4\u5230\u7c07\u6570\u76ee\u8fbe\u5230\u7528\u6237\u6307\u5b9a\u7684\u6570\u76ee\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u4e3b\u8981\u4ecb\u7ecd\u8be5\u505a\u6cd5\u7684python2\u4ee3\u7801\u5b9e\u73b0 \u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5\u4ee3\u7801 # \u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5, \u57fa\u4e8e kMeans \u57fa\u7840\u4e4b\u4e0a\u7684\u4f18\u5316\uff0c\u4ee5\u907f\u514d\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c def biKMeans(dataSet, k, distMeas=distEclud): m = shape(dataSet)[0] clusterAssment = mat(zeros((m,2))) # \u4fdd\u5b58\u6bcf\u4e2a\u6570\u636e\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u548c\u5e73\u65b9\u8bef\u5dee centroid0 = mean(dataSet, axis=0).tolist()[0] # \u8d28\u5fc3\u521d\u59cb\u5316\u4e3a\u6240\u6709\u6570\u636e\u70b9\u7684\u5747\u503c centList =[centroid0] # \u521d\u59cb\u5316\u53ea\u6709 1 \u4e2a\u8d28\u5fc3\u7684 list for j in range(m): # \u8ba1\u7b97\u6240\u6709\u6570\u636e\u70b9\u5230\u521d\u59cb\u8d28\u5fc3\u7684\u8ddd\u79bb\u5e73\u65b9\u8bef\u5dee clusterAssment[j,1] = distMeas(mat(centroid0), dataSet[j,:])**2 while (len(centList) < k): # \u5f53\u8d28\u5fc3\u6570\u91cf\u5c0f\u4e8e k \u65f6 lowestSSE = inf for i in range(len(centList)): # \u5bf9\u6bcf\u4e00\u4e2a\u8d28\u5fc3 ptsInCurrCluster = dataSet[nonzero(clusterAssment[:,0].A==i)[0],:] # \u83b7\u53d6\u5f53\u524d\u7c07 i \u4e0b\u7684\u6240\u6709\u6570\u636e\u70b9 centroidMat, splitClustAss = kMeans(ptsInCurrCluster, 2, distMeas) # \u5c06\u5f53\u524d\u7c07 i \u8fdb\u884c\u4e8c\u5206 kMeans \u5904\u7406 sseSplit = sum(splitClustAss[:,1]) # \u5c06\u4e8c\u5206 kMeans \u7ed3\u679c\u4e2d\u7684\u5e73\u65b9\u548c\u7684\u8ddd\u79bb\u8fdb\u884c\u6c42\u548c sseNotSplit = sum(clusterAssment[nonzero(clusterAssment[:,0].A!=i)[0],1]) # \u5c06\u672a\u53c2\u4e0e\u4e8c\u5206 kMeans \u5206\u914d\u7ed3\u679c\u4e2d\u7684\u5e73\u65b9\u548c\u7684\u8ddd\u79bb\u8fdb\u884c\u6c42\u548c print \"sseSplit, and notSplit: \",sseSplit,sseNotSplit if (sseSplit + sseNotSplit) < lowestSSE: # \u603b\u7684\uff08\u672a\u62c6\u5206\u548c\u5df2\u62c6\u5206\uff09\u8bef\u5dee\u548c\u8d8a\u5c0f\uff0c\u8d8a\u76f8\u4f3c\uff0c\u6548\u679c\u8d8a\u4f18\u5316\uff0c\u5212\u5206\u7684\u7ed3\u679c\u66f4\u597d\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u7406\u89e3\u5f88\u91cd\u8981\uff0c\u4e0d\u660e\u767d\u7684\u5730\u65b9\u53ef\u4ee5\u548c\u6211\u4eec\u4e00\u8d77\u8ba8\u8bba\uff09 bestCentToSplit = i bestNewCents = centroidMat bestClustAss = splitClustAss.copy() lowestSSE = sseSplit + sseNotSplit # \u627e\u51fa\u6700\u597d\u7684\u7c07\u5206\u914d\u7ed3\u679c bestClustAss[nonzero(bestClustAss[:,0].A == 1)[0],0] = len(centList) # \u8c03\u7528\u4e8c\u5206 kMeans \u7684\u7ed3\u679c\uff0c\u9ed8\u8ba4\u7c07\u662f 0,1. \u5f53\u7136\u4e5f\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6570\u5b57 bestClustAss[nonzero(bestClustAss[:,0].A == 0)[0],0] = bestCentToSplit # \u66f4\u65b0\u4e3a\u6700\u4f73\u8d28\u5fc3 print 'the bestCentToSplit is: ',bestCentToSplit print 'the len of bestClustAss is: ', len(bestClustAss) # \u66f4\u65b0\u8d28\u5fc3\u5217\u8868 centList[bestCentToSplit] = bestNewCents[0,:].tolist()[0] # \u66f4\u65b0\u539f\u8d28\u5fc3 list \u4e2d\u7684\u7b2c i \u4e2a\u8d28\u5fc3\u4e3a\u4f7f\u7528\u4e8c\u5206 kMeans \u540e bestNewCents \u7684\u7b2c\u4e00\u4e2a\u8d28\u5fc3 centList.append(bestNewCents[1,:].tolist()[0]) # \u6dfb\u52a0 bestNewCents \u7684\u7b2c\u4e8c\u4e2a\u8d28\u5fc3 clusterAssment[nonzero(clusterAssment[:,0].A == bestCentToSplit)[0],:]= bestClustAss # \u91cd\u65b0\u5206\u914d\u6700\u597d\u7c07\u4e0b\u7684\u6570\u636e\uff08\u8d28\u5fc3\uff09\u4ee5\u53caSSE return mat(centList), clusterAssment \u6d4b\u8bd5\u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5 \u6d4b\u8bd5\u4e00\u4e0b\u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5\uff0c\u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u4e0a\u8ff0\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u591a\u6b21\uff0c\u805a\u7c7b\u4f1a\u6536\u655b\u5230\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u800c\u539f\u59cb\u7684 kMeans() \u51fd\u6570\u5076\u5c14\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\u3002 \u8fd0\u884c\u53c2\u8003\u7ed3\u679c\u5982\u4e0b: \u4f5c\u8005\uff1a \u90a3\u4f0a\u62b9\u5fae\u7b11 , \u6e05\u90fd\u6c5f\u6c34\u90ce GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c10\u7ae0_KMeans\u805a\u7c7b"},{"location":"ml/10.KMeans/#10-k-meansk-","text":"","title":"\u7b2c 10 \u7ae0 K-Means\uff08K-\u5747\u503c\uff09\u805a\u7c7b\u7b97\u6cd5"},{"location":"ml/10.KMeans/#_1","text":"\u805a\u7c7b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u5e9e\u6742\u6570\u636e\u96c6\u4e2d\u5177\u6709\u76f8\u4f3c\u7279\u5f81\u7684\u6570\u636e\u81ea\u52a8\u5f52\u7c7b\u5230\u4e00\u8d77\uff0c\u79f0\u4e3a\u4e00\u4e2a\u7c07\uff0c\u7c07\u5185\u7684\u5bf9\u8c61\u8d8a\u76f8\u4f3c\uff0c\u805a\u7c7b\u7684\u6548\u679c\u8d8a\u597d\u3002\u5b83\u662f\u4e00\u79cd\u65e0\u76d1\u7763\u7684\u5b66\u4e60(Unsupervised Learning)\u65b9\u6cd5,\u4e0d\u9700\u8981\u9884\u5148\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u96c6\u3002\u805a\u7c7b\u4e0e\u5206\u7c7b\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u5206\u7c7b\u7684\u76ee\u6807\u4e8b\u5148\u5df2\u77e5\uff0c\u4f8b\u5982\u732b\u72d7\u8bc6\u522b\uff0c\u4f60\u5728\u5206\u7c7b\u4e4b\u524d\u5df2\u7ecf\u9884\u5148\u77e5\u9053\u8981\u5c06\u5b83\u5206\u4e3a\u732b\u3001\u72d7\u4e24\u4e2a\u79cd\u7c7b\uff1b\u800c\u5728\u4f60\u805a\u7c7b\u4e4b\u524d\uff0c\u4f60\u5bf9\u4f60\u7684\u76ee\u6807\u662f\u672a\u77e5\u7684\uff0c\u540c\u6837\u4ee5\u52a8\u7269\u4e3a\u4f8b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u52a8\u7269\u96c6\u6765\u8bf4\uff0c\u4f60\u5e76\u4e0d\u6e05\u695a\u8fd9\u4e2a\u6570\u636e\u96c6\u5185\u90e8\u6709\u591a\u5c11\u79cd\u7c7b\u7684\u52a8\u7269\uff0c\u4f60\u80fd\u505a\u7684\u53ea\u662f\u5229\u7528\u805a\u7c7b\u65b9\u6cd5\u5c06\u5b83\u81ea\u52a8\u6309\u7167\u7279\u5f81\u5206\u4e3a\u591a\u7c7b\uff0c\u7136\u540e\u4eba\u4e3a\u7ed9\u51fa\u8fd9\u4e2a\u805a\u7c7b\u7ed3\u679c\u7684\u5b9a\u4e49\uff08\u5373\u7c07\u8bc6\u522b\uff09\u3002\u4f8b\u5982\uff0c\u4f60\u5c06\u4e00\u4e2a\u52a8\u7269\u96c6\u5206\u4e3a\u4e86\u4e09\u7c07\uff08\u7c7b\uff09\uff0c\u7136\u540e\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u7279\u5f81\uff0c\u4f60\u4e3a\u6bcf\u4e00\u4e2a\u7c07\u8d77\u4e00\u4e2a\u540d\u5b57\uff0c\u5982\u5927\u8c61\u3001\u72d7\u3001\u732b\u7b49\uff0c\u8fd9\u5c31\u662f\u805a\u7c7b\u7684\u57fa\u672c\u601d\u60f3\u3002 \u81f3\u4e8e\u201c\u76f8\u4f3c\u201d\u8fd9\u4e00\u6982\u5ff5\uff0c\u662f\u5229\u7528\u8ddd\u79bb\u8fd9\u4e2a\u8bc4\u4ef7\u6807\u51c6\u6765\u8861\u91cf\u7684\uff0c\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u5bf9\u8c61\u4e0e\u5bf9\u8c61\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fdc\u8fd1\u6765\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u7c7b\u522b\uff0c\u5373\u662f\u5426\u662f\u540c\u4e00\u4e2a\u7c07\u3002\u81f3\u4e8e\u8ddd\u79bb\u5982\u4f55\u8ba1\u7b97\uff0c\u79d1\u5b66\u5bb6\u4eec\u63d0\u51fa\u4e86\u8bb8\u591a\u79cd\u8ddd\u79bb\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5176\u4e2d\u6b27\u5f0f\u8ddd\u79bb\u662f\u6700\u4e3a\u7b80\u5355\u548c\u5e38\u7528\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u4f59\u5f26\u76f8\u4f3c\u6027\u8ddd\u79bb\u7b49\u3002 \u6b27\u5f0f\u8ddd\u79bb\uff0c\u6211\u60f3\u5927\u5bb6\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff0c\u4f46\u4e3a\u514d\u6709\u4e00\u4e9b\u57fa\u7840\u8584\u5f31\u7684\u540c\u5b66\uff0c\u5728\u6b64\u518d\u8bf4\u660e\u4e00\u4e0b\uff0c\u5b83\u7684\u5b9a\u4e49\u4e3a\uff1a \u5bf9\u4e8ex\u70b9(\u5750\u6807\u4e3a(x1,x2,x3,...,xn))\u548c y\u70b9\uff08\u5750\u6807\u4e3a(y1,y2,y3,...,yn)\uff09\uff0c\u4e24\u8005\u7684\u6b27\u5f0f\u8ddd\u79bb\u4e3a \u5728\u4e8c\u7ef4\u5e73\u9762\uff0c\u5b83\u5c31\u662f\u6211\u4eec\u521d\u4e2d\u65f6\u5c31\u5b66\u8fc7\u7684\u4e24\u70b9\u8ddd\u79bb\u516c\u5f0f","title":"\u805a\u7c7b"},{"location":"ml/10.KMeans/#k-means","text":"K-Means \u662f\u53d1\u73b0\u7ed9\u5b9a\u6570\u636e\u96c6\u7684 K \u4e2a\u7c07\u7684\u805a\u7c7b\u7b97\u6cd5, \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a K-\u5747\u503c \u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u53d1\u73b0 K \u4e2a\u4e0d\u540c\u7684\u7c07, \u4e14\u6bcf\u4e2a\u7c07\u7684\u4e2d\u5fc3\u91c7\u7528\u7c07\u4e2d\u6240\u542b\u503c\u7684\u5747\u503c\u8ba1\u7b97\u800c\u6210. \u7c07\u4e2a\u6570 K \u662f\u7528\u6237\u6307\u5b9a\u7684, \u6bcf\u4e00\u4e2a\u7c07\u901a\u8fc7\u5176\u8d28\u5fc3\uff08centroid\uff09, \u5373\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u4e2d\u5fc3\u6765\u63cf\u8ff0. \u805a\u7c7b\u4e0e\u5206\u7c7b\u7b97\u6cd5\u7684\u6700\u5927\u533a\u522b\u5728\u4e8e, \u5206\u7c7b\u7684\u76ee\u6807\u7c7b\u522b\u5df2\u77e5, \u800c\u805a\u7c7b\u7684\u76ee\u6807\u7c7b\u522b\u662f\u672a\u77e5\u7684. \u4f18\u70b9 : \u5c5e\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u65e0\u987b\u51c6\u5907\u8bad\u7ec3\u96c6 \u539f\u7406\u7b80\u5355\uff0c\u5b9e\u73b0\u8d77\u6765\u8f83\u4e3a\u5bb9\u6613 * \u7ed3\u679c\u53ef\u89e3\u91ca\u6027\u8f83\u597d \u7f3a\u70b9 : \u9700\u624b\u52a8\u8bbe\u7f6ek\u503c \u3002 \u5728\u7b97\u6cd5\u5f00\u59cb\u9884\u6d4b\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u8bbe\u7f6ek\u503c\uff0c\u5373\u4f30\u8ba1\u6570\u636e\u5927\u6982\u7684\u7c7b\u522b\u4e2a\u6570\uff0c\u4e0d\u5408\u7406\u7684k\u503c\u4f1a\u4f7f\u7ed3\u679c\u7f3a\u4e4f\u89e3\u91ca\u6027 \u53ef\u80fd\u6536\u655b\u5230\u5c40\u90e8\u6700\u5c0f\u503c, \u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u6536\u655b\u8f83\u6162 * \u5bf9\u4e8e\u5f02\u5e38\u70b9\u3001\u79bb\u7fa4\u70b9\u654f\u611f \u4f7f\u7528\u6570\u636e\u7c7b\u578b : \u6570\u503c\u578b\u6570\u636e","title":"K-Means \u7b97\u6cd5"},{"location":"ml/10.KMeans/#k-means_1","text":"kmeans\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u7528\u4e8e\u6570\u636e\u96c6\u5185\u79cd\u7c7b\u5c5e\u6027\u4e0d\u660e\u6670\uff0c\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u6570\u636e\u6316\u6398\u51fa\u6216\u81ea\u52a8\u5f52\u7c7b\u51fa\u6709\u76f8\u4f3c\u7279\u70b9\u7684\u5bf9\u8c61\u7684\u573a\u666f\u3002\u5176\u5546\u4e1a\u754c\u7684\u5e94\u7528\u573a\u666f\u4e00\u822c\u4e3a\u6316\u6398\u51fa\u5177\u6709\u76f8\u4f3c\u7279\u70b9\u7684\u6f5c\u5728\u5ba2\u6237\u7fa4\u4f53\u4ee5\u4fbf\u516c\u53f8\u80fd\u591f\u91cd\u70b9\u7814\u7a76\u3001\u5bf9\u75c7\u4e0b\u836f\u3002 \u4f8b\u5982\uff0c\u57282000\u5e74\u548c2004\u5e74\u7684\u7f8e\u56fd\u603b\u7edf\u5927\u9009\u4e2d\uff0c\u5019\u9009\u4eba\u7684\u5f97\u7968\u6570\u6bd4\u8f83\u63a5\u8fd1\u6216\u8005\u8bf4\u975e\u5e38\u63a5\u8fd1\u3002\u4efb\u4e00\u5019\u9009\u4eba\u5f97\u5230\u7684\u666e\u9009\u7968\u6570\u7684\u6700\u5927\u767e\u5206\u6bd4\u4e3a50.7%\u800c\u6700\u5c0f\u767e\u5206\u6bd4\u4e3a47.9% \u5982\u679c1%\u7684\u9009\u6c11\u5c06\u624b\u4e2d\u7684\u9009\u7968\u6295\u5411\u53e6\u5916\u7684\u5019\u9009\u4eba\uff0c\u90a3\u4e48\u9009\u4e3e\u7ed3\u679c\u5c31\u4f1a\u622a\u7136\u4e0d\u540c\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u59a5\u5584\u52a0\u4ee5\u5f15\u5bfc\u4e0e\u5438\u5f15\uff0c\u5c11\u90e8\u5206\u9009\u6c11\u5c31\u4f1a\u8f6c\u6362\u7acb\u573a\u3002\u5c3d\u7ba1\u8fd9\u7c7b\u9009\u4e3e\u8005\u5360\u7684\u6bd4\u4f8b\u8f83\u4f4e\uff0c\u4f46\u5f53\u5019\u9009\u4eba\u7684\u9009\u7968\u63a5\u8fd1\u65f6\uff0c\u8fd9\u4e9b\u4eba\u7684\u7acb\u573a\u65e0\u7591\u4f1a\u5bf9\u9009\u4e3e\u7ed3\u679c\u4ea7\u751f\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002\u5982\u4f55\u627e\u51fa\u8fd9\u7c7b\u9009\u6c11\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u6709\u9650\u7684\u9884\u7b97\u4e0b\u91c7\u53d6\u63aa\u65bd\u6765\u5438\u5f15\u4ed6\u4eec\uff1f \u7b54\u6848\u5c31\u662f\u805a\u7c7b\uff08Clustering)\u3002 \u90a3\u4e48\uff0c\u5177\u4f53\u5982\u4f55\u5b9e\u65bd\u5462\uff1f\u9996\u5148\uff0c\u6536\u96c6\u7528\u6237\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u540c\u65f6\u6536\u96c6\u7528\u6237\u6ee1\u610f\u6216\u4e0d\u6ee1\u610f\u7684\u4fe1\u606f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4efb\u4f55\u5bf9\u7528\u6237\u91cd\u8981\u7684\u5185\u5bb9\u90fd\u53ef\u80fd\u5f71\u54cd\u7528\u6237\u7684\u6295\u7968\u7ed3\u679c\u3002\u7136\u540e\uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u8f93\u5165\u5230\u67d0\u4e2a\u805a\u7c7b\u7b97\u6cd5\u4e2d\u3002\u63a5\u7740\uff0c\u5bf9\u805a\u7c7b\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7c07\uff08\u6700\u597d\u9009\u62e9\u6700\u5927\u7c07 \uff09\uff0c \u7cbe\u5fc3\u6784\u9020\u80fd\u591f\u5438\u5f15\u8be5\u7c07\u9009\u6c11\u7684\u6d88\u606f\u3002\u6700\u540e\uff0c \u5f00\u5c55\u7ade\u9009\u6d3b\u52a8\u5e76\u89c2\u5bdf\u4e0a\u8ff0\u505a\u6cd5\u662f\u5426\u6709\u6548\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u4ea7\u54c1\u90e8\u95e8\u7684\u5e02\u573a\u8c03\u7814\u4e86\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u4e86\u89e3\u81ea\u5df1\u7684\u7528\u6237\uff0c\u4ea7\u54c1\u90e8\u95e8\u53ef\u4ee5\u91c7\u7528\u805a\u7c7b\u7684\u65b9\u6cd5\u5f97\u5230\u4e0d\u540c\u7279\u5f81\u7684\u7528\u6237\u7fa4\u4f53\uff0c\u7136\u540e\u9488\u5bf9\u4e0d\u540c\u7684\u7528\u6237\u7fa4\u4f53\u53ef\u4ee5\u5bf9\u75c7\u4e0b\u836f\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u66f4\u52a0\u7cbe\u51c6\u6709\u6548\u7684\u670d\u52a1\u3002","title":"K-Means \u573a\u666f"},{"location":"ml/10.KMeans/#k-means_2","text":"\u7c07: \u6240\u6709\u6570\u636e\u7684\u70b9\u96c6\u5408\uff0c\u7c07\u4e2d\u7684\u5bf9\u8c61\u662f\u76f8\u4f3c\u7684\u3002 \u8d28\u5fc3: \u7c07\u4e2d\u6240\u6709\u70b9\u7684\u4e2d\u5fc3\uff08\u8ba1\u7b97\u6240\u6709\u70b9\u7684\u5747\u503c\u800c\u6765\uff09. SSE: Sum of Sqared Error\uff08\u8bef\u5dee\u5e73\u65b9\u548c\uff09, \u5b83\u88ab\u7528\u6765\u8bc4\u4f30\u6a21\u578b\u7684\u597d\u574f\uff0cSSE \u503c\u8d8a\u5c0f\uff0c\u8868\u793a\u8d8a\u63a5\u8fd1\u5b83\u4eec\u7684\u8d28\u5fc3. \u805a\u7c7b\u6548\u679c\u8d8a\u597d\u3002\u7531\u4e8e\u5bf9\u8bef\u5dee\u53d6\u4e86\u5e73\u65b9\uff0c\u56e0\u6b64\u66f4\u52a0\u6ce8\u91cd\u90a3\u4e9b\u8fdc\u79bb\u4e2d\u5fc3\u7684\u70b9\uff08\u4e00\u822c\u4e3a\u8fb9\u754c\u70b9\u6216\u79bb\u7fa4\u70b9\uff09\u3002\u8be6\u60c5\u89c1kmeans\u7684\u8bc4\u4ef7\u6807\u51c6\u3002 \u6709\u5173 \u7c07 \u548c \u8d28\u5fc3 \u672f\u8bed\u66f4\u5f62\u8c61\u7684\u4ecb\u7ecd, \u8bf7\u53c2\u8003\u4e0b\u56fe:","title":"K-Means \u672f\u8bed"},{"location":"ml/10.KMeans/#k-means_3","text":"\u9996\u5148, \u968f\u673a\u786e\u5b9a K \u4e2a\u521d\u59cb\u70b9\u4f5c\u4e3a\u8d28\u5fc3\uff08 \u4e0d\u5fc5\u662f\u6570\u636e\u4e2d\u7684\u70b9 \uff09\u3002 \u7136\u540e\u5c06\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5206\u914d\u5230\u4e00\u4e2a\u7c07\u4e2d, \u5177\u4f53\u6765\u8bb2, \u5c31\u662f\u4e3a\u6bcf\u4e2a\u70b9\u627e\u5230\u8ddd\u5176\u6700\u8fd1\u7684\u8d28\u5fc3, \u5e76\u5c06\u5176\u5206\u914d\u8be5\u8d28\u5fc3\u6240\u5bf9\u5e94\u7684\u7c07. \u8fd9\u4e00\u6b65\u5b8c\u6210\u4e4b\u540e, \u6bcf\u4e2a\u7c07\u7684\u8d28\u5fc3\u66f4\u65b0\u4e3a\u8be5\u7c07\u6240\u6709\u70b9\u7684\u5e73\u5747\u503c. 3.\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u76f4\u5230\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u8ddd\u79bb\u5b83\u6240\u5bf9\u5e94\u7684\u8d28\u5fc3\u6700\u8fd1\u65f6\u7ed3\u675f\u3002 \u4e0a\u8ff0\u8fc7\u7a0b\u7684 \u4f2a\u4ee3\u7801 \u5982\u4e0b: \u521b\u5efa k \u4e2a\u70b9\u4f5c\u4e3a\u8d77\u59cb\u8d28\u5fc3\uff08\u901a\u5e38\u662f\u968f\u673a\u9009\u62e9\uff09 \u5f53\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u53d1\u751f\u6539\u53d8\u65f6\uff08\u4e0d\u6539\u53d8\u65f6\u7b97\u6cd5\u7ed3\u675f\uff09 \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u70b9 \u5bf9\u6bcf\u4e2a\u8d28\u5fc3 \u8ba1\u7b97\u8d28\u5fc3\u4e0e\u6570\u636e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb \u5c06\u6570\u636e\u70b9\u5206\u914d\u5230\u8ddd\u5176\u6700\u8fd1\u7684\u7c07 \u5bf9\u6bcf\u4e00\u4e2a\u7c07, \u8ba1\u7b97\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u5747\u503c\u5e76\u5c06\u5747\u503c\u4f5c\u4e3a\u8d28\u5fc3","title":"K-Means \u5de5\u4f5c\u6d41\u7a0b"},{"location":"ml/10.KMeans/#k-means_4","text":"\u6536\u96c6\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\u7c7b\u8ba1\u7b97\u8ddd\u79bb, \u4e5f\u53ef\u4ee5\u5c06\u6807\u79f0\u578b\u6570\u636e\u6620\u5c04\u4e3a\u4e8c\u503c\u578b\u6570\u636e\u518d\u7528\u4e8e\u8ddd\u79bb\u8ba1\u7b97 \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4e0d\u9002\u7528\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u5373\u65e0\u76d1\u7763\u5b66\u4e60\u4e0d\u9700\u8981\u8bad\u7ec3\u6b65\u9aa4 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5e94\u7528\u805a\u7c7b\u7b97\u6cd5\u3001\u89c2\u5bdf\u7ed3\u679c.\u53ef\u4ee5\u4f7f\u7528\u91cf\u5316\u7684\u8bef\u5dee\u6307\u6807\u5982\u8bef\u5dee\u5e73\u65b9\u548c\uff08\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u6765\u8bc4\u4ef7\u7b97\u6cd5\u7684\u7ed3\u679c. \u4f7f\u7528\u7b97\u6cd5\uff1a\u53ef\u4ee5\u7528\u4e8e\u6240\u5e0c\u671b\u7684\u4efb\u4f55\u5e94\u7528.\u901a\u5e38\u60c5\u51b5\u4e0b, \u7c07\u8d28\u5fc3\u53ef\u4ee5\u4ee3\u8868\u6574\u4e2a\u7c07\u7684\u6570\u636e\u6765\u505a\u51fa\u51b3\u7b56.","title":"K-Means \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/10.KMeans/#k-means_5","text":"k-means\u7b97\u6cd5\u56e0\u4e3a\u624b\u52a8\u9009\u53d6k\u503c\u548c\u521d\u59cb\u5316\u968f\u673a\u8d28\u5fc3\u7684\u7f18\u6545\uff0c\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u4e0d\u4f1a\u5b8c\u5168\u4e00\u6837\uff0c\u800c\u4e14\u7531\u4e8e\u624b\u52a8\u9009\u53d6k\u503c\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u6211\u4eec\u9009\u53d6\u7684k\u503c\u662f\u5426\u5408\u7406\uff0c\u805a\u7c7b\u6548\u679c\u597d\u4e0d\u597d\uff0c\u90a3\u4e48\u5982\u4f55\u6765\u8bc4\u4ef7\u67d0\u4e00\u6b21\u7684\u805a\u7c7b\u6548\u679c\u5462\uff1f\u4e5f\u8bb8\u5c06\u5b83\u4eec\u753b\u5728\u56fe\u4e0a\u76f4\u63a5\u89c2\u5bdf\u662f\u6700\u597d\u7684\u529e\u6cd5\uff0c\u4f46\u73b0\u5b9e\u662f\uff0c\u6211\u4eec\u7684\u6570\u636e\u4e0d\u4f1a\u4ec5\u4ec5\u53ea\u6709\u4e24\u4e2a\u7279\u5f81\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u6709\u5341\u51e0\u4e2a\u7279\u5f81\uff0c\u800c\u89c2\u5bdf\u5341\u51e0\u7ef4\u7684\u7a7a\u95f4\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e00\u4e2a\u65e0\u6cd5\u5b8c\u6210\u7684\u4efb\u52a1\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u516c\u5f0f\u6765\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u805a\u7c7b\u7684\u6027\u80fd\uff0c\u8fd9\u4e2a\u516c\u5f0f\u5c31\u662f SSE (Sum of Squared Error, \u8bef\u5dee\u5e73\u65b9\u548c \uff09\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u4e2a\u70b9\u5230\u5176\u7c07\u5185\u8d28\u5fc3\u7684\u8ddd\u79bb\u7684\u5e73\u65b9\u503c\u7684\u603b\u548c\uff0c\u8fd9\u4e2a\u6570\u503c\u5bf9\u5e94kmeans\u51fd\u6570\u4e2d clusterAssment \u77e9\u9635\u7684\u7b2c\u4e00\u5217\u4e4b\u548c\u3002 SSE \u503c\u8d8a\u5c0f\u8868\u793a\u6570\u636e\u70b9\u8d8a\u63a5\u8fd1\u4e8e\u5b83\u4eec\u7684\u8d28\u5fc3\uff0c\u805a\u7c7b\u6548\u679c\u4e5f\u8d8a\u597d\u3002 \u56e0\u4e3a\u5bf9\u8bef\u5dee\u53d6\u4e86\u5e73\u65b9\uff0c\u56e0\u6b64\u66f4\u52a0\u91cd\u89c6\u90a3\u4e9b\u8fdc\u79bb\u4e2d\u5fc3\u7684\u70b9\u3002\u4e00\u79cd\u80af\u5b9a\u53ef\u4ee5\u964d\u4f4e SSE \u503c\u7684\u65b9\u6cd5\u662f\u589e\u52a0\u7c07\u7684\u4e2a\u6570\uff0c\u4f46\u8fd9\u8fdd\u80cc\u4e86\u805a\u7c7b\u7684\u76ee\u6807\u3002\u805a\u7c7b\u7684\u76ee\u6807\u662f\u5728\u4fdd\u6301\u7c07\u6570\u76ee\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\u63d0\u9ad8\u7c07\u7684\u8d28\u91cf\u3002","title":"K-Means \u7684\u8bc4\u4ef7\u6807\u51c6"},{"location":"ml/10.KMeans/#k-means_6","text":"","title":"K-Means \u805a\u7c7b\u7b97\u6cd5\u51fd\u6570"},{"location":"ml/10.KMeans/#_2","text":"# \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u77e9\u9635\uff0c\u52a0\u8f7d\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u5904\u7406 def loadDataSet(fileName): # \u901a\u7528\u51fd\u6570\uff0c\u7528\u6765\u89e3\u6790\u4ee5 tab \u952e\u5206\u9694\u7684 floats\uff08\u6d6e\u70b9\u6570\uff09\uff0c\u4f8b\u5982: 1.658985 4.285136 dataMat = [] fr = open(fileName) for line in fr.readlines(): curLine = line.strip().split('\\t') fltLine = map(float,curLine) # \u6620\u5c04\u6240\u6709\u7684\u5143\u7d20\u4e3a float\uff08\u6d6e\u70b9\u6570\uff09\u7c7b\u578b dataMat.append(fltLine) return dataMat","title":"\u4ece\u6587\u4ef6\u52a0\u8f7d\u6570\u636e\u96c6"},{"location":"ml/10.KMeans/#_3","text":"# \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u6b27\u5f0f\u8ddd\u79bb\uff08\u53ef\u6839\u636e\u573a\u666f\u9009\u62e9\u5176\u4ed6\u8ddd\u79bb\u516c\u5f0f\uff09 def distEclud(vecA, vecB): return sqrt(sum(power(vecA - vecB, 2))) # la.norm(vecA-vecB)","title":"\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u6b27\u6c0f\u8ddd\u79bb"},{"location":"ml/10.KMeans/#k","text":"# \u4e3a\u7ed9\u5b9a\u6570\u636e\u96c6\u6784\u5efa\u4e00\u4e2a\u5305\u542b k \u4e2a\u968f\u673a\u8d28\u5fc3\u7684\u96c6\u5408\u3002\u968f\u673a\u8d28\u5fc3\u5fc5\u987b\u8981\u5728\u6574\u4e2a\u6570\u636e\u96c6\u7684\u8fb9\u754c\u4e4b\u5185\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u627e\u5230\u6570\u636e\u96c6\u6bcf\u4e00\u7ef4\u7684\u6700\u5c0f\u548c\u6700\u5927\u503c\u6765\u5b8c\u6210\u3002\u7136\u540e\u751f\u6210 0~1.0 \u4e4b\u95f4\u7684\u968f\u673a\u6570\u5e76\u901a\u8fc7\u53d6\u503c\u8303\u56f4\u548c\u6700\u5c0f\u503c\uff0c\u4ee5\u4fbf\u786e\u4fdd\u968f\u673a\u70b9\u5728\u6570\u636e\u7684\u8fb9\u754c\u4e4b\u5185\u3002 def randCent(dataSet, k): n = shape(dataSet)[1] # \u5217\u7684\u6570\u91cf\uff0c\u5373\u6570\u636e\u7684\u7279\u5f81\u4e2a\u6570 centroids = mat(zeros((k,n))) # \u521b\u5efak\u4e2a\u8d28\u5fc3\u77e9\u9635 for j in range(n): # \u521b\u5efa\u968f\u673a\u7c07\u8d28\u5fc3\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u7ef4\u7684\u8fb9\u754c\u5185 minJ = min(dataSet[:,j]) # \u6700\u5c0f\u503c rangeJ = float(max(dataSet[:,j]) - minJ) # \u8303\u56f4 = \u6700\u5927\u503c - \u6700\u5c0f\u503c centroids[:,j] = mat(minJ + rangeJ * random.rand(k,1)) # \u968f\u673a\u751f\u6210\uff0cmat\u4e3anumpy\u51fd\u6570\uff0c\u9700\u8981\u5728\u6700\u5f00\u59cb\u5199\u4e0a from numpy import * return centroids","title":"\u6784\u5efa\u4e00\u4e2a\u5305\u542b K \u4e2a\u968f\u673a\u8d28\u5fc3\u7684\u96c6\u5408"},{"location":"ml/10.KMeans/#k-means_7","text":"# k-means \u805a\u7c7b\u7b97\u6cd5 # \u8be5\u7b97\u6cd5\u4f1a\u521b\u5efak\u4e2a\u8d28\u5fc3\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u70b9\u5206\u914d\u5230\u6700\u8fd1\u7684\u8d28\u5fc3\uff0c\u518d\u91cd\u65b0\u8ba1\u7b97\u8d28\u5fc3\u3002 # \u8fd9\u4e2a\u8fc7\u7a0b\u91cd\u590d\u6570\u6b21\uff0c\u76f4\u5230\u6570\u636e\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u4e0d\u518d\u6539\u53d8\u4f4d\u7f6e\u3002 # \u8fd0\u884c\u7ed3\u679c\uff08\u591a\u6b21\u8fd0\u884c\u7ed3\u679c\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u8bd5\u8bd5\uff0c\u539f\u56e0\u4e3a\u968f\u673a\u8d28\u5fc3\u7684\u5f71\u54cd\uff0c\u4f46\u603b\u7684\u7ed3\u679c\u662f\u5bf9\u7684\uff0c \u56e0\u4e3a\u6570\u636e\u8db3\u591f\u76f8\u4f3c\uff0c\u4e5f\u53ef\u80fd\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff09 def kMeans(dataSet, k, distMeas=distEclud, createCent=randCent): m = shape(dataSet)[0] # \u884c\u6570\uff0c\u5373\u6570\u636e\u4e2a\u6570 clusterAssment = mat(zeros((m, 2))) # \u521b\u5efa\u4e00\u4e2a\u4e0e dataSet \u884c\u6570\u4e00\u6837\uff0c\u4f46\u662f\u6709\u4e24\u5217\u7684\u77e9\u9635\uff0c\u7528\u6765\u4fdd\u5b58\u7c07\u5206\u914d\u7ed3\u679c centroids = createCent(dataSet, k) # \u521b\u5efa\u8d28\u5fc3\uff0c\u968f\u673ak\u4e2a\u8d28\u5fc3 clusterChanged = True while clusterChanged: clusterChanged = False for i in range(m): # \u5faa\u73af\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\u5e76\u5206\u914d\u5230\u6700\u8fd1\u7684\u8d28\u5fc3\u4e2d\u53bb minDist = inf; minIndex = -1 for j in range(k): distJI = distMeas(centroids[j,:],dataSet[i,:]) # \u8ba1\u7b97\u6570\u636e\u70b9\u5230\u8d28\u5fc3\u7684\u8ddd\u79bb if distJI < minDist: # \u5982\u679c\u8ddd\u79bb\u6bd4 minDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u8fd8\u5c0f\uff0c\u66f4\u65b0 minDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u548c\u6700\u5c0f\u8d28\u5fc3\u7684 index\uff08\u7d22\u5f15\uff09 minDist = distJI; minIndex = j if clusterAssment[i, 0] != minIndex: # \u7c07\u5206\u914d\u7ed3\u679c\u6539\u53d8 clusterChanged = True # \u7c07\u6539\u53d8 clusterAssment[i, :] = minIndex,minDist**2 # \u66f4\u65b0\u7c07\u5206\u914d\u7ed3\u679c\u4e3a\u6700\u5c0f\u8d28\u5fc3\u7684 index\uff08\u7d22\u5f15\uff09\uff0cminDist\uff08\u6700\u5c0f\u8ddd\u79bb\uff09\u7684\u5e73\u65b9 print centroids for cent in range(k): # \u66f4\u65b0\u8d28\u5fc3 ptsInClust = dataSet[nonzero(clusterAssment[:, 0].A==cent)[0]] # \u83b7\u53d6\u8be5\u7c07\u4e2d\u7684\u6240\u6709\u70b9 centroids[cent,:] = mean(ptsInClust, axis=0) # \u5c06\u8d28\u5fc3\u4fee\u6539\u4e3a\u7c07\u4e2d\u6240\u6709\u70b9\u7684\u5e73\u5747\u503c\uff0cmean \u5c31\u662f\u6c42\u5e73\u5747\u503c\u7684 return centroids, clusterAssment","title":"K-Means \u805a\u7c7b\u7b97\u6cd5"},{"location":"ml/10.KMeans/#_4","text":"\u6d4b\u8bd5\u4e00\u4e0b\u4ee5\u4e0a\u7684\u57fa\u7840\u51fd\u6570\u662f\u5426\u53ef\u4ee5\u5982\u9884\u671f\u8fd0\u884c, \u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u6d4b\u8bd5\u4e00\u4e0b kMeans \u51fd\u6570\u662f\u5426\u53ef\u4ee5\u5982\u9884\u671f\u8fd0\u884c, \u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u53c2\u8003\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b:","title":"\u6d4b\u8bd5\u51fd\u6570"},{"location":"ml/10.KMeans/#k-means_8","text":"\u5728 kMeans \u7684\u51fd\u6570\u6d4b\u8bd5\u4e2d\uff0c\u53ef\u80fd\u5076\u5c14\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff08\u5c40\u90e8\u6700\u4f18\u7684\u7ed3\u679c\uff0c\u4f46\u4e0d\u662f\u5168\u5c40\u6700\u4f18\u7684\u7ed3\u679c\uff09. \u5c40\u90e8\u6700\u5c0f\u503c\u7684\u7684\u60c5\u51b5\u5982\u4e0b: \u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u6709\u5f88\u591a\u539f\u56e0\uff0c\u53ef\u80fd\u662fk\u503c\u53d6\u7684\u4e0d\u5408\u9002\uff0c\u53ef\u80fd\u662f\u8ddd\u79bb\u51fd\u6570\u4e0d\u5408\u9002\uff0c\u53ef\u80fd\u662f\u6700\u521d\u968f\u673a\u9009\u53d6\u7684\u8d28\u5fc3\u9760\u7684\u592a\u8fd1\uff0c\u4e5f\u53ef\u80fd\u662f\u6570\u636e\u672c\u8eab\u5206\u5e03\u7684\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u751f\u6210\u7684\u7c07\u8fdb\u884c\u540e\u5904\u7406\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5177\u6709\u6700\u5927 SSE \u503c\u7684\u7c07\u5212\u5206\u6210\u4e24\u4e2a\u7c07\u3002\u5177\u4f53\u5b9e\u73b0\u65f6\u53ef\u4ee5\u5c06\u6700\u5927\u7c07\u5305\u542b\u7684\u70b9\u8fc7\u6ee4\u51fa\u6765\u5e76\u5728\u8fd9\u4e9b\u70b9\u4e0a\u8fd0\u884cK-\u5747\u503c\u7b97\u6cd5\uff0c\u4ee4k\u8bbe\u4e3a2\u3002 \u4e3a\u4e86\u4fdd\u6301\u7c07\u603b\u6570\u4e0d\u53d8\uff0c\u53ef\u4ee5\u5c06\u67d0\u4e24\u4e2a\u7c07\u8fdb\u884c\u5408\u5e76\u3002\u4ece\u4e0a\u56fe\u4e2d\u5f88\u660e\u663e\u5c31\u53ef\u4ee5\u770b\u51fa\uff0c\u5e94\u8be5\u5c06\u4e0a\u56fe\u4e0b\u90e8\u4e24\u4e2a\u51fa\u9519\u7684\u7c07\u8d28\u5fc3\u8fdb\u884c\u5408\u5e76\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5bf9\u4e8c\u7ef4\u6570\u636e\u4e0a\u7684\u805a\u7c7b\u8fdb\u884c\u53ef\u89c6\u5316\uff0c \u4f46\u662f\u5982\u679c\u9047\u523040\u7ef4\u7684\u6570\u636e\u5e94\u8be5\u5982\u4f55\u53bb\u505a\uff1f \u6709\u4e24\u79cd\u53ef\u4ee5\u91cf\u5316\u7684\u529e\u6cd5\uff1a\u5408\u5e76\u6700\u8fd1\u7684\u8d28\u5fc3\uff0c\u6216\u8005\u5408\u5e76\u4e24\u4e2a\u4f7f\u5f97 SSE \u589e\u5e45\u6700\u5c0f\u7684\u8d28\u5fc3\u3002 \u7b2c\u4e00\u79cd\u601d\u8def\u901a\u8fc7\u8ba1\u7b97\u6240\u6709\u8d28\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c \u7136\u540e\u5408\u5e76\u8ddd\u79bb\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\u6765\u5b9e\u73b0\u3002\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u9700\u8981\u5408\u5e76\u4e24\u4e2a\u7c07\u7136\u540e\u8ba1\u7b97\u603b SSE \u503c\u3002\u5fc5\u987b\u5728\u6240\u6709\u53ef\u80fd\u7684\u4e24\u4e2a\u7c07\u4e0a\u91cd\u590d\u4e0a\u8ff0\u5904\u7406\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u5408\u5e76\u6700\u4f73\u7684\u4e24\u4e2a\u7c07\u4e3a\u6b62\u3002 \u56e0\u4e3a\u4e0a\u8ff0\u540e\u5904\u7406\u8fc7\u7a0b\u5b9e\u5728\u662f\u6709\u4e9b\u7e41\u7410\uff0c\u6240\u4ee5\u6709\u66f4\u5389\u5bb3\u7684\u5927\u4f6c\u63d0\u51fa\u4e86\u53e6\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u4e8c\u5206K-\u5747\u503c\uff08bisecting K-Means\uff09\u7684\u7b97\u6cd5.","title":"K-Means \u805a\u7c7b\u7b97\u6cd5\u7684\u7f3a\u9677"},{"location":"ml/10.KMeans/#k-means_9","text":"\u8be5\u7b97\u6cd5\u9996\u5148\u5c06\u6240\u6709\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u7c07\uff0c\u7136\u540e\u5c06\u8be5\u7c07\u4e00\u5206\u4e3a\u4e8c\u3002 \u4e4b\u540e\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u7c07\u7ee7\u7eed\u8fdb\u884c\u5212\u5206\uff0c\u9009\u62e9\u54ea\u4e00\u4e2a\u7c07\u8fdb\u884c\u5212\u5206\u53d6\u51b3\u4e8e\u5bf9\u5176\u5212\u5206\u65f6\u5019\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e SSE\uff08\u5e73\u65b9\u548c\u8bef\u5dee\uff09\u7684\u503c\u3002 \u4e0a\u8ff0\u57fa\u4e8e SSE \u7684\u5212\u5206\u8fc7\u7a0b\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u5f97\u5230\u7528\u6237\u6307\u5b9a\u7684\u7c07\u6570\u76ee\u4e3a\u6b62\u3002","title":"\u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5"},{"location":"ml/10.KMeans/#k-means_10","text":"\u5c06\u6240\u6709\u70b9\u770b\u6210\u4e00\u4e2a\u7c07 \u5f53\u7c07\u6570\u76ee\u5c0f\u4e8e k \u65f6 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7c07 \u8ba1\u7b97\u603b\u8bef\u5dee \u5728\u7ed9\u5b9a\u7684\u7c07\u4e0a\u9762\u8fdb\u884c KMeans \u805a\u7c7b\uff08k=2\uff09 \u8ba1\u7b97\u5c06\u8be5\u7c07\u4e00\u5206\u4e3a\u4e8c\u4e4b\u540e\u7684\u603b\u8bef\u5dee \u9009\u62e9\u4f7f\u5f97\u8bef\u5dee\u6700\u5c0f\u7684\u90a3\u4e2a\u7c07\u8fdb\u884c\u5212\u5206\u64cd\u4f5c \u53e6\u4e00\u79cd\u505a\u6cd5\u662f\u9009\u62e9 SSE \u6700\u5927\u7684\u7c07\u8fdb\u884c\u5212\u5206\uff0c\u76f4\u5230\u7c07\u6570\u76ee\u8fbe\u5230\u7528\u6237\u6307\u5b9a\u7684\u6570\u76ee\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u4e3b\u8981\u4ecb\u7ecd\u8be5\u505a\u6cd5\u7684python2\u4ee3\u7801\u5b9e\u73b0","title":"\u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5\u4f2a\u4ee3\u7801"},{"location":"ml/10.KMeans/#k-means_11","text":"# \u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5, \u57fa\u4e8e kMeans \u57fa\u7840\u4e4b\u4e0a\u7684\u4f18\u5316\uff0c\u4ee5\u907f\u514d\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c def biKMeans(dataSet, k, distMeas=distEclud): m = shape(dataSet)[0] clusterAssment = mat(zeros((m,2))) # \u4fdd\u5b58\u6bcf\u4e2a\u6570\u636e\u70b9\u7684\u7c07\u5206\u914d\u7ed3\u679c\u548c\u5e73\u65b9\u8bef\u5dee centroid0 = mean(dataSet, axis=0).tolist()[0] # \u8d28\u5fc3\u521d\u59cb\u5316\u4e3a\u6240\u6709\u6570\u636e\u70b9\u7684\u5747\u503c centList =[centroid0] # \u521d\u59cb\u5316\u53ea\u6709 1 \u4e2a\u8d28\u5fc3\u7684 list for j in range(m): # \u8ba1\u7b97\u6240\u6709\u6570\u636e\u70b9\u5230\u521d\u59cb\u8d28\u5fc3\u7684\u8ddd\u79bb\u5e73\u65b9\u8bef\u5dee clusterAssment[j,1] = distMeas(mat(centroid0), dataSet[j,:])**2 while (len(centList) < k): # \u5f53\u8d28\u5fc3\u6570\u91cf\u5c0f\u4e8e k \u65f6 lowestSSE = inf for i in range(len(centList)): # \u5bf9\u6bcf\u4e00\u4e2a\u8d28\u5fc3 ptsInCurrCluster = dataSet[nonzero(clusterAssment[:,0].A==i)[0],:] # \u83b7\u53d6\u5f53\u524d\u7c07 i \u4e0b\u7684\u6240\u6709\u6570\u636e\u70b9 centroidMat, splitClustAss = kMeans(ptsInCurrCluster, 2, distMeas) # \u5c06\u5f53\u524d\u7c07 i \u8fdb\u884c\u4e8c\u5206 kMeans \u5904\u7406 sseSplit = sum(splitClustAss[:,1]) # \u5c06\u4e8c\u5206 kMeans \u7ed3\u679c\u4e2d\u7684\u5e73\u65b9\u548c\u7684\u8ddd\u79bb\u8fdb\u884c\u6c42\u548c sseNotSplit = sum(clusterAssment[nonzero(clusterAssment[:,0].A!=i)[0],1]) # \u5c06\u672a\u53c2\u4e0e\u4e8c\u5206 kMeans \u5206\u914d\u7ed3\u679c\u4e2d\u7684\u5e73\u65b9\u548c\u7684\u8ddd\u79bb\u8fdb\u884c\u6c42\u548c print \"sseSplit, and notSplit: \",sseSplit,sseNotSplit if (sseSplit + sseNotSplit) < lowestSSE: # \u603b\u7684\uff08\u672a\u62c6\u5206\u548c\u5df2\u62c6\u5206\uff09\u8bef\u5dee\u548c\u8d8a\u5c0f\uff0c\u8d8a\u76f8\u4f3c\uff0c\u6548\u679c\u8d8a\u4f18\u5316\uff0c\u5212\u5206\u7684\u7ed3\u679c\u66f4\u597d\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u7406\u89e3\u5f88\u91cd\u8981\uff0c\u4e0d\u660e\u767d\u7684\u5730\u65b9\u53ef\u4ee5\u548c\u6211\u4eec\u4e00\u8d77\u8ba8\u8bba\uff09 bestCentToSplit = i bestNewCents = centroidMat bestClustAss = splitClustAss.copy() lowestSSE = sseSplit + sseNotSplit # \u627e\u51fa\u6700\u597d\u7684\u7c07\u5206\u914d\u7ed3\u679c bestClustAss[nonzero(bestClustAss[:,0].A == 1)[0],0] = len(centList) # \u8c03\u7528\u4e8c\u5206 kMeans \u7684\u7ed3\u679c\uff0c\u9ed8\u8ba4\u7c07\u662f 0,1. \u5f53\u7136\u4e5f\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6570\u5b57 bestClustAss[nonzero(bestClustAss[:,0].A == 0)[0],0] = bestCentToSplit # \u66f4\u65b0\u4e3a\u6700\u4f73\u8d28\u5fc3 print 'the bestCentToSplit is: ',bestCentToSplit print 'the len of bestClustAss is: ', len(bestClustAss) # \u66f4\u65b0\u8d28\u5fc3\u5217\u8868 centList[bestCentToSplit] = bestNewCents[0,:].tolist()[0] # \u66f4\u65b0\u539f\u8d28\u5fc3 list \u4e2d\u7684\u7b2c i \u4e2a\u8d28\u5fc3\u4e3a\u4f7f\u7528\u4e8c\u5206 kMeans \u540e bestNewCents \u7684\u7b2c\u4e00\u4e2a\u8d28\u5fc3 centList.append(bestNewCents[1,:].tolist()[0]) # \u6dfb\u52a0 bestNewCents \u7684\u7b2c\u4e8c\u4e2a\u8d28\u5fc3 clusterAssment[nonzero(clusterAssment[:,0].A == bestCentToSplit)[0],:]= bestClustAss # \u91cd\u65b0\u5206\u914d\u6700\u597d\u7c07\u4e0b\u7684\u6570\u636e\uff08\u8d28\u5fc3\uff09\u4ee5\u53caSSE return mat(centList), clusterAssment","title":"\u4e8c\u5206 K-Means \u805a\u7c7b\u7b97\u6cd5\u4ee3\u7801"},{"location":"ml/10.KMeans/#kmeans","text":"\u6d4b\u8bd5\u4e00\u4e0b\u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5\uff0c\u8bf7\u770b: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/10.kmeans/kMeans.py \u4e0a\u8ff0\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u591a\u6b21\uff0c\u805a\u7c7b\u4f1a\u6536\u655b\u5230\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u800c\u539f\u59cb\u7684 kMeans() \u51fd\u6570\u5076\u5c14\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\u3002 \u8fd0\u884c\u53c2\u8003\u7ed3\u679c\u5982\u4e0b: \u4f5c\u8005\uff1a \u90a3\u4f0a\u62b9\u5fae\u7b11 , \u6e05\u90fd\u6c5f\u6c34\u90ce GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u6d4b\u8bd5\u4e8c\u5206 KMeans \u805a\u7c7b\u7b97\u6cd5"},{"location":"ml/11.Apriori/","text":"\u7b2c 11 \u7ae0 \u4f7f\u7528 Apriori \u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 \u5173\u8054\u5206\u6790 \u5173\u8054\u5206\u6790\u662f\u4e00\u79cd\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e2d\u5bfb\u627e\u6709\u8da3\u5173\u7cfb\u7684\u4efb\u52a1\u3002 \u8fd9\u4e9b\u5173\u7cfb\u53ef\u4ee5\u6709\u4e24\u79cd\u5f62\u5f0f: \u9891\u7e41\u9879\u96c6\uff08frequent item sets\uff09: \u7ecf\u5e38\u51fa\u73b0\u5728\u4e00\u5757\u7684\u7269\u54c1\u7684\u96c6\u5408\u3002 \u5173\u8054\u89c4\u5219\uff08associational rules\uff09: \u6697\u793a\u4e24\u79cd\u7269\u54c1\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u5f88\u5f3a\u7684\u5173\u7cfb\u3002 \u76f8\u5173\u672f\u8bed \u5173\u8054\u5206\u6790\uff08\u5173\u8054\u89c4\u5219\u5b66\u4e60): \u4ece\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e2d\u5bfb\u627e\u7269\u54c1\u95f4\u7684\u9690\u542b\u5173\u7cfb\u88ab\u79f0\u4f5c \u5173\u8054\u5206\u6790(associati analysis) \u6216\u8005 \u5173\u8054\u89c4\u5219\u5b66\u4e60\uff08association rule learning\uff09 \u3002 \u4e0b\u9762\u662f\u7528\u4e00\u4e2a \u6742\u8d27\u5e97 \u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u9891\u7e41\u9879\u96c6: {\u8461\u8404\u9152, \u5c3f\u5e03, \u8c46\u5976} \u5c31\u662f\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u7684\u4f8b\u5b50\u3002 \u5173\u8054\u89c4\u5219: \u5c3f\u5e03 -> \u8461\u8404\u9152 \u5c31\u662f\u4e00\u4e2a\u5173\u8054\u89c4\u5219\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u987e\u5ba2\u4e70\u4e86\u5c3f\u5e03\uff0c\u90a3\u4e48\u4ed6\u5f88\u53ef\u80fd\u4f1a\u4e70\u8461\u8404\u9152\u3002 \u90a3\u4e48 \u9891\u7e41 \u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\u5462\uff1f\u600e\u4e48\u6837\u624d\u7b97\u9891\u7e41\u5462\uff1f \u5ea6\u91cf\u5b83\u4eec\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u6211\u4eec\u6765\u7b80\u5355\u7684\u4ecb\u7ecd\u4e0b\u652f\u6301\u5ea6\u548c\u53ef\u4fe1\u5ea6\u3002 \u652f\u6301\u5ea6: \u6570\u636e\u96c6\u4e2d\u5305\u542b\u8be5\u9879\u96c6\u7684\u8bb0\u5f55\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u4f8b\u5982\u4e0a\u56fe\u4e2d\uff0c{\u8c46\u5976} \u7684\u652f\u6301\u5ea6\u4e3a 4/5\u3002{\u8c46\u5976, \u5c3f\u5e03} \u7684\u652f\u6301\u5ea6\u4e3a 3/5\u3002 \u53ef\u4fe1\u5ea6: \u9488\u5bf9\u4e00\u6761\u8bf8\u5982 {\u5c3f\u5e03} -> {\u8461\u8404\u9152} \u8fd9\u6837\u5177\u4f53\u7684\u5173\u8054\u89c4\u5219\u6765\u5b9a\u4e49\u7684\u3002\u8fd9\u6761\u89c4\u5219\u7684 \u53ef\u4fe1\u5ea6 \u88ab\u5b9a\u4e49\u4e3a \u652f\u6301\u5ea6({\u5c3f\u5e03, \u8461\u8404\u9152})/\u652f\u6301\u5ea6({\u5c3f\u5e03}) \uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa \u652f\u6301\u5ea6({\u5c3f\u5e03, \u8461\u8404\u9152}) = 3/5\uff0c\u652f\u6301\u5ea6({\u5c3f\u5e03}) = 4/5\uff0c\u6240\u4ee5 {\u5c3f\u5e03} -> {\u8461\u8404\u9152} \u7684\u53ef\u4fe1\u5ea6 = 3/5 / 4/5 = 3/4 = 0.75\u3002 \u652f\u6301\u5ea6 \u548c \u53ef\u4fe1\u5ea6 \u662f\u7528\u6765\u91cf\u5316 \u5173\u8054\u5206\u6790 \u662f\u5426\u6210\u529f\u7684\u4e00\u4e2a\u65b9\u6cd5\u3002 \u5047\u8bbe\u60f3\u627e\u5230\u652f\u6301\u5ea6\u5927\u4e8e 0.8 \u7684\u6240\u6709\u9879\u96c6\uff0c\u5e94\u8be5\u5982\u4f55\u53bb\u505a\u5462\uff1f \u4e00\u4e2a\u529e\u6cd5\u662f\u751f\u6210\u4e00\u4e2a\u7269\u54c1\u6240\u6709\u53ef\u80fd\u7ec4\u5408\u7684\u6e05\u5355\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u79cd\u7ec4\u5408\u7edf\u8ba1\u5b83\u51fa\u73b0\u7684\u9891\u7e41\u7a0b\u5ea6\uff0c\u4f46\u662f\u5f53\u7269\u54c1\u6210\u5343\u4e0a\u4e07\u65f6\uff0c\u4e0a\u8ff0\u505a\u6cd5\u5c31\u975e\u5e38\u975e\u5e38\u6162\u4e86\u3002 \u6211\u4eec\u9700\u8981\u8be6\u7ec6\u5206\u6790\u4e0b\u8fd9\u79cd\u60c5\u51b5\u5e76\u8ba8\u8bba\u4e0b Apriori \u539f\u7406\uff0c\u8be5\u539f\u7406\u4f1a\u51cf\u5c11\u5173\u8054\u89c4\u5219\u5b66\u4e60\u65f6\u6240\u9700\u7684\u8ba1\u7b97\u91cf\u3002 Apriori \u539f\u7406 \u5047\u8bbe\u6211\u4eec\u4e00\u5171\u6709 4 \u4e2a\u5546\u54c1: \u5546\u54c10, \u5546\u54c11, \u5546\u54c12, \u5546\u54c13\u3002 \u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u5982\u4e0b: \u5982\u679c\u6211\u4eec\u8ba1\u7b97\u6240\u6709\u7ec4\u5408\u7684\u652f\u6301\u5ea6\uff0c\u4e5f\u9700\u8981\u8ba1\u7b97 15 \u6b21\u3002\u5373 2^N - 1 = 2^4 - 1 = 15\u3002 \u968f\u7740\u7269\u54c1\u7684\u589e\u52a0\uff0c\u8ba1\u7b97\u7684\u6b21\u6570\u5448\u6307\u6570\u7684\u5f62\u5f0f\u589e\u957f ... \u4e3a\u4e86\u964d\u4f4e\u8ba1\u7b97\u6b21\u6570\u548c\u65f6\u95f4\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd\u6240\u8c13\u7684 Apriori \u539f\u7406\uff0c\u5373\u67d0\u4e2a\u9879\u96c6\u662f\u9891\u7e41\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u5b50\u96c6\u4e5f\u662f\u9891\u7e41\u7684\u3002 \u4f8b\u5982\uff0c\u5982\u679c {0, 1} \u662f\u9891\u7e41\u7684\uff0c\u90a3\u4e48 {0}, {1} \u4e5f\u662f\u9891\u7e41\u7684\u3002 \u8be5\u539f\u7406\u76f4\u89c2\u4e0a\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9\uff0c\u4f46\u662f\u5982\u679c\u53cd\u8fc7\u6765\u770b\u5c31\u6709\u7528\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e00\u4e2a\u9879\u96c6\u662f \u975e\u9891\u7e41\u9879\u96c6 \uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u8d85\u96c6\u4e5f\u662f\u975e\u9891\u7e41\u9879\u96c6\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u5728\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5df2\u77e5\u7070\u8272\u90e8\u5206 {2,3} \u662f \u975e\u9891\u7e41\u9879\u96c6 \uff0c\u90a3\u4e48\u5229\u7528\u4e0a\u9762\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 {0,2,3} {1,2,3} {0,1,2,3} \u90fd\u662f \u975e\u9891\u7e41\u7684 \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba1\u7b97\u51fa {2,3} \u7684\u652f\u6301\u5ea6\uff0c\u77e5\u9053\u5b83\u662f \u975e\u9891\u7e41 \u7684\u4e4b\u540e\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u8ba1\u7b97 {0,2,3} {1,2,3} {0,1,2,3} \u7684\u652f\u6301\u5ea6\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u8fd9\u4e9b\u96c6\u5408\u4e0d\u4f1a\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\u3002 \u4f7f\u7528\u8be5\u539f\u7406\u5c31\u53ef\u4ee5\u907f\u514d\u9879\u96c6\u6570\u76ee\u7684\u6307\u6570\u589e\u957f\uff0c\u4ece\u800c\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u9891\u7e41\u9879\u96c6\u3002 Apriori \u7b97\u6cd5\u4f18\u7f3a\u70b9 * \u4f18\u70b9\uff1a\u6613\u7f16\u7801\u5b9e\u73b0 * \u7f3a\u70b9\uff1a\u5728\u5927\u6570\u636e\u96c6\u4e0a\u53ef\u80fd\u8f83\u6162 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b \u6216\u8005 \u6807\u79f0\u578b\u6570\u636e\u3002 Apriori \u7b97\u6cd5\u6d41\u7a0b\u6b65\u9aa4\uff1a * \u6536\u96c6\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 * \u51c6\u5907\u6570\u636e\uff1a\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u4fdd\u5b58\u96c6\u5408\u3002 * \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 * \u8bad\u7ec3\u6570\u636e\uff1a\u4f7f\u7528Apiori\u7b97\u6cd5\u6765\u627e\u5230\u9891\u7e41\u9879\u96c6\u3002 * \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4e0d\u9700\u8981\u6d4b\u8bd5\u8fc7\u7a0b\u3002 * \u4f7f\u7528\u7b97\u6cd5\uff1a\u7528\u4e8e\u53d1\u73b0\u9891\u7e41\u9879\u96c6\u4ee5\u53ca\u7269\u54c1\u4e4b\u95f4\u7684\u5173\u8054\u89c4\u5219\u3002 Apriori \u7b97\u6cd5\u7684\u4f7f\u7528 \u524d\u9762\u63d0\u5230\uff0c\u5173\u8054\u5206\u6790\u7684\u76ee\u6807\u5305\u62ec\u4e24\u9879: \u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u548c\u53d1\u73b0 \u5173\u8054\u89c4\u5219 \u3002 \u9996\u5148\u9700\u8981\u627e\u5230 \u9891\u7e41\u9879\u96c6 \uff0c\u7136\u540e\u624d\u80fd\u53d1\u73b0 \u5173\u8054\u89c4\u5219 \u3002 Apriori \u7b97\u6cd5\u662f\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u7684\u4e00\u79cd\u65b9\u6cd5\u3002 Apriori \u7b97\u6cd5\u7684\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\u5206\u522b\u662f\u6700\u5c0f\u652f\u6301\u5ea6\u548c\u6570\u636e\u96c6\u3002 \u8be5\u7b97\u6cd5\u9996\u5148\u4f1a\u751f\u6210\u6240\u6709\u5355\u4e2a\u7269\u54c1\u7684\u9879\u96c6\u5217\u8868\u3002 \u63a5\u7740\u626b\u63cf\u4ea4\u6613\u8bb0\u5f55\u6765\u67e5\u770b\u54ea\u4e9b\u9879\u96c6\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\uff0c\u90a3\u4e9b\u4e0d\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u7684\u96c6\u5408\u4f1a\u88ab\u53bb\u6389\u3002 \u71c3\u5c3d\u540e\u5bf9\u751f\u4e0b\u6765\u7684\u96c6\u5408\u8fdb\u884c\u7ec4\u5408\u4ee5\u58f0\u573a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u9879\u96c6\u3002 \u63a5\u4e0b\u6765\u518d\u91cd\u65b0\u626b\u63cf\u4ea4\u6613\u8bb0\u5f55\uff0c\u53bb\u6389\u4e0d\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u7684\u9879\u96c6\u3002 \u8be5\u8fc7\u7a0b\u91cd\u590d\u8fdb\u884c\u76f4\u5230\u6240\u6709\u9879\u96c6\u88ab\u53bb\u6389\u3002 \u751f\u6210\u5019\u9009\u9879\u96c6 \u4e0b\u9762\u4f1a\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u521d\u59cb\u96c6\u5408\u7684\u51fd\u6570\uff0c\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a\u901a\u8fc7\u626b\u63cf\u6570\u636e\u96c6\u4ee5\u5bfb\u627e\u4ea4\u6613\u8bb0\u5f55\u5b50\u96c6\u7684\u51fd\u6570\uff0c \u6570\u636e\u626b\u63cf\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b: \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u6761\u4ea4\u6613\u8bb0\u5f55 tran \u5bf9\u6bcf\u4e2a\u5019\u9009\u9879\u96c6 can * \u68c0\u67e5\u4e00\u4e0b can \u662f\u5426\u662f tran \u7684\u5b50\u96c6: \u5982\u679c\u662f\u5219\u589e\u52a0 can \u7684\u8ba1\u6570\u503c * \u5bf9\u6bcf\u4e2a\u5019\u9009\u9879\u96c6 * \u5982\u679c\u5176\u652f\u6301\u5ea6\u4e0d\u4f4e\u4e8e\u6700\u5c0f\u503c\uff0c\u5219\u4fdd\u7559\u8be5\u9879\u96c6 * \u8fd4\u56de\u6240\u6709\u9891\u7e41\u9879\u96c6\u5217\u8868 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u3002 \u52a0\u8f7d\u6570\u636e\u96c6 # \u52a0\u8f7d\u6570\u636e\u96c6 def loadDataSet(): return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]] \u521b\u5efa\u96c6\u5408 C1\u3002\u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset # \u521b\u5efa\u96c6\u5408 C1\u3002\u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset def createC1(dataSet): \"\"\"createC1\uff08\u521b\u5efa\u96c6\u5408 C1\uff09 Args: dataSet \u539f\u59cb\u6570\u636e\u96c6 Returns: frozenset \u8fd4\u56de\u4e00\u4e2a frozenset \u683c\u5f0f\u7684 list \"\"\" C1 = [] for transaction in dataSet: for item in transaction: if not [item] in C1: # \u904d\u5386\u6240\u6709\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5728 C1 \u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c31 append C1.append([item]) # \u5bf9\u6570\u7ec4\u8fdb\u884c `\u4ece\u5c0f\u5230\u5927` \u7684\u6392\u5e8f print 'sort \u524d=', C1 C1.sort() # frozenset \u8868\u793a\u51bb\u7ed3\u7684 set \u96c6\u5408\uff0c\u5143\u7d20\u65e0\u6539\u53d8\uff1b\u53ef\u4ee5\u628a\u5b83\u5f53\u5b57\u5178\u7684 key \u6765\u4f7f\u7528 print 'sort \u540e=', C1 print 'frozenset=', map(frozenset, C1) return map(frozenset, C1) \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6\uff08minSupport\uff09\u7684\u6570\u636e # \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6\uff08minSupport\uff09\u7684\u6570\u636e def scanD(D, Ck, minSupport): \"\"\"scanD\uff08\u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6 minSupport \u7684\u6570\u636e\uff09 Args: D \u6570\u636e\u96c6 Ck \u5019\u9009\u9879\u96c6\u5217\u8868 minSupport \u6700\u5c0f\u652f\u6301\u5ea6 Returns: retList \u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u96c6\u5408 supportData \u5019\u9009\u9879\u96c6\u652f\u6301\u5ea6\u6570\u636e \"\"\" # ssCnt \u4e34\u65f6\u5b58\u653e\u9009\u6570\u636e\u96c6 Ck \u7684\u9891\u7387. \u4f8b\u5982: a->10, b->5, c->8 ssCnt = {} for tid in D: for can in Ck: # s.issubset(t) \u6d4b\u8bd5\u662f\u5426 s \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u5728 t \u4e2d if can.issubset(tid): if not ssCnt.has_key(can): ssCnt[can] = 1 else: ssCnt[can] += 1 numItems = float(len(D)) # \u6570\u636e\u96c6 D \u7684\u6570\u91cf retList = [] supportData = {} for key in ssCnt: # \u652f\u6301\u5ea6 = \u5019\u9009\u9879\uff08key\uff09\u51fa\u73b0\u7684\u6b21\u6570 / \u6240\u6709\u6570\u636e\u96c6\u7684\u6570\u91cf support = ssCnt[key]/numItems if support >= minSupport: # \u5728 retList \u7684\u9996\u4f4d\u63d2\u5165\u5143\u7d20\uff0c\u53ea\u5b58\u50a8\u652f\u6301\u5ea6\u6ee1\u8db3\u9891\u7e41\u9879\u96c6\u7684\u503c retList.insert(0, key) # \u5b58\u50a8\u6240\u6709\u7684\u5019\u9009\u9879\uff08key\uff09\u548c\u5bf9\u5e94\u7684\u652f\u6301\u5ea6\uff08support\uff09 supportData[key] = support return retList, supportData \u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/11.Apriori/apriori.py \u7ec4\u7ec7\u5b8c\u6574\u7684 Apriori \u7b97\u6cd5 \u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5019\u9009\u9879\u96c6 Ck # \u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5019\u9009\u9879\u96c6 Ck def aprioriGen(Lk, k): \"\"\"aprioriGen\uff08\u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u5019\u9009\u9879\u96c6 Ck\u3002 \u4f8b\u5982: \u4ee5 {0},{1},{2} \u4e3a\u8f93\u5165\u4e14 k = 2 \u5219\u8f93\u51fa {0,1}, {0,2}, {1,2}. \u4ee5 {0,1},{0,2},{1,2} \u4e3a\u8f93\u5165\u4e14 k = 3 \u5219\u8f93\u51fa {0,1,2} \u4ec5\u9700\u8981\u8ba1\u7b97\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u5c06\u6240\u6709\u7684\u7ed3\u679c\u8ba1\u7b97\u51fa\u6765\uff0c\u7136\u540e\u8fdb\u884c\u53bb\u91cd\u64cd\u4f5c \u8fd9\u662f\u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\uff09 Args: Lk \u9891\u7e41\u9879\u96c6\u5217\u8868 k \u8fd4\u56de\u7684\u9879\u96c6\u5143\u7d20\u4e2a\u6570\uff08\u82e5\u5143\u7d20\u7684\u524d k-2 \u76f8\u540c\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff09 Returns: retList \u5143\u7d20\u4e24\u4e24\u5408\u5e76\u7684\u6570\u636e\u96c6 \"\"\" retList = [] lenLk = len(Lk) for i in range(lenLk): for j in range(i+1, lenLk): L1 = list(Lk[i])[: k-2] L2 = list(Lk[j])[: k-2] # print '-----i=', i, k-2, Lk, Lk[i], list(Lk[i])[: k-2] # print '-----j=', j, k-2, Lk, Lk[j], list(Lk[j])[: k-2] L1.sort() L2.sort() # \u7b2c\u4e00\u6b21 L1,L2 \u4e3a\u7a7a\uff0c\u5143\u7d20\u76f4\u63a5\u8fdb\u884c\u5408\u5e76\uff0c\u8fd4\u56de\u5143\u7d20\u4e24\u4e24\u5408\u5e76\u7684\u6570\u636e\u96c6 # if first k-2 elements are equal if L1 == L2: # set union # print 'union=', Lk[i] | Lk[j], Lk[i], Lk[j] retList.append(Lk[i] | Lk[j]) return retList \u627e\u51fa\u6570\u636e\u96c6 dataSet \u4e2d\u652f\u6301\u5ea6 >= \u6700\u5c0f\u652f\u6301\u5ea6\u7684\u5019\u9009\u9879\u96c6\u4ee5\u53ca\u5b83\u4eec\u7684\u652f\u6301\u5ea6\u3002\u5373\u6211\u4eec\u7684\u9891\u7e41\u9879\u96c6\u3002 # \u627e\u51fa\u6570\u636e\u96c6 dataSet \u4e2d\u652f\u6301\u5ea6 >= \u6700\u5c0f\u652f\u6301\u5ea6\u7684\u5019\u9009\u9879\u96c6\u4ee5\u53ca\u5b83\u4eec\u7684\u652f\u6301\u5ea6\u3002\u5373\u6211\u4eec\u7684\u9891\u7e41\u9879\u96c6\u3002 def apriori(dataSet, minSupport=0.5): \"\"\"apriori\uff08\u9996\u5148\u6784\u5efa\u96c6\u5408 C1\uff0c\u7136\u540e\u626b\u63cf\u6570\u636e\u96c6\u6765\u5224\u65ad\u8fd9\u4e9b\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u9879\u96c6\u662f\u5426\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u7684\u8981\u6c42\u3002\u90a3\u4e48\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u7684\u9879\u96c6\u6784\u6210\u96c6\u5408 L1\u3002\u7136\u540e L1 \u4e2d\u7684\u5143\u7d20\u76f8\u4e92\u7ec4\u5408\u6210 C2\uff0cC2 \u518d\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u53d8\u6210 L2\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\uff0c\u77e5\u9053 CN \u7684\u957f\u5ea6\u4e3a 0 \u65f6\u7ed3\u675f\uff0c\u5373\u53ef\u627e\u51fa\u6240\u6709\u9891\u7e41\u9879\u96c6\u7684\u652f\u6301\u5ea6\u3002\uff09 Args: dataSet \u539f\u59cb\u6570\u636e\u96c6 minSupport \u652f\u6301\u5ea6\u7684\u9608\u503c Returns: L \u9891\u7e41\u9879\u96c6\u7684\u5168\u96c6 supportData \u6240\u6709\u5143\u7d20\u548c\u652f\u6301\u5ea6\u7684\u5168\u96c6 \"\"\" # C1 \u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset C1 = createC1(dataSet) # \u5bf9\u6bcf\u4e00\u884c\u8fdb\u884c set \u8f6c\u6362\uff0c\u7136\u540e\u5b58\u653e\u5230\u96c6\u5408\u4e2d D = map(set, dataSet) print 'D=', D # \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 C1 \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u6570\u636e L1, supportData = scanD(D, C1, minSupport) # print \"L1=\", L1, \"\\n\", \"outcome: \", supportData # L \u52a0\u4e86\u4e00\u5c42 list, L \u4e00\u5171 2 \u5c42 list L = [L1] k = 2 # \u5224\u65ad L \u7684\u7b2c k-2 \u9879\u7684\u6570\u636e\u957f\u5ea6\u662f\u5426 > 0\u3002\u7b2c\u4e00\u6b21\u6267\u884c\u65f6 L \u4e3a [[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])]]\u3002L[k-2]=L[0]=[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])]\uff0c\u6700\u540e\u9762 k += 1 while (len(L[k-2]) > 0): print 'k=', k, L, L[k-2] Ck = aprioriGen(L[k-2], k) # \u4f8b\u5982: \u4ee5 {0},{1},{2} \u4e3a\u8f93\u5165\u4e14 k = 2 \u5219\u8f93\u51fa {0,1}, {0,2}, {1,2}. \u4ee5 {0,1},{0,2},{1,2} \u4e3a\u8f93\u5165\u4e14 k = 3 \u5219\u8f93\u51fa {0,1,2} print 'Ck', Ck Lk, supK = scanD(D, Ck, minSupport) # \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u6570\u636e # \u4fdd\u5b58\u6240\u6709\u5019\u9009\u9879\u96c6\u7684\u652f\u6301\u5ea6\uff0c\u5982\u679c\u5b57\u5178\u6ca1\u6709\uff0c\u5c31\u8ffd\u52a0\u5143\u7d20\uff0c\u5982\u679c\u6709\uff0c\u5c31\u66f4\u65b0\u5143\u7d20 supportData.update(supK) if len(Lk) == 0: break # Lk \u8868\u793a\u6ee1\u8db3\u9891\u7e41\u5b50\u9879\u7684\u96c6\u5408\uff0cL \u5143\u7d20\u5728\u589e\u52a0\uff0c\u4f8b\u5982: # l=[[set(1), set(2), set(3)]] # l=[[set(1), set(2), set(3)], [set(1, 2), set(2, 3)]] L.append(Lk) k += 1 # print 'k=', k, len(L[k-2]) return L, supportData \u5230\u8fd9\u4e00\u6b65\uff0c\u6211\u4eec\u5c31\u627e\u51fa\u6211\u4eec\u6240\u9700\u8981\u7684 \u9891\u7e41\u9879\u96c6 \u548c\u4ed6\u4eec\u7684 \u652f\u6301\u5ea6 \u4e86\uff0c\u63a5\u4e0b\u6765\u518d\u627e\u51fa\u5173\u8054\u89c4\u5219\u5373\u53ef\uff01 \u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/11.Apriori/apriori.py \u4ece\u9891\u7e41\u9879\u96c6\u4e2d\u6316\u6398\u5173\u8054\u89c4\u5219 \u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86\u7528\u4e8e\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u7684 Apriori \u7b97\u6cd5\uff0c\u73b0\u5728\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u627e\u51fa \u5173\u8054\u89c4\u5219 \u3002 \u8981\u627e\u5230 \u5173\u8054\u89c4\u5219 \uff0c\u6211\u4eec\u9996\u5148\u4ece\u4e00\u4e2a \u9891\u7e41\u9879\u96c6 \u5f00\u59cb\u3002 \u6211\u4eec\u77e5\u9053\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\uff0c\u4f46\u6211\u4eec\u60f3\u77e5\u9053\u57fa\u4e8e\u8fd9\u4e9b\u5143\u7d20\u80fd\u5426\u83b7\u5f97\u5176\u5b83\u5185\u5bb9\u3002 \u67d0\u4e2a\u5143\u7d20\u6216\u67d0\u4e2a\u5143\u7d20\u96c6\u5408\u53ef\u80fd\u4f1a\u63a8\u5bfc\u51fa\u53e6\u4e00\u4e2a\u5143\u7d20\u3002 \u4ece\u5148\u524d \u6742\u8d27\u5e97 \u7684\u4f8b\u5b50\u53ef\u4ee5\u5f97\u5230\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u9891\u7e41\u9879\u96c6 {\u8c46\u5976,\u83b4\u82e3}\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u6709\u4e00\u6761\u5173\u8054\u89c4\u5219 \u201c\u8c46\u5976 -> \u83b4\u82e3\u201d\u3002 \u8fd9\u610f\u5473\u7740\u5982\u679c\u6709\u4eba\u4e70\u4e86\u8c46\u5976\uff0c\u90a3\u4e48\u5728\u7edf\u8ba1\u4e0a\u4ed6\u4f1a\u8d2d\u4e70\u83b4\u82e3\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002 \u4f46\u662f\uff0c\u8fd9\u4e00\u6761\u4ef6\u53cd\u8fc7\u6765\u5e76\u4e0d\u603b\u662f\u6210\u7acb\u3002 \u4e5f\u5c31\u662f\u8bf4 \u201c\u8c46\u5976 -> \u83b4\u82e3\u201d \u7edf\u8ba1\u4e0a\u663e\u8457\uff0c\u90a3\u4e48 \u201c\u83b4\u82e3 -> \u8c46\u5976\u201d \u4e5f\u4e0d\u4e00\u5b9a\u6210\u7acb\u3002 \u524d\u9762\u6211\u4eec\u7ed9\u51fa\u4e86 \u9891\u7e41\u9879\u96c6 \u7684\u91cf\u5316\u5b9a\u4e49\uff0c\u5373\u5b83\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u3002 \u5bf9\u4e8e \u5173\u8054\u89c4\u5219 \uff0c\u6211\u4eec\u4e5f\u6709\u7c7b\u4f3c\u7684\u91cf\u5316\u65b9\u6cd5\uff0c\u8fd9\u79cd\u91cf\u5316\u6307\u6807\u79f0\u4e4b\u4e3a \u53ef\u4fe1\u5ea6 \u3002 \u4e00\u6761\u89c4\u5219 A -> B \u7684\u53ef\u4fe1\u5ea6\u5b9a\u4e49\u4e3a support(A | B) / support(A)\u3002\uff08\u6ce8\u610f: \u5728 python \u4e2d | \u8868\u793a\u96c6\u5408\u7684\u5e76\u64cd\u4f5c\uff0c\u800c\u6570\u5b66\u4e66\u96c6\u5408\u5e76\u7684\u7b26\u53f7\u662f U\uff09\u3002 A | B \u662f\u6307\u6240\u6709\u51fa\u73b0\u5728\u96c6\u5408 A \u6216\u8005\u96c6\u5408 B \u4e2d\u7684\u5143\u7d20\u3002 \u7531\u4e8e\u6211\u4eec\u5148\u524d\u5df2\u7ecf\u8ba1\u7b97\u51fa\u6240\u6709 \u9891\u7e41\u9879\u96c6 \u7684\u652f\u6301\u5ea6\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u53ea\u4e0d\u8fc7\u662f\u63d0\u53d6\u8fd9\u4e9b\u6570\u636e\u505a\u4e00\u6b21\u9664\u6cd5\u8fd0\u7b97\u5373\u53ef\u3002 \u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u53ef\u4ee5\u4ea7\u751f\u591a\u5c11\u6761\u5173\u8054\u89c4\u5219\u5462\uff1f \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7ed9\u51fa\u7684\u662f\u9879\u96c6 {0,1,2,3} \u4ea7\u751f\u7684\u6240\u6709\u5173\u8054\u89c4\u5219: \u4e0e\u6211\u4eec\u524d\u9762\u7684 \u9891\u7e41\u9879\u96c6 \u751f\u6210\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u9891\u7e41\u9879\u96c6\u4ea7\u751f\u8bb8\u591a\u5173\u8054\u89c4\u5219\u3002 \u5982\u679c\u80fd\u51cf\u5c11\u89c4\u5219\u7684\u6570\u76ee\u6765\u786e\u4fdd\u95ee\u9898\u7684\u53ef\u89e3\u6790\uff0c\u90a3\u4e48\u8ba1\u7b97\u8d77\u6765\u5c31\u4f1a\u597d\u5f88\u591a\u3002 \u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u67d0\u6761\u89c4\u5219\u5e76\u4e0d\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u8981\u6c42\uff0c\u90a3\u4e48\u8be5\u89c4\u5219\u7684\u6240\u6709\u5b50\u96c6\u4e5f\u4e0d\u4f1a\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u7684\u8981\u6c42\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u8bbe 123 -> 3 \u5e76\u4e0d\u6ee1\u8db3\u6700\u5c0f\u53ef\u4fe1\u5ea6\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u77e5\u9053\u4efb\u4f55\u5de6\u90e8\u4e3a {0,1,2} \u5b50\u96c6\u7684\u89c4\u5219\u4e5f\u4e0d\u4f1a\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u7684\u8981\u6c42\u3002 \u5373 12 -> 03 , 02 -> 13 , 01 -> 23 , 2 -> 013 , 1 -> 023 , 0 -> 123 \u90fd\u4e0d\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u8981\u6c42\u3002 \u53ef\u4ee5\u5229\u7528\u5173\u8054\u89c4\u5219\u7684\u4e0a\u8ff0\u6027\u8d28\u5c5e\u6027\u6765\u51cf\u5c11\u9700\u8981\u6d4b\u8bd5\u7684\u89c4\u5219\u6570\u76ee\uff0c\u8ddf\u5148\u524d Apriori \u7b97\u6cd5\u7684\u5957\u8def\u4e00\u6837\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570: \u8ba1\u7b97\u53ef\u4fe1\u5ea6 # \u8ba1\u7b97\u53ef\u4fe1\u5ea6\uff08confidence\uff09 def calcConf(freqSet, H , supportData, brl, minConf=0.7): \"\"\"calcConf\uff08\u5bf9\u4e24\u4e2a\u5143\u7d20\u7684\u9891\u7e41\u9879\uff0c\u8ba1\u7b97\u53ef\u4fe1\u5ea6\uff0c\u4f8b\u5982\uff1a {1,2}/{1} \u6216\u8005 {1,2}/{2} \u770b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09 Args: freqSet \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\uff0c\u4f8b\u5982: frozenset([1, 3]) H \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u96c6\u5408\uff0c\u4f8b\u5982: [frozenset([1]), frozenset([3])] supportData \u6240\u6709\u5143\u7d20\u7684\u652f\u6301\u5ea6\u7684\u5b57\u5178 brl \u5173\u8054\u89c4\u5219\u5217\u8868\u7684\u7a7a\u6570\u7ec4 minConf \u6700\u5c0f\u53ef\u4fe1\u5ea6 Returns: prunedH \u8bb0\u5f55 \u53ef\u4fe1\u5ea6\u5927\u4e8e\u9608\u503c\u7684\u96c6\u5408 \"\"\" # \u8bb0\u5f55\u53ef\u4fe1\u5ea6\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\uff08minConf\uff09\u7684\u96c6\u5408 prunedH = [] for conseq in H: # \u5047\u8bbe freqSet = frozenset([1, 3]), H = [frozenset([1]), frozenset([3])]\uff0c\u90a3\u4e48\u73b0\u5728\u9700\u8981\u6c42\u51fa frozenset([1]) -> frozenset([3]) \u7684\u53ef\u4fe1\u5ea6\u548c frozenset([3]) -> frozenset([1]) \u7684\u53ef\u4fe1\u5ea6 # print 'confData=', freqSet, H, conseq, freqSet-conseq conf = supportData[freqSet]/supportData[freqSet-conseq] # \u652f\u6301\u5ea6\u5b9a\u4e49: a -> b = support(a | b) / support(a). \u5047\u8bbe freqSet = frozenset([1, 3]), conseq = [frozenset([1])]\uff0c\u90a3\u4e48 frozenset([1]) \u81f3 frozenset([3]) \u7684\u53ef\u4fe1\u5ea6\u4e3a = support(a | b) / support(a) = supportData[freqSet]/supportData[freqSet-conseq] = supportData[frozenset([1, 3])] / supportData[frozenset([1])] if conf >= minConf: # \u53ea\u8981\u4e70\u4e86 freqSet-conseq \u96c6\u5408\uff0c\u4e00\u5b9a\u4f1a\u4e70 conseq \u96c6\u5408\uff08freqSet-conseq \u96c6\u5408\u548c conseq \u96c6\u5408\u662f\u5168\u96c6\uff09 print freqSet-conseq, '-->', conseq, 'conf:', conf brl.append((freqSet-conseq, conseq, conf)) prunedH.append(conseq) return prunedH ```` #### \u9012\u5f52\u8ba1\u7b97\u9891\u7e41\u9879\u96c6\u7684\u89c4\u5219 ```python # \u9012\u5f52\u8ba1\u7b97\u9891\u7e41\u9879\u96c6\u7684\u89c4\u5219 def rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7): \"\"\"rulesFromConseq Args: freqSet \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\uff0c\u4f8b\u5982: frozenset([2, 3, 5]) H \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u96c6\u5408\uff0c\u4f8b\u5982: [frozenset([2]), frozenset([3]), frozenset([5])] supportData \u6240\u6709\u5143\u7d20\u7684\u652f\u6301\u5ea6\u7684\u5b57\u5178 brl \u5173\u8054\u89c4\u5219\u5217\u8868\u7684\u6570\u7ec4 minConf \u6700\u5c0f\u53ef\u4fe1\u5ea6 \"\"\" # H[0] \u662f freqSet \u7684\u5143\u7d20\u7ec4\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14 H \u4e2d\u6240\u6709\u5143\u7d20\u7684\u957f\u5ea6\u90fd\u4e00\u6837\uff0c\u957f\u5ea6\u7531 aprioriGen(H, m+1) \u8fd9\u91cc\u7684 m + 1 \u6765\u63a7\u5236 # \u8be5\u51fd\u6570\u9012\u5f52\u65f6\uff0cH[0] \u7684\u957f\u5ea6\u4ece 1 \u5f00\u59cb\u589e\u957f 1 2 3 ... # \u5047\u8bbe freqSet = frozenset([2, 3, 5]), H = [frozenset([2]), frozenset([3]), frozenset([5])] # \u90a3\u4e48 m = len(H[0]) \u7684\u9012\u5f52\u7684\u503c\u4f9d\u6b21\u4e3a 1 2 # \u5728 m = 2 \u65f6, \u8df3\u51fa\u8be5\u9012\u5f52\u3002\u5047\u8bbe\u518d\u9012\u5f52\u4e00\u6b21\uff0c\u90a3\u4e48 H[0] = frozenset([2, 3, 5])\uff0cfreqSet = frozenset([2, 3, 5]) \uff0c\u6ca1\u5fc5\u8981\u518d\u8ba1\u7b97 freqSet \u4e0e H[0] \u7684\u5173\u8054\u89c4\u5219\u4e86\u3002 m = len(H[0]) if (len(freqSet) > (m + 1)): print 'freqSet******************', len(freqSet), m + 1, freqSet, H, H[0] # \u751f\u6210 m+1 \u4e2a\u957f\u5ea6\u7684\u6240\u6709\u53ef\u80fd\u7684 H \u4e2d\u7684\u7ec4\u5408\uff0c\u5047\u8bbe H = [frozenset([2]), frozenset([3]), frozenset([5])] # \u7b2c\u4e00\u6b21\u9012\u5f52\u8c03\u7528\u65f6\u751f\u6210 [frozenset([2, 3]), frozenset([2, 5]), frozenset([3, 5])] # \u7b2c\u4e8c\u6b21 \u3002\u3002\u3002\u6ca1\u6709\u7b2c\u4e8c\u6b21\uff0c\u9012\u5f52\u6761\u4ef6\u5224\u65ad\u65f6\u5df2\u7ecf\u9000\u51fa\u4e86 Hmp1 = aprioriGen(H, m+1) # \u8fd4\u56de\u53ef\u4fe1\u5ea6\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\u7684\u96c6\u5408 Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf) print 'Hmp1=', Hmp1 print 'len(Hmp1)=', len(Hmp1), 'len(freqSet)=', len(freqSet) # \u8ba1\u7b97\u53ef\u4fe1\u5ea6\u540e\uff0c\u8fd8\u6709\u6570\u636e\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\u7684\u8bdd\uff0c\u90a3\u4e48\u7ee7\u7eed\u9012\u5f52\u8c03\u7528\uff0c\u5426\u5219\u8df3\u51fa\u9012\u5f52 if (len(Hmp1) > 1): print '----------------------', Hmp1 # print len(freqSet), len(Hmp1[0]) + 1 rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf) \u751f\u6210\u5173\u8054\u89c4\u5219 # \u751f\u6210\u5173\u8054\u89c4\u5219 def generateRules(L, supportData, minConf=0.7): \"\"\"generateRules Args: L \u9891\u7e41\u9879\u96c6\u5217\u8868 supportData \u9891\u7e41\u9879\u96c6\u652f\u6301\u5ea6\u7684\u5b57\u5178 minConf \u6700\u5c0f\u7f6e\u4fe1\u5ea6 Returns: bigRuleList \u53ef\u4fe1\u5ea6\u89c4\u5219\u5217\u8868\uff08\u5173\u4e8e (A->B+\u7f6e\u4fe1\u5ea6) 3\u4e2a\u5b57\u6bb5\u7684\u7ec4\u5408\uff09 \"\"\" bigRuleList = [] # \u5047\u8bbe L = [[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])], [frozenset([1, 3]), frozenset([2, 5]), frozenset([2, 3]), frozenset([3, 5])], [frozenset([2, 3, 5])]] for i in range(1, len(L)): # \u83b7\u53d6\u9891\u7e41\u9879\u96c6\u4e2d\u6bcf\u4e2a\u7ec4\u5408\u7684\u6240\u6709\u5143\u7d20 for freqSet in L[i]: # \u5047\u8bbe\uff1afreqSet= frozenset([1, 3]), H1=[frozenset([1]), frozenset([3])] # \u7ec4\u5408\u603b\u7684\u5143\u7d20\u5e76\u904d\u5386\u5b50\u5143\u7d20\uff0c\u5e76\u8f6c\u5316\u4e3a frozenset \u96c6\u5408\uff0c\u518d\u5b58\u653e\u5230 list \u5217\u8868\u4e2d H1 = [frozenset([item]) for item in freqSet] # 2 \u4e2a\u7684\u7ec4\u5408\uff0c\u8d70 else, 2 \u4e2a\u4ee5\u4e0a\u7684\u7ec4\u5408\uff0c\u8d70 if if (i > 1): rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf) else: calcConf(freqSet, H1, supportData, bigRuleList, minConf) return bigRuleList \u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u901a\u8fc7\u8c03\u7528 generateRules \u51fd\u6570\u5373\u53ef\u5f97\u51fa\u6211\u4eec\u6240\u9700\u7684 \u5173\u8054\u89c4\u5219 \u3002 \u5206\u7ea7\u6cd5\uff1a \u9891\u7e41\u9879\u96c6->\u5173\u8054\u89c4\u5219 1.\u9996\u5148\u4ece\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u5f00\u59cb\uff0c\u63a5\u7740\u521b\u5efa\u4e00\u4e2a\u89c4\u5219\u5217\u8868\uff0c\u5176\u4e2d\u89c4\u5219\u53f3\u90e8\u5206\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u89c4\u5219\u8fdb\u884c\u6d4b\u8bd5\u3002 2.\u63a5\u4e0b\u6765\u5408\u5e76\u6240\u6709\u5269\u4f59\u89c4\u5219\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u89c4\u5219\u5217\u8868\uff0c\u5176\u4e2d\u89c4\u5219\u53f3\u90e8\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u3002 \u5982\u4e0b\u56fe\uff1a \u6700\u540e\uff1a \u6bcf\u6b21\u589e\u52a0\u9891\u7e41\u9879\u96c6\u7684\u5927\u5c0f\uff0cApriori \u7b97\u6cd5\u90fd\u4f1a\u91cd\u65b0\u626b\u63cf\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u662f\u5426\u6709\u4f18\u5316\u7a7a\u95f4\u5462\uff1f \u4e0b\u4e00\u7ae0\uff1aFP-growth\u7b97\u6cd5\u7b49\u7740\u4f60\u7684\u5230\u6765 \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c11\u7ae0_Apriori\u7b97\u6cd5"},{"location":"ml/11.Apriori/#11-apriori","text":"","title":"\u7b2c 11 \u7ae0 \u4f7f\u7528 Apriori \u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790"},{"location":"ml/11.Apriori/#_1","text":"\u5173\u8054\u5206\u6790\u662f\u4e00\u79cd\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e2d\u5bfb\u627e\u6709\u8da3\u5173\u7cfb\u7684\u4efb\u52a1\u3002 \u8fd9\u4e9b\u5173\u7cfb\u53ef\u4ee5\u6709\u4e24\u79cd\u5f62\u5f0f: \u9891\u7e41\u9879\u96c6\uff08frequent item sets\uff09: \u7ecf\u5e38\u51fa\u73b0\u5728\u4e00\u5757\u7684\u7269\u54c1\u7684\u96c6\u5408\u3002 \u5173\u8054\u89c4\u5219\uff08associational rules\uff09: \u6697\u793a\u4e24\u79cd\u7269\u54c1\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u5f88\u5f3a\u7684\u5173\u7cfb\u3002","title":"\u5173\u8054\u5206\u6790"},{"location":"ml/11.Apriori/#_2","text":"\u5173\u8054\u5206\u6790\uff08\u5173\u8054\u89c4\u5219\u5b66\u4e60): \u4ece\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e2d\u5bfb\u627e\u7269\u54c1\u95f4\u7684\u9690\u542b\u5173\u7cfb\u88ab\u79f0\u4f5c \u5173\u8054\u5206\u6790(associati analysis) \u6216\u8005 \u5173\u8054\u89c4\u5219\u5b66\u4e60\uff08association rule learning\uff09 \u3002 \u4e0b\u9762\u662f\u7528\u4e00\u4e2a \u6742\u8d27\u5e97 \u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u9891\u7e41\u9879\u96c6: {\u8461\u8404\u9152, \u5c3f\u5e03, \u8c46\u5976} \u5c31\u662f\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u7684\u4f8b\u5b50\u3002 \u5173\u8054\u89c4\u5219: \u5c3f\u5e03 -> \u8461\u8404\u9152 \u5c31\u662f\u4e00\u4e2a\u5173\u8054\u89c4\u5219\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u987e\u5ba2\u4e70\u4e86\u5c3f\u5e03\uff0c\u90a3\u4e48\u4ed6\u5f88\u53ef\u80fd\u4f1a\u4e70\u8461\u8404\u9152\u3002 \u90a3\u4e48 \u9891\u7e41 \u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\u5462\uff1f\u600e\u4e48\u6837\u624d\u7b97\u9891\u7e41\u5462\uff1f \u5ea6\u91cf\u5b83\u4eec\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u6211\u4eec\u6765\u7b80\u5355\u7684\u4ecb\u7ecd\u4e0b\u652f\u6301\u5ea6\u548c\u53ef\u4fe1\u5ea6\u3002 \u652f\u6301\u5ea6: \u6570\u636e\u96c6\u4e2d\u5305\u542b\u8be5\u9879\u96c6\u7684\u8bb0\u5f55\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u4f8b\u5982\u4e0a\u56fe\u4e2d\uff0c{\u8c46\u5976} \u7684\u652f\u6301\u5ea6\u4e3a 4/5\u3002{\u8c46\u5976, \u5c3f\u5e03} \u7684\u652f\u6301\u5ea6\u4e3a 3/5\u3002 \u53ef\u4fe1\u5ea6: \u9488\u5bf9\u4e00\u6761\u8bf8\u5982 {\u5c3f\u5e03} -> {\u8461\u8404\u9152} \u8fd9\u6837\u5177\u4f53\u7684\u5173\u8054\u89c4\u5219\u6765\u5b9a\u4e49\u7684\u3002\u8fd9\u6761\u89c4\u5219\u7684 \u53ef\u4fe1\u5ea6 \u88ab\u5b9a\u4e49\u4e3a \u652f\u6301\u5ea6({\u5c3f\u5e03, \u8461\u8404\u9152})/\u652f\u6301\u5ea6({\u5c3f\u5e03}) \uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa \u652f\u6301\u5ea6({\u5c3f\u5e03, \u8461\u8404\u9152}) = 3/5\uff0c\u652f\u6301\u5ea6({\u5c3f\u5e03}) = 4/5\uff0c\u6240\u4ee5 {\u5c3f\u5e03} -> {\u8461\u8404\u9152} \u7684\u53ef\u4fe1\u5ea6 = 3/5 / 4/5 = 3/4 = 0.75\u3002 \u652f\u6301\u5ea6 \u548c \u53ef\u4fe1\u5ea6 \u662f\u7528\u6765\u91cf\u5316 \u5173\u8054\u5206\u6790 \u662f\u5426\u6210\u529f\u7684\u4e00\u4e2a\u65b9\u6cd5\u3002 \u5047\u8bbe\u60f3\u627e\u5230\u652f\u6301\u5ea6\u5927\u4e8e 0.8 \u7684\u6240\u6709\u9879\u96c6\uff0c\u5e94\u8be5\u5982\u4f55\u53bb\u505a\u5462\uff1f \u4e00\u4e2a\u529e\u6cd5\u662f\u751f\u6210\u4e00\u4e2a\u7269\u54c1\u6240\u6709\u53ef\u80fd\u7ec4\u5408\u7684\u6e05\u5355\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u79cd\u7ec4\u5408\u7edf\u8ba1\u5b83\u51fa\u73b0\u7684\u9891\u7e41\u7a0b\u5ea6\uff0c\u4f46\u662f\u5f53\u7269\u54c1\u6210\u5343\u4e0a\u4e07\u65f6\uff0c\u4e0a\u8ff0\u505a\u6cd5\u5c31\u975e\u5e38\u975e\u5e38\u6162\u4e86\u3002 \u6211\u4eec\u9700\u8981\u8be6\u7ec6\u5206\u6790\u4e0b\u8fd9\u79cd\u60c5\u51b5\u5e76\u8ba8\u8bba\u4e0b Apriori \u539f\u7406\uff0c\u8be5\u539f\u7406\u4f1a\u51cf\u5c11\u5173\u8054\u89c4\u5219\u5b66\u4e60\u65f6\u6240\u9700\u7684\u8ba1\u7b97\u91cf\u3002","title":"\u76f8\u5173\u672f\u8bed"},{"location":"ml/11.Apriori/#apriori","text":"\u5047\u8bbe\u6211\u4eec\u4e00\u5171\u6709 4 \u4e2a\u5546\u54c1: \u5546\u54c10, \u5546\u54c11, \u5546\u54c12, \u5546\u54c13\u3002 \u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u5982\u4e0b: \u5982\u679c\u6211\u4eec\u8ba1\u7b97\u6240\u6709\u7ec4\u5408\u7684\u652f\u6301\u5ea6\uff0c\u4e5f\u9700\u8981\u8ba1\u7b97 15 \u6b21\u3002\u5373 2^N - 1 = 2^4 - 1 = 15\u3002 \u968f\u7740\u7269\u54c1\u7684\u589e\u52a0\uff0c\u8ba1\u7b97\u7684\u6b21\u6570\u5448\u6307\u6570\u7684\u5f62\u5f0f\u589e\u957f ... \u4e3a\u4e86\u964d\u4f4e\u8ba1\u7b97\u6b21\u6570\u548c\u65f6\u95f4\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd\u6240\u8c13\u7684 Apriori \u539f\u7406\uff0c\u5373\u67d0\u4e2a\u9879\u96c6\u662f\u9891\u7e41\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u5b50\u96c6\u4e5f\u662f\u9891\u7e41\u7684\u3002 \u4f8b\u5982\uff0c\u5982\u679c {0, 1} \u662f\u9891\u7e41\u7684\uff0c\u90a3\u4e48 {0}, {1} \u4e5f\u662f\u9891\u7e41\u7684\u3002 \u8be5\u539f\u7406\u76f4\u89c2\u4e0a\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9\uff0c\u4f46\u662f\u5982\u679c\u53cd\u8fc7\u6765\u770b\u5c31\u6709\u7528\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e00\u4e2a\u9879\u96c6\u662f \u975e\u9891\u7e41\u9879\u96c6 \uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u8d85\u96c6\u4e5f\u662f\u975e\u9891\u7e41\u9879\u96c6\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u5728\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5df2\u77e5\u7070\u8272\u90e8\u5206 {2,3} \u662f \u975e\u9891\u7e41\u9879\u96c6 \uff0c\u90a3\u4e48\u5229\u7528\u4e0a\u9762\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 {0,2,3} {1,2,3} {0,1,2,3} \u90fd\u662f \u975e\u9891\u7e41\u7684 \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba1\u7b97\u51fa {2,3} \u7684\u652f\u6301\u5ea6\uff0c\u77e5\u9053\u5b83\u662f \u975e\u9891\u7e41 \u7684\u4e4b\u540e\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u8ba1\u7b97 {0,2,3} {1,2,3} {0,1,2,3} \u7684\u652f\u6301\u5ea6\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u8fd9\u4e9b\u96c6\u5408\u4e0d\u4f1a\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\u3002 \u4f7f\u7528\u8be5\u539f\u7406\u5c31\u53ef\u4ee5\u907f\u514d\u9879\u96c6\u6570\u76ee\u7684\u6307\u6570\u589e\u957f\uff0c\u4ece\u800c\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u9891\u7e41\u9879\u96c6\u3002 Apriori \u7b97\u6cd5\u4f18\u7f3a\u70b9 * \u4f18\u70b9\uff1a\u6613\u7f16\u7801\u5b9e\u73b0 * \u7f3a\u70b9\uff1a\u5728\u5927\u6570\u636e\u96c6\u4e0a\u53ef\u80fd\u8f83\u6162 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b \u6216\u8005 \u6807\u79f0\u578b\u6570\u636e\u3002 Apriori \u7b97\u6cd5\u6d41\u7a0b\u6b65\u9aa4\uff1a * \u6536\u96c6\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 * \u51c6\u5907\u6570\u636e\uff1a\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u4fdd\u5b58\u96c6\u5408\u3002 * \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 * \u8bad\u7ec3\u6570\u636e\uff1a\u4f7f\u7528Apiori\u7b97\u6cd5\u6765\u627e\u5230\u9891\u7e41\u9879\u96c6\u3002 * \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4e0d\u9700\u8981\u6d4b\u8bd5\u8fc7\u7a0b\u3002 * \u4f7f\u7528\u7b97\u6cd5\uff1a\u7528\u4e8e\u53d1\u73b0\u9891\u7e41\u9879\u96c6\u4ee5\u53ca\u7269\u54c1\u4e4b\u95f4\u7684\u5173\u8054\u89c4\u5219\u3002","title":"Apriori \u539f\u7406"},{"location":"ml/11.Apriori/#apriori_1","text":"\u524d\u9762\u63d0\u5230\uff0c\u5173\u8054\u5206\u6790\u7684\u76ee\u6807\u5305\u62ec\u4e24\u9879: \u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u548c\u53d1\u73b0 \u5173\u8054\u89c4\u5219 \u3002 \u9996\u5148\u9700\u8981\u627e\u5230 \u9891\u7e41\u9879\u96c6 \uff0c\u7136\u540e\u624d\u80fd\u53d1\u73b0 \u5173\u8054\u89c4\u5219 \u3002 Apriori \u7b97\u6cd5\u662f\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u7684\u4e00\u79cd\u65b9\u6cd5\u3002 Apriori \u7b97\u6cd5\u7684\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\u5206\u522b\u662f\u6700\u5c0f\u652f\u6301\u5ea6\u548c\u6570\u636e\u96c6\u3002 \u8be5\u7b97\u6cd5\u9996\u5148\u4f1a\u751f\u6210\u6240\u6709\u5355\u4e2a\u7269\u54c1\u7684\u9879\u96c6\u5217\u8868\u3002 \u63a5\u7740\u626b\u63cf\u4ea4\u6613\u8bb0\u5f55\u6765\u67e5\u770b\u54ea\u4e9b\u9879\u96c6\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\uff0c\u90a3\u4e9b\u4e0d\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u7684\u96c6\u5408\u4f1a\u88ab\u53bb\u6389\u3002 \u71c3\u5c3d\u540e\u5bf9\u751f\u4e0b\u6765\u7684\u96c6\u5408\u8fdb\u884c\u7ec4\u5408\u4ee5\u58f0\u573a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u9879\u96c6\u3002 \u63a5\u4e0b\u6765\u518d\u91cd\u65b0\u626b\u63cf\u4ea4\u6613\u8bb0\u5f55\uff0c\u53bb\u6389\u4e0d\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u7684\u9879\u96c6\u3002 \u8be5\u8fc7\u7a0b\u91cd\u590d\u8fdb\u884c\u76f4\u5230\u6240\u6709\u9879\u96c6\u88ab\u53bb\u6389\u3002","title":"Apriori \u7b97\u6cd5\u7684\u4f7f\u7528"},{"location":"ml/11.Apriori/#_3","text":"\u4e0b\u9762\u4f1a\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u521d\u59cb\u96c6\u5408\u7684\u51fd\u6570\uff0c\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a\u901a\u8fc7\u626b\u63cf\u6570\u636e\u96c6\u4ee5\u5bfb\u627e\u4ea4\u6613\u8bb0\u5f55\u5b50\u96c6\u7684\u51fd\u6570\uff0c \u6570\u636e\u626b\u63cf\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b: \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u6761\u4ea4\u6613\u8bb0\u5f55 tran \u5bf9\u6bcf\u4e2a\u5019\u9009\u9879\u96c6 can * \u68c0\u67e5\u4e00\u4e0b can \u662f\u5426\u662f tran \u7684\u5b50\u96c6: \u5982\u679c\u662f\u5219\u589e\u52a0 can \u7684\u8ba1\u6570\u503c * \u5bf9\u6bcf\u4e2a\u5019\u9009\u9879\u96c6 * \u5982\u679c\u5176\u652f\u6301\u5ea6\u4e0d\u4f4e\u4e8e\u6700\u5c0f\u503c\uff0c\u5219\u4fdd\u7559\u8be5\u9879\u96c6 * \u8fd4\u56de\u6240\u6709\u9891\u7e41\u9879\u96c6\u5217\u8868 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u3002","title":"\u751f\u6210\u5019\u9009\u9879\u96c6"},{"location":"ml/11.Apriori/#_4","text":"# \u52a0\u8f7d\u6570\u636e\u96c6 def loadDataSet(): return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]","title":"\u52a0\u8f7d\u6570\u636e\u96c6"},{"location":"ml/11.Apriori/#c1-dataset-list-frozenset","text":"# \u521b\u5efa\u96c6\u5408 C1\u3002\u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset def createC1(dataSet): \"\"\"createC1\uff08\u521b\u5efa\u96c6\u5408 C1\uff09 Args: dataSet \u539f\u59cb\u6570\u636e\u96c6 Returns: frozenset \u8fd4\u56de\u4e00\u4e2a frozenset \u683c\u5f0f\u7684 list \"\"\" C1 = [] for transaction in dataSet: for item in transaction: if not [item] in C1: # \u904d\u5386\u6240\u6709\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5728 C1 \u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c31 append C1.append([item]) # \u5bf9\u6570\u7ec4\u8fdb\u884c `\u4ece\u5c0f\u5230\u5927` \u7684\u6392\u5e8f print 'sort \u524d=', C1 C1.sort() # frozenset \u8868\u793a\u51bb\u7ed3\u7684 set \u96c6\u5408\uff0c\u5143\u7d20\u65e0\u6539\u53d8\uff1b\u53ef\u4ee5\u628a\u5b83\u5f53\u5b57\u5178\u7684 key \u6765\u4f7f\u7528 print 'sort \u540e=', C1 print 'frozenset=', map(frozenset, C1) return map(frozenset, C1)","title":"\u521b\u5efa\u96c6\u5408 C1\u3002\u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset"},{"location":"ml/11.Apriori/#ck-d-minsupport","text":"# \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6\uff08minSupport\uff09\u7684\u6570\u636e def scanD(D, Ck, minSupport): \"\"\"scanD\uff08\u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6 minSupport \u7684\u6570\u636e\uff09 Args: D \u6570\u636e\u96c6 Ck \u5019\u9009\u9879\u96c6\u5217\u8868 minSupport \u6700\u5c0f\u652f\u6301\u5ea6 Returns: retList \u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u96c6\u5408 supportData \u5019\u9009\u9879\u96c6\u652f\u6301\u5ea6\u6570\u636e \"\"\" # ssCnt \u4e34\u65f6\u5b58\u653e\u9009\u6570\u636e\u96c6 Ck \u7684\u9891\u7387. \u4f8b\u5982: a->10, b->5, c->8 ssCnt = {} for tid in D: for can in Ck: # s.issubset(t) \u6d4b\u8bd5\u662f\u5426 s \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u5728 t \u4e2d if can.issubset(tid): if not ssCnt.has_key(can): ssCnt[can] = 1 else: ssCnt[can] += 1 numItems = float(len(D)) # \u6570\u636e\u96c6 D \u7684\u6570\u91cf retList = [] supportData = {} for key in ssCnt: # \u652f\u6301\u5ea6 = \u5019\u9009\u9879\uff08key\uff09\u51fa\u73b0\u7684\u6b21\u6570 / \u6240\u6709\u6570\u636e\u96c6\u7684\u6570\u91cf support = ssCnt[key]/numItems if support >= minSupport: # \u5728 retList \u7684\u9996\u4f4d\u63d2\u5165\u5143\u7d20\uff0c\u53ea\u5b58\u50a8\u652f\u6301\u5ea6\u6ee1\u8db3\u9891\u7e41\u9879\u96c6\u7684\u503c retList.insert(0, key) # \u5b58\u50a8\u6240\u6709\u7684\u5019\u9009\u9879\uff08key\uff09\u548c\u5bf9\u5e94\u7684\u652f\u6301\u5ea6\uff08support\uff09 supportData[key] = support return retList, supportData \u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/11.Apriori/apriori.py","title":"\u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e\u6700\u5c0f\u652f\u6301\u5ea6\uff08minSupport\uff09\u7684\u6570\u636e"},{"location":"ml/11.Apriori/#apriori_2","text":"","title":"\u7ec4\u7ec7\u5b8c\u6574\u7684 Apriori \u7b97\u6cd5"},{"location":"ml/11.Apriori/#lk-k-ck","text":"# \u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5019\u9009\u9879\u96c6 Ck def aprioriGen(Lk, k): \"\"\"aprioriGen\uff08\u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u5019\u9009\u9879\u96c6 Ck\u3002 \u4f8b\u5982: \u4ee5 {0},{1},{2} \u4e3a\u8f93\u5165\u4e14 k = 2 \u5219\u8f93\u51fa {0,1}, {0,2}, {1,2}. \u4ee5 {0,1},{0,2},{1,2} \u4e3a\u8f93\u5165\u4e14 k = 3 \u5219\u8f93\u51fa {0,1,2} \u4ec5\u9700\u8981\u8ba1\u7b97\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u5c06\u6240\u6709\u7684\u7ed3\u679c\u8ba1\u7b97\u51fa\u6765\uff0c\u7136\u540e\u8fdb\u884c\u53bb\u91cd\u64cd\u4f5c \u8fd9\u662f\u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\uff09 Args: Lk \u9891\u7e41\u9879\u96c6\u5217\u8868 k \u8fd4\u56de\u7684\u9879\u96c6\u5143\u7d20\u4e2a\u6570\uff08\u82e5\u5143\u7d20\u7684\u524d k-2 \u76f8\u540c\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff09 Returns: retList \u5143\u7d20\u4e24\u4e24\u5408\u5e76\u7684\u6570\u636e\u96c6 \"\"\" retList = [] lenLk = len(Lk) for i in range(lenLk): for j in range(i+1, lenLk): L1 = list(Lk[i])[: k-2] L2 = list(Lk[j])[: k-2] # print '-----i=', i, k-2, Lk, Lk[i], list(Lk[i])[: k-2] # print '-----j=', j, k-2, Lk, Lk[j], list(Lk[j])[: k-2] L1.sort() L2.sort() # \u7b2c\u4e00\u6b21 L1,L2 \u4e3a\u7a7a\uff0c\u5143\u7d20\u76f4\u63a5\u8fdb\u884c\u5408\u5e76\uff0c\u8fd4\u56de\u5143\u7d20\u4e24\u4e24\u5408\u5e76\u7684\u6570\u636e\u96c6 # if first k-2 elements are equal if L1 == L2: # set union # print 'union=', Lk[i] | Lk[j], Lk[i], Lk[j] retList.append(Lk[i] | Lk[j]) return retList","title":"\u8f93\u5165\u9891\u7e41\u9879\u96c6\u5217\u8868 Lk \u4e0e\u8fd4\u56de\u7684\u5143\u7d20\u4e2a\u6570 k\uff0c\u7136\u540e\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5019\u9009\u9879\u96c6 Ck"},{"location":"ml/11.Apriori/#dataset","text":"# \u627e\u51fa\u6570\u636e\u96c6 dataSet \u4e2d\u652f\u6301\u5ea6 >= \u6700\u5c0f\u652f\u6301\u5ea6\u7684\u5019\u9009\u9879\u96c6\u4ee5\u53ca\u5b83\u4eec\u7684\u652f\u6301\u5ea6\u3002\u5373\u6211\u4eec\u7684\u9891\u7e41\u9879\u96c6\u3002 def apriori(dataSet, minSupport=0.5): \"\"\"apriori\uff08\u9996\u5148\u6784\u5efa\u96c6\u5408 C1\uff0c\u7136\u540e\u626b\u63cf\u6570\u636e\u96c6\u6765\u5224\u65ad\u8fd9\u4e9b\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u9879\u96c6\u662f\u5426\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u7684\u8981\u6c42\u3002\u90a3\u4e48\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u7684\u9879\u96c6\u6784\u6210\u96c6\u5408 L1\u3002\u7136\u540e L1 \u4e2d\u7684\u5143\u7d20\u76f8\u4e92\u7ec4\u5408\u6210 C2\uff0cC2 \u518d\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u53d8\u6210 L2\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\uff0c\u77e5\u9053 CN \u7684\u957f\u5ea6\u4e3a 0 \u65f6\u7ed3\u675f\uff0c\u5373\u53ef\u627e\u51fa\u6240\u6709\u9891\u7e41\u9879\u96c6\u7684\u652f\u6301\u5ea6\u3002\uff09 Args: dataSet \u539f\u59cb\u6570\u636e\u96c6 minSupport \u652f\u6301\u5ea6\u7684\u9608\u503c Returns: L \u9891\u7e41\u9879\u96c6\u7684\u5168\u96c6 supportData \u6240\u6709\u5143\u7d20\u548c\u652f\u6301\u5ea6\u7684\u5168\u96c6 \"\"\" # C1 \u5373\u5bf9 dataSet \u8fdb\u884c\u53bb\u91cd\uff0c\u6392\u5e8f\uff0c\u653e\u5165 list \u4e2d\uff0c\u7136\u540e\u8f6c\u6362\u6240\u6709\u7684\u5143\u7d20\u4e3a frozenset C1 = createC1(dataSet) # \u5bf9\u6bcf\u4e00\u884c\u8fdb\u884c set \u8f6c\u6362\uff0c\u7136\u540e\u5b58\u653e\u5230\u96c6\u5408\u4e2d D = map(set, dataSet) print 'D=', D # \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 C1 \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u6570\u636e L1, supportData = scanD(D, C1, minSupport) # print \"L1=\", L1, \"\\n\", \"outcome: \", supportData # L \u52a0\u4e86\u4e00\u5c42 list, L \u4e00\u5171 2 \u5c42 list L = [L1] k = 2 # \u5224\u65ad L \u7684\u7b2c k-2 \u9879\u7684\u6570\u636e\u957f\u5ea6\u662f\u5426 > 0\u3002\u7b2c\u4e00\u6b21\u6267\u884c\u65f6 L \u4e3a [[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])]]\u3002L[k-2]=L[0]=[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])]\uff0c\u6700\u540e\u9762 k += 1 while (len(L[k-2]) > 0): print 'k=', k, L, L[k-2] Ck = aprioriGen(L[k-2], k) # \u4f8b\u5982: \u4ee5 {0},{1},{2} \u4e3a\u8f93\u5165\u4e14 k = 2 \u5219\u8f93\u51fa {0,1}, {0,2}, {1,2}. \u4ee5 {0,1},{0,2},{1,2} \u4e3a\u8f93\u5165\u4e14 k = 3 \u5219\u8f93\u51fa {0,1,2} print 'Ck', Ck Lk, supK = scanD(D, Ck, minSupport) # \u8ba1\u7b97\u5019\u9009\u6570\u636e\u96c6 CK \u5728\u6570\u636e\u96c6 D \u4e2d\u7684\u652f\u6301\u5ea6\uff0c\u5e76\u8fd4\u56de\u652f\u6301\u5ea6\u5927\u4e8e minSupport \u7684\u6570\u636e # \u4fdd\u5b58\u6240\u6709\u5019\u9009\u9879\u96c6\u7684\u652f\u6301\u5ea6\uff0c\u5982\u679c\u5b57\u5178\u6ca1\u6709\uff0c\u5c31\u8ffd\u52a0\u5143\u7d20\uff0c\u5982\u679c\u6709\uff0c\u5c31\u66f4\u65b0\u5143\u7d20 supportData.update(supK) if len(Lk) == 0: break # Lk \u8868\u793a\u6ee1\u8db3\u9891\u7e41\u5b50\u9879\u7684\u96c6\u5408\uff0cL \u5143\u7d20\u5728\u589e\u52a0\uff0c\u4f8b\u5982: # l=[[set(1), set(2), set(3)]] # l=[[set(1), set(2), set(3)], [set(1, 2), set(2, 3)]] L.append(Lk) k += 1 # print 'k=', k, len(L[k-2]) return L, supportData \u5230\u8fd9\u4e00\u6b65\uff0c\u6211\u4eec\u5c31\u627e\u51fa\u6211\u4eec\u6240\u9700\u8981\u7684 \u9891\u7e41\u9879\u96c6 \u548c\u4ed6\u4eec\u7684 \u652f\u6301\u5ea6 \u4e86\uff0c\u63a5\u4e0b\u6765\u518d\u627e\u51fa\u5173\u8054\u89c4\u5219\u5373\u53ef\uff01 \u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/11.Apriori/apriori.py","title":"\u627e\u51fa\u6570\u636e\u96c6 dataSet \u4e2d\u652f\u6301\u5ea6 &gt;= \u6700\u5c0f\u652f\u6301\u5ea6\u7684\u5019\u9009\u9879\u96c6\u4ee5\u53ca\u5b83\u4eec\u7684\u652f\u6301\u5ea6\u3002\u5373\u6211\u4eec\u7684\u9891\u7e41\u9879\u96c6\u3002"},{"location":"ml/11.Apriori/#_5","text":"\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86\u7528\u4e8e\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u7684 Apriori \u7b97\u6cd5\uff0c\u73b0\u5728\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u627e\u51fa \u5173\u8054\u89c4\u5219 \u3002 \u8981\u627e\u5230 \u5173\u8054\u89c4\u5219 \uff0c\u6211\u4eec\u9996\u5148\u4ece\u4e00\u4e2a \u9891\u7e41\u9879\u96c6 \u5f00\u59cb\u3002 \u6211\u4eec\u77e5\u9053\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\uff0c\u4f46\u6211\u4eec\u60f3\u77e5\u9053\u57fa\u4e8e\u8fd9\u4e9b\u5143\u7d20\u80fd\u5426\u83b7\u5f97\u5176\u5b83\u5185\u5bb9\u3002 \u67d0\u4e2a\u5143\u7d20\u6216\u67d0\u4e2a\u5143\u7d20\u96c6\u5408\u53ef\u80fd\u4f1a\u63a8\u5bfc\u51fa\u53e6\u4e00\u4e2a\u5143\u7d20\u3002 \u4ece\u5148\u524d \u6742\u8d27\u5e97 \u7684\u4f8b\u5b50\u53ef\u4ee5\u5f97\u5230\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u9891\u7e41\u9879\u96c6 {\u8c46\u5976,\u83b4\u82e3}\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u6709\u4e00\u6761\u5173\u8054\u89c4\u5219 \u201c\u8c46\u5976 -> \u83b4\u82e3\u201d\u3002 \u8fd9\u610f\u5473\u7740\u5982\u679c\u6709\u4eba\u4e70\u4e86\u8c46\u5976\uff0c\u90a3\u4e48\u5728\u7edf\u8ba1\u4e0a\u4ed6\u4f1a\u8d2d\u4e70\u83b4\u82e3\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002 \u4f46\u662f\uff0c\u8fd9\u4e00\u6761\u4ef6\u53cd\u8fc7\u6765\u5e76\u4e0d\u603b\u662f\u6210\u7acb\u3002 \u4e5f\u5c31\u662f\u8bf4 \u201c\u8c46\u5976 -> \u83b4\u82e3\u201d \u7edf\u8ba1\u4e0a\u663e\u8457\uff0c\u90a3\u4e48 \u201c\u83b4\u82e3 -> \u8c46\u5976\u201d \u4e5f\u4e0d\u4e00\u5b9a\u6210\u7acb\u3002 \u524d\u9762\u6211\u4eec\u7ed9\u51fa\u4e86 \u9891\u7e41\u9879\u96c6 \u7684\u91cf\u5316\u5b9a\u4e49\uff0c\u5373\u5b83\u6ee1\u8db3\u6700\u5c0f\u652f\u6301\u5ea6\u8981\u6c42\u3002 \u5bf9\u4e8e \u5173\u8054\u89c4\u5219 \uff0c\u6211\u4eec\u4e5f\u6709\u7c7b\u4f3c\u7684\u91cf\u5316\u65b9\u6cd5\uff0c\u8fd9\u79cd\u91cf\u5316\u6307\u6807\u79f0\u4e4b\u4e3a \u53ef\u4fe1\u5ea6 \u3002 \u4e00\u6761\u89c4\u5219 A -> B \u7684\u53ef\u4fe1\u5ea6\u5b9a\u4e49\u4e3a support(A | B) / support(A)\u3002\uff08\u6ce8\u610f: \u5728 python \u4e2d | \u8868\u793a\u96c6\u5408\u7684\u5e76\u64cd\u4f5c\uff0c\u800c\u6570\u5b66\u4e66\u96c6\u5408\u5e76\u7684\u7b26\u53f7\u662f U\uff09\u3002 A | B \u662f\u6307\u6240\u6709\u51fa\u73b0\u5728\u96c6\u5408 A \u6216\u8005\u96c6\u5408 B \u4e2d\u7684\u5143\u7d20\u3002 \u7531\u4e8e\u6211\u4eec\u5148\u524d\u5df2\u7ecf\u8ba1\u7b97\u51fa\u6240\u6709 \u9891\u7e41\u9879\u96c6 \u7684\u652f\u6301\u5ea6\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u53ea\u4e0d\u8fc7\u662f\u63d0\u53d6\u8fd9\u4e9b\u6570\u636e\u505a\u4e00\u6b21\u9664\u6cd5\u8fd0\u7b97\u5373\u53ef\u3002","title":"\u4ece\u9891\u7e41\u9879\u96c6\u4e2d\u6316\u6398\u5173\u8054\u89c4\u5219"},{"location":"ml/11.Apriori/#_6","text":"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7ed9\u51fa\u7684\u662f\u9879\u96c6 {0,1,2,3} \u4ea7\u751f\u7684\u6240\u6709\u5173\u8054\u89c4\u5219: \u4e0e\u6211\u4eec\u524d\u9762\u7684 \u9891\u7e41\u9879\u96c6 \u751f\u6210\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u9891\u7e41\u9879\u96c6\u4ea7\u751f\u8bb8\u591a\u5173\u8054\u89c4\u5219\u3002 \u5982\u679c\u80fd\u51cf\u5c11\u89c4\u5219\u7684\u6570\u76ee\u6765\u786e\u4fdd\u95ee\u9898\u7684\u53ef\u89e3\u6790\uff0c\u90a3\u4e48\u8ba1\u7b97\u8d77\u6765\u5c31\u4f1a\u597d\u5f88\u591a\u3002 \u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u67d0\u6761\u89c4\u5219\u5e76\u4e0d\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u8981\u6c42\uff0c\u90a3\u4e48\u8be5\u89c4\u5219\u7684\u6240\u6709\u5b50\u96c6\u4e5f\u4e0d\u4f1a\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u7684\u8981\u6c42\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u8bbe 123 -> 3 \u5e76\u4e0d\u6ee1\u8db3\u6700\u5c0f\u53ef\u4fe1\u5ea6\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u77e5\u9053\u4efb\u4f55\u5de6\u90e8\u4e3a {0,1,2} \u5b50\u96c6\u7684\u89c4\u5219\u4e5f\u4e0d\u4f1a\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u7684\u8981\u6c42\u3002 \u5373 12 -> 03 , 02 -> 13 , 01 -> 23 , 2 -> 013 , 1 -> 023 , 0 -> 123 \u90fd\u4e0d\u6ee1\u8db3 \u6700\u5c0f\u53ef\u4fe1\u5ea6 \u8981\u6c42\u3002 \u53ef\u4ee5\u5229\u7528\u5173\u8054\u89c4\u5219\u7684\u4e0a\u8ff0\u6027\u8d28\u5c5e\u6027\u6765\u51cf\u5c11\u9700\u8981\u6d4b\u8bd5\u7684\u89c4\u5219\u6570\u76ee\uff0c\u8ddf\u5148\u524d Apriori \u7b97\u6cd5\u7684\u5957\u8def\u4e00\u6837\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570:","title":"\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u53ef\u4ee5\u4ea7\u751f\u591a\u5c11\u6761\u5173\u8054\u89c4\u5219\u5462\uff1f"},{"location":"ml/11.Apriori/#_7","text":"# \u8ba1\u7b97\u53ef\u4fe1\u5ea6\uff08confidence\uff09 def calcConf(freqSet, H , supportData, brl, minConf=0.7): \"\"\"calcConf\uff08\u5bf9\u4e24\u4e2a\u5143\u7d20\u7684\u9891\u7e41\u9879\uff0c\u8ba1\u7b97\u53ef\u4fe1\u5ea6\uff0c\u4f8b\u5982\uff1a {1,2}/{1} \u6216\u8005 {1,2}/{2} \u770b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09 Args: freqSet \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\uff0c\u4f8b\u5982: frozenset([1, 3]) H \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u96c6\u5408\uff0c\u4f8b\u5982: [frozenset([1]), frozenset([3])] supportData \u6240\u6709\u5143\u7d20\u7684\u652f\u6301\u5ea6\u7684\u5b57\u5178 brl \u5173\u8054\u89c4\u5219\u5217\u8868\u7684\u7a7a\u6570\u7ec4 minConf \u6700\u5c0f\u53ef\u4fe1\u5ea6 Returns: prunedH \u8bb0\u5f55 \u53ef\u4fe1\u5ea6\u5927\u4e8e\u9608\u503c\u7684\u96c6\u5408 \"\"\" # \u8bb0\u5f55\u53ef\u4fe1\u5ea6\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\uff08minConf\uff09\u7684\u96c6\u5408 prunedH = [] for conseq in H: # \u5047\u8bbe freqSet = frozenset([1, 3]), H = [frozenset([1]), frozenset([3])]\uff0c\u90a3\u4e48\u73b0\u5728\u9700\u8981\u6c42\u51fa frozenset([1]) -> frozenset([3]) \u7684\u53ef\u4fe1\u5ea6\u548c frozenset([3]) -> frozenset([1]) \u7684\u53ef\u4fe1\u5ea6 # print 'confData=', freqSet, H, conseq, freqSet-conseq conf = supportData[freqSet]/supportData[freqSet-conseq] # \u652f\u6301\u5ea6\u5b9a\u4e49: a -> b = support(a | b) / support(a). \u5047\u8bbe freqSet = frozenset([1, 3]), conseq = [frozenset([1])]\uff0c\u90a3\u4e48 frozenset([1]) \u81f3 frozenset([3]) \u7684\u53ef\u4fe1\u5ea6\u4e3a = support(a | b) / support(a) = supportData[freqSet]/supportData[freqSet-conseq] = supportData[frozenset([1, 3])] / supportData[frozenset([1])] if conf >= minConf: # \u53ea\u8981\u4e70\u4e86 freqSet-conseq \u96c6\u5408\uff0c\u4e00\u5b9a\u4f1a\u4e70 conseq \u96c6\u5408\uff08freqSet-conseq \u96c6\u5408\u548c conseq \u96c6\u5408\u662f\u5168\u96c6\uff09 print freqSet-conseq, '-->', conseq, 'conf:', conf brl.append((freqSet-conseq, conseq, conf)) prunedH.append(conseq) return prunedH ```` #### \u9012\u5f52\u8ba1\u7b97\u9891\u7e41\u9879\u96c6\u7684\u89c4\u5219 ```python # \u9012\u5f52\u8ba1\u7b97\u9891\u7e41\u9879\u96c6\u7684\u89c4\u5219 def rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7): \"\"\"rulesFromConseq Args: freqSet \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\uff0c\u4f8b\u5982: frozenset([2, 3, 5]) H \u9891\u7e41\u9879\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u96c6\u5408\uff0c\u4f8b\u5982: [frozenset([2]), frozenset([3]), frozenset([5])] supportData \u6240\u6709\u5143\u7d20\u7684\u652f\u6301\u5ea6\u7684\u5b57\u5178 brl \u5173\u8054\u89c4\u5219\u5217\u8868\u7684\u6570\u7ec4 minConf \u6700\u5c0f\u53ef\u4fe1\u5ea6 \"\"\" # H[0] \u662f freqSet \u7684\u5143\u7d20\u7ec4\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14 H \u4e2d\u6240\u6709\u5143\u7d20\u7684\u957f\u5ea6\u90fd\u4e00\u6837\uff0c\u957f\u5ea6\u7531 aprioriGen(H, m+1) \u8fd9\u91cc\u7684 m + 1 \u6765\u63a7\u5236 # \u8be5\u51fd\u6570\u9012\u5f52\u65f6\uff0cH[0] \u7684\u957f\u5ea6\u4ece 1 \u5f00\u59cb\u589e\u957f 1 2 3 ... # \u5047\u8bbe freqSet = frozenset([2, 3, 5]), H = [frozenset([2]), frozenset([3]), frozenset([5])] # \u90a3\u4e48 m = len(H[0]) \u7684\u9012\u5f52\u7684\u503c\u4f9d\u6b21\u4e3a 1 2 # \u5728 m = 2 \u65f6, \u8df3\u51fa\u8be5\u9012\u5f52\u3002\u5047\u8bbe\u518d\u9012\u5f52\u4e00\u6b21\uff0c\u90a3\u4e48 H[0] = frozenset([2, 3, 5])\uff0cfreqSet = frozenset([2, 3, 5]) \uff0c\u6ca1\u5fc5\u8981\u518d\u8ba1\u7b97 freqSet \u4e0e H[0] \u7684\u5173\u8054\u89c4\u5219\u4e86\u3002 m = len(H[0]) if (len(freqSet) > (m + 1)): print 'freqSet******************', len(freqSet), m + 1, freqSet, H, H[0] # \u751f\u6210 m+1 \u4e2a\u957f\u5ea6\u7684\u6240\u6709\u53ef\u80fd\u7684 H \u4e2d\u7684\u7ec4\u5408\uff0c\u5047\u8bbe H = [frozenset([2]), frozenset([3]), frozenset([5])] # \u7b2c\u4e00\u6b21\u9012\u5f52\u8c03\u7528\u65f6\u751f\u6210 [frozenset([2, 3]), frozenset([2, 5]), frozenset([3, 5])] # \u7b2c\u4e8c\u6b21 \u3002\u3002\u3002\u6ca1\u6709\u7b2c\u4e8c\u6b21\uff0c\u9012\u5f52\u6761\u4ef6\u5224\u65ad\u65f6\u5df2\u7ecf\u9000\u51fa\u4e86 Hmp1 = aprioriGen(H, m+1) # \u8fd4\u56de\u53ef\u4fe1\u5ea6\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\u7684\u96c6\u5408 Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf) print 'Hmp1=', Hmp1 print 'len(Hmp1)=', len(Hmp1), 'len(freqSet)=', len(freqSet) # \u8ba1\u7b97\u53ef\u4fe1\u5ea6\u540e\uff0c\u8fd8\u6709\u6570\u636e\u5927\u4e8e\u6700\u5c0f\u53ef\u4fe1\u5ea6\u7684\u8bdd\uff0c\u90a3\u4e48\u7ee7\u7eed\u9012\u5f52\u8c03\u7528\uff0c\u5426\u5219\u8df3\u51fa\u9012\u5f52 if (len(Hmp1) > 1): print '----------------------', Hmp1 # print len(freqSet), len(Hmp1[0]) + 1 rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)","title":"\u8ba1\u7b97\u53ef\u4fe1\u5ea6"},{"location":"ml/11.Apriori/#_8","text":"# \u751f\u6210\u5173\u8054\u89c4\u5219 def generateRules(L, supportData, minConf=0.7): \"\"\"generateRules Args: L \u9891\u7e41\u9879\u96c6\u5217\u8868 supportData \u9891\u7e41\u9879\u96c6\u652f\u6301\u5ea6\u7684\u5b57\u5178 minConf \u6700\u5c0f\u7f6e\u4fe1\u5ea6 Returns: bigRuleList \u53ef\u4fe1\u5ea6\u89c4\u5219\u5217\u8868\uff08\u5173\u4e8e (A->B+\u7f6e\u4fe1\u5ea6) 3\u4e2a\u5b57\u6bb5\u7684\u7ec4\u5408\uff09 \"\"\" bigRuleList = [] # \u5047\u8bbe L = [[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])], [frozenset([1, 3]), frozenset([2, 5]), frozenset([2, 3]), frozenset([3, 5])], [frozenset([2, 3, 5])]] for i in range(1, len(L)): # \u83b7\u53d6\u9891\u7e41\u9879\u96c6\u4e2d\u6bcf\u4e2a\u7ec4\u5408\u7684\u6240\u6709\u5143\u7d20 for freqSet in L[i]: # \u5047\u8bbe\uff1afreqSet= frozenset([1, 3]), H1=[frozenset([1]), frozenset([3])] # \u7ec4\u5408\u603b\u7684\u5143\u7d20\u5e76\u904d\u5386\u5b50\u5143\u7d20\uff0c\u5e76\u8f6c\u5316\u4e3a frozenset \u96c6\u5408\uff0c\u518d\u5b58\u653e\u5230 list \u5217\u8868\u4e2d H1 = [frozenset([item]) for item in freqSet] # 2 \u4e2a\u7684\u7ec4\u5408\uff0c\u8d70 else, 2 \u4e2a\u4ee5\u4e0a\u7684\u7ec4\u5408\uff0c\u8d70 if if (i > 1): rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf) else: calcConf(freqSet, H1, supportData, bigRuleList, minConf) return bigRuleList \u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u901a\u8fc7\u8c03\u7528 generateRules \u51fd\u6570\u5373\u53ef\u5f97\u51fa\u6211\u4eec\u6240\u9700\u7684 \u5173\u8054\u89c4\u5219 \u3002 \u5206\u7ea7\u6cd5\uff1a \u9891\u7e41\u9879\u96c6->\u5173\u8054\u89c4\u5219 1.\u9996\u5148\u4ece\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u5f00\u59cb\uff0c\u63a5\u7740\u521b\u5efa\u4e00\u4e2a\u89c4\u5219\u5217\u8868\uff0c\u5176\u4e2d\u89c4\u5219\u53f3\u90e8\u5206\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u89c4\u5219\u8fdb\u884c\u6d4b\u8bd5\u3002 2.\u63a5\u4e0b\u6765\u5408\u5e76\u6240\u6709\u5269\u4f59\u89c4\u5219\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u89c4\u5219\u5217\u8868\uff0c\u5176\u4e2d\u89c4\u5219\u53f3\u90e8\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u3002 \u5982\u4e0b\u56fe\uff1a \u6700\u540e\uff1a \u6bcf\u6b21\u589e\u52a0\u9891\u7e41\u9879\u96c6\u7684\u5927\u5c0f\uff0cApriori \u7b97\u6cd5\u90fd\u4f1a\u91cd\u65b0\u626b\u63cf\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u662f\u5426\u6709\u4f18\u5316\u7a7a\u95f4\u5462\uff1f \u4e0b\u4e00\u7ae0\uff1aFP-growth\u7b97\u6cd5\u7b49\u7740\u4f60\u7684\u5230\u6765 \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u751f\u6210\u5173\u8054\u89c4\u5219"},{"location":"ml/12.FP-growth/","text":"\u7b2c12\u7ae0 \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 \u524d\u8a00 \u5728 \u7b2c11\u7ae0 \u65f6\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7528 Apriori \u7b97\u6cd5\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u4e0e \u5173\u8054\u89c4\u5219 \u3002 \u672c\u7ae0\u5c06\u7ee7\u7eed\u5173\u6ce8\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u8fd9\u4e00\u4efb\u52a1\uff0c\u5e76\u4f7f\u7528 FP-growth \u7b97\u6cd5\u66f4\u6709\u6548\u7684\u6316\u6398 \u9891\u7e41\u9879\u96c6 \u3002 FP-growth \u7b97\u6cd5\u7b80\u4ecb \u4e00\u79cd\u975e\u5e38\u597d\u7684\u53d1\u73b0\u9891\u7e41\u9879\u96c6\u7b97\u6cd5\u3002 \u57fa\u4e8eApriori\u7b97\u6cd5\u6784\u5efa,\u4f46\u662f\u6570\u636e\u7ed3\u6784\u4e0d\u540c\uff0c\u4f7f\u7528\u53eb\u505a FP\u6811 \u7684\u6570\u636e\u7ed3\u6784\u7ed3\u6784\u6765\u5b58\u50a8\u96c6\u5408\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u4ecb\u7ecd\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002 FP-growth \u7b97\u6cd5\u6b65\u9aa4 \u57fa\u4e8e\u6570\u636e\u6784\u5efaFP\u6811 \u4eceFP\u6811\u79cd\u6316\u6398\u9891\u7e41\u9879\u96c6 FP\u6811 \u4ecb\u7ecd FP\u6811\u7684\u8282\u70b9\u7ed3\u6784\u5982\u4e0b: class treeNode: def __init__(self, nameValue, numOccur, parentNode): self.name = nameValue # \u8282\u70b9\u540d\u79f0 self.count = numOccur # \u8282\u70b9\u51fa\u73b0\u6b21\u6570 self.nodeLink = None # \u4e0d\u540c\u9879\u96c6\u7684\u76f8\u540c\u9879\u901a\u8fc7nodeLink\u8fde\u63a5\u5728\u4e00\u8d77 # needs to be updated self.parent = parentNode # \u6307\u5411\u7236\u8282\u70b9 self.children = {} # \u5b58\u50a8\u53f6\u5b50\u8282\u70b9 FP-growth \u539f\u7406 \u57fa\u4e8e\u6570\u636e\u6784\u5efaFP\u6811 \u6b65\u9aa41: 1. \u904d\u5386\u6240\u6709\u7684\u6570\u636e\u96c6\u5408\uff0c\u8ba1\u7b97\u6240\u6709\u9879\u7684\u652f\u6301\u5ea6\u3002 2. \u4e22\u5f03\u975e\u9891\u7e41\u7684\u9879\u3002 3. \u57fa\u4e8e \u652f\u6301\u5ea6 \u964d\u5e8f\u6392\u5e8f\u6240\u6709\u7684\u9879\u3002 4. \u6240\u6709\u6570\u636e\u96c6\u5408\u6309\u7167\u5f97\u5230\u7684\u987a\u5e8f\u91cd\u65b0\u6574\u7406\u3002 5. \u91cd\u65b0\u6574\u7406\u5b8c\u6210\u540e\uff0c\u4e22\u5f03\u6bcf\u4e2a\u96c6\u5408\u672b\u5c3e\u975e\u9891\u7e41\u7684\u9879\u3002 \u6b65\u9aa42: 6. \u8bfb\u53d6\u6bcf\u4e2a\u96c6\u5408\u63d2\u5165FP\u6811\u4e2d\uff0c\u540c\u65f6\u7528\u4e00\u4e2a\u5934\u90e8\u94fe\u8868\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0d\u540c\u96c6\u5408\u7684\u76f8\u540c\u9879\u3002 \u6700\u7ec8\u5f97\u5230\u4e0b\u9762\u8fd9\u6837\u4e00\u68f5FP\u6811 \u4eceFP\u6811\u4e2d\u6316\u6398\u51fa\u9891\u7e41\u9879\u96c6 \u6b65\u9aa43: 1. \u5bf9\u5934\u90e8\u94fe\u8868\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f 2. \u5bf9\u5934\u90e8\u94fe\u8868\u8282\u70b9\u4ece\u5c0f\u5230\u5927\u904d\u5386\uff0c\u5f97\u5230\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u540c\u65f6\u83b7\u5f97\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u3002 \u5982\u4e0a\u56fe\uff0c\u4ece\u5934\u90e8\u94fe\u8868 t \u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0ct \u8282\u70b9\u52a0\u5165\u5230\u9891\u7e41\u9879\u96c6\u3002\u627e\u5230\u4ee5 t \u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u8def\u5f84\u5982\u4e0b: \u53bb\u6389FP\u6811\u4e2d\u7684t\u8282\u70b9\uff0c\u5f97\u5230\u6761\u4ef6\u6a21\u5f0f\u57fa<\u5de6\u8fb9\u8def\u5f84,\u5de6\u8fb9\u662f\u503c>[z,x,y,s,t]:2\uff0c[z,x,y,r,t]:1 \u3002\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53d6\u51b3\u4e8e\u672b\u5c3e\u8282\u70b9 t \uff0c\u56e0\u4e3a t \u7684\u51fa\u73b0\u6b21\u6570\u6700\u5c0f\uff0c\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u7684\u652f\u6301\u5ea6\u7531\u652f\u6301\u5ea6\u6700\u5c0f\u7684\u9879\u51b3\u5b9a\u3002\u6240\u4ee5 t \u8282\u70b9\u7684\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u4e8e\u4ee5 t \u8282\u70b9\u4e3a\u672b\u5c3e\u7684\u524d\u7f00\u8def\u5f84\u51fa\u73b0\u6b21\u6570\u3002 \u6761\u4ef6\u6a21\u5f0f\u57fa\u7ee7\u7eed\u6784\u9020\u6761\u4ef6 FP\u6811\uff0c \u5f97\u5230\u9891\u7e41\u9879\u96c6\uff0c\u548c\u4e4b\u524d\u7684\u9891\u7e41\u9879\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u904d\u5386\u5934\u90e8\u94fe\u8868\u751f\u6210FP\u6811\u7684\u8fc7\u7a0b\uff0c\u9012\u5f52\u622a\u6b62\u6761\u4ef6\u662f\u751f\u6210\u7684FP\u6811\u7684\u5934\u90e8\u94fe\u8868\u4e3a\u7a7a\u3002 \u6839\u636e\u6b65\u9aa4 2 \u5f97\u5230\u7684\u6761\u4ef6\u6a21\u5f0f\u57fa [z,x,y,s,t]:2\uff0c[z,x,y,r,t]:1 \u4f5c\u4e3a\u6570\u636e\u96c6\u7ee7\u7eed\u6784\u9020\u51fa\u4e00\u68f5FP\u6811\uff0c\u8ba1\u7b97\u652f\u6301\u5ea6\uff0c\u53bb\u9664\u975e\u9891\u7e41\u9879\uff0c\u96c6\u5408\u6309\u7167\u652f\u6301\u5ea6\u964d\u5e8f\u6392\u5e8f\uff0c\u91cd\u590d\u4e0a\u9762\u6784\u9020FP\u6811\u7684\u6b65\u9aa4\u3002\u6700\u540e\u5f97\u5230\u4e0b\u9762 t-\u6761\u4ef6FP\u6811 : \u7136\u540e\u6839\u636e t-\u6761\u4ef6FP\u6811 \u7684\u5934\u90e8\u94fe\u8868\u8fdb\u884c\u904d\u5386\uff0c\u4ece y \u5f00\u59cb\u3002\u5f97\u5230\u9891\u7e41\u9879\u96c6 ty \u3002\u7136\u540e\u53c8\u5f97\u5230 y \u7684\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u6784\u9020\u51fa ty\u7684\u6761\u4ef6FP\u6811\uff0c\u5373 ty-\u6761\u4ef6FP\u6811\u3002\u7ee7\u7eed\u904d\u5386ty-\u6761\u4ef6FP\u6811\u7684\u5934\u90e8\u94fe\u8868\uff0c\u5f97\u5230\u9891\u7e41\u9879\u96c6 tyx\uff0c\u7136\u540e\u53c8\u5f97\u5230\u9891\u7e41\u9879\u96c6 tyxz. \u7136\u540e\u5f97\u5230\u6784\u9020tyxz-\u6761\u4ef6FP\u6811\u7684\u5934\u90e8\u94fe\u8868\u662f\u7a7a\u7684\uff0c\u7ec8\u6b62\u904d\u5386\u3002\u6211\u4eec\u5f97\u5230\u7684\u9891\u7e41\u9879\u96c6\u6709 t->ty->tyz->tyzx\uff0c\u8fd9\u53ea\u662f\u4e00\u5c0f\u90e8\u5206\u3002 \u6761\u4ef6\u6a21\u5f0f\u57fa:\u5934\u90e8\u94fe\u8868\u4e2d\u7684\u67d0\u4e00\u70b9\u7684\u524d\u7f00\u8def\u5f84\u7ec4\u5408\u5c31\u662f\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53d6\u51b3\u4e8e\u672b\u5c3e\u8282\u70b9\u7684\u503c\u3002 \u6761\u4ef6FP\u6811:\u4ee5\u6761\u4ef6\u6a21\u5f0f\u57fa\u4e3a\u6570\u636e\u96c6\u6784\u9020\u7684FP\u6811\u53eb\u505a\u6761\u4ef6FP\u6811\u3002 FP-growth \u7b97\u6cd5\u4f18\u7f3a\u70b9: * \u4f18\u70b9\uff1a 1. \u56e0\u4e3a FP-growth \u7b97\u6cd5\u53ea\u9700\u8981\u5bf9\u6570\u636e\u96c6\u904d\u5386\u4e24\u6b21\uff0c\u6240\u4ee5\u901f\u5ea6\u66f4\u5feb\u3002 2. FP\u6811\u5c06\u96c6\u5408\u6309\u7167\u652f\u6301\u5ea6\u964d\u5e8f\u6392\u5e8f\uff0c\u4e0d\u540c\u8def\u5f84\u5982\u679c\u6709\u76f8\u540c\u524d\u7f00\u8def\u5f84\u5171\u7528\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f7f\u5f97\u6570\u636e\u5f97\u5230\u4e86\u538b\u7f29\u3002 3. \u4e0d\u9700\u8981\u751f\u6210\u5019\u9009\u96c6\u3002 4. \u6bd4Apriori\u66f4\u5feb\u3002 * \u7f3a\u70b9\uff1a 1. FP-Tree\u7b2c\u4e8c\u6b21\u904d\u5386\u4f1a\u5b58\u50a8\u5f88\u591a\u4e2d\u95f4\u8fc7\u7a0b\u7684\u503c\uff0c\u4f1a\u5360\u7528\u5f88\u591a\u5185\u5b58\u3002 2. \u6784\u5efaFP-Tree\u662f\u6bd4\u8f83\u6602\u8d35\u7684\u3002 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6807\u79f0\u578b\u6570\u636e(\u79bb\u6563\u578b\u6570\u636e)\u3002 FP-growth \u4ee3\u7801\u8bb2\u89e3 \u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/12.FrequentPattemTree/fpGrowth.py main \u65b9\u6cd5\u5927\u81f4\u6b65\u9aa4: python if __name__ == \"__main__\": simpDat = loadSimpDat() #\u52a0\u8f7d\u6570\u636e\u96c6\u3002 initSet = createInitSet(simpDat) #\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u6574\u7406\uff0c\u76f8\u540c\u96c6\u5408\u8fdb\u884c\u5408\u5e76\u3002 myFPtree, myHeaderTab = createTree(initSet, 3)#\u521b\u5efaFP\u6811\u3002 freqItemList = [] mineTree(myFPtree, myHeaderTab, 3, set([]), freqItemList) #\u9012\u5f52\u7684\u4eceFP\u6811\u4e2d\u6316\u6398\u51fa\u9891\u7e41\u9879\u96c6\u3002 print freqItemList \u5927\u5bb6\u770b\u61c2\u539f\u7406\uff0c\u518d\u4ed4\u7ec6\u8ddf\u8e2a\u4e00\u4e0b\u4ee3\u7801\u3002\u57fa\u672c\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\u3002 \u4f5c\u8005\uff1a mikechengwei GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c12\u7ae0_FP-growth\u7b97\u6cd5"},{"location":"ml/12.FP-growth/#12-fp-growth","text":"","title":"\u7b2c12\u7ae0 \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6"},{"location":"ml/12.FP-growth/#_1","text":"\u5728 \u7b2c11\u7ae0 \u65f6\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7528 Apriori \u7b97\u6cd5\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u4e0e \u5173\u8054\u89c4\u5219 \u3002 \u672c\u7ae0\u5c06\u7ee7\u7eed\u5173\u6ce8\u53d1\u73b0 \u9891\u7e41\u9879\u96c6 \u8fd9\u4e00\u4efb\u52a1\uff0c\u5e76\u4f7f\u7528 FP-growth \u7b97\u6cd5\u66f4\u6709\u6548\u7684\u6316\u6398 \u9891\u7e41\u9879\u96c6 \u3002","title":"\u524d\u8a00"},{"location":"ml/12.FP-growth/#fp-growth","text":"\u4e00\u79cd\u975e\u5e38\u597d\u7684\u53d1\u73b0\u9891\u7e41\u9879\u96c6\u7b97\u6cd5\u3002 \u57fa\u4e8eApriori\u7b97\u6cd5\u6784\u5efa,\u4f46\u662f\u6570\u636e\u7ed3\u6784\u4e0d\u540c\uff0c\u4f7f\u7528\u53eb\u505a FP\u6811 \u7684\u6570\u636e\u7ed3\u6784\u7ed3\u6784\u6765\u5b58\u50a8\u96c6\u5408\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u4ecb\u7ecd\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002","title":"FP-growth \u7b97\u6cd5\u7b80\u4ecb"},{"location":"ml/12.FP-growth/#fp-growth_1","text":"\u57fa\u4e8e\u6570\u636e\u6784\u5efaFP\u6811 \u4eceFP\u6811\u79cd\u6316\u6398\u9891\u7e41\u9879\u96c6","title":"FP-growth \u7b97\u6cd5\u6b65\u9aa4"},{"location":"ml/12.FP-growth/#fp","text":"FP\u6811\u7684\u8282\u70b9\u7ed3\u6784\u5982\u4e0b: class treeNode: def __init__(self, nameValue, numOccur, parentNode): self.name = nameValue # \u8282\u70b9\u540d\u79f0 self.count = numOccur # \u8282\u70b9\u51fa\u73b0\u6b21\u6570 self.nodeLink = None # \u4e0d\u540c\u9879\u96c6\u7684\u76f8\u540c\u9879\u901a\u8fc7nodeLink\u8fde\u63a5\u5728\u4e00\u8d77 # needs to be updated self.parent = parentNode # \u6307\u5411\u7236\u8282\u70b9 self.children = {} # \u5b58\u50a8\u53f6\u5b50\u8282\u70b9","title":"FP\u6811 \u4ecb\u7ecd"},{"location":"ml/12.FP-growth/#fp-growth_2","text":"\u57fa\u4e8e\u6570\u636e\u6784\u5efaFP\u6811 \u6b65\u9aa41: 1. \u904d\u5386\u6240\u6709\u7684\u6570\u636e\u96c6\u5408\uff0c\u8ba1\u7b97\u6240\u6709\u9879\u7684\u652f\u6301\u5ea6\u3002 2. \u4e22\u5f03\u975e\u9891\u7e41\u7684\u9879\u3002 3. \u57fa\u4e8e \u652f\u6301\u5ea6 \u964d\u5e8f\u6392\u5e8f\u6240\u6709\u7684\u9879\u3002 4. \u6240\u6709\u6570\u636e\u96c6\u5408\u6309\u7167\u5f97\u5230\u7684\u987a\u5e8f\u91cd\u65b0\u6574\u7406\u3002 5. \u91cd\u65b0\u6574\u7406\u5b8c\u6210\u540e\uff0c\u4e22\u5f03\u6bcf\u4e2a\u96c6\u5408\u672b\u5c3e\u975e\u9891\u7e41\u7684\u9879\u3002 \u6b65\u9aa42: 6. \u8bfb\u53d6\u6bcf\u4e2a\u96c6\u5408\u63d2\u5165FP\u6811\u4e2d\uff0c\u540c\u65f6\u7528\u4e00\u4e2a\u5934\u90e8\u94fe\u8868\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0d\u540c\u96c6\u5408\u7684\u76f8\u540c\u9879\u3002 \u6700\u7ec8\u5f97\u5230\u4e0b\u9762\u8fd9\u6837\u4e00\u68f5FP\u6811 \u4eceFP\u6811\u4e2d\u6316\u6398\u51fa\u9891\u7e41\u9879\u96c6 \u6b65\u9aa43: 1. \u5bf9\u5934\u90e8\u94fe\u8868\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f 2. \u5bf9\u5934\u90e8\u94fe\u8868\u8282\u70b9\u4ece\u5c0f\u5230\u5927\u904d\u5386\uff0c\u5f97\u5230\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u540c\u65f6\u83b7\u5f97\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u3002 \u5982\u4e0a\u56fe\uff0c\u4ece\u5934\u90e8\u94fe\u8868 t \u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0ct \u8282\u70b9\u52a0\u5165\u5230\u9891\u7e41\u9879\u96c6\u3002\u627e\u5230\u4ee5 t \u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u8def\u5f84\u5982\u4e0b: \u53bb\u6389FP\u6811\u4e2d\u7684t\u8282\u70b9\uff0c\u5f97\u5230\u6761\u4ef6\u6a21\u5f0f\u57fa<\u5de6\u8fb9\u8def\u5f84,\u5de6\u8fb9\u662f\u503c>[z,x,y,s,t]:2\uff0c[z,x,y,r,t]:1 \u3002\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53d6\u51b3\u4e8e\u672b\u5c3e\u8282\u70b9 t \uff0c\u56e0\u4e3a t \u7684\u51fa\u73b0\u6b21\u6570\u6700\u5c0f\uff0c\u4e00\u4e2a\u9891\u7e41\u9879\u96c6\u7684\u652f\u6301\u5ea6\u7531\u652f\u6301\u5ea6\u6700\u5c0f\u7684\u9879\u51b3\u5b9a\u3002\u6240\u4ee5 t \u8282\u70b9\u7684\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u4e8e\u4ee5 t \u8282\u70b9\u4e3a\u672b\u5c3e\u7684\u524d\u7f00\u8def\u5f84\u51fa\u73b0\u6b21\u6570\u3002 \u6761\u4ef6\u6a21\u5f0f\u57fa\u7ee7\u7eed\u6784\u9020\u6761\u4ef6 FP\u6811\uff0c \u5f97\u5230\u9891\u7e41\u9879\u96c6\uff0c\u548c\u4e4b\u524d\u7684\u9891\u7e41\u9879\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u904d\u5386\u5934\u90e8\u94fe\u8868\u751f\u6210FP\u6811\u7684\u8fc7\u7a0b\uff0c\u9012\u5f52\u622a\u6b62\u6761\u4ef6\u662f\u751f\u6210\u7684FP\u6811\u7684\u5934\u90e8\u94fe\u8868\u4e3a\u7a7a\u3002 \u6839\u636e\u6b65\u9aa4 2 \u5f97\u5230\u7684\u6761\u4ef6\u6a21\u5f0f\u57fa [z,x,y,s,t]:2\uff0c[z,x,y,r,t]:1 \u4f5c\u4e3a\u6570\u636e\u96c6\u7ee7\u7eed\u6784\u9020\u51fa\u4e00\u68f5FP\u6811\uff0c\u8ba1\u7b97\u652f\u6301\u5ea6\uff0c\u53bb\u9664\u975e\u9891\u7e41\u9879\uff0c\u96c6\u5408\u6309\u7167\u652f\u6301\u5ea6\u964d\u5e8f\u6392\u5e8f\uff0c\u91cd\u590d\u4e0a\u9762\u6784\u9020FP\u6811\u7684\u6b65\u9aa4\u3002\u6700\u540e\u5f97\u5230\u4e0b\u9762 t-\u6761\u4ef6FP\u6811 : \u7136\u540e\u6839\u636e t-\u6761\u4ef6FP\u6811 \u7684\u5934\u90e8\u94fe\u8868\u8fdb\u884c\u904d\u5386\uff0c\u4ece y \u5f00\u59cb\u3002\u5f97\u5230\u9891\u7e41\u9879\u96c6 ty \u3002\u7136\u540e\u53c8\u5f97\u5230 y \u7684\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u6784\u9020\u51fa ty\u7684\u6761\u4ef6FP\u6811\uff0c\u5373 ty-\u6761\u4ef6FP\u6811\u3002\u7ee7\u7eed\u904d\u5386ty-\u6761\u4ef6FP\u6811\u7684\u5934\u90e8\u94fe\u8868\uff0c\u5f97\u5230\u9891\u7e41\u9879\u96c6 tyx\uff0c\u7136\u540e\u53c8\u5f97\u5230\u9891\u7e41\u9879\u96c6 tyxz. \u7136\u540e\u5f97\u5230\u6784\u9020tyxz-\u6761\u4ef6FP\u6811\u7684\u5934\u90e8\u94fe\u8868\u662f\u7a7a\u7684\uff0c\u7ec8\u6b62\u904d\u5386\u3002\u6211\u4eec\u5f97\u5230\u7684\u9891\u7e41\u9879\u96c6\u6709 t->ty->tyz->tyzx\uff0c\u8fd9\u53ea\u662f\u4e00\u5c0f\u90e8\u5206\u3002 \u6761\u4ef6\u6a21\u5f0f\u57fa:\u5934\u90e8\u94fe\u8868\u4e2d\u7684\u67d0\u4e00\u70b9\u7684\u524d\u7f00\u8def\u5f84\u7ec4\u5408\u5c31\u662f\u6761\u4ef6\u6a21\u5f0f\u57fa\uff0c\u6761\u4ef6\u6a21\u5f0f\u57fa\u7684\u503c\u53d6\u51b3\u4e8e\u672b\u5c3e\u8282\u70b9\u7684\u503c\u3002 \u6761\u4ef6FP\u6811:\u4ee5\u6761\u4ef6\u6a21\u5f0f\u57fa\u4e3a\u6570\u636e\u96c6\u6784\u9020\u7684FP\u6811\u53eb\u505a\u6761\u4ef6FP\u6811\u3002 FP-growth \u7b97\u6cd5\u4f18\u7f3a\u70b9: * \u4f18\u70b9\uff1a 1. \u56e0\u4e3a FP-growth \u7b97\u6cd5\u53ea\u9700\u8981\u5bf9\u6570\u636e\u96c6\u904d\u5386\u4e24\u6b21\uff0c\u6240\u4ee5\u901f\u5ea6\u66f4\u5feb\u3002 2. FP\u6811\u5c06\u96c6\u5408\u6309\u7167\u652f\u6301\u5ea6\u964d\u5e8f\u6392\u5e8f\uff0c\u4e0d\u540c\u8def\u5f84\u5982\u679c\u6709\u76f8\u540c\u524d\u7f00\u8def\u5f84\u5171\u7528\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f7f\u5f97\u6570\u636e\u5f97\u5230\u4e86\u538b\u7f29\u3002 3. \u4e0d\u9700\u8981\u751f\u6210\u5019\u9009\u96c6\u3002 4. \u6bd4Apriori\u66f4\u5feb\u3002 * \u7f3a\u70b9\uff1a 1. FP-Tree\u7b2c\u4e8c\u6b21\u904d\u5386\u4f1a\u5b58\u50a8\u5f88\u591a\u4e2d\u95f4\u8fc7\u7a0b\u7684\u503c\uff0c\u4f1a\u5360\u7528\u5f88\u591a\u5185\u5b58\u3002 2. \u6784\u5efaFP-Tree\u662f\u6bd4\u8f83\u6602\u8d35\u7684\u3002 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6807\u79f0\u578b\u6570\u636e(\u79bb\u6563\u578b\u6570\u636e)\u3002","title":"FP-growth \u539f\u7406"},{"location":"ml/12.FP-growth/#fp-growth_3","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740: https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/12.FrequentPattemTree/fpGrowth.py main \u65b9\u6cd5\u5927\u81f4\u6b65\u9aa4: python if __name__ == \"__main__\": simpDat = loadSimpDat() #\u52a0\u8f7d\u6570\u636e\u96c6\u3002 initSet = createInitSet(simpDat) #\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u6574\u7406\uff0c\u76f8\u540c\u96c6\u5408\u8fdb\u884c\u5408\u5e76\u3002 myFPtree, myHeaderTab = createTree(initSet, 3)#\u521b\u5efaFP\u6811\u3002 freqItemList = [] mineTree(myFPtree, myHeaderTab, 3, set([]), freqItemList) #\u9012\u5f52\u7684\u4eceFP\u6811\u4e2d\u6316\u6398\u51fa\u9891\u7e41\u9879\u96c6\u3002 print freqItemList \u5927\u5bb6\u770b\u61c2\u539f\u7406\uff0c\u518d\u4ed4\u7ec6\u8ddf\u8e2a\u4e00\u4e0b\u4ee3\u7801\u3002\u57fa\u672c\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\u3002 \u4f5c\u8005\uff1a mikechengwei GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"FP-growth \u4ee3\u7801\u8bb2\u89e3"},{"location":"ml/13.PCA/","text":"\u7b2c13\u7ae0 \u5229\u7528 PCA \u6765\u7b80\u5316\u6570\u636e \u964d\u7ef4\u6280\u672f \u573a\u666f \u6211\u4eec\u6b63\u901a\u8fc7\u7535\u89c6\u89c2\u770b\u4f53\u80b2\u6bd4\u8d5b\uff0c\u5728\u7535\u89c6\u7684\u663e\u793a\u5668\u4e0a\u6709\u4e00\u4e2a\u7403\u3002 \u663e\u793a\u5668\u5927\u6982\u5305\u542b\u4e86100\u4e07\u50cf\u7d20\u70b9\uff0c\u800c\u7403\u5219\u53ef\u80fd\u662f\u7531\u8f83\u5c11\u7684\u50cf\u7d20\u70b9\u7ec4\u6210\uff0c\u4f8b\u5982\u8bf4\u4e00\u5343\u4e2a\u50cf\u7d20\u70b9\u3002 \u4eba\u4eec\u5b9e\u65f6\u7684\u5c06\u663e\u793a\u5668\u4e0a\u7684\u767e\u4e07\u50cf\u7d20\u8f6c\u6362\u6210\u4e3a\u4e00\u4e2a\u4e09\u7ef4\u56fe\u50cf\uff0c\u8be5\u56fe\u50cf\u5c31\u7ed9\u51fa\u8fd0\u52a8\u573a\u4e0a\u7403\u7684\u4f4d\u7f6e\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4eba\u4eec\u5df2\u7ecf\u5c06\u767e\u4e07\u50cf\u7d20\u70b9\u7684\u6570\u636e\uff0c\u964d\u81f3\u4e3a\u4e09\u7ef4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3a \u964d\u7ef4(dimensionality reduction) \u6570\u636e\u663e\u793a \u5e76\u975e\u5927\u89c4\u6a21\u7279\u5f81\u4e0b\u7684\u552f\u4e00\u96be\u9898\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5316\u8fd8\u6709\u5982\u4e0b\u4e00\u7cfb\u5217\u7684\u539f\u56e0\uff1a 1) \u4f7f\u5f97\u6570\u636e\u96c6\u66f4\u5bb9\u6613\u4f7f\u7528 2) \u964d\u4f4e\u5f88\u591a\u7b97\u6cd5\u7684\u8ba1\u7b97\u5f00\u9500 3) \u53bb\u9664\u566a\u97f3 4) \u4f7f\u5f97\u7ed3\u679c\u6613\u61c2 \u9002\u7528\u8303\u56f4: \u5728\u5df2\u6807\u6ce8\u4e0e\u672a\u6807\u6ce8\u7684\u6570\u636e\u4e0a\u90fd\u6709\u964d\u7ef4\u6280\u672f\u3002 \u8fd9\u91cc\u6211\u4eec\u5c06\u4e3b\u8981\u5173\u6ce8\u672a\u6807\u6ce8\u6570\u636e\u4e0a\u7684\u964d\u7ef4\u6280\u672f\uff0c\u5c06\u6280\u672f\u540c\u6837\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u5df2\u6807\u6ce8\u7684\u6570\u636e\u3002 \u5728\u4ee5\u4e0b3\u79cd\u964d\u7ef4\u6280\u672f\u4e2d\uff0c PCA\u7684\u5e94\u7528\u76ee\u524d\u6700\u4e3a\u5e7f\u6cdb\uff0c\u56e0\u6b64\u672c\u7ae0\u4e3b\u8981\u5173\u6ce8PCA\u3002 1) \u4e3b\u6210\u5206\u5206\u6790(Principal Component Analysis, PCA) \u901a\u4fd7\u7406\u89e3\uff1a\u5c31\u662f\u627e\u51fa\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790\u3002 \u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u667a\u529b\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u770b\u6570\u5b66\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9) 2) \u56e0\u5b50\u5206\u6790(Factor Analysis) \u901a\u4fd7\u7406\u89e3\uff1a\u5c06\u591a\u4e2a\u5b9e\u6d4b\u53d8\u91cf\u8f6c\u6362\u4e3a\u5c11\u6570\u51e0\u4e2a\u7efc\u5408\u6307\u6807\u3002\u5b83\u53cd\u6620\u4e00\u79cd\u964d\u7ef4\u7684\u601d\u60f3\uff0c\u901a\u8fc7\u964d\u7ef4\u5c06\u76f8\u5173\u6027\u9ad8\u7684\u53d8\u91cf\u805a\u5728\u4e00\u8d77,\u4ece\u800c\u51cf\u5c11\u9700\u8981\u5206\u6790\u7684\u53d8\u91cf\u7684\u6570\u91cf,\u800c\u51cf\u5c11\u95ee\u9898\u5206\u6790\u7684\u590d\u6742\u6027 \u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u6574\u4f53\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u7ec4\u54083\u6837\u6210\u7ee9(\u9690\u53d8\u91cf)\uff0c\u770b\u5e73\u5747\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9) \u5e94\u7528\u7684\u9886\u57df\uff1a\u793e\u4f1a\u79d1\u5b66\u3001\u91d1\u878d\u548c\u5176\u4ed6\u9886\u57df \u5728\u56e0\u5b50\u5206\u6790\u4e2d\uff0c\u6211\u4eec \u5047\u8bbe\u89c2\u5bdf\u6570\u636e\u7684\u6210\u5206\u4e2d\u6709\u4e00\u4e9b\u89c2\u5bdf\u4e0d\u5230\u7684\u9690\u53d8\u91cf(latent variable)\u3002 \u5047\u8bbe\u89c2\u5bdf\u6570\u636e\u662f\u8fd9\u4e9b\u9690\u53d8\u91cf\u548c\u67d0\u4e9b\u566a\u97f3\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u90a3\u4e48\u9690\u53d8\u91cf\u7684\u6570\u636e\u53ef\u80fd\u6bd4\u89c2\u5bdf\u6570\u636e\u7684\u6570\u76ee\u5c11\uff0c\u4e5f\u5c31\u8bf4\u901a\u8fc7\u627e\u5230\u9690\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u7684\u964d\u7ef4\u3002 3) \u72ec\u7acb\u6210\u5206\u5206\u6790(Independ Component Analysis, ICA) \u901a\u4fd7\u7406\u89e3\uff1aICA \u8ba4\u4e3a\u89c2\u6d4b\u4fe1\u53f7\u662f\u82e5\u5e72\u4e2a\u72ec\u7acb\u4fe1\u53f7\u7684\u7ebf\u6027\u7ec4\u5408\uff0cICA \u8981\u505a\u7684\u662f\u4e00\u4e2a\u89e3\u6df7\u8fc7\u7a0b\u3002 \u4f8b\u5982\uff1a\u6211\u4eec\u53bbktv\u5531\u6b4c\uff0c\u60f3\u8fa8\u522b\u5531\u7684\u662f\u4ec0\u4e48\u6b4c\u66f2\uff1fICA \u662f\u89c2\u5bdf\u53d1\u73b0\u662f\u539f\u5531\u5531\u7684\u4e00\u9996\u6b4c\u30102\u4e2a\u72ec\u7acb\u7684\u58f0\u97f3\uff08\u539f\u5531\uff0f\u4e3b\u5531\uff09\u3011\u3002 ICA \u662f\u5047\u8bbe\u6570\u636e\u662f\u4ece N \u4e2a\u6570\u636e\u6e90\u6df7\u5408\u7ec4\u6210\u7684\uff0c\u8fd9\u4e00\u70b9\u548c\u56e0\u5b50\u5206\u6790\u6709\u4e9b\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u6570\u636e\u6e90\u4e4b\u95f4\u5728\u7edf\u8ba1\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u800c\u5728 PCA \u4e2d\u53ea\u5047\u8bbe\u6570\u636e\u662f\u4e0d \u76f8\u5173\uff08\u7ebf\u6027\u5173\u7cfb\uff09\u7684\u3002 \u540c\u56e0\u5b50\u5206\u6790\u4e00\u6837\uff0c\u5982\u679c\u6570\u636e\u6e90\u7684\u6570\u76ee\u5c11\u4e8e\u89c2\u5bdf\u6570\u636e\u7684\u6570\u76ee\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u964d\u7ef4\u8fc7\u7a0b\u3002 PCA PCA \u6982\u8ff0 \u4e3b\u6210\u5206\u5206\u6790(Principal Component Analysis, PCA)\uff1a \u901a\u4fd7\u7406\u89e3\uff1a\u5c31\u662f\u627e\u51fa\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790\u3002 PCA \u573a\u666f \u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u667a\u529b\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u770b\u6570\u5b66\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9) PCA \u539f\u7406 PCA \u5de5\u4f5c\u539f\u7406 \u627e\u51fa\u7b2c\u4e00\u4e2a\u4e3b\u6210\u5206\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u6570\u636e \u65b9\u5dee\u6700\u5927 \u7684\u65b9\u5411\u3002 \u627e\u51fa\u7b2c\u4e8c\u4e2a\u4e3b\u6210\u5206\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u6570\u636e \u65b9\u5dee\u6b21\u5927 \u7684\u65b9\u5411\uff0c\u5e76\u4e14\u8be5\u65b9\u5411\u4e0e\u7b2c\u4e00\u4e2a\u4e3b\u6210\u5206\u65b9\u5411 \u6b63\u4ea4(orthogonal \u5982\u679c\u662f\u4e8c\u7ef4\u7a7a\u95f4\u5c31\u53eb\u5782\u76f4) \u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u4e3b\u6210\u5206\u65b9\u5411\u3002 \u901a\u8fc7\u6570\u636e\u96c6\u7684\u534f\u65b9\u5dee\u77e9\u9635\u53ca\u5176\u7279\u5f81\u503c\u5206\u6790\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e3b\u6210\u5206\u7684\u503c\u3002 \u4e00\u65e6\u5f97\u5230\u4e86\u534f\u65b9\u5dee\u77e9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u7559\u6700\u5927\u7684 N \u4e2a\u7279\u5f81\u3002\u8fd9\u4e9b\u7279\u5f81\u5411\u91cf\u4e5f\u7ed9\u51fa\u4e86 N \u4e2a\u6700\u91cd\u8981\u7279\u5f81\u7684\u771f\u5b9e\u7ed3\u6784\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u4e58\u4e0a\u8fd9 N \u4e2a\u7279\u5f81\u5411\u91cf \u4ece\u800c\u5c06\u5b83\u8f6c\u6362\u5230\u65b0\u7684\u7a7a\u95f4\u4e0a\u3002 \u4e3a\u4ec0\u4e48\u6b63\u4ea4\uff1f \u6b63\u4ea4\u662f\u4e3a\u4e86\u6570\u636e\u6709\u6548\u6027\u635f\u5931\u6700\u5c0f \u6b63\u4ea4\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u7279\u5f81\u503c\u7684\u7279\u5f81\u5411\u91cf\u662f\u6b63\u4ea4\u7684 \u4f8b\u5982\u4e0b\u56fe\uff1a PCA \u4f18\u7f3a\u70b9 \u4f18\u70b9\uff1a\u964d\u4f4e\u6570\u636e\u7684\u590d\u6742\u6027\uff0c\u8bc6\u522b\u6700\u91cd\u8981\u7684\u591a\u4e2a\u7279\u5f81\u3002 \u7f3a\u70b9\uff1a\u4e0d\u4e00\u5b9a\u9700\u8981\uff0c\u4e14\u53ef\u80fd\u635f\u5931\u6709\u7528\u4fe1\u606f\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u6570\u636e\u3002 \u9879\u76ee\u6848\u4f8b: \u5bf9\u534a\u5bfc\u4f53\u6570\u636e\u8fdb\u884c\u964d\u7ef4\u5904\u7406 \u9879\u76ee\u6982\u8ff0 \u534a\u5bfc\u4f53\u662f\u5728\u4e00\u4e9b\u6781\u4e3a\u5148\u8fdb\u7684\u5de5\u5382\u4e2d\u5236\u9020\u51fa\u6765\u7684\u3002\u8bbe\u5907\u7684\u751f\u547d\u65e9\u671f\u6709\u9650\uff0c\u5e76\u4e14\u82b1\u8d39\u6781\u5176\u5de8\u5927\u3002 \u867d\u7136\u901a\u8fc7\u65e9\u671f\u6d4b\u8bd5\u548c\u9891\u7e41\u6d4b\u8bd5\u6765\u53d1\u73b0\u6709\u7455\u75b5\u7684\u4ea7\u54c1\uff0c\u4f46\u4ecd\u6709\u4e00\u4e9b\u5b58\u5728\u7455\u75b5\u7684\u4ea7\u54c1\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5982\u679c\u6211\u4eec\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u6280\u672f\u7528\u4e8e\u53d1\u73b0\u7455\u75b5\u4ea7\u54c1\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u4e3a\u5236\u9020\u5546\u8282\u7701\u5927\u91cf\u7684\u8d44\u91d1\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5b83\u62e5\u6709590\u4e2a\u7279\u5f81\u3002\u6211\u4eec\u770b\u770b\u80fd\u5426\u5bf9\u8fd9\u4e9b\u7279\u5f81\u8fdb\u884c\u964d\u7ef4\u5904\u7406\u3002 \u5bf9\u4e8e\u6570\u636e\u7684\u7f3a\u5931\u503c\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6709\u4e00\u4e9b\u5904\u7406\u65b9\u6cd5(\u53c2\u8003\u7b2c5\u7ae0) \u76ee\u524d\u8be5\u7ae0\u8282\u5904\u7406\u7684\u65b9\u6848\u662f\uff1a\u5c06\u7f3a\u5931\u503cNaN(Not a Number\u7f29\u5199)\uff0c\u5168\u90e8\u7528\u5e73\u5747\u503c\u6765\u66ff\u4ee3(\u5982\u679c\u75280\u6765\u5904\u7406\u7684\u7b56\u7565\u5c31\u592a\u5dee\u52b2\u4e86)\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6587\u4ef6\u540d\uff1asecom.data \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 3030.93 2564 2187.7333 1411.1265 1.3602 100 97.6133 0.1242 1.5005 0.0162 -0.0034 0.9455 202.4396 0 7.9558 414.871 10.0433 0.968 192.3963 12.519 1.4026 -5419 2916.5 -4043.75 751 0.8955 1.773 3.049 64.2333 2.0222 0.1632 3.5191 83.3971 9.5126 50.617 64.2588 49.383 66.3141 86.9555 117.5132 61.29 4.515 70 352.7173 10.1841 130.3691 723.3092 1.3072 141.2282 1 624.3145 218.3174 0 4.592 4.841 2834 0.9317 0.9484 4.7057 -1.7264 350.9264 10.6231 108.6427 16.1445 21.7264 29.5367 693.7724 0.9226 148.6009 1 608.17 84.0793 NaN NaN 0 0.0126 -0.0206 0.0141 -0.0307 -0.0083 -0.0026 -0.0567 -0.0044 7.2163 0.132 NaN 2.3895 0.969 1747.6049 0.1841 8671.9301 -0.3274 -0.0055 -0.0001 0.0001 0.0003 -0.2786 0 0.3974 -0.0251 0.0002 0.0002 0.135 -0.0042 0.0003 0.0056 0 -0.2468 0.3196 NaN NaN NaN NaN 0.946 0 748.6115 0.9908 58.4306 0.6002 0.9804 6.3788 15.88 2.639 15.94 15.93 0.8656 3.353 0.4098 3.188 -0.0473 0.7243 0.996 2.2967 1000.7263 39.2373 123 111.3 75.2 46.2 350.671 0.3948 0 6.78 0.0034 0.0898 0.085 0.0358 0.0328 12.2566 0 4.271 10.284 0.4734 0.0167 11.8901 0.41 0.0506 NaN NaN 1017 967 1066 368 0.09 0.048 0.095 2 0.9 0.069 0.046 0.725 0.1139 0.3183 0.5888 0.3184 0.9499 0.3979 0.16 0 0 20.95 0.333 12.49 16.713 0.0803 5.72 0 11.19 65.363 0 0 0 0 0 0 0.292 5.38 20.1 0.296 10.62 10.3 5.38 4.04 16.23 0.2951 8.64 0 10.3 97.314 0 0.0772 0.0599 0.07 0.0547 0.0704 0.052 0.0301 0.1135 3.4789 0.001 NaN 0.0707 0.0211 175.2173 0.0315 1940.3994 0 0.0744 0.0546 0 0 0 0 0 0 0 0 0 0.0027 0.004 0 0 0 0 NaN NaN NaN NaN 0.0188 0 219.9453 0.0011 2.8374 0.0189 0.005 0.4269 0 0 0 0 0 0 0 0 0 0 0 0.0472 40.855 4.5152 30.9815 33.9606 22.9057 15.9525 110.2144 0.131 0 2.5883 0.001 0.0319 0.0197 0.012 0.0109 3.9321 0 1.5123 3.5811 0.1337 0.0055 3.8447 0.1077 0.0167 NaN NaN 418.1363 398.3185 496.1582 158.333 0.0373 0.0202 0.0462 0.6083 0.3032 0.02 0.0174 0.2827 0.0434 0.1342 0.2419 0.1343 0.367 0.1431 0.061 0 0 0 6.2698 0.1181 3.8208 5.3737 0.0254 1.6252 0 3.2461 18.0118 0 0 0 0 0 0 0.0752 1.5989 6.5893 0.0913 3.0911 8.4654 1.5989 1.2293 5.3406 0.0867 2.8551 0 2.9971 31.8843 NaN NaN 0 0.0215 0.0274 0.0315 0.0238 0.0206 0.0238 0.0144 0.0491 1.2708 0.0004 NaN 0.0229 0.0065 55.2039 0.0105 560.2658 0 0.017 0.0148 0.0124 0.0114 0 0 0 0 0 0 0 0.001 0.0013 0 0 0 0 NaN NaN NaN NaN 0.0055 0 61.5932 0.0003 0.9967 0.0082 0.0017 0.1437 0 0 0 0 0 0 0 0 0 0 0 0.0151 14.2396 1.4392 5.6188 3.6721 2.9329 2.1118 24.8504 29.0271 0 6.9458 2.738 5.9846 525.0965 0 3.4641 6.0544 0 53.684 2.4788 4.7141 1.7275 6.18 3.275 3.6084 18.7673 33.1562 26.3617 49.0013 10.0503 2.7073 3.1158 3.1136 44.5055 42.2737 1.3071 0.8693 1.1975 0.6288 0.9163 0.6448 1.4324 0.4576 0.1362 0 0 0 5.9396 3.2698 9.5805 2.3106 6.1463 4.0502 0 1.7924 29.9394 0 0 0 0 0 0 6.2052 311.6377 5.7277 2.7864 9.7752 63.7987 24.7625 13.6778 2.3394 31.9893 5.8142 0 1.6936 115.7408 0 613.3069 291.4842 494.6996 178.1759 843.1138 0 53.1098 0 48.2091 0.7578 NaN 2.957 2.1739 10.0261 17.1202 22.3756 0 0 0 0 0 0 0 0 0 0 0 0 64.6707 0 0 0 0 0 NaN NaN NaN NaN 1.9864 0 29.3804 0.1094 4.856 3.1406 0.5064 6.6926 0 0 0 0 0 0 0 0 0 0 0 2.057 4.0825 11.5074 0.1096 0.0078 0.0026 7.116 1.0616 395.57 75.752 0.4234 12.93 0.78 0.1827 5.7349 0.3363 39.8842 3.2687 1.0297 1.0344 0.4385 0.1039 42.3877 NaN NaN NaN NaN NaN NaN NaN NaN 533.85 2.1113 8.95 0.3157 3.0624 0.1026 1.6765 14.9509 NaN NaN NaN NaN 0.5005 0.0118 0.0035 2.363 NaN NaN NaN NaN 3095.78 2465.14 2230.4222 1463.6606 0.8294 100 102.3433 0.1247 1.4966 -0.0005 -0.0148 0.9627 200.547 0 10.1548 414.7347 9.2599 0.9701 191.2872 12.4608 1.3825 -5441.5 2604.25 -3498.75 -1640.25 1.2973 2.0143 7.39 68.4222 2.2667 0.2102 3.4171 84.9052 9.7997 50.6596 64.2828 49.3404 64.9193 87.5241 118.1188 78.25 2.773 70 352.2445 10.0373 133.1727 724.8264 1.2887 145.8445 1 631.2618 205.1695 0 4.59 4.842 2853 0.9324 0.9479 4.682 0.8073 352.0073 10.3092 113.98 10.9036 19.1927 27.6301 697.1964 1.1598 154.3709 1 620.3582 82.3494 NaN NaN 0 -0.0039 -0.0198 0.0004 -0.044 -0.0358 -0.012 -0.0377 0.0017 6.8043 0.1358 NaN 2.3754 0.9894 1931.6464 0.1874 8407.0299 0.1455 -0.0015 0 -0.0005 0.0001 0.5854 0 -0.9353 -0.0158 -0.0004 -0.0004 -0.0752 -0.0045 0.0002 0.0015 0 0.0772 -0.0903 NaN NaN NaN NaN 0.9425 0 731.2517 0.9902 58.668 0.5958 0.9731 6.5061 15.88 2.541 15.91 15.88 0.8703 2.771 0.4138 3.272 -0.0946 0.8122 0.9985 2.2932 998.1081 37.9213 98 80.3 81 56.2 219.7679 0.2301 0 5.7 0.0049 0.1356 0.06 0.0547 0.0204 12.3319 0 6.285 13.077 0.5666 0.0144 11.8428 0.35 0.0437 NaN NaN 568 59 297 3277 0.112 0.115 0.124 2.2 1.1 0.079 0.561 1.0498 0.1917 0.4115 0.6582 0.4115 1.0181 0.2315 0.325 0 0 17.99 0.439 10.14 16.358 0.0892 6.92 0 9.05 82.986 0 0 0 0 0 0 0.222 3.74 19.59 0.316 11.65 8.02 3.74 3.659 15.078 0.358 8.96 0 8.02 134.25 0 0.0566 0.0488 0.1651 0.1578 0.0468 0.0987 0.0734 0.0747 3.9578 0.005 NaN 0.0761 0.0014 128.4285 0.0238 1988 0 0.0203 0.0236 0 0 0 0 0 0 0 0 0 0.0064 0.0036 0 0 0 0 NaN NaN NaN NaN 0.0154 0 193.0287 0.0007 3.8999 0.0187 0.0086 0.5749 0 0 0 0 0 0 0 0 0 0 0 0.0411 29.743 3.6327 29.0598 28.9862 22.3163 17.4008 83.5542 0.0767 0 1.8459 0.0012 0.044 0.0171 0.0154 0.0069 3.9011 0 2.1016 3.9483 0.1662 0.0049 3.7836 0.1 0.0139 NaN NaN 233.9865 26.5879 139.2082 1529.7622 0.0502 0.0561 0.0591 0.8151 0.3464 0.0291 0.1822 0.3814 0.0715 0.1667 0.263 0.1667 0.3752 0.0856 0.1214 0 0 0 5.6522 0.1417 2.9939 5.2445 0.0264 1.8045 0 2.7661 23.623 0 0 0 0 0 0 0.0778 1.1506 5.9247 0.0878 3.3604 7.7421 1.1506 1.1265 5.0108 0.1013 2.4278 0 2.489 41.708 NaN NaN 0 0.0142 0.023 0.0768 0.0729 0.0143 0.0513 0.0399 0.0365 1.2474 0.0017 NaN 0.0248 0.0005 46.3453 0.0069 677.1873 0 0.0053 0.0059 0.0081 0.0033 0 0 0 0 0 0 0 0.0022 0.0013 0 0 0 0 NaN NaN NaN NaN 0.0049 0 65.0999 0.0002 1.1655 0.0068 0.0027 0.1921 0 0 0 0 0 0 0 0 0 0 0 0.012 10.5837 1.0323 4.3465 2.5939 3.2858 2.5197 15.015 27.7464 0 5.5695 3.93 9.0604 0 368.9713 2.1196 6.1491 0 61.8918 3.1531 6.1188 1.4857 6.1911 2.8088 3.1595 10.4383 2.2655 8.4887 199.7866 8.6336 5.7093 1.6779 3.2153 48.5294 37.5793 16.4174 1.2364 1.9562 0.8123 1.0239 0.834 1.5683 0.2645 0.2751 0 0 0 5.1072 4.3737 7.6142 2.2568 6.9233 4.7448 0 1.4336 40.4475 0 0 0 0 0 0 4.7415 463.2883 5.5652 3.0652 10.2211 73.5536 19.4865 13.243 2.1627 30.8643 5.8042 0 1.2928 163.0249 0 0 246.7762 0 359.0444 130.635 820.79 194.4371 0 58.1666 3.6822 NaN 3.2029 0.1441 6.6487 12.6788 23.6469 0 0 0 0 0 0 0 0 0 0 0 0 141.4365 0 0 0 0 0 NaN NaN NaN NaN 1.6292 0 26.397 0.0673 6.6475 3.131 0.8832 8.837 0 0 0 0 0 0 0 0 0 0 0 1.791 2.9799 9.5796 0.1096 0.0078 0.0026 7.116 1.3526 408.798 74.64 0.7193 16 1.33 0.2829 7.1196 0.4989 53.1836 3.9139 1.7819 0.9634 0.1745 0.0375 18.1087 NaN NaN NaN NaN NaN NaN NaN NaN 535.0164 2.4335 5.92 0.2653 2.0111 0.0772 1.1065 10.9003 0.0096 0.0201 0.006 208.2045 0.5019 0.0223 0.0055 4.4447 0.0096 0.0201 0.006 208.2045 2932.61 2559.94 2186.4111 1698.0172 1.5102 100 95.4878 0.1241 1.4436 0.0041 0.0013 0.9615 202.0179 0 9.5157 416.7075 9.3144 0.9674 192.7035 12.5404 1.4123 -5447.75 2701.75 -4047 -1916.5 1.3122 2.0295 7.5788 67.1333 2.3333 0.1734 3.5986 84.7569 8.659 50.153 64.1114 49.847 65.8389 84.7327 118.6128 14.37 5.434 70 364.3782 9.8783 131.8027 734.7924 1.2992 141.0845 1 637.2655 185.7574 0 4.486 4.748 2936 0.9139 0.9447 4.5873 23.8245 364.5364 10.1685 115.6273 11.3019 16.1755 24.2829 710.5095 0.8694 145.8 1 625.9636 84.7681 140.6972 485.2665 0 -0.0078 -0.0326 -0.0052 0.0213 -0.0054 -0.1134 -0.0182 0.0287 7.1041 0.1362 NaN 2.4532 0.988 1685.8514 0.1497 9317.1698 0.0553 0.0006 -0.0013 0 0.0002 -0.1343 0 -0.1427 0.1218 0.0006 -0.0001 0.0134 -0.0026 -0.0016 -0.0006 0.0013 -0.0301 -0.0728 NaN NaN NaN 0.4684 0.9231 0 718.5777 0.9899 58.4808 0.6015 0.9772 6.4527 15.9 2.882 15.94 15.95 0.8798 3.094 0.4777 3.272 -0.1892 0.8194 0.9978 2.2592 998.444 42.0579 89 126.4 96.5 45.1001 306.038 0.3263 0 8.33 0.0038 0.0754 0.0483 0.0619 0.0221 8.266 0 4.819 8.443 0.4909 0.0177 8.2054 0.47 0.0497 NaN NaN 562 788 759 2100 0.187 0.117 0.068 2.1 1.4 0.123 0.319 1.0824 0.0369 0.3141 0.5753 0.3141 0.9677 0.2706 0.326 0 0 17.78 0.745 13.31 22.912 0.1959 9.21 0 17.87 60.11 0 0 0 0 0 0 0.139 5.09 19.75 0.949 9.71 16.73 5.09 11.059 22.624 0.1164 13.3 0 16.73 79.618 0 0.0339 0.0494 0.0696 0.0406 0.0401 0.084 0.0349 0.0718 2.4266 0.0014 NaN 0.0963 0.0152 182.4956 0.0284 839.6006 0 0.0192 0.017 0 0 0 0 0 0 0 0 0 0.0062 0.004 0 0 0 0 NaN NaN NaN 0.1729 0.0273 0 104.4042 0.0007 4.1446 0.0733 0.0063 0.4166 0 0 0 0 0 0 0 0 0 0 0 0.0487 29.621 3.9133 23.551 41.3837 32.6256 15.7716 97.3868 0.1117 0 2.5274 0.0012 0.0249 0.0152 0.0157 0.0075 2.8705 0 1.5306 2.5493 0.1479 0.0059 2.8046 0.1185 0.0167 NaN NaN 251.4536 329.6406 325.0672 902.4576 0.08 0.0583 0.0326 0.6964 0.4031 0.0416 0.1041 0.3846 0.0151 0.1288 0.2268 0.1288 0.3677 0.1175 0.1261 0 0 0 5.7247 0.2682 3.8541 6.1797 0.0546 2.568 0 4.6067 16.0104 0 0 0 0 0 0 0.0243 1.5481 5.9453 0.2777 3.16 8.9855 1.5481 2.9844 6.2277 0.0353 3.7663 0 5.6983 24.7959 13.5664 15.4488 0 0.0105 0.0208 0.0327 0.0171 0.0116 0.0428 0.0154 0.0383 0.7786 0.0005 NaN 0.0302 0.0046 58.0575 0.0092 283.6616 0 0.0054 0.0043 0.003 0.0037 0 0 0 0 0 0 0 0.0021 0.0015 0 0 0 0 NaN NaN NaN 0.0221 0.01 0 28.7334 0.0003 1.2356 0.019 0.002 0.1375 0 0 0 0 0 0 0 0 0 0 0 0.019 11.4871 1.1798 4.0782 4.3102 3.7696 2.0627 18.0233 21.6062 0 8.7236 3.0609 5.2231 0 0 2.2943 4.0917 0 50.6425 2.0261 5.2707 1.8268 4.2581 3.7479 3.522 10.3162 29.1663 18.7546 109.5747 14.2503 5.765 0.8972 3.1281 60 70.9161 8.8647 1.2771 0.4264 0.6263 0.8973 0.6301 1.4698 0.3194 0.2748 0 0 0 4.8795 7.5418 10.0984 3.1182 15.079 6.528 0 2.8042 32.3594 0 0 0 0 0 0 3.0301 21.3645 5.4178 9.3327 8.3977 148.0287 31.4674 45.5423 3.1842 13.3923 9.1221 0 2.6727 93.9245 0 434.2674 151.7665 0 190.3869 746.915 74.0741 191.7582 250.1742 34.1573 1.0281 NaN 3.9238 1.5357 10.8251 18.9849 9.0113 0 0 0 0 0 0 0 0 0 0 0 0 240.7767 244.2748 0 0 0 0 NaN NaN NaN 36.9067 2.9626 0 14.5293 0.0751 7.087 12.1831 0.6451 6.4568 0 0 0 0 0 0 0 0 0 0 0 2.1538 2.9667 9.3046 0.1096 0.0078 0.0026 7.116 0.7942 411.136 74.654 0.1832 16.16 0.85 0.0857 7.1619 0.3752 23.0713 3.9306 1.1386 1.5021 0.3718 0.1233 24.7524 267.064 0.9032 1.1 0.6219 0.4122 0.2562 0.4119 68.8489 535.0245 2.0293 11.21 0.1882 4.0923 0.064 2.0952 9.2721 0.0584 0.0484 0.0148 82.8602 0.4958 0.0157 0.0039 3.1745 0.0584 0.0484 0.0148 82.8602 2988.72 2479.9 2199.0333 909.7926 1.3204 100 104.2367 0.1217 1.4882 -0.0124 -0.0033 0.9629 201.8482 0 9.6052 422.2894 9.6924 0.9687 192.1557 12.4782 1.4011 -5468.25 2648.25 -4515 -1657.25 1.3137 2.0038 7.3145 62.9333 2.6444 0.2071 3.3813 84.9105 8.6789 50.51 64.1125 49.49 65.1951 86.6867 117.0442 76.9 1.279 70 363.0273 9.9305 131.8027 733.8778 1.3027 142.5427 1 637.3727 189.9079 0 4.486 4.748 2936 0.9139 0.9447 4.5873 24.3791 361.4582 10.2112 116.1818 13.5597 15.6209 23.4736 710.4043 0.9761 147.6545 1 625.2945 70.2289 160.321 464.9735 0 -0.0555 -0.0461 -0.04 0.04 0.0676 -0.1051 0.0028 0.0277 7.5925 0.1302 NaN 2.4004 0.9904 1752.0968 0.1958 8205.7 0.0697 -0.0003 -0.0021 -0.0001 0.0002 0.0411 0 0.0177 -0.0195 -0.0002 0 -0.0699 -0.0059 0.0003 0.0003 0.0021 -0.0483 -0.118 NaN NaN NaN 0.4647 0.9564 0 709.0867 0.9906 58.6635 0.6016 0.9761 6.4935 15.55 3.132 15.61 15.59 1.366 2.48 0.5176 3.119 0.2838 0.7244 0.9961 2.3802 980.451 41.1025 127 118 123.7 47.8 162.432 0.1915 0 5.51 0.003 0.114 0.0393 0.0613 0.019 13.2651 0 9.073 15.241 1.3029 0.015 11.9738 0.35 0.0699 NaN NaN 859 355 3433 3004 0.068 0.108 0.1 1.7 0.9 0.086 0.241 0.9386 0.0356 0.2618 0.4391 0.2618 0.8567 0.2452 0.39 0 0 16.22 0.693 14.67 22.562 0.1786 5.69 0 18.2 52.571 0 0 0 0 0 0 0.139 5.92 23.6 1.264 10.63 13.56 5.92 11.382 24.32 0.3458 9.56 0 21.97 104.95 0 0.1248 0.0463 0.1223 0.0354 0.0708 0.0754 0.0643 0.0932 5.5398 0.0023 NaN 0.0764 0.0015 152.0885 0.0573 820.3999 0 0.0152 0.0149 0 0 0 0 0 0 0 0 0 0.0067 0.004 0 0 0 0 NaN NaN NaN 0.0191 0.0234 0 94.0954 0.001 3.2119 0.0406 0.0072 0.4212 0 0 0 0 0 0 0 0 0 0 0 0.0513 31.83 3.1959 33.896 37.8477 44.3906 16.9347 50.3631 0.0581 0 2.1775 0.0007 0.0417 0.0115 0.0172 0.0063 4.2154 0 2.896 4.0526 0.3882 0.0049 3.9403 0.0916 0.0245 NaN NaN 415.5048 157.0889 1572.6896 1377.4276 0.0285 0.0445 0.0465 0.6305 0.3046 0.0286 0.0824 0.3483 0.0128 0.1004 0.1701 0.1004 0.3465 0.0973 0.1675 0 0 0 5.444 0.2004 4.19 6.3329 0.0479 1.7339 0 4.966 15.7375 0 0 0 0 0 0 0.0243 1.7317 6.6262 0.3512 3.2699 9.402 1.7317 3.0672 6.6839 0.0928 3.0229 0 6.3292 29.0339 8.4026 4.8851 0 0.0407 0.0198 0.0531 0.0167 0.0224 0.0422 0.0273 0.0484 1.8222 0.0006 NaN 0.0252 0.0004 45.7058 0.0188 309.8492 0 0.0046 0.0049 0.0028 0.0034 0 0 0 0 0 0 0 0.0024 0.0014 0 0 0 0 NaN NaN NaN 0.0038 0.0068 0 32.4228 0.0003 1.1135 0.0132 0.0023 0.1348 0 0 0 0 0 0 0 0 0 0 0 0.0155 13.3972 1.1907 5.6363 3.9482 4.9881 2.1737 17.8537 14.5054 0 5.286 2.4643 7.6602 317.7362 0 1.9689 6.5718 0 94.4594 3.6091 13.442 1.5441 6.2313 2.8049 4.9898 15.7089 13.4051 76.0354 181.2641 5.176 5.3899 1.3671 2.7013 34.0336 41.5236 7.1274 1.1054 0.4097 0.5183 0.6849 0.529 1.3141 0.2829 0.3332 0 0 0 4.468 6.9785 11.1303 3.0744 13.7105 3.9918 0 2.8555 27.6824 0 0 0 0 0 0 3.0301 24.2831 6.5291 12.3786 9.1494 100.0021 37.8979 48.4887 3.4234 35.4323 6.4746 0 3.5135 149.4399 0 225.0169 100.4883 305.75 88.5553 104.666 71.7583 0 336.766 72.9635 1.767 NaN 3.1817 0.1488 8.6804 29.2542 9.9979 0 0 711.6418 0 0 0 0 0 0 0 0 0 113.5593 0 0 0 0 0 NaN NaN NaN 4.12 2.4416 0 13.2699 0.0977 5.4751 6.7553 0.7404 6.4865 0 0 0 0 0 0 0 0 0 0 0 2.1565 3.2465 7.7754 0.1096 0.0078 0.0026 7.116 1.165 372.822 72.442 1.8804 131.68 39.33 0.6812 56.9303 17.4781 161.4081 35.3198 54.2917 1.1613 0.7288 0.271 62.7572 268.228 0.6511 7.32 0.163 3.5611 0.067 2.729 25.0363 530.5682 2.0253 9.33 0.1738 2.8971 0.0525 1.7585 8.5831 0.0202 0.0149 0.0044 73.8432 0.499 0.0103 0.0025 2.0544 0.0202 0.0149 0.0044 73.8432 3032.24 2502.87 2233.3667 1326.52 1.5334 100 100.3967 0.1235 1.5031 -0.0031 -0.0072 0.9569 201.9424 0 10.5661 420.5925 10.3387 0.9735 191.6037 12.4735 1.3888 -5476.25 2635.25 -3987.5 117 1.2887 1.9912 7.2748 62.8333 3.1556 0.2696 3.2728 86.3269 8.7677 50.248 64.1511 49.752 66.1542 86.1468 121.4364 76.39 2.209 70 353.34 10.4091 176.3136 789.7523 1.0341 138.0882 1 667.7418 233.5491 0 4.624 4.894 2865 0.9298 0.9449 4.6414 -12.2945 355.0809 9.7948 144.0191 21.9782 32.2945 44.1498 745.6025 0.9256 146.6636 1 645.7636 65.8417 NaN NaN 0 -0.0534 0.0183 -0.0167 -0.0449 0.0034 -0.0178 -0.0123 -0.0048 7.5017 0.1342 NaN 2.453 0.9902 1828.3846 0.1829 9014.46 0.0448 -0.0077 -0.0001 -0.0001 -0.0001 0.2189 0 -0.6704 -0.0167 0.0004 -0.0003 0.0696 -0.0045 0.0002 0.0078 0 -0.0799 -0.2038 NaN NaN NaN NaN 0.9424 0 796.595 0.9908 58.3858 0.5913 0.9628 6.3551 15.75 3.148 15.73 15.71 0.946 3.027 0.5328 3.299 -0.5677 0.778 1.001 2.3715 993.1274 38.1448 119 143.2 123.1 48.8 296.303 0.3744 0 3.64 0.0041 0.0634 0.0451 0.0623 0.024 14.2354 0 9.005 12.506 0.4434 0.0126 13.9047 0.43 0.0538 NaN NaN 699 283 1747 1443 0.147 0.04 0.113 3.9 0.8 0.101 0.499 0.576 0.0631 0.3053 0.583 0.3053 0.8285 0.1308 0.922 0 0 15.24 0.282 10.85 37.715 0.1189 3.98 0 25.54 72.149 0 0 0 0 0 0 0.25 5.52 15.76 0.519 10.71 19.77 5.52 8.446 33.832 0.3951 9.09 0 19.77 92.307 0 0.0915 0.0506 0.0769 0.1079 0.0797 0.1047 0.0924 0.1015 4.1338 0.003 NaN 0.0802 0.0004 69.151 0.197 1406.4004 0 0.0227 0.0272 0 0 0 0 0 0 0 0 0 0.0067 0.0031 0 0 0 0 NaN NaN NaN NaN 0.024 0 149.2172 0.0006 2.5775 0.0177 0.0214 0.4051 0 0 0 0 0 0 0 0 0 0 0 0.0488 19.862 3.6163 34.125 55.9626 53.0876 17.4864 88.7672 0.1092 0 1.0929 0.0013 0.0257 0.0116 0.0163 0.008 4.4239 0 3.2376 3.6536 0.1293 0.004 4.3474 0.1275 0.0181 NaN NaN 319.1252 128.0296 799.5884 628.3083 0.0755 0.0181 0.0476 1.35 0.2698 0.032 0.1541 0.2155 0.031 0.1354 0.2194 0.1354 0.3072 0.0582 0.3574 0 0 0 4.8956 0.0766 2.913 11.0583 0.0327 1.1229 0 7.3296 23.116 0 0 0 0 0 0 0.0822 1.6216 4.7279 0.1773 3.155 9.7777 1.6216 2.5923 10.5352 0.1301 3.0939 0 6.3767 32.0537 NaN NaN 0 0.0246 0.0221 0.0329 0.0522 0.0256 0.0545 0.0476 0.0463 1.553 0.001 NaN 0.0286 0.0001 21.0312 0.0573 494.7368 0 0.0063 0.0077 0.0052 0.0027 0 0 0 0 0 0 0 0.0025 0.0012 0 0 0 0 NaN NaN NaN NaN 0.0089 0 57.2692 0.0002 0.8495 0.0065 0.0077 0.1356 0 0 0 0 0 0 0 0 0 0 0 0.0165 7.1493 1.1704 5.3823 4.7226 4.9184 2.185 22.3369 24.4142 0 3.6256 3.3208 4.2178 0 866.0295 2.5046 7.0492 0 85.2255 2.9734 4.2892 1.2943 7.257 3.4473 3.8754 12.7642 10.739 43.8119 0 11.4064 2.0088 1.5533 6.2069 25.3521 37.4691 15.247 0.6672 0.7198 0.6076 0.9088 0.6136 1.2524 0.1518 0.7592 0 0 0 4.3131 2.7092 6.1538 4.7756 11.4945 2.8822 0 3.8248 30.8924 0 0 0 0 0 0 5.3863 44.898 4.4384 5.2987 7.4365 89.9529 17.0927 19.1303 4.5375 42.6838 6.1979 0 3.0615 140.1953 0 171.4486 276.881 461.8619 240.1781 0 587.3773 748.1781 0 55.1057 2.2358 NaN 3.2712 0.0372 3.7821 107.6905 15.6016 0 293.1396 0 0 0 0 0 0 0 0 0 0 148.0663 0 0 0 0 0 NaN NaN NaN NaN 2.5512 0 18.7319 0.0616 4.4146 2.9954 2.2181 6.3745 0 0 0 0 0 0 0 0 0 0 0 2.0579 1.9999 9.4805 0.1096 0.0078 0.0026 7.116 1.4636 399.914 79.156 1.0388 19.63 1.98 0.4287 9.7608 0.8311 70.9706 4.9086 2.5014 0.9778 0.2156 0.0461 22.05 NaN NaN NaN NaN NaN NaN NaN NaN 532.0155 2.0275 8.83 0.2224 3.1776 0.0706 1.6597 10.9698 NaN NaN NaN NaN 0.48 0.4766 0.1045 99.3032 0.0202 0.0149 0.0044 73.8432 \u51c6\u5907\u6570\u636e\uff1a\u5c06value\u4e3aNaN\u7684\u6c42\u5747\u503c def replaceNanWithMean(): datMat = loadDataSet('db/13.PCA/secom.data', ' ') numFeat = shape(datMat)[1] for i in range(numFeat): # \u5bf9value\u4e0d\u4e3aNaN\u7684\u6c42\u5747\u503c # .A \u8fd4\u56de\u77e9\u9635\u57fa\u4e8e\u7684\u6570\u7ec4 meanVal = mean(datMat[nonzero(~isnan(datMat[:, i].A))[0], i]) # \u5c06value\u4e3aNaN\u7684\u503c\u8d4b\u503c\u4e3a\u5747\u503c datMat[nonzero(isnan(datMat[:, i].A))[0],i] = meanVal return datMat \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 N \u7684\u9608\u503c PCA \u6570\u636e\u964d\u7ef4 \u5728\u7b49\u5f0f Av=\u5165v \u4e2d\uff0cv \u662f\u7279\u5f81\u5411\u91cf\uff0c \u5165\u662f\u7279\u5f81\u503c\u3002 \u8868\u793a \u5982\u679c\u7279\u5f81\u5411\u91cf v \u88ab\u67d0\u4e2a\u77e9\u9635 A \u5de6\u4e58\uff0c\u90a3\u4e48\u5b83\u5c31\u7b49\u4e8e\u67d0\u4e2a\u6807\u91cf \u5165 \u4e58\u4ee5 v. \u5e78\u8fd0\u7684\u662f\uff1a Numpy \u4e2d\u6709\u5bfb\u627e\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\u7684\u6a21\u5757 linalg\uff0c\u5b83\u6709 eig() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u6c42\u89e3\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\u3002 def pca(dataMat, topNfeat=9999999): \"\"\"pca Args: dataMat \u539f\u6570\u636e\u96c6\u77e9\u9635 topNfeat \u5e94\u7528\u7684N\u4e2a\u7279\u5f81 Returns: lowDDataMat \u964d\u7ef4\u540e\u6570\u636e\u96c6 reconMat \u65b0\u7684\u6570\u636e\u96c6\u7a7a\u95f4 \"\"\" # \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u5747\u503c meanVals = mean(dataMat, axis=0) # print 'meanVals', meanVals # \u6bcf\u4e2a\u5411\u91cf\u540c\u65f6\u90fd\u51cf\u53bb \u5747\u503c meanRemoved = dataMat - meanVals # print 'meanRemoved=', meanRemoved # cov\u534f\u65b9\u5dee=[(x1-x\u5747\u503c)*(y1-y\u5747\u503c)+(x2-x\u5747\u503c)*(y2-y\u5747\u503c)+...+(xn-x\u5747\u503c)*(yn-y\u5747\u503c)+]/(n-1) ''' \u65b9\u5dee\uff1a\uff08\u4e00\u7ef4\uff09\u5ea6\u91cf\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u5173\u7cfb\u7684\u7edf\u8ba1\u91cf \u534f\u65b9\u5dee\uff1a \uff08\u4e8c\u7ef4\uff09\u5ea6\u91cf\u5404\u4e2a\u7ef4\u5ea6\u504f\u79bb\u5176\u5747\u503c\u7684\u7a0b\u5ea6 \u534f\u65b9\u5dee\u77e9\u9635\uff1a\uff08\u591a\u7ef4\uff09\u5ea6\u91cf\u5404\u4e2a\u7ef4\u5ea6\u504f\u79bb\u5176\u5747\u503c\u7684\u7a0b\u5ea6 \u5f53 cov(X, Y)>0\u65f6\uff0c\u8868\u660eX\u4e0eY\u6b63\u76f8\u5173\uff1b(X\u8d8a\u5927\uff0cY\u4e5f\u8d8a\u5927\uff1bX\u8d8a\u5c0fY\uff0c\u4e5f\u8d8a\u5c0f\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u79f0\u4e3a\u201c\u6b63\u76f8\u5173\u201d\u3002) \u5f53 cov(X, Y)<0\u65f6\uff0c\u8868\u660eX\u4e0eY\u8d1f\u76f8\u5173\uff1b \u5f53 cov(X, Y)=0\u65f6\uff0c\u8868\u660eX\u4e0eY\u4e0d\u76f8\u5173\u3002 ''' covMat = cov(meanRemoved, rowvar=0) # eigVals\u4e3a\u7279\u5f81\u503c\uff0c eigVects\u4e3a\u7279\u5f81\u5411\u91cf eigVals, eigVects = linalg.eig(mat(covMat)) # print 'eigVals=', eigVals # print 'eigVects=', eigVects # \u5bf9\u7279\u5f81\u503c\uff0c\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\uff0c\u8fd4\u56de\u4ece\u5c0f\u5230\u5927\u7684index\u5e8f\u53f7 # \u7279\u5f81\u503c\u7684\u9006\u5e8f\u5c31\u53ef\u4ee5\u5f97\u5230topNfeat\u4e2a\u6700\u5927\u7684\u7279\u5f81\u5411\u91cf ''' >>> x = np.array([3, 1, 2]) >>> np.argsort(x) array([1, 2, 0]) # index,1 = 1; index,2 = 2; index,0 = 3 >>> y = np.argsort(x) >>> y[::-1] array([0, 2, 1]) >>> y[:-3:-1] array([0, 2]) # \u53d6\u51fa -1, -2 >>> y[:-6:-1] array([0, 2, 1]) ''' eigValInd = argsort(eigVals) # print 'eigValInd1=', eigValInd # -1\u8868\u793a\u5012\u5e8f\uff0c\u8fd4\u56detopN\u7684\u7279\u5f81\u503c[-1 \u5230 -(topNfeat+1) \u4f46\u662f\u4e0d\u5305\u62ec-(topNfeat+1)\u672c\u8eab\u7684\u5012\u53d9] eigValInd = eigValInd[:-(topNfeat+1):-1] # print 'eigValInd2=', eigValInd # \u91cd\u7ec4 eigVects \u6700\u5927\u5230\u6700\u5c0f redEigVects = eigVects[:, eigValInd] # print 'redEigVects=', redEigVects.T # \u5c06\u6570\u636e\u8f6c\u6362\u5230\u65b0\u7a7a\u95f4 # --- (1567, 590) (590, 20) # print \"---\", shape(meanRemoved), shape(redEigVects) lowDDataMat = meanRemoved * redEigVects reconMat = (lowDDataMat * redEigVects.T) + meanVals # print 'lowDDataMat=', lowDDataMat # print 'reconMat=', reconMat return lowDDataMat, reconMat \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/13.PCA/pca.py \u8981\u70b9\u8865\u5145 \u964d\u7ef4\u6280\u672f\u4f7f\u5f97\u6570\u636e\u53d8\u7684\u66f4\u6613\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u5f80\u5f80\u80fd\u591f\u53bb\u9664\u6570\u636e\u4e2d\u7684\u566a\u97f3\uff0c\u4f7f\u5f97\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u66f4\u52a0\u7cbe\u786e\u3002 \u964d\u7ef4\u5f80\u5f80\u4f5c\u4e3a\u9884\u5904\u7406\u6b65\u9aa4\uff0c\u5728\u6570\u636e\u5e94\u7528\u5230\u5176\u4ed6\u7b97\u6cd5\u4e4b\u524d\u6e05\u6d17\u6570\u636e\u3002 \u6bd4\u8f83\u6d41\u884c\u7684\u964d\u7ef4\u6280\u672f\uff1a \u72ec\u7acb\u6210\u5206\u5206\u6790\u3001\u56e0\u5b50\u5206\u6790 \u548c \u4e3b\u6210\u5206\u5206\u6790\uff0c \u5176\u4e2d\u53c8\u4ee5\u4e3b\u6210\u5206\u5206\u6790\u5e94\u7528\u6700\u5e7f\u6cdb\u3002 \u672c\u7ae0\u4e2d\u7684PCA\u5c06\u6240\u6709\u7684\u6570\u636e\u96c6\u90fd\u8c03\u5165\u4e86\u5185\u5b58\uff0c\u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u9700\u8981\u5176\u4ed6\u7684\u65b9\u6cd5\u6765\u5bfb\u627e\u5176\u7279\u5f81\u503c\u3002 \u5982\u679c\u4f7f\u7528\u5728\u7ebfPCA\u5206\u6790\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u4e00\u7bc7\u4f18\u79c0\u7684\u8bba\u6587 \"Incremental Eigenanalysis for Classification\"\u3002 \u4e0b\u4e00\u7ae0\u8981\u8ba8\u8bba\u7684\u5947\u5f02\u503c\u5206\u89e3\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u7279\u5f81\u503c\u5206\u6790\u3002 \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c13\u7ae0_PCA\u964d\u7ef4"},{"location":"ml/13.PCA/#13-pca","text":"","title":"\u7b2c13\u7ae0 \u5229\u7528 PCA \u6765\u7b80\u5316\u6570\u636e"},{"location":"ml/13.PCA/#_1","text":"\u573a\u666f \u6211\u4eec\u6b63\u901a\u8fc7\u7535\u89c6\u89c2\u770b\u4f53\u80b2\u6bd4\u8d5b\uff0c\u5728\u7535\u89c6\u7684\u663e\u793a\u5668\u4e0a\u6709\u4e00\u4e2a\u7403\u3002 \u663e\u793a\u5668\u5927\u6982\u5305\u542b\u4e86100\u4e07\u50cf\u7d20\u70b9\uff0c\u800c\u7403\u5219\u53ef\u80fd\u662f\u7531\u8f83\u5c11\u7684\u50cf\u7d20\u70b9\u7ec4\u6210\uff0c\u4f8b\u5982\u8bf4\u4e00\u5343\u4e2a\u50cf\u7d20\u70b9\u3002 \u4eba\u4eec\u5b9e\u65f6\u7684\u5c06\u663e\u793a\u5668\u4e0a\u7684\u767e\u4e07\u50cf\u7d20\u8f6c\u6362\u6210\u4e3a\u4e00\u4e2a\u4e09\u7ef4\u56fe\u50cf\uff0c\u8be5\u56fe\u50cf\u5c31\u7ed9\u51fa\u8fd0\u52a8\u573a\u4e0a\u7403\u7684\u4f4d\u7f6e\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4eba\u4eec\u5df2\u7ecf\u5c06\u767e\u4e07\u50cf\u7d20\u70b9\u7684\u6570\u636e\uff0c\u964d\u81f3\u4e3a\u4e09\u7ef4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3a \u964d\u7ef4(dimensionality reduction) \u6570\u636e\u663e\u793a \u5e76\u975e\u5927\u89c4\u6a21\u7279\u5f81\u4e0b\u7684\u552f\u4e00\u96be\u9898\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u7b80\u5316\u8fd8\u6709\u5982\u4e0b\u4e00\u7cfb\u5217\u7684\u539f\u56e0\uff1a 1) \u4f7f\u5f97\u6570\u636e\u96c6\u66f4\u5bb9\u6613\u4f7f\u7528 2) \u964d\u4f4e\u5f88\u591a\u7b97\u6cd5\u7684\u8ba1\u7b97\u5f00\u9500 3) \u53bb\u9664\u566a\u97f3 4) \u4f7f\u5f97\u7ed3\u679c\u6613\u61c2 \u9002\u7528\u8303\u56f4: \u5728\u5df2\u6807\u6ce8\u4e0e\u672a\u6807\u6ce8\u7684\u6570\u636e\u4e0a\u90fd\u6709\u964d\u7ef4\u6280\u672f\u3002 \u8fd9\u91cc\u6211\u4eec\u5c06\u4e3b\u8981\u5173\u6ce8\u672a\u6807\u6ce8\u6570\u636e\u4e0a\u7684\u964d\u7ef4\u6280\u672f\uff0c\u5c06\u6280\u672f\u540c\u6837\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u5df2\u6807\u6ce8\u7684\u6570\u636e\u3002 \u5728\u4ee5\u4e0b3\u79cd\u964d\u7ef4\u6280\u672f\u4e2d\uff0c PCA\u7684\u5e94\u7528\u76ee\u524d\u6700\u4e3a\u5e7f\u6cdb\uff0c\u56e0\u6b64\u672c\u7ae0\u4e3b\u8981\u5173\u6ce8PCA\u3002 1) \u4e3b\u6210\u5206\u5206\u6790(Principal Component Analysis, PCA) \u901a\u4fd7\u7406\u89e3\uff1a\u5c31\u662f\u627e\u51fa\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790\u3002 \u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u667a\u529b\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u770b\u6570\u5b66\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9) 2) \u56e0\u5b50\u5206\u6790(Factor Analysis) \u901a\u4fd7\u7406\u89e3\uff1a\u5c06\u591a\u4e2a\u5b9e\u6d4b\u53d8\u91cf\u8f6c\u6362\u4e3a\u5c11\u6570\u51e0\u4e2a\u7efc\u5408\u6307\u6807\u3002\u5b83\u53cd\u6620\u4e00\u79cd\u964d\u7ef4\u7684\u601d\u60f3\uff0c\u901a\u8fc7\u964d\u7ef4\u5c06\u76f8\u5173\u6027\u9ad8\u7684\u53d8\u91cf\u805a\u5728\u4e00\u8d77,\u4ece\u800c\u51cf\u5c11\u9700\u8981\u5206\u6790\u7684\u53d8\u91cf\u7684\u6570\u91cf,\u800c\u51cf\u5c11\u95ee\u9898\u5206\u6790\u7684\u590d\u6742\u6027 \u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u6574\u4f53\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u7ec4\u54083\u6837\u6210\u7ee9(\u9690\u53d8\u91cf)\uff0c\u770b\u5e73\u5747\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9) \u5e94\u7528\u7684\u9886\u57df\uff1a\u793e\u4f1a\u79d1\u5b66\u3001\u91d1\u878d\u548c\u5176\u4ed6\u9886\u57df \u5728\u56e0\u5b50\u5206\u6790\u4e2d\uff0c\u6211\u4eec \u5047\u8bbe\u89c2\u5bdf\u6570\u636e\u7684\u6210\u5206\u4e2d\u6709\u4e00\u4e9b\u89c2\u5bdf\u4e0d\u5230\u7684\u9690\u53d8\u91cf(latent variable)\u3002 \u5047\u8bbe\u89c2\u5bdf\u6570\u636e\u662f\u8fd9\u4e9b\u9690\u53d8\u91cf\u548c\u67d0\u4e9b\u566a\u97f3\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u90a3\u4e48\u9690\u53d8\u91cf\u7684\u6570\u636e\u53ef\u80fd\u6bd4\u89c2\u5bdf\u6570\u636e\u7684\u6570\u76ee\u5c11\uff0c\u4e5f\u5c31\u8bf4\u901a\u8fc7\u627e\u5230\u9690\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u7684\u964d\u7ef4\u3002 3) \u72ec\u7acb\u6210\u5206\u5206\u6790(Independ Component Analysis, ICA) \u901a\u4fd7\u7406\u89e3\uff1aICA \u8ba4\u4e3a\u89c2\u6d4b\u4fe1\u53f7\u662f\u82e5\u5e72\u4e2a\u72ec\u7acb\u4fe1\u53f7\u7684\u7ebf\u6027\u7ec4\u5408\uff0cICA \u8981\u505a\u7684\u662f\u4e00\u4e2a\u89e3\u6df7\u8fc7\u7a0b\u3002 \u4f8b\u5982\uff1a\u6211\u4eec\u53bbktv\u5531\u6b4c\uff0c\u60f3\u8fa8\u522b\u5531\u7684\u662f\u4ec0\u4e48\u6b4c\u66f2\uff1fICA \u662f\u89c2\u5bdf\u53d1\u73b0\u662f\u539f\u5531\u5531\u7684\u4e00\u9996\u6b4c\u30102\u4e2a\u72ec\u7acb\u7684\u58f0\u97f3\uff08\u539f\u5531\uff0f\u4e3b\u5531\uff09\u3011\u3002 ICA \u662f\u5047\u8bbe\u6570\u636e\u662f\u4ece N \u4e2a\u6570\u636e\u6e90\u6df7\u5408\u7ec4\u6210\u7684\uff0c\u8fd9\u4e00\u70b9\u548c\u56e0\u5b50\u5206\u6790\u6709\u4e9b\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u6570\u636e\u6e90\u4e4b\u95f4\u5728\u7edf\u8ba1\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u800c\u5728 PCA \u4e2d\u53ea\u5047\u8bbe\u6570\u636e\u662f\u4e0d \u76f8\u5173\uff08\u7ebf\u6027\u5173\u7cfb\uff09\u7684\u3002 \u540c\u56e0\u5b50\u5206\u6790\u4e00\u6837\uff0c\u5982\u679c\u6570\u636e\u6e90\u7684\u6570\u76ee\u5c11\u4e8e\u89c2\u5bdf\u6570\u636e\u7684\u6570\u76ee\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u964d\u7ef4\u8fc7\u7a0b\u3002","title":"\u964d\u7ef4\u6280\u672f"},{"location":"ml/13.PCA/#pca","text":"","title":"PCA"},{"location":"ml/13.PCA/#pca_1","text":"\u4e3b\u6210\u5206\u5206\u6790(Principal Component Analysis, PCA)\uff1a \u901a\u4fd7\u7406\u89e3\uff1a\u5c31\u662f\u627e\u51fa\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790\u3002","title":"PCA \u6982\u8ff0"},{"location":"ml/13.PCA/#pca_2","text":"\u4f8b\u5982\uff1a \u8003\u5bdf\u4e00\u4e2a\u4eba\u7684\u667a\u529b\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u770b\u6570\u5b66\u6210\u7ee9\u5c31\u884c(\u5b58\u5728\uff1a\u6570\u5b66\u3001\u8bed\u6587\u3001\u82f1\u8bed\u6210\u7ee9)","title":"PCA \u573a\u666f"},{"location":"ml/13.PCA/#pca_3","text":"PCA \u5de5\u4f5c\u539f\u7406 \u627e\u51fa\u7b2c\u4e00\u4e2a\u4e3b\u6210\u5206\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u6570\u636e \u65b9\u5dee\u6700\u5927 \u7684\u65b9\u5411\u3002 \u627e\u51fa\u7b2c\u4e8c\u4e2a\u4e3b\u6210\u5206\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u6570\u636e \u65b9\u5dee\u6b21\u5927 \u7684\u65b9\u5411\uff0c\u5e76\u4e14\u8be5\u65b9\u5411\u4e0e\u7b2c\u4e00\u4e2a\u4e3b\u6210\u5206\u65b9\u5411 \u6b63\u4ea4(orthogonal \u5982\u679c\u662f\u4e8c\u7ef4\u7a7a\u95f4\u5c31\u53eb\u5782\u76f4) \u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u4e3b\u6210\u5206\u65b9\u5411\u3002 \u901a\u8fc7\u6570\u636e\u96c6\u7684\u534f\u65b9\u5dee\u77e9\u9635\u53ca\u5176\u7279\u5f81\u503c\u5206\u6790\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e3b\u6210\u5206\u7684\u503c\u3002 \u4e00\u65e6\u5f97\u5230\u4e86\u534f\u65b9\u5dee\u77e9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u7559\u6700\u5927\u7684 N \u4e2a\u7279\u5f81\u3002\u8fd9\u4e9b\u7279\u5f81\u5411\u91cf\u4e5f\u7ed9\u51fa\u4e86 N \u4e2a\u6700\u91cd\u8981\u7279\u5f81\u7684\u771f\u5b9e\u7ed3\u6784\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u4e58\u4e0a\u8fd9 N \u4e2a\u7279\u5f81\u5411\u91cf \u4ece\u800c\u5c06\u5b83\u8f6c\u6362\u5230\u65b0\u7684\u7a7a\u95f4\u4e0a\u3002 \u4e3a\u4ec0\u4e48\u6b63\u4ea4\uff1f \u6b63\u4ea4\u662f\u4e3a\u4e86\u6570\u636e\u6709\u6548\u6027\u635f\u5931\u6700\u5c0f \u6b63\u4ea4\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u7279\u5f81\u503c\u7684\u7279\u5f81\u5411\u91cf\u662f\u6b63\u4ea4\u7684 \u4f8b\u5982\u4e0b\u56fe\uff1a PCA \u4f18\u7f3a\u70b9 \u4f18\u70b9\uff1a\u964d\u4f4e\u6570\u636e\u7684\u590d\u6742\u6027\uff0c\u8bc6\u522b\u6700\u91cd\u8981\u7684\u591a\u4e2a\u7279\u5f81\u3002 \u7f3a\u70b9\uff1a\u4e0d\u4e00\u5b9a\u9700\u8981\uff0c\u4e14\u53ef\u80fd\u635f\u5931\u6709\u7528\u4fe1\u606f\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u6570\u636e\u3002","title":"PCA \u539f\u7406"},{"location":"ml/13.PCA/#_2","text":"","title":"\u9879\u76ee\u6848\u4f8b: \u5bf9\u534a\u5bfc\u4f53\u6570\u636e\u8fdb\u884c\u964d\u7ef4\u5904\u7406"},{"location":"ml/13.PCA/#_3","text":"\u534a\u5bfc\u4f53\u662f\u5728\u4e00\u4e9b\u6781\u4e3a\u5148\u8fdb\u7684\u5de5\u5382\u4e2d\u5236\u9020\u51fa\u6765\u7684\u3002\u8bbe\u5907\u7684\u751f\u547d\u65e9\u671f\u6709\u9650\uff0c\u5e76\u4e14\u82b1\u8d39\u6781\u5176\u5de8\u5927\u3002 \u867d\u7136\u901a\u8fc7\u65e9\u671f\u6d4b\u8bd5\u548c\u9891\u7e41\u6d4b\u8bd5\u6765\u53d1\u73b0\u6709\u7455\u75b5\u7684\u4ea7\u54c1\uff0c\u4f46\u4ecd\u6709\u4e00\u4e9b\u5b58\u5728\u7455\u75b5\u7684\u4ea7\u54c1\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5982\u679c\u6211\u4eec\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u6280\u672f\u7528\u4e8e\u53d1\u73b0\u7455\u75b5\u4ea7\u54c1\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u4e3a\u5236\u9020\u5546\u8282\u7701\u5927\u91cf\u7684\u8d44\u91d1\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5b83\u62e5\u6709590\u4e2a\u7279\u5f81\u3002\u6211\u4eec\u770b\u770b\u80fd\u5426\u5bf9\u8fd9\u4e9b\u7279\u5f81\u8fdb\u884c\u964d\u7ef4\u5904\u7406\u3002 \u5bf9\u4e8e\u6570\u636e\u7684\u7f3a\u5931\u503c\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6709\u4e00\u4e9b\u5904\u7406\u65b9\u6cd5(\u53c2\u8003\u7b2c5\u7ae0) \u76ee\u524d\u8be5\u7ae0\u8282\u5904\u7406\u7684\u65b9\u6848\u662f\uff1a\u5c06\u7f3a\u5931\u503cNaN(Not a Number\u7f29\u5199)\uff0c\u5168\u90e8\u7528\u5e73\u5747\u503c\u6765\u66ff\u4ee3(\u5982\u679c\u75280\u6765\u5904\u7406\u7684\u7b56\u7565\u5c31\u592a\u5dee\u52b2\u4e86)\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/13.PCA/#_4","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6587\u4ef6\u540d\uff1asecom.data \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 3030.93 2564 2187.7333 1411.1265 1.3602 100 97.6133 0.1242 1.5005 0.0162 -0.0034 0.9455 202.4396 0 7.9558 414.871 10.0433 0.968 192.3963 12.519 1.4026 -5419 2916.5 -4043.75 751 0.8955 1.773 3.049 64.2333 2.0222 0.1632 3.5191 83.3971 9.5126 50.617 64.2588 49.383 66.3141 86.9555 117.5132 61.29 4.515 70 352.7173 10.1841 130.3691 723.3092 1.3072 141.2282 1 624.3145 218.3174 0 4.592 4.841 2834 0.9317 0.9484 4.7057 -1.7264 350.9264 10.6231 108.6427 16.1445 21.7264 29.5367 693.7724 0.9226 148.6009 1 608.17 84.0793 NaN NaN 0 0.0126 -0.0206 0.0141 -0.0307 -0.0083 -0.0026 -0.0567 -0.0044 7.2163 0.132 NaN 2.3895 0.969 1747.6049 0.1841 8671.9301 -0.3274 -0.0055 -0.0001 0.0001 0.0003 -0.2786 0 0.3974 -0.0251 0.0002 0.0002 0.135 -0.0042 0.0003 0.0056 0 -0.2468 0.3196 NaN NaN NaN NaN 0.946 0 748.6115 0.9908 58.4306 0.6002 0.9804 6.3788 15.88 2.639 15.94 15.93 0.8656 3.353 0.4098 3.188 -0.0473 0.7243 0.996 2.2967 1000.7263 39.2373 123 111.3 75.2 46.2 350.671 0.3948 0 6.78 0.0034 0.0898 0.085 0.0358 0.0328 12.2566 0 4.271 10.284 0.4734 0.0167 11.8901 0.41 0.0506 NaN NaN 1017 967 1066 368 0.09 0.048 0.095 2 0.9 0.069 0.046 0.725 0.1139 0.3183 0.5888 0.3184 0.9499 0.3979 0.16 0 0 20.95 0.333 12.49 16.713 0.0803 5.72 0 11.19 65.363 0 0 0 0 0 0 0.292 5.38 20.1 0.296 10.62 10.3 5.38 4.04 16.23 0.2951 8.64 0 10.3 97.314 0 0.0772 0.0599 0.07 0.0547 0.0704 0.052 0.0301 0.1135 3.4789 0.001 NaN 0.0707 0.0211 175.2173 0.0315 1940.3994 0 0.0744 0.0546 0 0 0 0 0 0 0 0 0 0.0027 0.004 0 0 0 0 NaN NaN NaN NaN 0.0188 0 219.9453 0.0011 2.8374 0.0189 0.005 0.4269 0 0 0 0 0 0 0 0 0 0 0 0.0472 40.855 4.5152 30.9815 33.9606 22.9057 15.9525 110.2144 0.131 0 2.5883 0.001 0.0319 0.0197 0.012 0.0109 3.9321 0 1.5123 3.5811 0.1337 0.0055 3.8447 0.1077 0.0167 NaN NaN 418.1363 398.3185 496.1582 158.333 0.0373 0.0202 0.0462 0.6083 0.3032 0.02 0.0174 0.2827 0.0434 0.1342 0.2419 0.1343 0.367 0.1431 0.061 0 0 0 6.2698 0.1181 3.8208 5.3737 0.0254 1.6252 0 3.2461 18.0118 0 0 0 0 0 0 0.0752 1.5989 6.5893 0.0913 3.0911 8.4654 1.5989 1.2293 5.3406 0.0867 2.8551 0 2.9971 31.8843 NaN NaN 0 0.0215 0.0274 0.0315 0.0238 0.0206 0.0238 0.0144 0.0491 1.2708 0.0004 NaN 0.0229 0.0065 55.2039 0.0105 560.2658 0 0.017 0.0148 0.0124 0.0114 0 0 0 0 0 0 0 0.001 0.0013 0 0 0 0 NaN NaN NaN NaN 0.0055 0 61.5932 0.0003 0.9967 0.0082 0.0017 0.1437 0 0 0 0 0 0 0 0 0 0 0 0.0151 14.2396 1.4392 5.6188 3.6721 2.9329 2.1118 24.8504 29.0271 0 6.9458 2.738 5.9846 525.0965 0 3.4641 6.0544 0 53.684 2.4788 4.7141 1.7275 6.18 3.275 3.6084 18.7673 33.1562 26.3617 49.0013 10.0503 2.7073 3.1158 3.1136 44.5055 42.2737 1.3071 0.8693 1.1975 0.6288 0.9163 0.6448 1.4324 0.4576 0.1362 0 0 0 5.9396 3.2698 9.5805 2.3106 6.1463 4.0502 0 1.7924 29.9394 0 0 0 0 0 0 6.2052 311.6377 5.7277 2.7864 9.7752 63.7987 24.7625 13.6778 2.3394 31.9893 5.8142 0 1.6936 115.7408 0 613.3069 291.4842 494.6996 178.1759 843.1138 0 53.1098 0 48.2091 0.7578 NaN 2.957 2.1739 10.0261 17.1202 22.3756 0 0 0 0 0 0 0 0 0 0 0 0 64.6707 0 0 0 0 0 NaN NaN NaN NaN 1.9864 0 29.3804 0.1094 4.856 3.1406 0.5064 6.6926 0 0 0 0 0 0 0 0 0 0 0 2.057 4.0825 11.5074 0.1096 0.0078 0.0026 7.116 1.0616 395.57 75.752 0.4234 12.93 0.78 0.1827 5.7349 0.3363 39.8842 3.2687 1.0297 1.0344 0.4385 0.1039 42.3877 NaN NaN NaN NaN NaN NaN NaN NaN 533.85 2.1113 8.95 0.3157 3.0624 0.1026 1.6765 14.9509 NaN NaN NaN NaN 0.5005 0.0118 0.0035 2.363 NaN NaN NaN NaN 3095.78 2465.14 2230.4222 1463.6606 0.8294 100 102.3433 0.1247 1.4966 -0.0005 -0.0148 0.9627 200.547 0 10.1548 414.7347 9.2599 0.9701 191.2872 12.4608 1.3825 -5441.5 2604.25 -3498.75 -1640.25 1.2973 2.0143 7.39 68.4222 2.2667 0.2102 3.4171 84.9052 9.7997 50.6596 64.2828 49.3404 64.9193 87.5241 118.1188 78.25 2.773 70 352.2445 10.0373 133.1727 724.8264 1.2887 145.8445 1 631.2618 205.1695 0 4.59 4.842 2853 0.9324 0.9479 4.682 0.8073 352.0073 10.3092 113.98 10.9036 19.1927 27.6301 697.1964 1.1598 154.3709 1 620.3582 82.3494 NaN NaN 0 -0.0039 -0.0198 0.0004 -0.044 -0.0358 -0.012 -0.0377 0.0017 6.8043 0.1358 NaN 2.3754 0.9894 1931.6464 0.1874 8407.0299 0.1455 -0.0015 0 -0.0005 0.0001 0.5854 0 -0.9353 -0.0158 -0.0004 -0.0004 -0.0752 -0.0045 0.0002 0.0015 0 0.0772 -0.0903 NaN NaN NaN NaN 0.9425 0 731.2517 0.9902 58.668 0.5958 0.9731 6.5061 15.88 2.541 15.91 15.88 0.8703 2.771 0.4138 3.272 -0.0946 0.8122 0.9985 2.2932 998.1081 37.9213 98 80.3 81 56.2 219.7679 0.2301 0 5.7 0.0049 0.1356 0.06 0.0547 0.0204 12.3319 0 6.285 13.077 0.5666 0.0144 11.8428 0.35 0.0437 NaN NaN 568 59 297 3277 0.112 0.115 0.124 2.2 1.1 0.079 0.561 1.0498 0.1917 0.4115 0.6582 0.4115 1.0181 0.2315 0.325 0 0 17.99 0.439 10.14 16.358 0.0892 6.92 0 9.05 82.986 0 0 0 0 0 0 0.222 3.74 19.59 0.316 11.65 8.02 3.74 3.659 15.078 0.358 8.96 0 8.02 134.25 0 0.0566 0.0488 0.1651 0.1578 0.0468 0.0987 0.0734 0.0747 3.9578 0.005 NaN 0.0761 0.0014 128.4285 0.0238 1988 0 0.0203 0.0236 0 0 0 0 0 0 0 0 0 0.0064 0.0036 0 0 0 0 NaN NaN NaN NaN 0.0154 0 193.0287 0.0007 3.8999 0.0187 0.0086 0.5749 0 0 0 0 0 0 0 0 0 0 0 0.0411 29.743 3.6327 29.0598 28.9862 22.3163 17.4008 83.5542 0.0767 0 1.8459 0.0012 0.044 0.0171 0.0154 0.0069 3.9011 0 2.1016 3.9483 0.1662 0.0049 3.7836 0.1 0.0139 NaN NaN 233.9865 26.5879 139.2082 1529.7622 0.0502 0.0561 0.0591 0.8151 0.3464 0.0291 0.1822 0.3814 0.0715 0.1667 0.263 0.1667 0.3752 0.0856 0.1214 0 0 0 5.6522 0.1417 2.9939 5.2445 0.0264 1.8045 0 2.7661 23.623 0 0 0 0 0 0 0.0778 1.1506 5.9247 0.0878 3.3604 7.7421 1.1506 1.1265 5.0108 0.1013 2.4278 0 2.489 41.708 NaN NaN 0 0.0142 0.023 0.0768 0.0729 0.0143 0.0513 0.0399 0.0365 1.2474 0.0017 NaN 0.0248 0.0005 46.3453 0.0069 677.1873 0 0.0053 0.0059 0.0081 0.0033 0 0 0 0 0 0 0 0.0022 0.0013 0 0 0 0 NaN NaN NaN NaN 0.0049 0 65.0999 0.0002 1.1655 0.0068 0.0027 0.1921 0 0 0 0 0 0 0 0 0 0 0 0.012 10.5837 1.0323 4.3465 2.5939 3.2858 2.5197 15.015 27.7464 0 5.5695 3.93 9.0604 0 368.9713 2.1196 6.1491 0 61.8918 3.1531 6.1188 1.4857 6.1911 2.8088 3.1595 10.4383 2.2655 8.4887 199.7866 8.6336 5.7093 1.6779 3.2153 48.5294 37.5793 16.4174 1.2364 1.9562 0.8123 1.0239 0.834 1.5683 0.2645 0.2751 0 0 0 5.1072 4.3737 7.6142 2.2568 6.9233 4.7448 0 1.4336 40.4475 0 0 0 0 0 0 4.7415 463.2883 5.5652 3.0652 10.2211 73.5536 19.4865 13.243 2.1627 30.8643 5.8042 0 1.2928 163.0249 0 0 246.7762 0 359.0444 130.635 820.79 194.4371 0 58.1666 3.6822 NaN 3.2029 0.1441 6.6487 12.6788 23.6469 0 0 0 0 0 0 0 0 0 0 0 0 141.4365 0 0 0 0 0 NaN NaN NaN NaN 1.6292 0 26.397 0.0673 6.6475 3.131 0.8832 8.837 0 0 0 0 0 0 0 0 0 0 0 1.791 2.9799 9.5796 0.1096 0.0078 0.0026 7.116 1.3526 408.798 74.64 0.7193 16 1.33 0.2829 7.1196 0.4989 53.1836 3.9139 1.7819 0.9634 0.1745 0.0375 18.1087 NaN NaN NaN NaN NaN NaN NaN NaN 535.0164 2.4335 5.92 0.2653 2.0111 0.0772 1.1065 10.9003 0.0096 0.0201 0.006 208.2045 0.5019 0.0223 0.0055 4.4447 0.0096 0.0201 0.006 208.2045 2932.61 2559.94 2186.4111 1698.0172 1.5102 100 95.4878 0.1241 1.4436 0.0041 0.0013 0.9615 202.0179 0 9.5157 416.7075 9.3144 0.9674 192.7035 12.5404 1.4123 -5447.75 2701.75 -4047 -1916.5 1.3122 2.0295 7.5788 67.1333 2.3333 0.1734 3.5986 84.7569 8.659 50.153 64.1114 49.847 65.8389 84.7327 118.6128 14.37 5.434 70 364.3782 9.8783 131.8027 734.7924 1.2992 141.0845 1 637.2655 185.7574 0 4.486 4.748 2936 0.9139 0.9447 4.5873 23.8245 364.5364 10.1685 115.6273 11.3019 16.1755 24.2829 710.5095 0.8694 145.8 1 625.9636 84.7681 140.6972 485.2665 0 -0.0078 -0.0326 -0.0052 0.0213 -0.0054 -0.1134 -0.0182 0.0287 7.1041 0.1362 NaN 2.4532 0.988 1685.8514 0.1497 9317.1698 0.0553 0.0006 -0.0013 0 0.0002 -0.1343 0 -0.1427 0.1218 0.0006 -0.0001 0.0134 -0.0026 -0.0016 -0.0006 0.0013 -0.0301 -0.0728 NaN NaN NaN 0.4684 0.9231 0 718.5777 0.9899 58.4808 0.6015 0.9772 6.4527 15.9 2.882 15.94 15.95 0.8798 3.094 0.4777 3.272 -0.1892 0.8194 0.9978 2.2592 998.444 42.0579 89 126.4 96.5 45.1001 306.038 0.3263 0 8.33 0.0038 0.0754 0.0483 0.0619 0.0221 8.266 0 4.819 8.443 0.4909 0.0177 8.2054 0.47 0.0497 NaN NaN 562 788 759 2100 0.187 0.117 0.068 2.1 1.4 0.123 0.319 1.0824 0.0369 0.3141 0.5753 0.3141 0.9677 0.2706 0.326 0 0 17.78 0.745 13.31 22.912 0.1959 9.21 0 17.87 60.11 0 0 0 0 0 0 0.139 5.09 19.75 0.949 9.71 16.73 5.09 11.059 22.624 0.1164 13.3 0 16.73 79.618 0 0.0339 0.0494 0.0696 0.0406 0.0401 0.084 0.0349 0.0718 2.4266 0.0014 NaN 0.0963 0.0152 182.4956 0.0284 839.6006 0 0.0192 0.017 0 0 0 0 0 0 0 0 0 0.0062 0.004 0 0 0 0 NaN NaN NaN 0.1729 0.0273 0 104.4042 0.0007 4.1446 0.0733 0.0063 0.4166 0 0 0 0 0 0 0 0 0 0 0 0.0487 29.621 3.9133 23.551 41.3837 32.6256 15.7716 97.3868 0.1117 0 2.5274 0.0012 0.0249 0.0152 0.0157 0.0075 2.8705 0 1.5306 2.5493 0.1479 0.0059 2.8046 0.1185 0.0167 NaN NaN 251.4536 329.6406 325.0672 902.4576 0.08 0.0583 0.0326 0.6964 0.4031 0.0416 0.1041 0.3846 0.0151 0.1288 0.2268 0.1288 0.3677 0.1175 0.1261 0 0 0 5.7247 0.2682 3.8541 6.1797 0.0546 2.568 0 4.6067 16.0104 0 0 0 0 0 0 0.0243 1.5481 5.9453 0.2777 3.16 8.9855 1.5481 2.9844 6.2277 0.0353 3.7663 0 5.6983 24.7959 13.5664 15.4488 0 0.0105 0.0208 0.0327 0.0171 0.0116 0.0428 0.0154 0.0383 0.7786 0.0005 NaN 0.0302 0.0046 58.0575 0.0092 283.6616 0 0.0054 0.0043 0.003 0.0037 0 0 0 0 0 0 0 0.0021 0.0015 0 0 0 0 NaN NaN NaN 0.0221 0.01 0 28.7334 0.0003 1.2356 0.019 0.002 0.1375 0 0 0 0 0 0 0 0 0 0 0 0.019 11.4871 1.1798 4.0782 4.3102 3.7696 2.0627 18.0233 21.6062 0 8.7236 3.0609 5.2231 0 0 2.2943 4.0917 0 50.6425 2.0261 5.2707 1.8268 4.2581 3.7479 3.522 10.3162 29.1663 18.7546 109.5747 14.2503 5.765 0.8972 3.1281 60 70.9161 8.8647 1.2771 0.4264 0.6263 0.8973 0.6301 1.4698 0.3194 0.2748 0 0 0 4.8795 7.5418 10.0984 3.1182 15.079 6.528 0 2.8042 32.3594 0 0 0 0 0 0 3.0301 21.3645 5.4178 9.3327 8.3977 148.0287 31.4674 45.5423 3.1842 13.3923 9.1221 0 2.6727 93.9245 0 434.2674 151.7665 0 190.3869 746.915 74.0741 191.7582 250.1742 34.1573 1.0281 NaN 3.9238 1.5357 10.8251 18.9849 9.0113 0 0 0 0 0 0 0 0 0 0 0 0 240.7767 244.2748 0 0 0 0 NaN NaN NaN 36.9067 2.9626 0 14.5293 0.0751 7.087 12.1831 0.6451 6.4568 0 0 0 0 0 0 0 0 0 0 0 2.1538 2.9667 9.3046 0.1096 0.0078 0.0026 7.116 0.7942 411.136 74.654 0.1832 16.16 0.85 0.0857 7.1619 0.3752 23.0713 3.9306 1.1386 1.5021 0.3718 0.1233 24.7524 267.064 0.9032 1.1 0.6219 0.4122 0.2562 0.4119 68.8489 535.0245 2.0293 11.21 0.1882 4.0923 0.064 2.0952 9.2721 0.0584 0.0484 0.0148 82.8602 0.4958 0.0157 0.0039 3.1745 0.0584 0.0484 0.0148 82.8602 2988.72 2479.9 2199.0333 909.7926 1.3204 100 104.2367 0.1217 1.4882 -0.0124 -0.0033 0.9629 201.8482 0 9.6052 422.2894 9.6924 0.9687 192.1557 12.4782 1.4011 -5468.25 2648.25 -4515 -1657.25 1.3137 2.0038 7.3145 62.9333 2.6444 0.2071 3.3813 84.9105 8.6789 50.51 64.1125 49.49 65.1951 86.6867 117.0442 76.9 1.279 70 363.0273 9.9305 131.8027 733.8778 1.3027 142.5427 1 637.3727 189.9079 0 4.486 4.748 2936 0.9139 0.9447 4.5873 24.3791 361.4582 10.2112 116.1818 13.5597 15.6209 23.4736 710.4043 0.9761 147.6545 1 625.2945 70.2289 160.321 464.9735 0 -0.0555 -0.0461 -0.04 0.04 0.0676 -0.1051 0.0028 0.0277 7.5925 0.1302 NaN 2.4004 0.9904 1752.0968 0.1958 8205.7 0.0697 -0.0003 -0.0021 -0.0001 0.0002 0.0411 0 0.0177 -0.0195 -0.0002 0 -0.0699 -0.0059 0.0003 0.0003 0.0021 -0.0483 -0.118 NaN NaN NaN 0.4647 0.9564 0 709.0867 0.9906 58.6635 0.6016 0.9761 6.4935 15.55 3.132 15.61 15.59 1.366 2.48 0.5176 3.119 0.2838 0.7244 0.9961 2.3802 980.451 41.1025 127 118 123.7 47.8 162.432 0.1915 0 5.51 0.003 0.114 0.0393 0.0613 0.019 13.2651 0 9.073 15.241 1.3029 0.015 11.9738 0.35 0.0699 NaN NaN 859 355 3433 3004 0.068 0.108 0.1 1.7 0.9 0.086 0.241 0.9386 0.0356 0.2618 0.4391 0.2618 0.8567 0.2452 0.39 0 0 16.22 0.693 14.67 22.562 0.1786 5.69 0 18.2 52.571 0 0 0 0 0 0 0.139 5.92 23.6 1.264 10.63 13.56 5.92 11.382 24.32 0.3458 9.56 0 21.97 104.95 0 0.1248 0.0463 0.1223 0.0354 0.0708 0.0754 0.0643 0.0932 5.5398 0.0023 NaN 0.0764 0.0015 152.0885 0.0573 820.3999 0 0.0152 0.0149 0 0 0 0 0 0 0 0 0 0.0067 0.004 0 0 0 0 NaN NaN NaN 0.0191 0.0234 0 94.0954 0.001 3.2119 0.0406 0.0072 0.4212 0 0 0 0 0 0 0 0 0 0 0 0.0513 31.83 3.1959 33.896 37.8477 44.3906 16.9347 50.3631 0.0581 0 2.1775 0.0007 0.0417 0.0115 0.0172 0.0063 4.2154 0 2.896 4.0526 0.3882 0.0049 3.9403 0.0916 0.0245 NaN NaN 415.5048 157.0889 1572.6896 1377.4276 0.0285 0.0445 0.0465 0.6305 0.3046 0.0286 0.0824 0.3483 0.0128 0.1004 0.1701 0.1004 0.3465 0.0973 0.1675 0 0 0 5.444 0.2004 4.19 6.3329 0.0479 1.7339 0 4.966 15.7375 0 0 0 0 0 0 0.0243 1.7317 6.6262 0.3512 3.2699 9.402 1.7317 3.0672 6.6839 0.0928 3.0229 0 6.3292 29.0339 8.4026 4.8851 0 0.0407 0.0198 0.0531 0.0167 0.0224 0.0422 0.0273 0.0484 1.8222 0.0006 NaN 0.0252 0.0004 45.7058 0.0188 309.8492 0 0.0046 0.0049 0.0028 0.0034 0 0 0 0 0 0 0 0.0024 0.0014 0 0 0 0 NaN NaN NaN 0.0038 0.0068 0 32.4228 0.0003 1.1135 0.0132 0.0023 0.1348 0 0 0 0 0 0 0 0 0 0 0 0.0155 13.3972 1.1907 5.6363 3.9482 4.9881 2.1737 17.8537 14.5054 0 5.286 2.4643 7.6602 317.7362 0 1.9689 6.5718 0 94.4594 3.6091 13.442 1.5441 6.2313 2.8049 4.9898 15.7089 13.4051 76.0354 181.2641 5.176 5.3899 1.3671 2.7013 34.0336 41.5236 7.1274 1.1054 0.4097 0.5183 0.6849 0.529 1.3141 0.2829 0.3332 0 0 0 4.468 6.9785 11.1303 3.0744 13.7105 3.9918 0 2.8555 27.6824 0 0 0 0 0 0 3.0301 24.2831 6.5291 12.3786 9.1494 100.0021 37.8979 48.4887 3.4234 35.4323 6.4746 0 3.5135 149.4399 0 225.0169 100.4883 305.75 88.5553 104.666 71.7583 0 336.766 72.9635 1.767 NaN 3.1817 0.1488 8.6804 29.2542 9.9979 0 0 711.6418 0 0 0 0 0 0 0 0 0 113.5593 0 0 0 0 0 NaN NaN NaN 4.12 2.4416 0 13.2699 0.0977 5.4751 6.7553 0.7404 6.4865 0 0 0 0 0 0 0 0 0 0 0 2.1565 3.2465 7.7754 0.1096 0.0078 0.0026 7.116 1.165 372.822 72.442 1.8804 131.68 39.33 0.6812 56.9303 17.4781 161.4081 35.3198 54.2917 1.1613 0.7288 0.271 62.7572 268.228 0.6511 7.32 0.163 3.5611 0.067 2.729 25.0363 530.5682 2.0253 9.33 0.1738 2.8971 0.0525 1.7585 8.5831 0.0202 0.0149 0.0044 73.8432 0.499 0.0103 0.0025 2.0544 0.0202 0.0149 0.0044 73.8432 3032.24 2502.87 2233.3667 1326.52 1.5334 100 100.3967 0.1235 1.5031 -0.0031 -0.0072 0.9569 201.9424 0 10.5661 420.5925 10.3387 0.9735 191.6037 12.4735 1.3888 -5476.25 2635.25 -3987.5 117 1.2887 1.9912 7.2748 62.8333 3.1556 0.2696 3.2728 86.3269 8.7677 50.248 64.1511 49.752 66.1542 86.1468 121.4364 76.39 2.209 70 353.34 10.4091 176.3136 789.7523 1.0341 138.0882 1 667.7418 233.5491 0 4.624 4.894 2865 0.9298 0.9449 4.6414 -12.2945 355.0809 9.7948 144.0191 21.9782 32.2945 44.1498 745.6025 0.9256 146.6636 1 645.7636 65.8417 NaN NaN 0 -0.0534 0.0183 -0.0167 -0.0449 0.0034 -0.0178 -0.0123 -0.0048 7.5017 0.1342 NaN 2.453 0.9902 1828.3846 0.1829 9014.46 0.0448 -0.0077 -0.0001 -0.0001 -0.0001 0.2189 0 -0.6704 -0.0167 0.0004 -0.0003 0.0696 -0.0045 0.0002 0.0078 0 -0.0799 -0.2038 NaN NaN NaN NaN 0.9424 0 796.595 0.9908 58.3858 0.5913 0.9628 6.3551 15.75 3.148 15.73 15.71 0.946 3.027 0.5328 3.299 -0.5677 0.778 1.001 2.3715 993.1274 38.1448 119 143.2 123.1 48.8 296.303 0.3744 0 3.64 0.0041 0.0634 0.0451 0.0623 0.024 14.2354 0 9.005 12.506 0.4434 0.0126 13.9047 0.43 0.0538 NaN NaN 699 283 1747 1443 0.147 0.04 0.113 3.9 0.8 0.101 0.499 0.576 0.0631 0.3053 0.583 0.3053 0.8285 0.1308 0.922 0 0 15.24 0.282 10.85 37.715 0.1189 3.98 0 25.54 72.149 0 0 0 0 0 0 0.25 5.52 15.76 0.519 10.71 19.77 5.52 8.446 33.832 0.3951 9.09 0 19.77 92.307 0 0.0915 0.0506 0.0769 0.1079 0.0797 0.1047 0.0924 0.1015 4.1338 0.003 NaN 0.0802 0.0004 69.151 0.197 1406.4004 0 0.0227 0.0272 0 0 0 0 0 0 0 0 0 0.0067 0.0031 0 0 0 0 NaN NaN NaN NaN 0.024 0 149.2172 0.0006 2.5775 0.0177 0.0214 0.4051 0 0 0 0 0 0 0 0 0 0 0 0.0488 19.862 3.6163 34.125 55.9626 53.0876 17.4864 88.7672 0.1092 0 1.0929 0.0013 0.0257 0.0116 0.0163 0.008 4.4239 0 3.2376 3.6536 0.1293 0.004 4.3474 0.1275 0.0181 NaN NaN 319.1252 128.0296 799.5884 628.3083 0.0755 0.0181 0.0476 1.35 0.2698 0.032 0.1541 0.2155 0.031 0.1354 0.2194 0.1354 0.3072 0.0582 0.3574 0 0 0 4.8956 0.0766 2.913 11.0583 0.0327 1.1229 0 7.3296 23.116 0 0 0 0 0 0 0.0822 1.6216 4.7279 0.1773 3.155 9.7777 1.6216 2.5923 10.5352 0.1301 3.0939 0 6.3767 32.0537 NaN NaN 0 0.0246 0.0221 0.0329 0.0522 0.0256 0.0545 0.0476 0.0463 1.553 0.001 NaN 0.0286 0.0001 21.0312 0.0573 494.7368 0 0.0063 0.0077 0.0052 0.0027 0 0 0 0 0 0 0 0.0025 0.0012 0 0 0 0 NaN NaN NaN NaN 0.0089 0 57.2692 0.0002 0.8495 0.0065 0.0077 0.1356 0 0 0 0 0 0 0 0 0 0 0 0.0165 7.1493 1.1704 5.3823 4.7226 4.9184 2.185 22.3369 24.4142 0 3.6256 3.3208 4.2178 0 866.0295 2.5046 7.0492 0 85.2255 2.9734 4.2892 1.2943 7.257 3.4473 3.8754 12.7642 10.739 43.8119 0 11.4064 2.0088 1.5533 6.2069 25.3521 37.4691 15.247 0.6672 0.7198 0.6076 0.9088 0.6136 1.2524 0.1518 0.7592 0 0 0 4.3131 2.7092 6.1538 4.7756 11.4945 2.8822 0 3.8248 30.8924 0 0 0 0 0 0 5.3863 44.898 4.4384 5.2987 7.4365 89.9529 17.0927 19.1303 4.5375 42.6838 6.1979 0 3.0615 140.1953 0 171.4486 276.881 461.8619 240.1781 0 587.3773 748.1781 0 55.1057 2.2358 NaN 3.2712 0.0372 3.7821 107.6905 15.6016 0 293.1396 0 0 0 0 0 0 0 0 0 0 148.0663 0 0 0 0 0 NaN NaN NaN NaN 2.5512 0 18.7319 0.0616 4.4146 2.9954 2.2181 6.3745 0 0 0 0 0 0 0 0 0 0 0 2.0579 1.9999 9.4805 0.1096 0.0078 0.0026 7.116 1.4636 399.914 79.156 1.0388 19.63 1.98 0.4287 9.7608 0.8311 70.9706 4.9086 2.5014 0.9778 0.2156 0.0461 22.05 NaN NaN NaN NaN NaN NaN NaN NaN 532.0155 2.0275 8.83 0.2224 3.1776 0.0706 1.6597 10.9698 NaN NaN NaN NaN 0.48 0.4766 0.1045 99.3032 0.0202 0.0149 0.0044 73.8432 \u51c6\u5907\u6570\u636e\uff1a\u5c06value\u4e3aNaN\u7684\u6c42\u5747\u503c def replaceNanWithMean(): datMat = loadDataSet('db/13.PCA/secom.data', ' ') numFeat = shape(datMat)[1] for i in range(numFeat): # \u5bf9value\u4e0d\u4e3aNaN\u7684\u6c42\u5747\u503c # .A \u8fd4\u56de\u77e9\u9635\u57fa\u4e8e\u7684\u6570\u7ec4 meanVal = mean(datMat[nonzero(~isnan(datMat[:, i].A))[0], i]) # \u5c06value\u4e3aNaN\u7684\u503c\u8d4b\u503c\u4e3a\u5747\u503c datMat[nonzero(isnan(datMat[:, i].A))[0],i] = meanVal return datMat \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 N \u7684\u9608\u503c PCA \u6570\u636e\u964d\u7ef4 \u5728\u7b49\u5f0f Av=\u5165v \u4e2d\uff0cv \u662f\u7279\u5f81\u5411\u91cf\uff0c \u5165\u662f\u7279\u5f81\u503c\u3002 \u8868\u793a \u5982\u679c\u7279\u5f81\u5411\u91cf v \u88ab\u67d0\u4e2a\u77e9\u9635 A \u5de6\u4e58\uff0c\u90a3\u4e48\u5b83\u5c31\u7b49\u4e8e\u67d0\u4e2a\u6807\u91cf \u5165 \u4e58\u4ee5 v. \u5e78\u8fd0\u7684\u662f\uff1a Numpy \u4e2d\u6709\u5bfb\u627e\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\u7684\u6a21\u5757 linalg\uff0c\u5b83\u6709 eig() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u6c42\u89e3\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\u3002 def pca(dataMat, topNfeat=9999999): \"\"\"pca Args: dataMat \u539f\u6570\u636e\u96c6\u77e9\u9635 topNfeat \u5e94\u7528\u7684N\u4e2a\u7279\u5f81 Returns: lowDDataMat \u964d\u7ef4\u540e\u6570\u636e\u96c6 reconMat \u65b0\u7684\u6570\u636e\u96c6\u7a7a\u95f4 \"\"\" # \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u5747\u503c meanVals = mean(dataMat, axis=0) # print 'meanVals', meanVals # \u6bcf\u4e2a\u5411\u91cf\u540c\u65f6\u90fd\u51cf\u53bb \u5747\u503c meanRemoved = dataMat - meanVals # print 'meanRemoved=', meanRemoved # cov\u534f\u65b9\u5dee=[(x1-x\u5747\u503c)*(y1-y\u5747\u503c)+(x2-x\u5747\u503c)*(y2-y\u5747\u503c)+...+(xn-x\u5747\u503c)*(yn-y\u5747\u503c)+]/(n-1) ''' \u65b9\u5dee\uff1a\uff08\u4e00\u7ef4\uff09\u5ea6\u91cf\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u5173\u7cfb\u7684\u7edf\u8ba1\u91cf \u534f\u65b9\u5dee\uff1a \uff08\u4e8c\u7ef4\uff09\u5ea6\u91cf\u5404\u4e2a\u7ef4\u5ea6\u504f\u79bb\u5176\u5747\u503c\u7684\u7a0b\u5ea6 \u534f\u65b9\u5dee\u77e9\u9635\uff1a\uff08\u591a\u7ef4\uff09\u5ea6\u91cf\u5404\u4e2a\u7ef4\u5ea6\u504f\u79bb\u5176\u5747\u503c\u7684\u7a0b\u5ea6 \u5f53 cov(X, Y)>0\u65f6\uff0c\u8868\u660eX\u4e0eY\u6b63\u76f8\u5173\uff1b(X\u8d8a\u5927\uff0cY\u4e5f\u8d8a\u5927\uff1bX\u8d8a\u5c0fY\uff0c\u4e5f\u8d8a\u5c0f\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u79f0\u4e3a\u201c\u6b63\u76f8\u5173\u201d\u3002) \u5f53 cov(X, Y)<0\u65f6\uff0c\u8868\u660eX\u4e0eY\u8d1f\u76f8\u5173\uff1b \u5f53 cov(X, Y)=0\u65f6\uff0c\u8868\u660eX\u4e0eY\u4e0d\u76f8\u5173\u3002 ''' covMat = cov(meanRemoved, rowvar=0) # eigVals\u4e3a\u7279\u5f81\u503c\uff0c eigVects\u4e3a\u7279\u5f81\u5411\u91cf eigVals, eigVects = linalg.eig(mat(covMat)) # print 'eigVals=', eigVals # print 'eigVects=', eigVects # \u5bf9\u7279\u5f81\u503c\uff0c\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\uff0c\u8fd4\u56de\u4ece\u5c0f\u5230\u5927\u7684index\u5e8f\u53f7 # \u7279\u5f81\u503c\u7684\u9006\u5e8f\u5c31\u53ef\u4ee5\u5f97\u5230topNfeat\u4e2a\u6700\u5927\u7684\u7279\u5f81\u5411\u91cf ''' >>> x = np.array([3, 1, 2]) >>> np.argsort(x) array([1, 2, 0]) # index,1 = 1; index,2 = 2; index,0 = 3 >>> y = np.argsort(x) >>> y[::-1] array([0, 2, 1]) >>> y[:-3:-1] array([0, 2]) # \u53d6\u51fa -1, -2 >>> y[:-6:-1] array([0, 2, 1]) ''' eigValInd = argsort(eigVals) # print 'eigValInd1=', eigValInd # -1\u8868\u793a\u5012\u5e8f\uff0c\u8fd4\u56detopN\u7684\u7279\u5f81\u503c[-1 \u5230 -(topNfeat+1) \u4f46\u662f\u4e0d\u5305\u62ec-(topNfeat+1)\u672c\u8eab\u7684\u5012\u53d9] eigValInd = eigValInd[:-(topNfeat+1):-1] # print 'eigValInd2=', eigValInd # \u91cd\u7ec4 eigVects \u6700\u5927\u5230\u6700\u5c0f redEigVects = eigVects[:, eigValInd] # print 'redEigVects=', redEigVects.T # \u5c06\u6570\u636e\u8f6c\u6362\u5230\u65b0\u7a7a\u95f4 # --- (1567, 590) (590, 20) # print \"---\", shape(meanRemoved), shape(redEigVects) lowDDataMat = meanRemoved * redEigVects reconMat = (lowDDataMat * redEigVects.T) + meanVals # print 'lowDDataMat=', lowDDataMat # print 'reconMat=', reconMat return lowDDataMat, reconMat \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/13.PCA/pca.py","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/13.PCA/#_5","text":"\u964d\u7ef4\u6280\u672f\u4f7f\u5f97\u6570\u636e\u53d8\u7684\u66f4\u6613\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u5f80\u5f80\u80fd\u591f\u53bb\u9664\u6570\u636e\u4e2d\u7684\u566a\u97f3\uff0c\u4f7f\u5f97\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u66f4\u52a0\u7cbe\u786e\u3002 \u964d\u7ef4\u5f80\u5f80\u4f5c\u4e3a\u9884\u5904\u7406\u6b65\u9aa4\uff0c\u5728\u6570\u636e\u5e94\u7528\u5230\u5176\u4ed6\u7b97\u6cd5\u4e4b\u524d\u6e05\u6d17\u6570\u636e\u3002 \u6bd4\u8f83\u6d41\u884c\u7684\u964d\u7ef4\u6280\u672f\uff1a \u72ec\u7acb\u6210\u5206\u5206\u6790\u3001\u56e0\u5b50\u5206\u6790 \u548c \u4e3b\u6210\u5206\u5206\u6790\uff0c \u5176\u4e2d\u53c8\u4ee5\u4e3b\u6210\u5206\u5206\u6790\u5e94\u7528\u6700\u5e7f\u6cdb\u3002 \u672c\u7ae0\u4e2d\u7684PCA\u5c06\u6240\u6709\u7684\u6570\u636e\u96c6\u90fd\u8c03\u5165\u4e86\u5185\u5b58\uff0c\u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u9700\u8981\u5176\u4ed6\u7684\u65b9\u6cd5\u6765\u5bfb\u627e\u5176\u7279\u5f81\u503c\u3002 \u5982\u679c\u4f7f\u7528\u5728\u7ebfPCA\u5206\u6790\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u4e00\u7bc7\u4f18\u79c0\u7684\u8bba\u6587 \"Incremental Eigenanalysis for Classification\"\u3002 \u4e0b\u4e00\u7ae0\u8981\u8ba8\u8bba\u7684\u5947\u5f02\u503c\u5206\u89e3\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u7279\u5f81\u503c\u5206\u6790\u3002 \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u8981\u70b9\u8865\u5145"},{"location":"ml/14.SVD/","text":"\u7b2c14\u7ae0 \u5229\u7528SVD\u7b80\u5316\u6570\u636e SVD \u6982\u8ff0 \u5947\u5f02\u503c\u5206\u89e3\uff08SVD, Singular Value Decomposition\uff09: \u63d0\u53d6\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u628a SVD \u770b\u6210\u662f\u4ece\u566a\u58f0\u6570\u636e\u4e2d\u62bd\u53d6\u76f8\u5173\u7279\u5f81\u3002\u4ece\u751f\u7269\u4fe1\u606f\u5b66\u5230\u91d1\u878d\u5b66\uff0cSVD \u662f\u63d0\u53d6\u4fe1\u606f\u7684\u5f3a\u5927\u5de5\u5177\u3002 SVD \u573a\u666f \u4fe1\u606f\u68c0\u7d22-\u9690\u6027\u8bed\u4e49\u68c0\u7d22\uff08Lstent Semantic Indexing, LSI\uff09\u6216 \u9690\u5f62\u8bed\u4e49\u5206\u6790\uff08Latent Semantic Analysis, LSA\uff09 \u9690\u6027\u8bed\u4e49\u7d22\u5f15\uff1a\u77e9\u9635 = \u6587\u6863 + \u8bcd\u8bed * \u662f\u6700\u65e9\u7684 SVD \u5e94\u7528\u4e4b\u4e00\uff0c\u6211\u4eec\u79f0\u5229\u7528 SVD \u7684\u65b9\u6cd5\u4e3a\u9690\u6027\u8bed\u4e49\u7d22\u5f15\uff08LSI\uff09\u6216\u9690\u6027\u8bed\u4e49\u5206\u6790\uff08LSA\uff09\u3002 \u63a8\u8350\u7cfb\u7edf \u5229\u7528 SVD \u4ece\u6570\u636e\u4e2d\u6784\u5efa\u4e00\u4e2a\u4e3b\u9898\u7a7a\u95f4\u3002 \u518d\u5728\u8be5\u7a7a\u95f4\u4e0b\u8ba1\u7b97\u5176\u76f8\u4f3c\u5ea6\u3002(\u4ece\u9ad8\u7ef4-\u4f4e\u7ef4\u7a7a\u95f4\u7684\u8f6c\u5316\uff0c\u5728\u4f4e\u7ef4\u7a7a\u95f4\u6765\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0cSVD \u63d0\u5347\u4e86\u63a8\u8350\u7cfb\u7edf\u7684\u6548\u7387\u3002) \u4e0a\u56fe\u53f3\u8fb9\u6807\u6ce8\u7684\u4e3a\u4e00\u7ec4\u5171\u540c\u7279\u5f81\uff0c\u8868\u793a\u7f8e\u5f0f BBQ \u7a7a\u95f4\uff1b\u53e6\u4e00\u7ec4\u5728\u4e0a\u56fe\u53f3\u8fb9\u672a\u6807\u6ce8\u7684\u4e3a\u65e5\u5f0f\u98df\u54c1 \u7a7a\u95f4\u3002 \u56fe\u50cf\u538b\u7f29 \u4f8b\u5982\uff1a 32*32=1024 => 32*2+2*1+32*2=130 (2*1\u8868\u793a\u53bb\u6389\u4e86\u9664\u5bf9\u89d2\u7ebf\u76840), \u51e0\u4e4e\u83b7\u5f97\u4e8610\u500d\u7684\u538b\u7f29\u6bd4\u3002 SVD \u539f\u7406 SVD \u5de5\u4f5c\u539f\u7406 \u77e9\u9635\u5206\u89e3 \u77e9\u9635\u5206\u89e3\u662f\u5c06\u6570\u636e\u77e9\u9635\u5206\u89e3\u4e3a\u591a\u4e2a\u72ec\u7acb\u90e8\u5206\u7684\u8fc7\u7a0b\u3002 \u77e9\u9635\u5206\u89e3\u53ef\u4ee5\u5c06\u539f\u59cb\u77e9\u9635\u8868\u793a\u6210\u65b0\u7684\u6613\u4e8e\u5904\u7406\u7684\u5f62\u5f0f\uff0c\u8fd9\u79cd\u65b0\u5f62\u5f0f\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u77e9\u9635\u7684\u4e58\u79ef\u3002\uff08\u7c7b\u4f3c\u4ee3\u6570\u4e2d\u7684\u56e0\u6570\u5206\u89e3\uff09 \u4e3e\u4f8b\uff1a\u5982\u4f55\u5c0612\u5206\u89e3\u6210\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\uff1f\uff081\uff0c12\uff09\u3001\uff082\uff0c6\uff09\u3001\uff083\uff0c4\uff09\u90fd\u662f\u5408\u7406\u7684\u7b54\u6848\u3002 SVD \u662f\u77e9\u9635\u5206\u89e3\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u4e5f\u662f\u77e9\u9635\u5206\u89e3\u6700\u5e38\u89c1\u7684\u6280\u672f SVD \u5c06\u539f\u59cb\u7684\u6570\u636e\u96c6\u77e9\u9635 Data \u5206\u89e3\u6210\u4e09\u4e2a\u77e9\u9635 U\u3001\u2211\u3001V \u4e3e\u4f8b\uff1a\u5982\u679c\u539f\u59cb\u77e9\u9635 \\(Data_{m*n}\\) \u662fm\u884cn\u5217\uff0c \\(U_{m * k}\\) \u8868\u793am\u884ck\u5217 \\(\u2211_{k * k}\\) \u8868\u793ak\u884ck\u5217 \\(V_{k * n}\\) \u8868\u793ak\u884cn\u5217\u3002 \\(Data_{m*n} = U_{m*k} * \u2211 {k*k} * V {k*n}\\) \u5177\u4f53\u7684\u6848\u4f8b\uff1a\uff08\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u63a8\u5bfc\u4e00\u4e0b\uff1ahttps://wenku.baidu.com/view/b7641217866fb84ae45c8d17.html \uff09 \u4e0a\u8ff0\u5206\u89e3\u4e2d\u4f1a\u6784\u5efa\u51fa\u4e00\u4e2a\u77e9\u9635\u2211\uff0c\u8be5\u77e9\u9635\u53ea\u6709\u5bf9\u89d2\u5143\u7d20\uff0c\u5176\u4ed6\u5143\u7d20\u5747\u4e3a0(\u8fd1\u4f3c\u4e8e0)\u3002\u53e6\u4e00\u4e2a\u60ef\u4f8b\u5c31\u662f\uff0c\u2211\u7684\u5bf9\u89d2\u5143\u7d20\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u7684\u3002\u8fd9\u4e9b\u5bf9\u89d2\u5143\u7d20\u79f0\u4e3a\u5947\u5f02\u503c\u3002 \u5947\u5f02\u503c\u4e0e\u7279\u5f81\u503c(PCA \u6570\u636e\u4e2d\u91cd\u8981\u7279\u5f81)\u662f\u6709\u5173\u7cfb\u7684\u3002\u8fd9\u91cc\u7684\u5947\u5f02\u503c\u5c31\u662f\u77e9\u9635 \\(Data * Data^T\\) \u7279\u5f81\u503c\u7684\u5e73\u65b9\u6839\u3002 \u666e\u904d\u7684\u4e8b\u5b9e\uff1a\u5728\u67d0\u4e2a\u5947\u5f02\u503c\u7684\u6570\u76ee(r \u4e2a=>\u5947\u5f02\u503c\u7684\u5e73\u65b9\u548c\u7d2f\u52a0\u5230\u603b\u503c\u768490%\u4ee5\u4e0a)\u4e4b\u540e\uff0c\u5176\u4ed6\u7684\u5947\u5f02\u503c\u90fd\u7f6e\u4e3a0(\u8fd1\u4f3c\u4e8e0)\u3002\u8fd9\u610f\u5473\u7740\u6570\u636e\u96c6\u4e2d\u4ec5\u6709 r \u4e2a\u91cd\u8981\u7279\u5f81\uff0c\u800c\u5176\u4f59\u7279\u5f81\u5219\u90fd\u662f\u566a\u58f0\u6216\u5197\u4f59\u7279\u5f81\u3002 SVD \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u7b80\u5316\u6570\u636e\uff0c\u53bb\u9664\u566a\u58f0\uff0c\u4f18\u5316\u7b97\u6cd5\u7684\u7ed3\u679c \u7f3a\u70b9\uff1a\u6570\u636e\u7684\u8f6c\u6362\u53ef\u80fd\u96be\u4ee5\u7406\u89e3 \u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u6570\u636e \u63a8\u8350\u7cfb\u7edf \u63a8\u8350\u7cfb\u7edf \u6982\u8ff0 \u63a8\u8350\u7cfb\u7edf\u662f\u5229\u7528\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u5411\u5ba2\u6237\u63d0\u4f9b\u5546\u54c1\u4fe1\u606f\u548c\u5efa\u8bae\uff0c\u5e2e\u52a9\u7528\u6237\u51b3\u5b9a\u5e94\u8be5\u8d2d\u4e70\u4ec0\u4e48\u4ea7\u54c1\uff0c\u6a21\u62df\u9500\u552e\u4eba\u5458\u5e2e\u52a9\u5ba2\u6237\u5b8c\u6210\u8d2d\u4e70\u8fc7\u7a0b\u3002 \u63a8\u8350\u7cfb\u7edf \u573a\u666f Amazon \u4f1a\u6839\u636e\u987e\u5ba2\u7684\u8d2d\u4e70\u5386\u53f2\u5411\u4ed6\u4eec\u63a8\u8350\u7269\u54c1 Netflix \u4f1a\u5411\u5176\u7528\u6237\u63a8\u8350\u7535\u5f71 \u65b0\u95fb\u7f51\u7ad9\u4f1a\u5bf9\u7528\u6237\u63a8\u8350\u65b0\u95fb\u9891\u9053 \u63a8\u8350\u7cfb\u7edf \u8981\u70b9 \u57fa\u4e8e\u534f\u540c\u8fc7\u6ee4(collaborative filtering) \u7684\u63a8\u8350\u5f15\u64ce \u5229\u7528Python \u5b9e\u73b0 SVD(Numpy \u6709\u4e00\u4e2a\u79f0\u4e3a linalg \u7684\u7ebf\u6027\u4ee3\u6570\u5de5\u5177\u7bb1) \u534f\u540c\u8fc7\u6ee4\uff1a\u662f\u901a\u8fc7\u5c06\u7528\u6237\u548c\u5176\u4ed6\u7528\u6237\u7684\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\u6765\u5b9e\u73b0\u63a8\u8350\u7684\u3002 \u5f53\u77e5\u9053\u4e86\u4e24\u4e2a\u7528\u6237\u6216\u4e24\u4e2a\u7269\u54c1\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5df2\u6709\u7684\u6570\u636e\u6765\u9884\u6d4b\u672a\u77e5\u7528\u6237\u7684\u559c\u597d\u3002 \u57fa\u4e8e\u7269\u54c1\u7684\u76f8\u4f3c\u5ea6\u548c\u57fa\u4e8e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff1a\u7269\u54c1\u6bd4\u8f83\u5c11\u5219\u9009\u62e9\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7528\u6237\u6bd4\u8f83\u5c11\u5219\u9009\u62e9\u7528\u6237\u76f8\u4f3c\u5ea6\u3002\u3010\u77e9\u9635\u8fd8\u662f\u5c0f\u4e00\u70b9\u597d\u8ba1\u7b97\u3011 \u57fa\u4e8e\u7269\u54c1\u7684\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7269\u54c1\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u3010\u8017\u65f6\u4f1a\u968f\u7269\u54c1\u6570\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3011 \u7531\u4e8e\u7269\u54c1A\u548c\u7269\u54c1C \u76f8\u4f3c\u5ea6(\u76f8\u5173\u5ea6)\u5f88\u9ad8\uff0c\u6240\u4ee5\u7ed9\u4e70A\u7684\u4eba\u63a8\u8350C\u3002 \u57fa\u4e8e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7528\u6237\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u3010\u8017\u65f6\u4f1a\u968f\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3011 \u7531\u4e8e\u7528\u6237A\u548c\u7528\u6237C \u76f8\u4f3c\u5ea6(\u76f8\u5173\u5ea6)\u5f88\u9ad8\uff0c\u6240\u4ee5A\u548cC\u662f\u5174\u8da3\u76f8\u6295\u7684\u4eba\uff0c\u5bf9\u4e8eC\u4e70\u7684\u7269\u54c1\u5c31\u4f1a\u63a8\u8350\u7ed9A\u3002 \u76f8\u4f3c\u5ea6\u8ba1\u7b97 inA, inB \u5bf9\u5e94\u7684\u662f \u5217\u5411\u91cf \u6b27\u6c0f\u8ddd\u79bb\uff1a\u6307\u5728m\u7ef4\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u771f\u5b9e\u8ddd\u79bb\uff0c\u6216\u8005\u5411\u91cf\u7684\u81ea\u7136\u957f\u5ea6\uff08\u5373\u8be5\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\uff09\u3002\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4e2d\u7684\u6b27\u6c0f\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u5b9e\u9645\u8ddd\u79bb\u3002 \u76f8\u4f3c\u5ea6= 1/(1+\u6b27\u5f0f\u8ddd\u79bb) \u76f8\u4f3c\u5ea6= 1.0/(1.0 + la.norm(inA - inB)) \u7269\u54c1\u5bf9\u8d8a\u76f8\u4f3c\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u503c\u5c31\u8d8a\u5927\u3002 \u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\uff1a\u5ea6\u91cf\u7684\u662f\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u3002 \u76f8\u4f3c\u5ea6= 0.5 + 0.5*corrcoef() \u3010\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7684\u53d6\u503c\u8303\u56f4\u4ece -1 \u5230 +1\uff0c\u901a\u8fc7\u51fd\u65700.5 + 0.5*corrcoef()\u8fd9\u4e2a\u51fd\u6570\u8ba1\u7b97\uff0c\u628a\u503c\u5f52\u4e00\u5316\u52300\u52301\u4e4b\u95f4\u3011 \u76f8\u4f3c\u5ea6= 0.5 + 0.5 * corrcoef(inA, inB, rowvar = 0)[0][1] \u76f8\u5bf9\u6b27\u6c0f\u8ddd\u79bb\u7684\u4f18\u52bf\uff1a\u5b83\u5bf9\u7528\u6237\u8bc4\u7ea7\u7684\u91cf\u7ea7\u5e76\u4e0d\u654f\u611f\u3002 \u4f59\u5f26\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7684\u662f\u4e24\u4e2a\u5411\u91cf\u5939\u89d2\u7684\u4f59\u5f26\u503c\u3002 \u4f59\u5f26\u503c = (A\u00b7B)/(||A||\u00b7||B||) \u3010\u4f59\u5f26\u503c\u7684\u53d6\u503c\u8303\u56f4\u4e5f\u5728-1\u5230+1\u4e4b\u95f4\u3011 \u76f8\u4f3c\u5ea6= 0.5 + 0.5*\u4f59\u5f26\u503c \u76f8\u4f3c\u5ea6= 0.5 + 0.5*( float(inA.T*inB) / la.norm(inA)*la.norm(inB)) \u5982\u679c\u5939\u89d2\u4e3a90\u5ea6\uff0c\u5219\u76f8\u4f3c\u5ea6\u4e3a0\uff1b\u5982\u679c\u4e24\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u76f8\u540c\uff0c\u5219\u76f8\u4f3c\u5ea6\u4e3a1.0\u3002 \u63a8\u8350\u7cfb\u7edf\u7684\u8bc4\u4ef7 \u91c7\u7528\u4ea4\u53c9\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002\u3010\u62c6\u5206\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3011 \u63a8\u8350\u5f15\u64ce\u8bc4\u4ef7\u7684\u6307\u6807\uff1a \u6700\u5c0f\u5747\u65b9\u6839\u8bef\u5dee(Root mean squared error, RMSE)\uff0c\u4e5f\u79f0\u6807\u51c6\u8bef\u5dee(Standard error)\uff0c\u5c31\u662f\u8ba1\u7b97\u5747\u65b9\u8bef\u5dee\u7684\u5e73\u5747\u503c\u7136\u540e\u53d6\u5176\u5e73\u65b9\u6839\u3002 \u5982\u679cRMSE=1, \u8868\u793a\u76f8\u5dee1\u4e2a\u661f\u7ea7\uff1b\u5982\u679cRMSE=2.5, \u8868\u793a\u76f8\u5dee2.5\u4e2a\u661f\u7ea7\u3002 \u63a8\u8350\u7cfb\u7edf \u539f\u7406 \u63a8\u8350\u7cfb\u7edf\u7684\u5de5\u4f5c\u8fc7\u7a0b\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7528\u6237\uff0c\u7cfb\u7edf\u4f1a\u4e3a\u6b64\u7528\u6237\u8fd4\u56deN\u4e2a\u6700\u597d\u7684\u63a8\u8350\u83dc\u3002 \u5b9e\u73b0\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u5bfb\u627e\u7528\u6237\u6ca1\u6709\u8bc4\u7ea7\u7684\u83dc\u80b4\uff0c\u5373\u5728\u7528\u6237-\u7269\u54c1\u77e9\u9635\u4e2d\u76840\u503c\u3002 \u5728\u7528\u6237\u6ca1\u6709\u8bc4\u7ea7\u7684\u6240\u6709\u7269\u54c1\u4e2d\uff0c\u5bf9\u6bcf\u4e2a\u7269\u54c1\u9884\u8ba1\u4e00\u4e2a\u53ef\u80fd\u7684\u8bc4\u7ea7\u5206\u6570\u3002\u8fd9\u5c31\u662f\u8bf4\uff1a\u6211\u4eec\u8ba4\u4e3a\u7528\u6237\u53ef\u80fd\u4f1a\u5bf9\u7269\u54c1\u7684\u6253\u5206\uff08\u8fd9\u5c31\u662f\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u7684\u521d\u8877\uff09\u3002 \u5bf9\u8fd9\u4e9b\u7269\u54c1\u7684\u8bc4\u5206\u4ece\u9ad8\u5230\u4f4e\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd4\u56de\u524dN\u4e2a\u7269\u54c1\u3002 \u9879\u76ee\u6848\u4f8b: \u9910\u9986\u83dc\u80b4\u63a8\u8350\u7cfb\u7edf \u9879\u76ee\u6982\u8ff0 \u5047\u5982\u4e00\u4e2a\u4eba\u5728\u5bb6\u51b3\u5b9a\u5916\u51fa\u5403\u996d\uff0c\u4f46\u662f\u4ed6\u5e76\u4e0d\u77e5\u9053\u8be5\u5230\u54ea\u513f\u53bb\u5403\u996d\uff0c\u8be5\u70b9\u4ec0\u4e48\u83dc\u3002\u63a8\u8350\u7cfb\u7edf\u53ef\u4ee5\u5e2e\u4ed6\u505a\u5230\u8fd9\u4e24\u70b9\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6 \u5e76 \u51c6\u5907\u6570\u636e def loadExData3(): # \u5229\u7528SVD\u63d0\u9ad8\u63a8\u8350\u6548\u679c\uff0c\u83dc\u80b4\u77e9\u9635 \"\"\" \u884c\uff1a\u4ee3\u8868\u4eba \u5217\uff1a\u4ee3\u8868\u83dc\u80b4\u540d\u8bcd \u503c\uff1a\u4ee3\u8868\u4eba\u5bf9\u83dc\u80b4\u7684\u8bc4\u5206\uff0c0\u8868\u793a\u672a\u8bc4\u5206 \"\"\" return[[2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0], [3, 3, 4, 0, 3, 0, 0, 2, 2, 0, 0], [5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 3, 0, 0, 0, 0, 4, 5, 0], [1, 1, 2, 1, 1, 2, 1, 0, 4, 5, 0]] \u5206\u6790\u6570\u636e: \u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u7684\u8ba8\u8bba(\u5f53\u7136\u6b64\u5904\u53ef\u4ee5\u5bf9\u6bd4\u4e0d\u540c\u8ddd\u79bb\u4e4b\u95f4\u7684\u5dee\u522b) \u8bad\u7ec3\u7b97\u6cd5: \u901a\u8fc7\u8c03\u7528 recommend() \u51fd\u6570\u8fdb\u884c\u63a8\u8350 recommend() \u4f1a\u8c03\u7528 \u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6 \u6216\u8005\u662f \u57fa\u4e8eSVD\uff0c\u5f97\u5230\u63a8\u8350\u7684\u7269\u54c1\u8bc4\u5206\u3002 1.\u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6 # \u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6\u7684\u63a8\u8350\u5f15\u64ce def standEst(dataMat, user, simMeas, item): \"\"\"standEst(\u8ba1\u7b97\u67d0\u7528\u6237\u672a\u8bc4\u5206\u7269\u54c1\u4e2d\uff0c\u4ee5\u5bf9\u8be5\u7269\u54c1\u548c\u5176\u4ed6\u7269\u54c1\u8bc4\u5206\u7684\u7528\u6237\u7684\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u7efc\u5408\u8bc4\u5206) Args: dataMat \u8bad\u7ec3\u6570\u636e\u96c6 user \u7528\u6237\u7f16\u53f7 simMeas \u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5 item \u672a\u8bc4\u5206\u7684\u7269\u54c1\u7f16\u53f7 Returns: ratSimTotal/simTotal \u8bc4\u5206\uff080\uff5e5\u4e4b\u95f4\u7684\u503c\uff09 \"\"\" # \u5f97\u5230\u6570\u636e\u96c6\u4e2d\u7684\u7269\u54c1\u6570\u76ee n = shape(dataMat)[1] # \u521d\u59cb\u5316\u4e24\u4e2a\u8bc4\u5206\u503c simTotal = 0.0 ratSimTotal = 0.0 # \u904d\u5386\u884c\u4e2d\u7684\u6bcf\u4e2a\u7269\u54c1\uff08\u5bf9\u7528\u6237\u8bc4\u8fc7\u5206\u7684\u7269\u54c1\u8fdb\u884c\u904d\u5386\uff0c\u5e76\u5c06\u5b83\u4e0e\u5176\u4ed6\u7269\u54c1\u8fdb\u884c\u6bd4\u8f83\uff09 for j in range(n): userRating = dataMat[user, j] # \u5982\u679c\u67d0\u4e2a\u7269\u54c1\u7684\u8bc4\u5206\u503c\u4e3a0\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e2a\u7269\u54c1 if userRating == 0: continue # \u5bfb\u627e\u4e24\u4e2a\u7528\u6237\u90fd\u8bc4\u7ea7\u7684\u7269\u54c1 # \u53d8\u91cf overLap \u7ed9\u51fa\u7684\u662f\u4e24\u4e2a\u7269\u54c1\u5f53\u4e2d\u5df2\u7ecf\u88ab\u8bc4\u5206\u7684\u90a3\u4e2a\u5143\u7d20\u7684\u7d22\u5f15ID # logical_and \u8ba1\u7b97x1\u548cx2\u5143\u7d20\u7684\u771f\u503c\u3002 overLap = nonzero(logical_and(dataMat[:, item].A > 0, dataMat[:, j].A > 0))[0] # \u5982\u679c\u76f8\u4f3c\u5ea6\u4e3a0\uff0c\u5219\u4e24\u7740\u6ca1\u6709\u4efb\u4f55\u91cd\u5408\u5143\u7d20\uff0c\u7ec8\u6b62\u672c\u6b21\u5faa\u73af if len(overLap) == 0: similarity = 0 # \u5982\u679c\u5b58\u5728\u91cd\u5408\u7684\u7269\u54c1\uff0c\u5219\u57fa\u4e8e\u8fd9\u4e9b\u91cd\u5408\u7269\u91cd\u65b0\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u3002 else: similarity = simMeas(dataMat[overLap, item], dataMat[overLap, j]) # print 'the %d and %d similarity is : %f'(iten,j,similarity) # \u76f8\u4f3c\u5ea6\u4f1a\u4e0d\u65ad\u7d2f\u52a0\uff0c\u6bcf\u6b21\u8ba1\u7b97\u65f6\u8fd8\u8003\u8651\u76f8\u4f3c\u5ea6\u548c\u5f53\u524d\u7528\u6237\u8bc4\u5206\u7684\u4e58\u79ef # similarity \u7528\u6237\u76f8\u4f3c\u5ea6\uff0c userRating \u7528\u6237\u8bc4\u5206 simTotal += similarity ratSimTotal += similarity * userRating if simTotal == 0: return 0 # \u901a\u8fc7\u9664\u4ee5\u6240\u6709\u7684\u8bc4\u5206\u603b\u548c\uff0c\u5bf9\u4e0a\u8ff0\u76f8\u4f3c\u5ea6\u8bc4\u5206\u7684\u4e58\u79ef\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6700\u540e\u8bc4\u5206\u57280~5\u4e4b\u95f4\uff0c\u8fd9\u4e9b\u8bc4\u5206\u7528\u6765\u5bf9\u9884\u6d4b\u503c\u8fdb\u884c\u6392\u5e8f else: return ratSimTotal/simTotal 2.\u57fa\u4e8eSVD(\u53c2\u8003\u5730\u5740\uff1ahttp://www.codeweblog.com/svd-%E7%AC%94%E8%AE%B0/) # \u57fa\u4e8eSVD\u7684\u8bc4\u5206\u4f30\u8ba1 # \u5728recommend() \u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u4e8e\u66ff\u6362\u5bf9standEst()\u7684\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u5bf9\u7ed9\u5b9a\u7528\u6237\u7ed9\u5b9a\u7269\u54c1\u6784\u5efa\u4e86\u4e00\u4e2a\u8bc4\u5206\u4f30\u8ba1\u503c def svdEst(dataMat, user, simMeas, item): \"\"\"svdEst(\u8ba1\u7b97\u67d0\u7528\u6237\u672a\u8bc4\u5206\u7269\u54c1\u4e2d\uff0c\u4ee5\u5bf9\u8be5\u7269\u54c1\u548c\u5176\u4ed6\u7269\u54c1\u8bc4\u5206\u7684\u7528\u6237\u7684\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u7efc\u5408\u8bc4\u5206) Args: dataMat \u8bad\u7ec3\u6570\u636e\u96c6 user \u7528\u6237\u7f16\u53f7 simMeas \u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5 item \u672a\u8bc4\u5206\u7684\u7269\u54c1\u7f16\u53f7 Returns: ratSimTotal/simTotal \u8bc4\u5206\uff080\uff5e5\u4e4b\u95f4\u7684\u503c\uff09 \"\"\" # \u7269\u54c1\u6570\u76ee n = shape(dataMat)[1] # \u5bf9\u6570\u636e\u96c6\u8fdb\u884cSVD\u5206\u89e3 simTotal = 0.0 ratSimTotal = 0.0 # \u5947\u5f02\u503c\u5206\u89e3 # \u5728SVD\u5206\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u5229\u7528\u5305\u542b\u4e8690%\u80fd\u91cf\u503c\u7684\u5947\u5f02\u503c\uff0c\u8fd9\u4e9b\u5947\u5f02\u503c\u4f1a\u4ee5NumPy\u6570\u7ec4\u7684\u5f62\u5f0f\u5f97\u4ee5\u4fdd\u5b58 U, Sigma, VT = la.svd(dataMat) # # \u5206\u6790 Sigma \u7684\u957f\u5ea6\u53d6\u503c # analyse_data(Sigma, 20) # \u5982\u679c\u8981\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97\uff0c\u5c31\u5fc5\u987b\u8981\u7528\u8fd9\u4e9b\u5947\u5f02\u503c\u6784\u5efa\u51fa\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635 Sig4 = mat(eye(4) * Sigma[: 4]) # \u5229\u7528U\u77e9\u9635\u5c06\u7269\u54c1\u8f6c\u6362\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u6784\u5efa\u8f6c\u6362\u540e\u7684\u7269\u54c1(\u7269\u54c1+4\u4e2a\u4e3b\u8981\u7684\u7279\u5f81) xformedItems = dataMat.T * U[:, :4] * Sig4.I # \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7528\u6237\uff0cfor\u5faa\u73af\u5728\u7528\u6237\u5bf9\u5e94\u884c\u7684\u5143\u7d20\u4e0a\u8fdb\u884c\u904d\u5386\uff0c # \u8fd9\u548cstandEst()\u51fd\u6570\u4e2d\u7684for\u5faa\u73af\u7684\u76ee\u7684\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u7684\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65f6\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e0b\u8fdb\u884c\u7684\u3002 for j in range(n): userRating = dataMat[user, j] if userRating == 0 or j == item: continue # \u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e5f\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570 similarity = simMeas(xformedItems[item, :].T, xformedItems[j, :].T) # for \u5faa\u73af\u4e2d\u52a0\u5165\u4e86\u4e00\u6761print\u8bed\u53e5\uff0c\u4ee5\u4fbf\u4e86\u89e3\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u7684\u8fdb\u5c55\u60c5\u51b5\u3002\u5982\u679c\u89c9\u5f97\u7d2f\u8d58\uff0c\u53ef\u4ee5\u53bb\u6389 print 'the %d and %d similarity is: %f' % (item, j, similarity) # \u5bf9\u76f8\u4f3c\u5ea6\u4e0d\u65ad\u7d2f\u52a0\u6c42\u548c simTotal += similarity # \u5bf9\u76f8\u4f3c\u5ea6\u53ca\u5bf9\u5e94\u8bc4\u5206\u503c\u7684\u4e58\u79ef\u6c42\u548c ratSimTotal += similarity * userRating if simTotal == 0: return 0 else: # \u8ba1\u7b97\u4f30\u8ba1\u8bc4\u5206 return ratSimTotal/simTotal \u6392\u5e8f\u83b7\u53d6\u6700\u540e\u7684\u63a8\u8350\u7ed3\u679c # recommend()\u51fd\u6570\uff0c\u5c31\u662f\u63a8\u8350\u5f15\u64ce\uff0c\u5b83\u9ed8\u8ba4\u8c03\u7528standEst()\u51fd\u6570\uff0c\u4ea7\u751f\u4e86\u6700\u9ad8\u7684N\u4e2a\u63a8\u8350\u7ed3\u679c\u3002 # \u5982\u679c\u4e0d\u6307\u5b9aN\u7684\u5927\u5c0f\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a3\u3002\u8be5\u51fd\u6570\u53e6\u5916\u7684\u53c2\u6570\u8fd8\u5305\u62ec\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u548c\u4f30\u8ba1\u65b9\u6cd5 def recommend(dataMat, user, N=3, simMeas=cosSim, estMethod=standEst): # \u5bfb\u627e\u672a\u8bc4\u7ea7\u7684\u7269\u54c1 # \u5bf9\u7ed9\u5b9a\u7684\u7528\u6237\u5efa\u7acb\u4e00\u4e2a\u672a\u8bc4\u5206\u7684\u7269\u54c1\u5217\u8868 unratedItems = nonzero(dataMat[user, :].A == 0)[1] # \u5982\u679c\u4e0d\u5b58\u5728\u672a\u8bc4\u5206\u7269\u54c1\uff0c\u90a3\u4e48\u5c31\u9000\u51fa\u51fd\u6570 if len(unratedItems) == 0: return 'you rated everything' # \u7269\u54c1\u7684\u7f16\u53f7\u548c\u8bc4\u5206\u503c itemScores = [] # \u5728\u672a\u8bc4\u5206\u7269\u54c1\u4e0a\u8fdb\u884c\u5faa\u73af for item in unratedItems: estimatedScore = estMethod(dataMat, user, simMeas, item) # \u5bfb\u627e\u524dN\u4e2a\u672a\u8bc4\u7ea7\u7269\u54c1\uff0c\u8c03\u7528standEst()\u6765\u4ea7\u751f\u8be5\u7269\u54c1\u7684\u9884\u6d4b\u5f97\u5206\uff0c\u8be5\u7269\u54c1\u7684\u7f16\u53f7\u548c\u4f30\u8ba1\u503c\u4f1a\u653e\u5728\u4e00\u4e2a\u5143\u7d20\u5217\u8868itemScores\u4e2d itemScores.append((item, estimatedScore)) # \u6309\u7167\u4f30\u8ba1\u5f97\u5206\uff0c\u5bf9\u8be5\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u5e76\u8fd4\u56de\u3002\u5217\u8868\u9006\u6392\u5e8f\uff0c\u7b2c\u4e00\u4e2a\u503c\u5c31\u662f\u6700\u5927\u503c return sorted(itemScores, key=lambda jj: jj[1], reverse=True)[: N] \u6d4b\u8bd5 \u548c \u9879\u76ee\u8c03\u7528\uff0c\u53ef\u76f4\u63a5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/14.SVD/svdRecommend.py \u8981\u70b9\u8865\u5145 \u57fa\u4e8e\u5185\u5bb9(content-based)\u7684\u63a8\u8350 \u901a\u8fc7\u5404\u79cd\u6807\u7b7e\u6765\u6807\u8bb0\u83dc\u80b4 \u5c06\u8fd9\u4e9b\u5c5e\u6027\u4f5c\u4e3a\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u6240\u9700\u8981\u7684\u6570\u636e \u8fd9\u5c31\u662f\uff1a\u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u3002 \u6784\u5efa\u63a8\u8350\u5f15\u64ce\u9762\u4e34\u7684\u6311\u6218 \u95ee\u9898 1\uff09\u5728\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\u4e0a\uff0cSVD\u5206\u89e3\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u901f\u5ea6 2\uff09\u5b58\u5728\u5176\u4ed6\u5f88\u591a\u89c4\u6a21\u6269\u5c55\u6027\u7684\u6311\u6218\u6027\u95ee\u9898\uff0c\u6bd4\u5982\u77e9\u9635\u7684\u8868\u793a\u65b9\u6cd5\u548c\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u5f97\u5206\u6d88\u8017\u8d44\u6e90\u3002 * 3\uff09\u5982\u4f55\u5728\u7f3a\u4e4f\u6570\u636e\u65f6\u7ed9\u51fa\u597d\u7684\u63a8\u8350-\u79f0\u4e3a\u51b7\u542f\u52a8\u3010\u7b80\u5355\u8bf4\uff1a\u7528\u6237\u4e0d\u4f1a\u559c\u6b22\u4e00\u4e2a\u65e0\u6548\u7684\u7269\u54c1\uff0c\u800c\u7528\u6237\u4e0d\u559c\u6b22\u7684\u7269\u54c1\u53c8\u65e0\u6548\u3011 \u5efa\u8bae 1\uff09\u5728\u5927\u578b\u7cfb\u7edf\u4e2d\uff0cSVD\u5206\u89e3(\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8c03\u5165\u65f6\u8fd0\u884c\u4e00\u6b21)\u6bcf\u5929\u8fd0\u884c\u4e00\u6b21\u6216\u8005\u5176\u9891\u7387\u66f4\u4f4e\uff0c\u5e76\u4e14\u8fd8\u8981\u79bb\u7ebf\u8fd0\u884c\u3002 2\uff09\u5728\u5b9e\u9645\u4e2d\uff0c\u53e6\u4e00\u4e2a\u666e\u904d\u7684\u505a\u6cd5\u5c31\u662f\u79bb\u7ebf\u8ba1\u7b97\u5e76\u4fdd\u5b58\u76f8\u4f3c\u5ea6\u5f97\u5206\u3002(\u7269\u54c1\u76f8\u4f3c\u5ea6\u53ef\u80fd\u88ab\u7528\u6237\u91cd\u590d\u7684\u8c03\u7528) * 3\uff09\u51b7\u542f\u52a8\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u5c06\u63a8\u8350\u770b\u6210\u662f\u641c\u7d22\u95ee\u9898\uff0c\u901a\u8fc7\u5404\u79cd\u6807\u7b7e\uff0f\u5c5e\u6027\u7279\u5f81\u8fdb\u884c \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350 \u3002 \u9879\u76ee\u6848\u4f8b: \u57fa\u4e8e SVD \u7684\u56fe\u50cf\u538b\u7f29 \u6536\u96c6 \u5e76 \u51c6\u5907\u6570\u636e \u5c06\u6587\u672c\u6570\u636e\u8f6c\u5316\u4e3a\u77e9\u9635 # \u52a0\u8f7d\u5e76\u8f6c\u6362\u6570\u636e def imgLoadData(filename): myl = [] # \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5e76\u4ece\u6587\u4ef6\u4ee5\u6570\u7ec4\u65b9\u5f0f\u8bfb\u5165\u5b57\u7b26 for line in open(filename).readlines(): newRow = [] for i in range(32): newRow.append(int(line[i])) myl.append(newRow) # \u77e9\u9635\u8c03\u5165\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u8f93\u51fa\u8be5\u77e9\u9635 myMat = mat(myl) return myMat \u5206\u6790\u6570\u636e: \u5206\u6790 Sigma \u7684\u957f\u5ea6\u4e2a\u6570 \u901a\u5e38\u4fdd\u7559\u77e9\u9635 80% \uff5e 90% \u7684\u80fd\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u91cd\u8981\u7684\u7279\u5f81\u5e76\u53bb\u9664\u566a\u58f0\u3002 def analyse_data(Sigma, loopNum=20): \"\"\"analyse_data(\u5206\u6790 Sigma \u7684\u957f\u5ea6\u53d6\u503c) Args: Sigma Sigma\u7684\u503c loopNum \u5faa\u73af\u6b21\u6570 \"\"\" # \u603b\u65b9\u5dee\u7684\u96c6\u5408\uff08\u603b\u80fd\u91cf\u503c\uff09 Sig2 = Sigma**2 SigmaSum = sum(Sig2) for i in range(loopNum): SigmaI = sum(Sig2[:i+1]) ''' \u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u60c5\u51b5\uff0c\u5c31\u884c\u5904\u7406\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684 Singma \u6b21\u6570 \u901a\u5e38\u4fdd\u7559\u77e9\u9635 80% \uff5e 90% \u7684\u80fd\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u91cd\u8981\u7684\u7279\u5f81\u5e76\u53d6\u51fa\u566a\u58f0\u3002 ''' print '\u4e3b\u6210\u5206\uff1a%s, \u65b9\u5dee\u5360\u6bd4\uff1a%s%%' % (format(i+1, '2.0f'), format(SigmaI/SigmaSum*100, '4.2f')) \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u6bd4\u4f7f\u7528 SVD \u524d\u540e\u7684\u6570\u636e\u5dee\u5f02\u5bf9\u6bd4\uff0c\u5bf9\u4e8e\u5b58\u50a8\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u5199\u5199 \u4f8b\u5982\uff1a 32*32=1024 => 32*2+2*1+32*2=130 (2*1\u8868\u793a\u53bb\u6389\u4e86\u9664\u5bf9\u89d2\u7ebf\u76840), \u51e0\u4e4e\u83b7\u5f97\u4e8610\u500d\u7684\u538b\u7f29\u6bd4\u3002 # \u6253\u5370\u77e9\u9635 def printMat(inMat, thresh=0.8): # \u7531\u4e8e\u77e9\u9635\u4fdd\u62a4\u4e86\u6d6e\u70b9\u6570\uff0c\u56e0\u6b64\u5b9a\u4e49\u6d45\u8272\u548c\u6df1\u8272\uff0c\u904d\u5386\u6240\u6709\u77e9\u9635\u5143\u7d20\uff0c\u5f53\u5143\u7d20\u5927\u4e8e\u9600\u503c\u65f6\u6253\u53701\uff0c\u5426\u5219\u6253\u53700 for i in range(32): for k in range(32): if float(inMat[i, k]) > thresh: print 1, else: print 0, print '' # \u5b9e\u73b0\u56fe\u50cf\u538b\u7f29\uff0c\u5141\u8bb8\u57fa\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u5947\u5f02\u503c\u6570\u76ee\u6765\u91cd\u6784\u56fe\u50cf def imgCompress(numSV=3, thresh=0.8): \"\"\"imgCompress( ) Args: numSV Sigma\u957f\u5ea6 thresh \u5224\u65ad\u7684\u9608\u503c \"\"\" # \u6784\u5efa\u4e00\u4e2a\u5217\u8868 myMat = imgLoadData('db/14.SVD/0_5.txt') print \"****original matrix****\" # \u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884cSVD\u5206\u89e3\u5e76\u91cd\u6784\u56fe\u50cfe printMat(myMat, thresh) # \u901a\u8fc7Sigma \u91cd\u65b0\u6784\u6210SigRecom\u6765\u5b9e\u73b0 # Sigma\u662f\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635\uff0c\u56e0\u6b64\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u51680\u77e9\u9635\uff0c\u7136\u540e\u5c06\u524d\u9762\u7684\u90a3\u4e9b\u5947\u5f02\u503c\u586b\u5145\u5230\u5bf9\u89d2\u7ebf\u4e0a\u3002 U, Sigma, VT = la.svd(myMat) # SigRecon = mat(zeros((numSV, numSV))) # for k in range(numSV): # SigRecon[k, k] = Sigma[k] # \u5206\u6790\u63d2\u5165\u7684 Sigma \u957f\u5ea6 analyse_data(Sigma, 20) SigRecon = mat(eye(numSV) * Sigma[: numSV]) reconMat = U[:, :numSV] * SigRecon * VT[:numSV, :] print \"****reconstructed matrix using %d singular values *****\" % numSV printMat(reconMat, thresh) \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/14.SVD/svdRecommend.py \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c14\u7ae0_SVD\u7b80\u5316\u6570\u636e"},{"location":"ml/14.SVD/#14-svd","text":"","title":"\u7b2c14\u7ae0 \u5229\u7528SVD\u7b80\u5316\u6570\u636e"},{"location":"ml/14.SVD/#svd","text":"\u5947\u5f02\u503c\u5206\u89e3\uff08SVD, Singular Value Decomposition\uff09: \u63d0\u53d6\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u628a SVD \u770b\u6210\u662f\u4ece\u566a\u58f0\u6570\u636e\u4e2d\u62bd\u53d6\u76f8\u5173\u7279\u5f81\u3002\u4ece\u751f\u7269\u4fe1\u606f\u5b66\u5230\u91d1\u878d\u5b66\uff0cSVD \u662f\u63d0\u53d6\u4fe1\u606f\u7684\u5f3a\u5927\u5de5\u5177\u3002","title":"SVD \u6982\u8ff0"},{"location":"ml/14.SVD/#svd_1","text":"\u4fe1\u606f\u68c0\u7d22-\u9690\u6027\u8bed\u4e49\u68c0\u7d22\uff08Lstent Semantic Indexing, LSI\uff09\u6216 \u9690\u5f62\u8bed\u4e49\u5206\u6790\uff08Latent Semantic Analysis, LSA\uff09 \u9690\u6027\u8bed\u4e49\u7d22\u5f15\uff1a\u77e9\u9635 = \u6587\u6863 + \u8bcd\u8bed * \u662f\u6700\u65e9\u7684 SVD \u5e94\u7528\u4e4b\u4e00\uff0c\u6211\u4eec\u79f0\u5229\u7528 SVD \u7684\u65b9\u6cd5\u4e3a\u9690\u6027\u8bed\u4e49\u7d22\u5f15\uff08LSI\uff09\u6216\u9690\u6027\u8bed\u4e49\u5206\u6790\uff08LSA\uff09\u3002 \u63a8\u8350\u7cfb\u7edf \u5229\u7528 SVD \u4ece\u6570\u636e\u4e2d\u6784\u5efa\u4e00\u4e2a\u4e3b\u9898\u7a7a\u95f4\u3002 \u518d\u5728\u8be5\u7a7a\u95f4\u4e0b\u8ba1\u7b97\u5176\u76f8\u4f3c\u5ea6\u3002(\u4ece\u9ad8\u7ef4-\u4f4e\u7ef4\u7a7a\u95f4\u7684\u8f6c\u5316\uff0c\u5728\u4f4e\u7ef4\u7a7a\u95f4\u6765\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0cSVD \u63d0\u5347\u4e86\u63a8\u8350\u7cfb\u7edf\u7684\u6548\u7387\u3002) \u4e0a\u56fe\u53f3\u8fb9\u6807\u6ce8\u7684\u4e3a\u4e00\u7ec4\u5171\u540c\u7279\u5f81\uff0c\u8868\u793a\u7f8e\u5f0f BBQ \u7a7a\u95f4\uff1b\u53e6\u4e00\u7ec4\u5728\u4e0a\u56fe\u53f3\u8fb9\u672a\u6807\u6ce8\u7684\u4e3a\u65e5\u5f0f\u98df\u54c1 \u7a7a\u95f4\u3002 \u56fe\u50cf\u538b\u7f29 \u4f8b\u5982\uff1a 32*32=1024 => 32*2+2*1+32*2=130 (2*1\u8868\u793a\u53bb\u6389\u4e86\u9664\u5bf9\u89d2\u7ebf\u76840), \u51e0\u4e4e\u83b7\u5f97\u4e8610\u500d\u7684\u538b\u7f29\u6bd4\u3002","title":"SVD \u573a\u666f"},{"location":"ml/14.SVD/#svd_2","text":"","title":"SVD \u539f\u7406"},{"location":"ml/14.SVD/#svd_3","text":"\u77e9\u9635\u5206\u89e3 \u77e9\u9635\u5206\u89e3\u662f\u5c06\u6570\u636e\u77e9\u9635\u5206\u89e3\u4e3a\u591a\u4e2a\u72ec\u7acb\u90e8\u5206\u7684\u8fc7\u7a0b\u3002 \u77e9\u9635\u5206\u89e3\u53ef\u4ee5\u5c06\u539f\u59cb\u77e9\u9635\u8868\u793a\u6210\u65b0\u7684\u6613\u4e8e\u5904\u7406\u7684\u5f62\u5f0f\uff0c\u8fd9\u79cd\u65b0\u5f62\u5f0f\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u77e9\u9635\u7684\u4e58\u79ef\u3002\uff08\u7c7b\u4f3c\u4ee3\u6570\u4e2d\u7684\u56e0\u6570\u5206\u89e3\uff09 \u4e3e\u4f8b\uff1a\u5982\u4f55\u5c0612\u5206\u89e3\u6210\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\uff1f\uff081\uff0c12\uff09\u3001\uff082\uff0c6\uff09\u3001\uff083\uff0c4\uff09\u90fd\u662f\u5408\u7406\u7684\u7b54\u6848\u3002 SVD \u662f\u77e9\u9635\u5206\u89e3\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u4e5f\u662f\u77e9\u9635\u5206\u89e3\u6700\u5e38\u89c1\u7684\u6280\u672f SVD \u5c06\u539f\u59cb\u7684\u6570\u636e\u96c6\u77e9\u9635 Data \u5206\u89e3\u6210\u4e09\u4e2a\u77e9\u9635 U\u3001\u2211\u3001V \u4e3e\u4f8b\uff1a\u5982\u679c\u539f\u59cb\u77e9\u9635 \\(Data_{m*n}\\) \u662fm\u884cn\u5217\uff0c \\(U_{m * k}\\) \u8868\u793am\u884ck\u5217 \\(\u2211_{k * k}\\) \u8868\u793ak\u884ck\u5217 \\(V_{k * n}\\) \u8868\u793ak\u884cn\u5217\u3002 \\(Data_{m*n} = U_{m*k} * \u2211 {k*k} * V {k*n}\\) \u5177\u4f53\u7684\u6848\u4f8b\uff1a\uff08\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u63a8\u5bfc\u4e00\u4e0b\uff1ahttps://wenku.baidu.com/view/b7641217866fb84ae45c8d17.html \uff09 \u4e0a\u8ff0\u5206\u89e3\u4e2d\u4f1a\u6784\u5efa\u51fa\u4e00\u4e2a\u77e9\u9635\u2211\uff0c\u8be5\u77e9\u9635\u53ea\u6709\u5bf9\u89d2\u5143\u7d20\uff0c\u5176\u4ed6\u5143\u7d20\u5747\u4e3a0(\u8fd1\u4f3c\u4e8e0)\u3002\u53e6\u4e00\u4e2a\u60ef\u4f8b\u5c31\u662f\uff0c\u2211\u7684\u5bf9\u89d2\u5143\u7d20\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u7684\u3002\u8fd9\u4e9b\u5bf9\u89d2\u5143\u7d20\u79f0\u4e3a\u5947\u5f02\u503c\u3002 \u5947\u5f02\u503c\u4e0e\u7279\u5f81\u503c(PCA \u6570\u636e\u4e2d\u91cd\u8981\u7279\u5f81)\u662f\u6709\u5173\u7cfb\u7684\u3002\u8fd9\u91cc\u7684\u5947\u5f02\u503c\u5c31\u662f\u77e9\u9635 \\(Data * Data^T\\) \u7279\u5f81\u503c\u7684\u5e73\u65b9\u6839\u3002 \u666e\u904d\u7684\u4e8b\u5b9e\uff1a\u5728\u67d0\u4e2a\u5947\u5f02\u503c\u7684\u6570\u76ee(r \u4e2a=>\u5947\u5f02\u503c\u7684\u5e73\u65b9\u548c\u7d2f\u52a0\u5230\u603b\u503c\u768490%\u4ee5\u4e0a)\u4e4b\u540e\uff0c\u5176\u4ed6\u7684\u5947\u5f02\u503c\u90fd\u7f6e\u4e3a0(\u8fd1\u4f3c\u4e8e0)\u3002\u8fd9\u610f\u5473\u7740\u6570\u636e\u96c6\u4e2d\u4ec5\u6709 r \u4e2a\u91cd\u8981\u7279\u5f81\uff0c\u800c\u5176\u4f59\u7279\u5f81\u5219\u90fd\u662f\u566a\u58f0\u6216\u5197\u4f59\u7279\u5f81\u3002","title":"SVD \u5de5\u4f5c\u539f\u7406"},{"location":"ml/14.SVD/#svd_4","text":"\u4f18\u70b9\uff1a\u7b80\u5316\u6570\u636e\uff0c\u53bb\u9664\u566a\u58f0\uff0c\u4f18\u5316\u7b97\u6cd5\u7684\u7ed3\u679c \u7f3a\u70b9\uff1a\u6570\u636e\u7684\u8f6c\u6362\u53ef\u80fd\u96be\u4ee5\u7406\u89e3 \u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u6570\u636e","title":"SVD \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/14.SVD/#_1","text":"","title":"\u63a8\u8350\u7cfb\u7edf"},{"location":"ml/14.SVD/#_2","text":"\u63a8\u8350\u7cfb\u7edf\u662f\u5229\u7528\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u5411\u5ba2\u6237\u63d0\u4f9b\u5546\u54c1\u4fe1\u606f\u548c\u5efa\u8bae\uff0c\u5e2e\u52a9\u7528\u6237\u51b3\u5b9a\u5e94\u8be5\u8d2d\u4e70\u4ec0\u4e48\u4ea7\u54c1\uff0c\u6a21\u62df\u9500\u552e\u4eba\u5458\u5e2e\u52a9\u5ba2\u6237\u5b8c\u6210\u8d2d\u4e70\u8fc7\u7a0b\u3002","title":"\u63a8\u8350\u7cfb\u7edf \u6982\u8ff0"},{"location":"ml/14.SVD/#_3","text":"Amazon \u4f1a\u6839\u636e\u987e\u5ba2\u7684\u8d2d\u4e70\u5386\u53f2\u5411\u4ed6\u4eec\u63a8\u8350\u7269\u54c1 Netflix \u4f1a\u5411\u5176\u7528\u6237\u63a8\u8350\u7535\u5f71 \u65b0\u95fb\u7f51\u7ad9\u4f1a\u5bf9\u7528\u6237\u63a8\u8350\u65b0\u95fb\u9891\u9053","title":"\u63a8\u8350\u7cfb\u7edf \u573a\u666f"},{"location":"ml/14.SVD/#_4","text":"\u57fa\u4e8e\u534f\u540c\u8fc7\u6ee4(collaborative filtering) \u7684\u63a8\u8350\u5f15\u64ce \u5229\u7528Python \u5b9e\u73b0 SVD(Numpy \u6709\u4e00\u4e2a\u79f0\u4e3a linalg \u7684\u7ebf\u6027\u4ee3\u6570\u5de5\u5177\u7bb1) \u534f\u540c\u8fc7\u6ee4\uff1a\u662f\u901a\u8fc7\u5c06\u7528\u6237\u548c\u5176\u4ed6\u7528\u6237\u7684\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\u6765\u5b9e\u73b0\u63a8\u8350\u7684\u3002 \u5f53\u77e5\u9053\u4e86\u4e24\u4e2a\u7528\u6237\u6216\u4e24\u4e2a\u7269\u54c1\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5df2\u6709\u7684\u6570\u636e\u6765\u9884\u6d4b\u672a\u77e5\u7528\u6237\u7684\u559c\u597d\u3002 \u57fa\u4e8e\u7269\u54c1\u7684\u76f8\u4f3c\u5ea6\u548c\u57fa\u4e8e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff1a\u7269\u54c1\u6bd4\u8f83\u5c11\u5219\u9009\u62e9\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7528\u6237\u6bd4\u8f83\u5c11\u5219\u9009\u62e9\u7528\u6237\u76f8\u4f3c\u5ea6\u3002\u3010\u77e9\u9635\u8fd8\u662f\u5c0f\u4e00\u70b9\u597d\u8ba1\u7b97\u3011 \u57fa\u4e8e\u7269\u54c1\u7684\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7269\u54c1\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u3010\u8017\u65f6\u4f1a\u968f\u7269\u54c1\u6570\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3011 \u7531\u4e8e\u7269\u54c1A\u548c\u7269\u54c1C \u76f8\u4f3c\u5ea6(\u76f8\u5173\u5ea6)\u5f88\u9ad8\uff0c\u6240\u4ee5\u7ed9\u4e70A\u7684\u4eba\u63a8\u8350C\u3002 \u57fa\u4e8e\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7528\u6237\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u3010\u8017\u65f6\u4f1a\u968f\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3011 \u7531\u4e8e\u7528\u6237A\u548c\u7528\u6237C \u76f8\u4f3c\u5ea6(\u76f8\u5173\u5ea6)\u5f88\u9ad8\uff0c\u6240\u4ee5A\u548cC\u662f\u5174\u8da3\u76f8\u6295\u7684\u4eba\uff0c\u5bf9\u4e8eC\u4e70\u7684\u7269\u54c1\u5c31\u4f1a\u63a8\u8350\u7ed9A\u3002 \u76f8\u4f3c\u5ea6\u8ba1\u7b97 inA, inB \u5bf9\u5e94\u7684\u662f \u5217\u5411\u91cf \u6b27\u6c0f\u8ddd\u79bb\uff1a\u6307\u5728m\u7ef4\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u771f\u5b9e\u8ddd\u79bb\uff0c\u6216\u8005\u5411\u91cf\u7684\u81ea\u7136\u957f\u5ea6\uff08\u5373\u8be5\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\uff09\u3002\u4e8c\u7ef4\u6216\u4e09\u7ef4\u4e2d\u7684\u6b27\u6c0f\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u5b9e\u9645\u8ddd\u79bb\u3002 \u76f8\u4f3c\u5ea6= 1/(1+\u6b27\u5f0f\u8ddd\u79bb) \u76f8\u4f3c\u5ea6= 1.0/(1.0 + la.norm(inA - inB)) \u7269\u54c1\u5bf9\u8d8a\u76f8\u4f3c\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u503c\u5c31\u8d8a\u5927\u3002 \u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\uff1a\u5ea6\u91cf\u7684\u662f\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u3002 \u76f8\u4f3c\u5ea6= 0.5 + 0.5*corrcoef() \u3010\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7684\u53d6\u503c\u8303\u56f4\u4ece -1 \u5230 +1\uff0c\u901a\u8fc7\u51fd\u65700.5 + 0.5*corrcoef()\u8fd9\u4e2a\u51fd\u6570\u8ba1\u7b97\uff0c\u628a\u503c\u5f52\u4e00\u5316\u52300\u52301\u4e4b\u95f4\u3011 \u76f8\u4f3c\u5ea6= 0.5 + 0.5 * corrcoef(inA, inB, rowvar = 0)[0][1] \u76f8\u5bf9\u6b27\u6c0f\u8ddd\u79bb\u7684\u4f18\u52bf\uff1a\u5b83\u5bf9\u7528\u6237\u8bc4\u7ea7\u7684\u91cf\u7ea7\u5e76\u4e0d\u654f\u611f\u3002 \u4f59\u5f26\u76f8\u4f3c\u5ea6\uff1a\u8ba1\u7b97\u7684\u662f\u4e24\u4e2a\u5411\u91cf\u5939\u89d2\u7684\u4f59\u5f26\u503c\u3002 \u4f59\u5f26\u503c = (A\u00b7B)/(||A||\u00b7||B||) \u3010\u4f59\u5f26\u503c\u7684\u53d6\u503c\u8303\u56f4\u4e5f\u5728-1\u5230+1\u4e4b\u95f4\u3011 \u76f8\u4f3c\u5ea6= 0.5 + 0.5*\u4f59\u5f26\u503c \u76f8\u4f3c\u5ea6= 0.5 + 0.5*( float(inA.T*inB) / la.norm(inA)*la.norm(inB)) \u5982\u679c\u5939\u89d2\u4e3a90\u5ea6\uff0c\u5219\u76f8\u4f3c\u5ea6\u4e3a0\uff1b\u5982\u679c\u4e24\u4e2a\u5411\u91cf\u7684\u65b9\u5411\u76f8\u540c\uff0c\u5219\u76f8\u4f3c\u5ea6\u4e3a1.0\u3002 \u63a8\u8350\u7cfb\u7edf\u7684\u8bc4\u4ef7 \u91c7\u7528\u4ea4\u53c9\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002\u3010\u62c6\u5206\u6570\u636e\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3011 \u63a8\u8350\u5f15\u64ce\u8bc4\u4ef7\u7684\u6307\u6807\uff1a \u6700\u5c0f\u5747\u65b9\u6839\u8bef\u5dee(Root mean squared error, RMSE)\uff0c\u4e5f\u79f0\u6807\u51c6\u8bef\u5dee(Standard error)\uff0c\u5c31\u662f\u8ba1\u7b97\u5747\u65b9\u8bef\u5dee\u7684\u5e73\u5747\u503c\u7136\u540e\u53d6\u5176\u5e73\u65b9\u6839\u3002 \u5982\u679cRMSE=1, \u8868\u793a\u76f8\u5dee1\u4e2a\u661f\u7ea7\uff1b\u5982\u679cRMSE=2.5, \u8868\u793a\u76f8\u5dee2.5\u4e2a\u661f\u7ea7\u3002","title":"\u63a8\u8350\u7cfb\u7edf \u8981\u70b9"},{"location":"ml/14.SVD/#_5","text":"\u63a8\u8350\u7cfb\u7edf\u7684\u5de5\u4f5c\u8fc7\u7a0b\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u7528\u6237\uff0c\u7cfb\u7edf\u4f1a\u4e3a\u6b64\u7528\u6237\u8fd4\u56deN\u4e2a\u6700\u597d\u7684\u63a8\u8350\u83dc\u3002 \u5b9e\u73b0\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u5bfb\u627e\u7528\u6237\u6ca1\u6709\u8bc4\u7ea7\u7684\u83dc\u80b4\uff0c\u5373\u5728\u7528\u6237-\u7269\u54c1\u77e9\u9635\u4e2d\u76840\u503c\u3002 \u5728\u7528\u6237\u6ca1\u6709\u8bc4\u7ea7\u7684\u6240\u6709\u7269\u54c1\u4e2d\uff0c\u5bf9\u6bcf\u4e2a\u7269\u54c1\u9884\u8ba1\u4e00\u4e2a\u53ef\u80fd\u7684\u8bc4\u7ea7\u5206\u6570\u3002\u8fd9\u5c31\u662f\u8bf4\uff1a\u6211\u4eec\u8ba4\u4e3a\u7528\u6237\u53ef\u80fd\u4f1a\u5bf9\u7269\u54c1\u7684\u6253\u5206\uff08\u8fd9\u5c31\u662f\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u7684\u521d\u8877\uff09\u3002 \u5bf9\u8fd9\u4e9b\u7269\u54c1\u7684\u8bc4\u5206\u4ece\u9ad8\u5230\u4f4e\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd4\u56de\u524dN\u4e2a\u7269\u54c1\u3002","title":"\u63a8\u8350\u7cfb\u7edf \u539f\u7406"},{"location":"ml/14.SVD/#_6","text":"","title":"\u9879\u76ee\u6848\u4f8b: \u9910\u9986\u83dc\u80b4\u63a8\u8350\u7cfb\u7edf"},{"location":"ml/14.SVD/#_7","text":"\u5047\u5982\u4e00\u4e2a\u4eba\u5728\u5bb6\u51b3\u5b9a\u5916\u51fa\u5403\u996d\uff0c\u4f46\u662f\u4ed6\u5e76\u4e0d\u77e5\u9053\u8be5\u5230\u54ea\u513f\u53bb\u5403\u996d\uff0c\u8be5\u70b9\u4ec0\u4e48\u83dc\u3002\u63a8\u8350\u7cfb\u7edf\u53ef\u4ee5\u5e2e\u4ed6\u505a\u5230\u8fd9\u4e24\u70b9\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/14.SVD/#_8","text":"\u6536\u96c6 \u5e76 \u51c6\u5907\u6570\u636e def loadExData3(): # \u5229\u7528SVD\u63d0\u9ad8\u63a8\u8350\u6548\u679c\uff0c\u83dc\u80b4\u77e9\u9635 \"\"\" \u884c\uff1a\u4ee3\u8868\u4eba \u5217\uff1a\u4ee3\u8868\u83dc\u80b4\u540d\u8bcd \u503c\uff1a\u4ee3\u8868\u4eba\u5bf9\u83dc\u80b4\u7684\u8bc4\u5206\uff0c0\u8868\u793a\u672a\u8bc4\u5206 \"\"\" return[[2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0], [3, 3, 4, 0, 3, 0, 0, 2, 2, 0, 0], [5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 3, 0, 0, 0, 0, 4, 5, 0], [1, 1, 2, 1, 1, 2, 1, 0, 4, 5, 0]] \u5206\u6790\u6570\u636e: \u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u7684\u8ba8\u8bba(\u5f53\u7136\u6b64\u5904\u53ef\u4ee5\u5bf9\u6bd4\u4e0d\u540c\u8ddd\u79bb\u4e4b\u95f4\u7684\u5dee\u522b) \u8bad\u7ec3\u7b97\u6cd5: \u901a\u8fc7\u8c03\u7528 recommend() \u51fd\u6570\u8fdb\u884c\u63a8\u8350 recommend() \u4f1a\u8c03\u7528 \u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6 \u6216\u8005\u662f \u57fa\u4e8eSVD\uff0c\u5f97\u5230\u63a8\u8350\u7684\u7269\u54c1\u8bc4\u5206\u3002 1.\u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6 # \u57fa\u4e8e\u7269\u54c1\u76f8\u4f3c\u5ea6\u7684\u63a8\u8350\u5f15\u64ce def standEst(dataMat, user, simMeas, item): \"\"\"standEst(\u8ba1\u7b97\u67d0\u7528\u6237\u672a\u8bc4\u5206\u7269\u54c1\u4e2d\uff0c\u4ee5\u5bf9\u8be5\u7269\u54c1\u548c\u5176\u4ed6\u7269\u54c1\u8bc4\u5206\u7684\u7528\u6237\u7684\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u7efc\u5408\u8bc4\u5206) Args: dataMat \u8bad\u7ec3\u6570\u636e\u96c6 user \u7528\u6237\u7f16\u53f7 simMeas \u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5 item \u672a\u8bc4\u5206\u7684\u7269\u54c1\u7f16\u53f7 Returns: ratSimTotal/simTotal \u8bc4\u5206\uff080\uff5e5\u4e4b\u95f4\u7684\u503c\uff09 \"\"\" # \u5f97\u5230\u6570\u636e\u96c6\u4e2d\u7684\u7269\u54c1\u6570\u76ee n = shape(dataMat)[1] # \u521d\u59cb\u5316\u4e24\u4e2a\u8bc4\u5206\u503c simTotal = 0.0 ratSimTotal = 0.0 # \u904d\u5386\u884c\u4e2d\u7684\u6bcf\u4e2a\u7269\u54c1\uff08\u5bf9\u7528\u6237\u8bc4\u8fc7\u5206\u7684\u7269\u54c1\u8fdb\u884c\u904d\u5386\uff0c\u5e76\u5c06\u5b83\u4e0e\u5176\u4ed6\u7269\u54c1\u8fdb\u884c\u6bd4\u8f83\uff09 for j in range(n): userRating = dataMat[user, j] # \u5982\u679c\u67d0\u4e2a\u7269\u54c1\u7684\u8bc4\u5206\u503c\u4e3a0\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e2a\u7269\u54c1 if userRating == 0: continue # \u5bfb\u627e\u4e24\u4e2a\u7528\u6237\u90fd\u8bc4\u7ea7\u7684\u7269\u54c1 # \u53d8\u91cf overLap \u7ed9\u51fa\u7684\u662f\u4e24\u4e2a\u7269\u54c1\u5f53\u4e2d\u5df2\u7ecf\u88ab\u8bc4\u5206\u7684\u90a3\u4e2a\u5143\u7d20\u7684\u7d22\u5f15ID # logical_and \u8ba1\u7b97x1\u548cx2\u5143\u7d20\u7684\u771f\u503c\u3002 overLap = nonzero(logical_and(dataMat[:, item].A > 0, dataMat[:, j].A > 0))[0] # \u5982\u679c\u76f8\u4f3c\u5ea6\u4e3a0\uff0c\u5219\u4e24\u7740\u6ca1\u6709\u4efb\u4f55\u91cd\u5408\u5143\u7d20\uff0c\u7ec8\u6b62\u672c\u6b21\u5faa\u73af if len(overLap) == 0: similarity = 0 # \u5982\u679c\u5b58\u5728\u91cd\u5408\u7684\u7269\u54c1\uff0c\u5219\u57fa\u4e8e\u8fd9\u4e9b\u91cd\u5408\u7269\u91cd\u65b0\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u3002 else: similarity = simMeas(dataMat[overLap, item], dataMat[overLap, j]) # print 'the %d and %d similarity is : %f'(iten,j,similarity) # \u76f8\u4f3c\u5ea6\u4f1a\u4e0d\u65ad\u7d2f\u52a0\uff0c\u6bcf\u6b21\u8ba1\u7b97\u65f6\u8fd8\u8003\u8651\u76f8\u4f3c\u5ea6\u548c\u5f53\u524d\u7528\u6237\u8bc4\u5206\u7684\u4e58\u79ef # similarity \u7528\u6237\u76f8\u4f3c\u5ea6\uff0c userRating \u7528\u6237\u8bc4\u5206 simTotal += similarity ratSimTotal += similarity * userRating if simTotal == 0: return 0 # \u901a\u8fc7\u9664\u4ee5\u6240\u6709\u7684\u8bc4\u5206\u603b\u548c\uff0c\u5bf9\u4e0a\u8ff0\u76f8\u4f3c\u5ea6\u8bc4\u5206\u7684\u4e58\u79ef\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6700\u540e\u8bc4\u5206\u57280~5\u4e4b\u95f4\uff0c\u8fd9\u4e9b\u8bc4\u5206\u7528\u6765\u5bf9\u9884\u6d4b\u503c\u8fdb\u884c\u6392\u5e8f else: return ratSimTotal/simTotal 2.\u57fa\u4e8eSVD(\u53c2\u8003\u5730\u5740\uff1ahttp://www.codeweblog.com/svd-%E7%AC%94%E8%AE%B0/) # \u57fa\u4e8eSVD\u7684\u8bc4\u5206\u4f30\u8ba1 # \u5728recommend() \u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u4e8e\u66ff\u6362\u5bf9standEst()\u7684\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u5bf9\u7ed9\u5b9a\u7528\u6237\u7ed9\u5b9a\u7269\u54c1\u6784\u5efa\u4e86\u4e00\u4e2a\u8bc4\u5206\u4f30\u8ba1\u503c def svdEst(dataMat, user, simMeas, item): \"\"\"svdEst(\u8ba1\u7b97\u67d0\u7528\u6237\u672a\u8bc4\u5206\u7269\u54c1\u4e2d\uff0c\u4ee5\u5bf9\u8be5\u7269\u54c1\u548c\u5176\u4ed6\u7269\u54c1\u8bc4\u5206\u7684\u7528\u6237\u7684\u7269\u54c1\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u8fdb\u884c\u7efc\u5408\u8bc4\u5206) Args: dataMat \u8bad\u7ec3\u6570\u636e\u96c6 user \u7528\u6237\u7f16\u53f7 simMeas \u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5 item \u672a\u8bc4\u5206\u7684\u7269\u54c1\u7f16\u53f7 Returns: ratSimTotal/simTotal \u8bc4\u5206\uff080\uff5e5\u4e4b\u95f4\u7684\u503c\uff09 \"\"\" # \u7269\u54c1\u6570\u76ee n = shape(dataMat)[1] # \u5bf9\u6570\u636e\u96c6\u8fdb\u884cSVD\u5206\u89e3 simTotal = 0.0 ratSimTotal = 0.0 # \u5947\u5f02\u503c\u5206\u89e3 # \u5728SVD\u5206\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u5229\u7528\u5305\u542b\u4e8690%\u80fd\u91cf\u503c\u7684\u5947\u5f02\u503c\uff0c\u8fd9\u4e9b\u5947\u5f02\u503c\u4f1a\u4ee5NumPy\u6570\u7ec4\u7684\u5f62\u5f0f\u5f97\u4ee5\u4fdd\u5b58 U, Sigma, VT = la.svd(dataMat) # # \u5206\u6790 Sigma \u7684\u957f\u5ea6\u53d6\u503c # analyse_data(Sigma, 20) # \u5982\u679c\u8981\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97\uff0c\u5c31\u5fc5\u987b\u8981\u7528\u8fd9\u4e9b\u5947\u5f02\u503c\u6784\u5efa\u51fa\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635 Sig4 = mat(eye(4) * Sigma[: 4]) # \u5229\u7528U\u77e9\u9635\u5c06\u7269\u54c1\u8f6c\u6362\u5230\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u6784\u5efa\u8f6c\u6362\u540e\u7684\u7269\u54c1(\u7269\u54c1+4\u4e2a\u4e3b\u8981\u7684\u7279\u5f81) xformedItems = dataMat.T * U[:, :4] * Sig4.I # \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7528\u6237\uff0cfor\u5faa\u73af\u5728\u7528\u6237\u5bf9\u5e94\u884c\u7684\u5143\u7d20\u4e0a\u8fdb\u884c\u904d\u5386\uff0c # \u8fd9\u548cstandEst()\u51fd\u6570\u4e2d\u7684for\u5faa\u73af\u7684\u76ee\u7684\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u7684\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65f6\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e0b\u8fdb\u884c\u7684\u3002 for j in range(n): userRating = dataMat[user, j] if userRating == 0 or j == item: continue # \u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e5f\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570 similarity = simMeas(xformedItems[item, :].T, xformedItems[j, :].T) # for \u5faa\u73af\u4e2d\u52a0\u5165\u4e86\u4e00\u6761print\u8bed\u53e5\uff0c\u4ee5\u4fbf\u4e86\u89e3\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u7684\u8fdb\u5c55\u60c5\u51b5\u3002\u5982\u679c\u89c9\u5f97\u7d2f\u8d58\uff0c\u53ef\u4ee5\u53bb\u6389 print 'the %d and %d similarity is: %f' % (item, j, similarity) # \u5bf9\u76f8\u4f3c\u5ea6\u4e0d\u65ad\u7d2f\u52a0\u6c42\u548c simTotal += similarity # \u5bf9\u76f8\u4f3c\u5ea6\u53ca\u5bf9\u5e94\u8bc4\u5206\u503c\u7684\u4e58\u79ef\u6c42\u548c ratSimTotal += similarity * userRating if simTotal == 0: return 0 else: # \u8ba1\u7b97\u4f30\u8ba1\u8bc4\u5206 return ratSimTotal/simTotal \u6392\u5e8f\u83b7\u53d6\u6700\u540e\u7684\u63a8\u8350\u7ed3\u679c # recommend()\u51fd\u6570\uff0c\u5c31\u662f\u63a8\u8350\u5f15\u64ce\uff0c\u5b83\u9ed8\u8ba4\u8c03\u7528standEst()\u51fd\u6570\uff0c\u4ea7\u751f\u4e86\u6700\u9ad8\u7684N\u4e2a\u63a8\u8350\u7ed3\u679c\u3002 # \u5982\u679c\u4e0d\u6307\u5b9aN\u7684\u5927\u5c0f\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a3\u3002\u8be5\u51fd\u6570\u53e6\u5916\u7684\u53c2\u6570\u8fd8\u5305\u62ec\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u548c\u4f30\u8ba1\u65b9\u6cd5 def recommend(dataMat, user, N=3, simMeas=cosSim, estMethod=standEst): # \u5bfb\u627e\u672a\u8bc4\u7ea7\u7684\u7269\u54c1 # \u5bf9\u7ed9\u5b9a\u7684\u7528\u6237\u5efa\u7acb\u4e00\u4e2a\u672a\u8bc4\u5206\u7684\u7269\u54c1\u5217\u8868 unratedItems = nonzero(dataMat[user, :].A == 0)[1] # \u5982\u679c\u4e0d\u5b58\u5728\u672a\u8bc4\u5206\u7269\u54c1\uff0c\u90a3\u4e48\u5c31\u9000\u51fa\u51fd\u6570 if len(unratedItems) == 0: return 'you rated everything' # \u7269\u54c1\u7684\u7f16\u53f7\u548c\u8bc4\u5206\u503c itemScores = [] # \u5728\u672a\u8bc4\u5206\u7269\u54c1\u4e0a\u8fdb\u884c\u5faa\u73af for item in unratedItems: estimatedScore = estMethod(dataMat, user, simMeas, item) # \u5bfb\u627e\u524dN\u4e2a\u672a\u8bc4\u7ea7\u7269\u54c1\uff0c\u8c03\u7528standEst()\u6765\u4ea7\u751f\u8be5\u7269\u54c1\u7684\u9884\u6d4b\u5f97\u5206\uff0c\u8be5\u7269\u54c1\u7684\u7f16\u53f7\u548c\u4f30\u8ba1\u503c\u4f1a\u653e\u5728\u4e00\u4e2a\u5143\u7d20\u5217\u8868itemScores\u4e2d itemScores.append((item, estimatedScore)) # \u6309\u7167\u4f30\u8ba1\u5f97\u5206\uff0c\u5bf9\u8be5\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u5e76\u8fd4\u56de\u3002\u5217\u8868\u9006\u6392\u5e8f\uff0c\u7b2c\u4e00\u4e2a\u503c\u5c31\u662f\u6700\u5927\u503c return sorted(itemScores, key=lambda jj: jj[1], reverse=True)[: N] \u6d4b\u8bd5 \u548c \u9879\u76ee\u8c03\u7528\uff0c\u53ef\u76f4\u63a5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/14.SVD/svdRecommend.py","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/14.SVD/#_9","text":"\u57fa\u4e8e\u5185\u5bb9(content-based)\u7684\u63a8\u8350 \u901a\u8fc7\u5404\u79cd\u6807\u7b7e\u6765\u6807\u8bb0\u83dc\u80b4 \u5c06\u8fd9\u4e9b\u5c5e\u6027\u4f5c\u4e3a\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u6240\u9700\u8981\u7684\u6570\u636e \u8fd9\u5c31\u662f\uff1a\u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u3002 \u6784\u5efa\u63a8\u8350\u5f15\u64ce\u9762\u4e34\u7684\u6311\u6218 \u95ee\u9898 1\uff09\u5728\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\u4e0a\uff0cSVD\u5206\u89e3\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u901f\u5ea6 2\uff09\u5b58\u5728\u5176\u4ed6\u5f88\u591a\u89c4\u6a21\u6269\u5c55\u6027\u7684\u6311\u6218\u6027\u95ee\u9898\uff0c\u6bd4\u5982\u77e9\u9635\u7684\u8868\u793a\u65b9\u6cd5\u548c\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u5f97\u5206\u6d88\u8017\u8d44\u6e90\u3002 * 3\uff09\u5982\u4f55\u5728\u7f3a\u4e4f\u6570\u636e\u65f6\u7ed9\u51fa\u597d\u7684\u63a8\u8350-\u79f0\u4e3a\u51b7\u542f\u52a8\u3010\u7b80\u5355\u8bf4\uff1a\u7528\u6237\u4e0d\u4f1a\u559c\u6b22\u4e00\u4e2a\u65e0\u6548\u7684\u7269\u54c1\uff0c\u800c\u7528\u6237\u4e0d\u559c\u6b22\u7684\u7269\u54c1\u53c8\u65e0\u6548\u3011 \u5efa\u8bae 1\uff09\u5728\u5927\u578b\u7cfb\u7edf\u4e2d\uff0cSVD\u5206\u89e3(\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8c03\u5165\u65f6\u8fd0\u884c\u4e00\u6b21)\u6bcf\u5929\u8fd0\u884c\u4e00\u6b21\u6216\u8005\u5176\u9891\u7387\u66f4\u4f4e\uff0c\u5e76\u4e14\u8fd8\u8981\u79bb\u7ebf\u8fd0\u884c\u3002 2\uff09\u5728\u5b9e\u9645\u4e2d\uff0c\u53e6\u4e00\u4e2a\u666e\u904d\u7684\u505a\u6cd5\u5c31\u662f\u79bb\u7ebf\u8ba1\u7b97\u5e76\u4fdd\u5b58\u76f8\u4f3c\u5ea6\u5f97\u5206\u3002(\u7269\u54c1\u76f8\u4f3c\u5ea6\u53ef\u80fd\u88ab\u7528\u6237\u91cd\u590d\u7684\u8c03\u7528) * 3\uff09\u51b7\u542f\u52a8\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u5c06\u63a8\u8350\u770b\u6210\u662f\u641c\u7d22\u95ee\u9898\uff0c\u901a\u8fc7\u5404\u79cd\u6807\u7b7e\uff0f\u5c5e\u6027\u7279\u5f81\u8fdb\u884c \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350 \u3002","title":"\u8981\u70b9\u8865\u5145"},{"location":"ml/14.SVD/#svd_5","text":"\u6536\u96c6 \u5e76 \u51c6\u5907\u6570\u636e \u5c06\u6587\u672c\u6570\u636e\u8f6c\u5316\u4e3a\u77e9\u9635 # \u52a0\u8f7d\u5e76\u8f6c\u6362\u6570\u636e def imgLoadData(filename): myl = [] # \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5e76\u4ece\u6587\u4ef6\u4ee5\u6570\u7ec4\u65b9\u5f0f\u8bfb\u5165\u5b57\u7b26 for line in open(filename).readlines(): newRow = [] for i in range(32): newRow.append(int(line[i])) myl.append(newRow) # \u77e9\u9635\u8c03\u5165\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u8f93\u51fa\u8be5\u77e9\u9635 myMat = mat(myl) return myMat \u5206\u6790\u6570\u636e: \u5206\u6790 Sigma \u7684\u957f\u5ea6\u4e2a\u6570 \u901a\u5e38\u4fdd\u7559\u77e9\u9635 80% \uff5e 90% \u7684\u80fd\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u91cd\u8981\u7684\u7279\u5f81\u5e76\u53bb\u9664\u566a\u58f0\u3002 def analyse_data(Sigma, loopNum=20): \"\"\"analyse_data(\u5206\u6790 Sigma \u7684\u957f\u5ea6\u53d6\u503c) Args: Sigma Sigma\u7684\u503c loopNum \u5faa\u73af\u6b21\u6570 \"\"\" # \u603b\u65b9\u5dee\u7684\u96c6\u5408\uff08\u603b\u80fd\u91cf\u503c\uff09 Sig2 = Sigma**2 SigmaSum = sum(Sig2) for i in range(loopNum): SigmaI = sum(Sig2[:i+1]) ''' \u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u60c5\u51b5\uff0c\u5c31\u884c\u5904\u7406\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684 Singma \u6b21\u6570 \u901a\u5e38\u4fdd\u7559\u77e9\u9635 80% \uff5e 90% \u7684\u80fd\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u91cd\u8981\u7684\u7279\u5f81\u5e76\u53d6\u51fa\u566a\u58f0\u3002 ''' print '\u4e3b\u6210\u5206\uff1a%s, \u65b9\u5dee\u5360\u6bd4\uff1a%s%%' % (format(i+1, '2.0f'), format(SigmaI/SigmaSum*100, '4.2f')) \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u6bd4\u4f7f\u7528 SVD \u524d\u540e\u7684\u6570\u636e\u5dee\u5f02\u5bf9\u6bd4\uff0c\u5bf9\u4e8e\u5b58\u50a8\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u5199\u5199 \u4f8b\u5982\uff1a 32*32=1024 => 32*2+2*1+32*2=130 (2*1\u8868\u793a\u53bb\u6389\u4e86\u9664\u5bf9\u89d2\u7ebf\u76840), \u51e0\u4e4e\u83b7\u5f97\u4e8610\u500d\u7684\u538b\u7f29\u6bd4\u3002 # \u6253\u5370\u77e9\u9635 def printMat(inMat, thresh=0.8): # \u7531\u4e8e\u77e9\u9635\u4fdd\u62a4\u4e86\u6d6e\u70b9\u6570\uff0c\u56e0\u6b64\u5b9a\u4e49\u6d45\u8272\u548c\u6df1\u8272\uff0c\u904d\u5386\u6240\u6709\u77e9\u9635\u5143\u7d20\uff0c\u5f53\u5143\u7d20\u5927\u4e8e\u9600\u503c\u65f6\u6253\u53701\uff0c\u5426\u5219\u6253\u53700 for i in range(32): for k in range(32): if float(inMat[i, k]) > thresh: print 1, else: print 0, print '' # \u5b9e\u73b0\u56fe\u50cf\u538b\u7f29\uff0c\u5141\u8bb8\u57fa\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u5947\u5f02\u503c\u6570\u76ee\u6765\u91cd\u6784\u56fe\u50cf def imgCompress(numSV=3, thresh=0.8): \"\"\"imgCompress( ) Args: numSV Sigma\u957f\u5ea6 thresh \u5224\u65ad\u7684\u9608\u503c \"\"\" # \u6784\u5efa\u4e00\u4e2a\u5217\u8868 myMat = imgLoadData('db/14.SVD/0_5.txt') print \"****original matrix****\" # \u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884cSVD\u5206\u89e3\u5e76\u91cd\u6784\u56fe\u50cfe printMat(myMat, thresh) # \u901a\u8fc7Sigma \u91cd\u65b0\u6784\u6210SigRecom\u6765\u5b9e\u73b0 # Sigma\u662f\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635\uff0c\u56e0\u6b64\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u51680\u77e9\u9635\uff0c\u7136\u540e\u5c06\u524d\u9762\u7684\u90a3\u4e9b\u5947\u5f02\u503c\u586b\u5145\u5230\u5bf9\u89d2\u7ebf\u4e0a\u3002 U, Sigma, VT = la.svd(myMat) # SigRecon = mat(zeros((numSV, numSV))) # for k in range(numSV): # SigRecon[k, k] = Sigma[k] # \u5206\u6790\u63d2\u5165\u7684 Sigma \u957f\u5ea6 analyse_data(Sigma, 20) SigRecon = mat(eye(numSV) * Sigma[: numSV]) reconMat = U[:, :numSV] * SigRecon * VT[:numSV, :] print \"****reconstructed matrix using %d singular values *****\" % numSV printMat(reconMat, thresh) \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/14.SVD/svdRecommend.py \u4f5c\u8005\uff1a \u7247\u523b 1988 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u9879\u76ee\u6848\u4f8b: \u57fa\u4e8e SVD \u7684\u56fe\u50cf\u538b\u7f29"},{"location":"ml/15.BigData_MapReduce/","text":"\u7b2c15\u7ae0 \u5927\u6570\u636e\u4e0eMapReduce \u5927\u6570\u636e \u6982\u8ff0 \u5927\u6570\u636e: \u6536\u96c6\u5230\u7684\u6570\u636e\u5df2\u7ecf\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5904\u7406\u80fd\u529b\u3002 \u5927\u6570\u636e \u573a\u666f \u5047\u5982\u4f60\u4e3a\u4e00\u5bb6\u7f51\u7edc\u8d2d\u7269\u5546\u5e97\u5de5\u4f5c\uff0c\u5f88\u591a\u7528\u6237\u8bbf\u95ee\u8be5\u7f51\u7ad9\uff0c\u5176\u4e2d\u6709\u4e9b\u4eba\u4f1a\u8d2d\u4e70\u5546\u54c1\uff0c\u6709\u4e9b\u4eba\u5219\u968f\u610f\u6d4f\u89c8\u540e\u5c31\u79bb\u5f00\u3002 \u5bf9\u4e8e\u4f60\u6765\u8bf4\uff0c\u53ef\u80fd\u5f88\u60f3\u8bc6\u522b\u90a3\u4e9b\u6709\u8d2d\u7269\u610f\u613f\u7684\u7528\u6237\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u6570\u636e\u96c6\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u5728\u5355\u673a\u4e0a\u8bad\u7ec3\u8981\u8fd0\u884c\u597d\u51e0\u5929\u3002 \u63a5\u4e0b\u6765\uff1a\u6211\u4eec\u8bb2\u8bb2 MapRedece \u5982\u4f55\u6765\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898 MapRedece Hadoop \u6982\u8ff0 Hadoop \u662f MapRedece \u6846\u67b6\u7684\u4e00\u4e2a\u514d\u8d39\u5f00\u6e90\u5b9e\u73b0\u3002 MapReduce: \u5206\u5e03\u5f0f\u7684\u8ba1\u7b97\u6846\u67b6\uff0c\u53ef\u4ee5\u5c06\u5355\u4e2a\u8ba1\u7b97\u4f5c\u4e1a\u5206\u914d\u7ed9\u591a\u53f0\u8ba1\u7b97\u673a\u6267\u884c\u3002 MapRedece \u539f\u7406 MapRedece \u5de5\u4f5c\u539f\u7406 \u4e3b\u8282\u70b9\u63a7\u5236 MapReduce \u7684\u4f5c\u4e1a\u6d41\u7a0b MapReduce \u7684\u4f5c\u4e1a\u53ef\u4ee5\u5206\u6210map\u4efb\u52a1\u548creduce\u4efb\u52a1 map \u4efb\u52a1\u4e4b\u95f4\u4e0d\u505a\u6570\u636e\u4ea4\u6d41\uff0creduce \u4efb\u52a1\u4e5f\u4e00\u6837 \u5728 map \u548c reduce \u9636\u6bb5\u4e2d\u95f4\uff0c\u6709\u4e00\u4e2a sort \u548c combine \u9636\u6bb5 \u6570\u636e\u88ab\u91cd\u590d\u5b58\u653e\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff0c\u4ee5\u9632\u6b62\u67d0\u4e2a\u673a\u5668\u5931\u6548 mapper \u548c reducer \u4f20\u8f93\u7684\u6570\u636e\u5f62\u5f0f\u4e3a key/value\u5bf9 MapRedece \u7279\u70b9 \u4f18\u70b9: \u4f7f\u7a0b\u5e8f\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u53ef\u5728\u77ed\u65f6\u95f4\u5185\u5b8c\u6210\u5927\u91cf\u5de5\u4f5c\u3002 \u7f3a\u70b9: \u7b97\u6cd5\u5fc5\u987b\u7ecf\u8fc7\u91cd\u5199\uff0c\u9700\u8981\u5bf9\u7cfb\u7edf\u5de5\u7a0b\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 Hadoop \u6d41(Python \u8c03\u7528) \u7406\u8bba\u7b80\u4ecb \u4f8b\u5982: Hadoop\u6d41\u53ef\u4ee5\u50cfLinux\u547d\u4ee4\u4e00\u6837\u6267\u884c cat inputFile.txt | python mapper.py | sort | python reducer.py > outputFile.txt \u7c7b\u4f3c\u7684Hadoop\u6d41\u5c31\u53ef\u4ee5\u5728\u591a\u53f0\u673a\u5668\u4e0a\u5206\u5e03\u5f0f\u6267\u884c\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7Linux\u547d\u4ee4\u6765\u6d4b\u8bd5Python\u8bed\u8a00\u7f16\u5199\u7684MapReduce\u811a\u672c\u3002 \u5b9e\u6218\u811a\u672c # \u6d4b\u8bd5 Mapper # Linux cat db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py # Window # python src/python/15.BigData_MapReduce/mrMeanMapper.py < db/15.BigData_MapReduce/inputFile.txt # \u6d4b\u8bd5 Reducer # Linux cat db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py | python src/python/15.BigData_MapReduce/mrMeanReducer.py # Window # python src/python/15.BigData_MapReduce/mrMeanMapper.py < db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanReducer.py MapReduce \u673a\u5668\u5b66\u4e60 Mahout in Action \u7b80\u5355\u8d1d\u53f6\u65af\uff1a\u5b83\u5c5e\u4e8e\u4e3a\u6570\u4e0d\u591a\u7684\u53ef\u4ee5\u5f88\u81ea\u7136\u7684\u4f7f\u7528MapReduce\u7684\u7b97\u6cd5\u3002\u901a\u8fc7\u7edf\u8ba1\u5728\u67d0\u4e2a\u7c7b\u522b\u4e0b\u67d0\u7279\u5f81\u7684\u6982\u7387\u3002 k-\u8fd1\u90bb\u7b97\u6cd5\uff1a\u9ad8\u7ef4\u6570\u636e\u4e0b\uff08\u5982\u6587\u672c\u3001\u56fe\u50cf\u548c\u89c6\u9891\uff09\u6d41\u884c\u7684\u8fd1\u90bb\u67e5\u627e\u65b9\u6cd5\u662f\u5c40\u90e8\u654f\u611f\u54c8\u5e0c\u7b97\u6cd5\u3002 \u652f\u6301\u5411\u91cf\u673a(SVM)\uff1a\u4f7f\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u6c42\u89e3\uff0c\u5982Pegasos\u7b97\u6cd5\u3002 \u5947\u5f02\u503c\u5206\u89e3\uff1aLanczos\u7b97\u6cd5\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6c42\u89e3\u8fd1\u4f3c\u7279\u5f81\u503c\u7684\u7b97\u6cd5\u3002 k-\u5747\u503c\u805a\u7c7b\uff1acanopy\u7b97\u6cd5\u521d\u59cb\u5316k\u4e2a\u7c07\uff0c\u7136\u540e\u518d\u8fd0\u884cK-\u5747\u503c\u6c42\u89e3\u7ed3\u679c\u3002 \u4f7f\u7528 mrjob \u5e93\u5c06 MapReduce \u81ea\u52a8\u5316 \u7406\u8bba\u7b80\u4ecb MapReduce \u4f5c\u4e1a\u6d41\u81ea\u52a8\u5316\u7684\u6846\u67b6\uff1aCascading \u548c Oozie. mrjob \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u5b66\u4e60\u5de5\u5177\uff0c\u4e0e2010\u5e74\u5e95\u5b9e\u73b0\u4e86\u5f00\u6e90\uff0c\u6765\u4e4b\u4e8e Yelp(\u4e00\u4e2a\u9910\u5385\u70b9\u8bc4\u7f51\u7ad9). python src/python/15.BigData_MapReduce/mrMean.py < db/15.BigData_MapReduce/inputFile.txt > db/15.BigData_MapReduce/myOut.txt \u5b9e\u6218\u811a\u672c # \u6d4b\u8bd5 mrjob\u7684\u6848\u4f8b # \u5148\u6d4b\u8bd5\u4e00\u4e0bmapper\u65b9\u6cd5 # python src/python/15.BigData_MapReduce/mrMean.py --mapper < db/15.BigData_MapReduce/inputFile.txt # \u8fd0\u884c\u6574\u4e2a\u7a0b\u5e8f\uff0c\u79fb\u9664 --mapper \u5c31\u884c python src/python/15.BigData_MapReduce/mrMean.py < db/15.BigData_MapReduce/inputFile.txt \u9879\u76ee\u6848\u4f8b\uff1a\u5206\u5e03\u5f0f SVM \u7684 Pegasos \u7b97\u6cd5 Pegasos\u662f\u6307\u539f\u59cb\u4f30\u8ba1\u68af\u5ea6\u6c42\u89e3\u5668(Peimal Estimated sub-GrAdient Solver) Pegasos \u5de5\u4f5c\u539f\u7406 \u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e9b\u6837\u672c\u70b9\u6dfb\u52a0\u5230\u5f85\u5904\u7406\u5217\u8868\u4e2d \u6309\u5e8f\u5224\u65ad\u6bcf\u4e2a\u6837\u672c\u70b9\u662f\u5426\u88ab\u6b63\u786e\u5206\u7c7b \u5982\u679c\u662f\u5219\u5ffd\u7565 \u5982\u679c\u4e0d\u662f\u5219\u5c06\u5176\u52a0\u5165\u5230\u5f85\u66f4\u65b0\u96c6\u5408\u3002 \u6279\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u6743\u91cd\u5411\u91cf\u6309\u7167\u8fd9\u4e9b\u9519\u5206\u7684\u6837\u672c\u8fdb\u884c\u66f4\u65b0\u3002 \u4e0a\u8ff0\u7b97\u6cd5\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a \u5c06 \u56de\u5f52\u7cfb\u6570w \u521d\u59cb\u5316\u4e3a0 \u5bf9\u6bcf\u6b21\u6279\u5904\u7406 \u968f\u673a\u9009\u62e9 k \u4e2a\u6837\u672c\u70b9(\u5411\u91cf) \u5bf9\u6bcf\u4e2a\u5411\u91cf \u5982\u679c\u8be5\u5411\u91cf\u88ab\u9519\u5206\uff1a \u66f4\u65b0\u6743\u91cd\u5411\u91cf w \u7d2f\u52a0\u5bf9 w \u7684\u66f4\u65b0 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u6570\u636e\u6309\u6587\u672c\u683c\u5f0f\u5b58\u653e\u3002 \u51c6\u5907\u6570\u636e\uff1a\u8f93\u5165\u6570\u636e\u5df2\u7ecf\u662f\u53ef\u7528\u7684\u683c\u5f0f\uff0c\u6240\u4ee5\u4e0d\u9700\u4efb\u4f55\u51c6\u5907\u5de5\u4f5c\u3002\u5982\u679c\u4f60\u9700\u8981\u89e3\u6790\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\uff0c\u5efa\u8bae\u4f7f\u7528 map \u4f5c\u4e1a\u6765\u5b8c\u6210\uff0c\u4ece\u800c\u8fbe\u5230\u5e76\u884c\u5904\u7406\u7684\u76ee\u7684\u3002 \u5206\u6790\u6570\u636e\uff1a\u65e0\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4e0e\u666e\u901a\u7684 SVM \u4e00\u6837\uff0c\u5728\u5206\u7c7b\u5668\u8bad\u7ec3\u4e0a\u4ecd\u9700\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u53ef\u89c6\u5316\u4e4b\u540e\uff0c\u89c2\u5bdf\u8d85\u5e73\u9762\uff0c\u5224\u65ad\u7b97\u6cd5\u662f\u5426\u6709\u6548\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u4e0d\u4f1a\u5c55\u793a\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\uff0c\u4f46\u4f1a\u5c55\u793a\u5982\u4f55\u5728\u5927\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3SVM\u3002\u8be5\u7b97\u6cd5\u5176\u4e2d\u4e00\u4e2a\u5e94\u7528\u573a\u666f\u5c31\u662f\u672c\u6587\u5206\u7c7b\uff0c\u901a\u5e38\u5728\u6587\u672c\u5206\u7c7b\u91cc\u53ef\u80fd\u6709\u5927\u91cf\u7684\u6587\u6863\u548c\u6210\u5343\u4e0a\u4e07\u7684\u7279\u5f81\u3002 \u6536\u96c6\u6570\u636e \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 0.365032 2.465645 -1 -2.494175 -0.292380 -1 -3.039364 -0.123108 -1 1.348150 0.255696 1 2.768494 1.234954 1 1.232328 -0.601198 1 \u51c6\u5907\u6570\u636e def loadDataSet(fileName): dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): lineArr = line.strip().split('\\t') # dataMat.append([float(lineArr[0]), float(lineArr[1]), float(lineArr[2])]) dataMat.append([float(lineArr[0]), float(lineArr[1])]) labelMat.append(float(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u65e0 \u8bad\u7ec3\u7b97\u6cd5 def batchPegasos(dataSet, labels, lam, T, k): \"\"\"batchPegasos() Args: dataMat \u7279\u5f81\u96c6\u5408 labels \u5206\u7c7b\u7ed3\u679c\u96c6\u5408 lam \u56fa\u5b9a\u503c T \u8fed\u4ee3\u6b21\u6570 k \u5f85\u5904\u7406\u5217\u8868\u5927\u5c0f Returns: w \u56de\u5f52\u7cfb\u6570 \"\"\" m, n = shape(dataSet) w = zeros(n) # \u56de\u5f52\u7cfb\u6570 dataIndex = range(m) for t in range(1, T+1): wDelta = mat(zeros(n)) # \u91cd\u7f6e wDelta # \u5b83\u662f\u5b66\u4e60\u7387\uff0c\u4ee3\u8868\u4e86\u6743\u91cd\u8c03\u6574\u5e45\u5ea6\u7684\u5927\u5c0f\u3002\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u968f\u673a\u68af\u5ea6\u7684\u6b65\u957f\uff0c\u4f7f\u5b83\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4fbf\u4e8e\u62df\u5408\uff09 # \u8f93\u5165T\u548cK\u5206\u522b\u8bbe\u5b9a\u4e86\u8fed\u4ee3\u6b21\u6570\u548c\u5f85\u5904\u7406\u5217\u8868\u7684\u5927\u5c0f\u3002\u5728T\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u9700\u8981\u91cd\u65b0\u8ba1\u7b97eta eta = 1.0/(lam*t) random.shuffle(dataIndex) for j in range(k): # \u5168\u90e8\u7684\u8bad\u7ec3\u96c6 \u5185\u5faa\u73af\u4e2d\u6267\u884c\u6279\u5904\u7406\uff0c\u5c06\u5206\u7c7b\u9519\u8bef\u7684\u503c\u5168\u90e8\u505a\u7d2f\u52a0\u540e\u66f4\u65b0\u6743\u91cd\u5411\u91cf i = dataIndex[j] p = predict(w, dataSet[i, :]) # mapper \u4ee3\u7801 # \u5982\u679c\u9884\u6d4b\u6b63\u786e\uff0c\u5e76\u4e14\u9884\u6d4b\u7ed3\u679c\u7684\u7edd\u5bf9\u503c>=1\uff0c\u56e0\u4e3a\u6700\u5927\u95f4\u9694\u4e3a1, \u8ba4\u4e3a\u6ca1\u95ee\u9898\u3002 # \u5426\u5219\u7b97\u662f\u9884\u6d4b\u9519\u8bef, \u901a\u8fc7\u9884\u6d4b\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u6765\u7d2f\u8ba1\u66f4\u65b0w. if labels[i]*p < 1: # mapper \u4ee3\u7801 wDelta += labels[i]*dataSet[i, :].A # \u7d2f\u79ef\u53d8\u5316 # w\u901a\u8fc7\u4e0d\u65ad\u7684\u968f\u673a\u68af\u5ea6\u7684\u65b9\u5f0f\u6765\u4f18\u5316 w = (1.0 - 1/t)*w + (eta/k)*wDelta # \u5728\u6bcf\u4e2a T\u4e0a\u5e94\u7528\u66f4\u6539 # print '-----', w # print '++++++', w return w \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/15.BigData_MapReduce/pegasos.py \u8fd0\u884c\u65b9\u5f0f\uff1a python /opt/git/MachineLearning/src/python/15.BigData_MapReduce/mrSVM.py < db/15.BigData_MapReduce/inputFile.txt MR\u7248\u672c\u7684\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/15.BigData_MapReduce/mrSVM.py \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c15\u7ae0_\u5927\u6570\u636e\u4e0eMapReduce"},{"location":"ml/15.BigData_MapReduce/#15-mapreduce","text":"","title":"\u7b2c15\u7ae0 \u5927\u6570\u636e\u4e0eMapReduce"},{"location":"ml/15.BigData_MapReduce/#_1","text":"\u5927\u6570\u636e: \u6536\u96c6\u5230\u7684\u6570\u636e\u5df2\u7ecf\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5904\u7406\u80fd\u529b\u3002","title":"\u5927\u6570\u636e \u6982\u8ff0"},{"location":"ml/15.BigData_MapReduce/#_2","text":"\u5047\u5982\u4f60\u4e3a\u4e00\u5bb6\u7f51\u7edc\u8d2d\u7269\u5546\u5e97\u5de5\u4f5c\uff0c\u5f88\u591a\u7528\u6237\u8bbf\u95ee\u8be5\u7f51\u7ad9\uff0c\u5176\u4e2d\u6709\u4e9b\u4eba\u4f1a\u8d2d\u4e70\u5546\u54c1\uff0c\u6709\u4e9b\u4eba\u5219\u968f\u610f\u6d4f\u89c8\u540e\u5c31\u79bb\u5f00\u3002 \u5bf9\u4e8e\u4f60\u6765\u8bf4\uff0c\u53ef\u80fd\u5f88\u60f3\u8bc6\u522b\u90a3\u4e9b\u6709\u8d2d\u7269\u610f\u613f\u7684\u7528\u6237\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u6570\u636e\u96c6\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u5728\u5355\u673a\u4e0a\u8bad\u7ec3\u8981\u8fd0\u884c\u597d\u51e0\u5929\u3002 \u63a5\u4e0b\u6765\uff1a\u6211\u4eec\u8bb2\u8bb2 MapRedece \u5982\u4f55\u6765\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898","title":"\u5927\u6570\u636e \u573a\u666f"},{"location":"ml/15.BigData_MapReduce/#mapredece","text":"","title":"MapRedece"},{"location":"ml/15.BigData_MapReduce/#hadoop","text":"Hadoop \u662f MapRedece \u6846\u67b6\u7684\u4e00\u4e2a\u514d\u8d39\u5f00\u6e90\u5b9e\u73b0\u3002 MapReduce: \u5206\u5e03\u5f0f\u7684\u8ba1\u7b97\u6846\u67b6\uff0c\u53ef\u4ee5\u5c06\u5355\u4e2a\u8ba1\u7b97\u4f5c\u4e1a\u5206\u914d\u7ed9\u591a\u53f0\u8ba1\u7b97\u673a\u6267\u884c\u3002","title":"Hadoop \u6982\u8ff0"},{"location":"ml/15.BigData_MapReduce/#mapredece_1","text":"MapRedece \u5de5\u4f5c\u539f\u7406 \u4e3b\u8282\u70b9\u63a7\u5236 MapReduce \u7684\u4f5c\u4e1a\u6d41\u7a0b MapReduce \u7684\u4f5c\u4e1a\u53ef\u4ee5\u5206\u6210map\u4efb\u52a1\u548creduce\u4efb\u52a1 map \u4efb\u52a1\u4e4b\u95f4\u4e0d\u505a\u6570\u636e\u4ea4\u6d41\uff0creduce \u4efb\u52a1\u4e5f\u4e00\u6837 \u5728 map \u548c reduce \u9636\u6bb5\u4e2d\u95f4\uff0c\u6709\u4e00\u4e2a sort \u548c combine \u9636\u6bb5 \u6570\u636e\u88ab\u91cd\u590d\u5b58\u653e\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff0c\u4ee5\u9632\u6b62\u67d0\u4e2a\u673a\u5668\u5931\u6548 mapper \u548c reducer \u4f20\u8f93\u7684\u6570\u636e\u5f62\u5f0f\u4e3a key/value\u5bf9 MapRedece \u7279\u70b9 \u4f18\u70b9: \u4f7f\u7a0b\u5e8f\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u53ef\u5728\u77ed\u65f6\u95f4\u5185\u5b8c\u6210\u5927\u91cf\u5de5\u4f5c\u3002 \u7f3a\u70b9: \u7b97\u6cd5\u5fc5\u987b\u7ecf\u8fc7\u91cd\u5199\uff0c\u9700\u8981\u5bf9\u7cfb\u7edf\u5de5\u7a0b\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"MapRedece \u539f\u7406"},{"location":"ml/15.BigData_MapReduce/#hadoop-python","text":"\u7406\u8bba\u7b80\u4ecb \u4f8b\u5982: Hadoop\u6d41\u53ef\u4ee5\u50cfLinux\u547d\u4ee4\u4e00\u6837\u6267\u884c cat inputFile.txt | python mapper.py | sort | python reducer.py > outputFile.txt \u7c7b\u4f3c\u7684Hadoop\u6d41\u5c31\u53ef\u4ee5\u5728\u591a\u53f0\u673a\u5668\u4e0a\u5206\u5e03\u5f0f\u6267\u884c\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7Linux\u547d\u4ee4\u6765\u6d4b\u8bd5Python\u8bed\u8a00\u7f16\u5199\u7684MapReduce\u811a\u672c\u3002 \u5b9e\u6218\u811a\u672c # \u6d4b\u8bd5 Mapper # Linux cat db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py # Window # python src/python/15.BigData_MapReduce/mrMeanMapper.py < db/15.BigData_MapReduce/inputFile.txt # \u6d4b\u8bd5 Reducer # Linux cat db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py | python src/python/15.BigData_MapReduce/mrMeanReducer.py # Window # python src/python/15.BigData_MapReduce/mrMeanMapper.py < db/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanReducer.py","title":"Hadoop \u6d41(Python \u8c03\u7528)"},{"location":"ml/15.BigData_MapReduce/#mapreduce","text":"","title":"MapReduce \u673a\u5668\u5b66\u4e60"},{"location":"ml/15.BigData_MapReduce/#mahout-in-action","text":"\u7b80\u5355\u8d1d\u53f6\u65af\uff1a\u5b83\u5c5e\u4e8e\u4e3a\u6570\u4e0d\u591a\u7684\u53ef\u4ee5\u5f88\u81ea\u7136\u7684\u4f7f\u7528MapReduce\u7684\u7b97\u6cd5\u3002\u901a\u8fc7\u7edf\u8ba1\u5728\u67d0\u4e2a\u7c7b\u522b\u4e0b\u67d0\u7279\u5f81\u7684\u6982\u7387\u3002 k-\u8fd1\u90bb\u7b97\u6cd5\uff1a\u9ad8\u7ef4\u6570\u636e\u4e0b\uff08\u5982\u6587\u672c\u3001\u56fe\u50cf\u548c\u89c6\u9891\uff09\u6d41\u884c\u7684\u8fd1\u90bb\u67e5\u627e\u65b9\u6cd5\u662f\u5c40\u90e8\u654f\u611f\u54c8\u5e0c\u7b97\u6cd5\u3002 \u652f\u6301\u5411\u91cf\u673a(SVM)\uff1a\u4f7f\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u6c42\u89e3\uff0c\u5982Pegasos\u7b97\u6cd5\u3002 \u5947\u5f02\u503c\u5206\u89e3\uff1aLanczos\u7b97\u6cd5\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6c42\u89e3\u8fd1\u4f3c\u7279\u5f81\u503c\u7684\u7b97\u6cd5\u3002 k-\u5747\u503c\u805a\u7c7b\uff1acanopy\u7b97\u6cd5\u521d\u59cb\u5316k\u4e2a\u7c07\uff0c\u7136\u540e\u518d\u8fd0\u884cK-\u5747\u503c\u6c42\u89e3\u7ed3\u679c\u3002","title":"Mahout in Action"},{"location":"ml/15.BigData_MapReduce/#mrjob-mapreduce","text":"\u7406\u8bba\u7b80\u4ecb MapReduce \u4f5c\u4e1a\u6d41\u81ea\u52a8\u5316\u7684\u6846\u67b6\uff1aCascading \u548c Oozie. mrjob \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u5b66\u4e60\u5de5\u5177\uff0c\u4e0e2010\u5e74\u5e95\u5b9e\u73b0\u4e86\u5f00\u6e90\uff0c\u6765\u4e4b\u4e8e Yelp(\u4e00\u4e2a\u9910\u5385\u70b9\u8bc4\u7f51\u7ad9). python src/python/15.BigData_MapReduce/mrMean.py < db/15.BigData_MapReduce/inputFile.txt > db/15.BigData_MapReduce/myOut.txt \u5b9e\u6218\u811a\u672c # \u6d4b\u8bd5 mrjob\u7684\u6848\u4f8b # \u5148\u6d4b\u8bd5\u4e00\u4e0bmapper\u65b9\u6cd5 # python src/python/15.BigData_MapReduce/mrMean.py --mapper < db/15.BigData_MapReduce/inputFile.txt # \u8fd0\u884c\u6574\u4e2a\u7a0b\u5e8f\uff0c\u79fb\u9664 --mapper \u5c31\u884c python src/python/15.BigData_MapReduce/mrMean.py < db/15.BigData_MapReduce/inputFile.txt","title":"\u4f7f\u7528 mrjob \u5e93\u5c06 MapReduce \u81ea\u52a8\u5316"},{"location":"ml/15.BigData_MapReduce/#svm-pegasos","text":"Pegasos\u662f\u6307\u539f\u59cb\u4f30\u8ba1\u68af\u5ea6\u6c42\u89e3\u5668(Peimal Estimated sub-GrAdient Solver)","title":"\u9879\u76ee\u6848\u4f8b\uff1a\u5206\u5e03\u5f0f SVM \u7684 Pegasos \u7b97\u6cd5"},{"location":"ml/15.BigData_MapReduce/#pegasos","text":"\u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u6311\u9009\u4e00\u4e9b\u6837\u672c\u70b9\u6dfb\u52a0\u5230\u5f85\u5904\u7406\u5217\u8868\u4e2d \u6309\u5e8f\u5224\u65ad\u6bcf\u4e2a\u6837\u672c\u70b9\u662f\u5426\u88ab\u6b63\u786e\u5206\u7c7b \u5982\u679c\u662f\u5219\u5ffd\u7565 \u5982\u679c\u4e0d\u662f\u5219\u5c06\u5176\u52a0\u5165\u5230\u5f85\u66f4\u65b0\u96c6\u5408\u3002 \u6279\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u6743\u91cd\u5411\u91cf\u6309\u7167\u8fd9\u4e9b\u9519\u5206\u7684\u6837\u672c\u8fdb\u884c\u66f4\u65b0\u3002 \u4e0a\u8ff0\u7b97\u6cd5\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a \u5c06 \u56de\u5f52\u7cfb\u6570w \u521d\u59cb\u5316\u4e3a0 \u5bf9\u6bcf\u6b21\u6279\u5904\u7406 \u968f\u673a\u9009\u62e9 k \u4e2a\u6837\u672c\u70b9(\u5411\u91cf) \u5bf9\u6bcf\u4e2a\u5411\u91cf \u5982\u679c\u8be5\u5411\u91cf\u88ab\u9519\u5206\uff1a \u66f4\u65b0\u6743\u91cd\u5411\u91cf w \u7d2f\u52a0\u5bf9 w \u7684\u66f4\u65b0","title":"Pegasos \u5de5\u4f5c\u539f\u7406"},{"location":"ml/15.BigData_MapReduce/#_3","text":"\u6536\u96c6\u6570\u636e\uff1a\u6570\u636e\u6309\u6587\u672c\u683c\u5f0f\u5b58\u653e\u3002 \u51c6\u5907\u6570\u636e\uff1a\u8f93\u5165\u6570\u636e\u5df2\u7ecf\u662f\u53ef\u7528\u7684\u683c\u5f0f\uff0c\u6240\u4ee5\u4e0d\u9700\u4efb\u4f55\u51c6\u5907\u5de5\u4f5c\u3002\u5982\u679c\u4f60\u9700\u8981\u89e3\u6790\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\uff0c\u5efa\u8bae\u4f7f\u7528 map \u4f5c\u4e1a\u6765\u5b8c\u6210\uff0c\u4ece\u800c\u8fbe\u5230\u5e76\u884c\u5904\u7406\u7684\u76ee\u7684\u3002 \u5206\u6790\u6570\u636e\uff1a\u65e0\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4e0e\u666e\u901a\u7684 SVM \u4e00\u6837\uff0c\u5728\u5206\u7c7b\u5668\u8bad\u7ec3\u4e0a\u4ecd\u9700\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u53ef\u89c6\u5316\u4e4b\u540e\uff0c\u89c2\u5bdf\u8d85\u5e73\u9762\uff0c\u5224\u65ad\u7b97\u6cd5\u662f\u5426\u6709\u6548\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u4e0d\u4f1a\u5c55\u793a\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\uff0c\u4f46\u4f1a\u5c55\u793a\u5982\u4f55\u5728\u5927\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3SVM\u3002\u8be5\u7b97\u6cd5\u5176\u4e2d\u4e00\u4e2a\u5e94\u7528\u573a\u666f\u5c31\u662f\u672c\u6587\u5206\u7c7b\uff0c\u901a\u5e38\u5728\u6587\u672c\u5206\u7c7b\u91cc\u53ef\u80fd\u6709\u5927\u91cf\u7684\u6587\u6863\u548c\u6210\u5343\u4e0a\u4e07\u7684\u7279\u5f81\u3002 \u6536\u96c6\u6570\u636e \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 0.365032 2.465645 -1 -2.494175 -0.292380 -1 -3.039364 -0.123108 -1 1.348150 0.255696 1 2.768494 1.234954 1 1.232328 -0.601198 1 \u51c6\u5907\u6570\u636e def loadDataSet(fileName): dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): lineArr = line.strip().split('\\t') # dataMat.append([float(lineArr[0]), float(lineArr[1]), float(lineArr[2])]) dataMat.append([float(lineArr[0]), float(lineArr[1])]) labelMat.append(float(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u65e0 \u8bad\u7ec3\u7b97\u6cd5 def batchPegasos(dataSet, labels, lam, T, k): \"\"\"batchPegasos() Args: dataMat \u7279\u5f81\u96c6\u5408 labels \u5206\u7c7b\u7ed3\u679c\u96c6\u5408 lam \u56fa\u5b9a\u503c T \u8fed\u4ee3\u6b21\u6570 k \u5f85\u5904\u7406\u5217\u8868\u5927\u5c0f Returns: w \u56de\u5f52\u7cfb\u6570 \"\"\" m, n = shape(dataSet) w = zeros(n) # \u56de\u5f52\u7cfb\u6570 dataIndex = range(m) for t in range(1, T+1): wDelta = mat(zeros(n)) # \u91cd\u7f6e wDelta # \u5b83\u662f\u5b66\u4e60\u7387\uff0c\u4ee3\u8868\u4e86\u6743\u91cd\u8c03\u6574\u5e45\u5ea6\u7684\u5927\u5c0f\u3002\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u968f\u673a\u68af\u5ea6\u7684\u6b65\u957f\uff0c\u4f7f\u5b83\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4fbf\u4e8e\u62df\u5408\uff09 # \u8f93\u5165T\u548cK\u5206\u522b\u8bbe\u5b9a\u4e86\u8fed\u4ee3\u6b21\u6570\u548c\u5f85\u5904\u7406\u5217\u8868\u7684\u5927\u5c0f\u3002\u5728T\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u9700\u8981\u91cd\u65b0\u8ba1\u7b97eta eta = 1.0/(lam*t) random.shuffle(dataIndex) for j in range(k): # \u5168\u90e8\u7684\u8bad\u7ec3\u96c6 \u5185\u5faa\u73af\u4e2d\u6267\u884c\u6279\u5904\u7406\uff0c\u5c06\u5206\u7c7b\u9519\u8bef\u7684\u503c\u5168\u90e8\u505a\u7d2f\u52a0\u540e\u66f4\u65b0\u6743\u91cd\u5411\u91cf i = dataIndex[j] p = predict(w, dataSet[i, :]) # mapper \u4ee3\u7801 # \u5982\u679c\u9884\u6d4b\u6b63\u786e\uff0c\u5e76\u4e14\u9884\u6d4b\u7ed3\u679c\u7684\u7edd\u5bf9\u503c>=1\uff0c\u56e0\u4e3a\u6700\u5927\u95f4\u9694\u4e3a1, \u8ba4\u4e3a\u6ca1\u95ee\u9898\u3002 # \u5426\u5219\u7b97\u662f\u9884\u6d4b\u9519\u8bef, \u901a\u8fc7\u9884\u6d4b\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u6765\u7d2f\u8ba1\u66f4\u65b0w. if labels[i]*p < 1: # mapper \u4ee3\u7801 wDelta += labels[i]*dataSet[i, :].A # \u7d2f\u79ef\u53d8\u5316 # w\u901a\u8fc7\u4e0d\u65ad\u7684\u968f\u673a\u68af\u5ea6\u7684\u65b9\u5f0f\u6765\u4f18\u5316 w = (1.0 - 1/t)*w + (eta/k)*wDelta # \u5728\u6bcf\u4e2a T\u4e0a\u5e94\u7528\u66f4\u6539 # print '-----', w # print '++++++', w return w \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/15.BigData_MapReduce/pegasos.py \u8fd0\u884c\u65b9\u5f0f\uff1a python /opt/git/MachineLearning/src/python/15.BigData_MapReduce/mrSVM.py < db/15.BigData_MapReduce/inputFile.txt MR\u7248\u672c\u7684\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/15.BigData_MapReduce/mrSVM.py \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/16.RecommendedSystem/","text":"\u7b2c16\u7ae0 \u63a8\u8350\u7cfb\u7edf \u80cc\u666f\u4e0e\u6316\u6398\u76ee\u6807 \u968f\u7740\u4e92\u8054\u7f51\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u7528\u6237\u5f88\u96be\u5feb\u901f\u4ece\u6d77\u91cf\u4fe1\u606f\u4e2d\u5bfb\u627e\u5230\u81ea\u5df1\u611f\u5174\u8da3\u7684\u4fe1\u606f\u3002\u56e0\u6b64\u8bde\u751f\u4e86\uff1a\u641c\u7d22\u5f15\u64ce+\u63a8\u8350\u7cfb\u7edf \u672c\u7ae0\u8282-\u63a8\u8350\u7cfb\u7edf\uff1a \u5e2e\u52a9\u7528\u6237\u53d1\u73b0\u5176\u611f\u5174\u8da3\u548c\u53ef\u80fd\u611f\u5174\u8da3\u7684\u4fe1\u606f\u3002 \u8ba9\u7f51\u7ad9\u4ef7\u503c\u4fe1\u606f\u8131\u9896\u800c\u51fa\uff0c\u5f97\u5230\u5e7f\u5927\u7528\u6237\u7684\u8ba4\u53ef\u3002 \u63d0\u9ad8\u7528\u6237\u5bf9\u7f51\u7ad9\u7684\u5fe0\u8bda\u5ea6\u548c\u5173\u6ce8\u5ea6\uff0c\u5efa\u7acb\u7a33\u56fa\u7528\u6237\u7fa4\u4f53\u3002 \u5206\u6790\u65b9\u6cd5\u4e0e\u8fc7\u7a0b \u672c\u6848\u4f8b\u7684\u76ee\u6807\u662f\u5bf9\u7528\u6237\u8fdb\u884c\u63a8\u8350\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u5c06\u7528\u6237\u4e0e\u7269\u54c1\uff08\u672c\u6b21\u6307\u7f51\u9875\uff09\u4e4b\u95f4\u5efa\u7acb\u8054\u7cfb\u3002 \u7531\u4e8e\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u6570\u636e\u8bb0\u5f55\u5f88\u591a\uff0c\u5982\u679c\u4e0d\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u5904\u7406\uff0c\u5bf9\u6240\u6709\u7684\u8bb0\u5f55\u76f4\u63a5\u91c7\u7528\u63a8\u8350\u7cfb\u7edf\u8fdb\u884c\u63a8\u8350\uff0c\u8fd9\u6837\u4f1a\u5b58\u5728\u4e00\u4e0b\u95ee\u9898\u3002 \u6570\u636e\u91cf\u592a\u5927\u610f\u5473\u7740\u7269\u54c1\u6570\u4e0e\u7528\u6237\u6570\u5f88\u591a\uff0c\u5728\u6a21\u578b\u6784\u5efa\u7528\u6237\u4e0e\u7269\u54c1\u7a00\u758f\u77e9\u9635\u65f6\uff0c\u51fa\u73b0\u8bbe\u5907\u5185\u5b58\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u6a21\u578b\u8ba1\u7b97\u9700\u8981\u6d88\u8017\u5927\u91cf\u7684\u65f6\u95f4\u3002 \u7528\u6237\u533a\u522b\u5f88\u5927\uff0c\u4e0d\u540c\u7684\u7528\u6237\u5173\u6ce8\u7684\u4fe1\u606f\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5373\u4f7f\u80fd\u591f\u5f97\u5230\u63a8\u8350\u7ed3\u679c\uff0c\u5176\u6548\u679c\u4e5f\u4f1a\u4e0d\u597d\u3002 \u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u4e0a\u8ff0\u95ee\u9898\uff0c\u9700\u8981\u8fdb\u884c\u5206\u7c7b\u5904\u7406\u4e0e\u5206\u6790\u3002 \u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u5174\u8da3\u7231\u597d\u4ee5\u53ca\u9700\u6c42\u8fdb\u884c\u5206\u7c7b\u3002 \u56e0\u4e3a\u5728\u7528\u6237\u8bbf\u95ee\u8bb0\u5f55\u4e2d\uff0c\u6ca1\u6709\u8bb0\u5f55\u7528\u6237\u8bbf\u95ee\u9875\u9762\u65f6\u95f4\u7684\u957f\u77ed\uff0c\u56e0\u6b64\u4e0d\u5bb9\u6613\u5224\u65ad\u7528\u6237\u5174\u8da3\u7231\u597d\u3002 \u56e0\u6b64\uff0c\u672c\u6587\u6839\u636e\u7528\u6237\u6d4f\u89c8\u7684\u7f51\u9875\u4fe1\u606f\u8fdb\u884c\u5206\u6790\u5904\u7406\uff0c\u4e3b\u8981\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5904\u7406\uff1a\u4ee5\u7528\u6237\u6d4f\u89c8\u7f51\u9875\u7684\u7c7b\u578b\u8fdb\u884c\u5206\u7c7b\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7c7b\u578b\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u63a8\u8350\u3002 \u5206\u6790\u8fc7\u7a0b\u5982\u4e0b\uff1a \u4ece\u7cfb\u7edf\u4e2d\u83b7\u53d6\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u539f\u59cb\u8bb0\u5f55\u3002 \u5bf9\u6570\u636e\u8fdb\u884c\u591a\u7ef4\u5206\u6790\uff0c\u5305\u62ec\u7528\u6237\u8bbf\u95ee\u5185\u5bb9\uff0c\u6d41\u5931\u7528\u6237\u5206\u6790\u4ee5\u53ca\u7528\u6237\u5206\u7c7b\u7b49\u5206\u6790\u3002 \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5305\u542b\u6570\u636e\u53bb\u91cd\u3001\u6570\u636e\u53d8\u6362\u548c\u6570\u636e\u5206\u7c7b\u97a5\u5904\u7406\u8fc7\u7a0b\u3002 \u4ee5\u7528\u6237\u8bbf\u95eehtml\u540e\u7f00\u7684\u9875\u9762\u4e3a\u5173\u952e\u6761\u4ef6\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 \u5bf9\u6bd4\u591a\u79cd\u63a8\u8350\u7b97\u6cd5\u8fdb\u884c\u63a8\u8350\uff0c\u901a\u8fc7\u6a21\u578b\u8bc4\u4ef7\uff0c\u5f97\u5230\u6bd4\u8f83\u597d\u7684\u667a\u80fd\u63a8\u8350\u6a21\u578b\u3002\u901a\u8fc7\u6a21\u578b\u5bf9\u6837\u672c\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u83b7\u5f97\u63a8\u8350\u7ed3\u679c\u3002 \u4e3b\u6d41\u63a8\u8350\u7b97\u6cd5 \u63a8\u8350\u65b9\u6cd5 \u63cf\u8ff0 \u57fa\u4e8e\u5185\u5bb9\u63a8\u8350 \u534f\u540c\u8fc7\u6ee4\u63a8\u8350 \u57fa\u4e8e\u89c4\u5219\u63a8\u8350 \u57fa\u4e8e\u6548\u7528\u63a8\u8350 \u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350 \u7ec4\u5408\u63a8\u8350 \u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350 \u57fa\u4e8e\u77e5\u8bc6\u7684\u63a8\u8350\uff08Knowledge-based Recommendation\uff09\u5728\u67d0\u79cd\u7a0b\u5ea6\u662f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u63a8\u7406\uff08Inference\uff09\u6280\u672f\uff0c\u5b83\u4e0d\u662f\u5efa\u7acb\u5728\u7528\u6237\u9700\u8981\u548c\u504f\u597d\u57fa\u7840\u4e0a\u63a8\u8350\u7684\u3002\u57fa\u4e8e\u77e5\u8bc6\u7684\u65b9\u6cd5\u56e0\u5b83\u4eec\u6240\u7528\u7684\u529f\u80fd\u77e5\u8bc6\u4e0d\u540c\u800c\u6709\u660e\u663e\u533a\u522b\u3002\u6548\u7528\u77e5\u8bc6\uff08Functional Knowledge\uff09\u662f\u4e00\u79cd\u5173\u4e8e\u4e00\u4e2a\u9879\u76ee\u5982\u4f55\u6ee1\u8db3\u67d0\u4e00\u7279\u5b9a\u7528\u6237\u7684\u77e5\u8bc6\uff0c\u56e0\u6b64\u80fd\u89e3\u91ca\u9700\u8981\u548c\u63a8\u8350\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u7528\u6237\u8d44\u6599\u53ef\u4ee5\u662f\u4efb\u4f55\u80fd\u652f\u6301\u63a8\u7406\u7684\u77e5\u8bc6\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u662f\u7528\u6237\u5df2\u7ecf\u89c4\u8303\u5316\u7684\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u66f4\u8be6\u7ec6\u7684\u7528\u6237\u9700\u8981\u7684\u8868\u793a\u3002 \u534f\u540c\u8fc7\u6ee4\u63a8\u8350 memory-based\u63a8\u8350 Item-based\u65b9\u6cd5 User-based\u65b9\u6cd5 Memory-based\u63a8\u8350\u65b9\u6cd5\u901a\u8fc7\u6267\u884c\u6700\u8fd1\u90bb\u641c\u7d22\uff0c\u628a\u6bcf\u4e00\u4e2aItem\u6216\u8005User\u770b\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u8ba1\u7b97\u5176\u4ed6\u6240\u6709Item\u6216\u8005User\u4e0e\u5b83\u7684\u76f8\u4f3c\u5ea6\u3002\u6709\u4e86Item\u6216\u8005User\u4e4b\u95f4\u7684\u4e24\u4e24\u76f8\u4f3c\u5ea6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u9884\u6d4b\u4e0e\u63a8\u8350\u4e86\u3002 model-based\u63a8\u8350 Model-based\u63a8\u8350\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u4e3aMatrix factorization. \u77e9\u9635\u5206\u89e3\u901a\u8fc7\u628a\u539f\u59cb\u7684\u8bc4\u5206\u77e9\u9635R\u5206\u89e3\u4e3a\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u5e76\u4e14\u53ea\u8003\u8651\u6709\u8bc4\u5206\u7684\u503c\uff0c\u8bad\u7ec3\u65f6\u4e0d\u8003\u8651missing\u9879\u7684\u503c\u3002R\u77e9\u9635\u5206\u89e3\u6210\u4e3aU\u4e0eV\u4e24\u4e2a\u77e9\u9635\u540e\uff0c\u8bc4\u5206\u77e9\u9635R\u4e2dmissing\u7684\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7U\u77e9\u9635\u4e2d\u7684\u67d0\u5217\u548cV\u77e9\u9635\u7684\u67d0\u884c\u76f8\u4e58\u5f97\u5230 \u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\u51fd\u6570: U\u77e9\u9635\u4e0eV\u77e9\u9635\u7684\u53ef\u4ee5\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d(gradient descent)\u7b97\u6cd5\u6c42\u5f97\uff0c\u901a\u8fc7\u4ea4\u66ff\u66f4\u65b0u\u4e0ev\u591a\u6b21\u8fed\u4ee3\u6536\u655b\u4e4b\u540e\u53ef\u6c42\u51faU\u4e0eV\u3002 \u77e9\u9635\u5206\u89e3\u80cc\u540e\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u627e\u5230\u4e24\u4e2a\u77e9\u9635\uff0c\u5b83\u4eec\u76f8\u4e58\u4e4b\u540e\u5f97\u5230\u7684\u90a3\u4e2a\u77e9\u9635\u7684\u503c\uff0c\u4e0e\u8bc4\u5206\u77e9\u9635R\u4e2d\u6709\u503c\u7684\u4f4d\u7f6e\u4e2d\u7684\u503c\u5c3d\u53ef\u80fd\u63a5\u8fd1\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5206\u89e3\u51fa\u6765\u7684\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\u5c31\u5c3d\u53ef\u80fd\u8fd8\u539f\u4e86\u8bc4\u5206\u77e9\u9635R\uff0c\u56e0\u4e3a\u6709\u503c\u7684\u5730\u65b9\uff0c\u503c\u90fd\u76f8\u5dee\u5f97\u5c3d\u53ef\u80fd\u5730\u5c0f\uff0c\u90a3\u4e48missing\u7684\u503c\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\uff0c\u6bd4\u8f83\u7b26\u5408\u8d8b\u52bf\u3002 \u534f\u540c\u8fc7\u6ee4\u4e2d\u4e3b\u8981\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u95ee\u9898\uff1a\u7a00\u758f\u6027\u4e0e\u51b7\u542f\u52a8\u95ee\u9898\u3002\u5df2\u6709\u7684\u65b9\u6848\u901a\u5e38\u4f1a\u901a\u8fc7\u5f15\u5165\u591a\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u6e90\u6216\u8005\u8f85\u52a9\u4fe1\u606f(Side information)\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7528\u6237\u7684Side information\u53ef\u4ee5\u662f\u7528\u6237\u7684\u57fa\u672c\u4e2a\u4eba\u4fe1\u606f\u3001\u7528\u6237\u753b\u50cf\u4fe1\u606f\u7b49\uff0c\u800cItem\u7684Side information\u53ef\u4ee5\u662f\u7269\u54c1\u7684content\u4fe1\u606f\u7b49\u3002 \u6548\u679c\u8bc4\u4f30 \u53ec\u56de\u7387\u548c\u51c6\u786e\u7387 \u3010\u4eba\u4e3a\u7edf\u8ba1\u5206\u6790\u3011 F\u503c(P-R\u66f2\u7ebf) \u3010\u504f\u91cd\uff1a\u975e\u5747\u8861\u95ee\u9898\u3011 ROC\u548cAUC \u3010\u504f\u91cd\uff1a\u4e0d\u540c\u7ed3\u679c\u7684\u5bf9\u6bd4\u3011 \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN \u6458\u5f55\u7684\u539f\u6587\u5730\u5740\uff1a \u63a8\u8350\u7cfb\u7edf\u4e2d\u5e38\u7528\u7b97\u6cd5 \u4ee5\u53ca\u4f18\u70b9\u7f3a\u70b9\u5bf9\u6bd4 \u63a8\u8350\u7b97\u6cd5\u7684\u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350 \u63a8\u8350\u7cfb\u7edf\u4e2d\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u6df7\u5408\u534f\u540c\u8fc7\u6ee4\u6a21\u578b","title":"\u7b2c16\u7ae0_\u63a8\u8350\u7cfb\u7edf"},{"location":"ml/16.RecommendedSystem/#16","text":"","title":"\u7b2c16\u7ae0 \u63a8\u8350\u7cfb\u7edf"},{"location":"ml/16.RecommendedSystem/#_1","text":"\u968f\u7740\u4e92\u8054\u7f51\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u7528\u6237\u5f88\u96be\u5feb\u901f\u4ece\u6d77\u91cf\u4fe1\u606f\u4e2d\u5bfb\u627e\u5230\u81ea\u5df1\u611f\u5174\u8da3\u7684\u4fe1\u606f\u3002\u56e0\u6b64\u8bde\u751f\u4e86\uff1a\u641c\u7d22\u5f15\u64ce+\u63a8\u8350\u7cfb\u7edf \u672c\u7ae0\u8282-\u63a8\u8350\u7cfb\u7edf\uff1a \u5e2e\u52a9\u7528\u6237\u53d1\u73b0\u5176\u611f\u5174\u8da3\u548c\u53ef\u80fd\u611f\u5174\u8da3\u7684\u4fe1\u606f\u3002 \u8ba9\u7f51\u7ad9\u4ef7\u503c\u4fe1\u606f\u8131\u9896\u800c\u51fa\uff0c\u5f97\u5230\u5e7f\u5927\u7528\u6237\u7684\u8ba4\u53ef\u3002 \u63d0\u9ad8\u7528\u6237\u5bf9\u7f51\u7ad9\u7684\u5fe0\u8bda\u5ea6\u548c\u5173\u6ce8\u5ea6\uff0c\u5efa\u7acb\u7a33\u56fa\u7528\u6237\u7fa4\u4f53\u3002","title":"\u80cc\u666f\u4e0e\u6316\u6398\u76ee\u6807"},{"location":"ml/16.RecommendedSystem/#_2","text":"\u672c\u6848\u4f8b\u7684\u76ee\u6807\u662f\u5bf9\u7528\u6237\u8fdb\u884c\u63a8\u8350\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u5c06\u7528\u6237\u4e0e\u7269\u54c1\uff08\u672c\u6b21\u6307\u7f51\u9875\uff09\u4e4b\u95f4\u5efa\u7acb\u8054\u7cfb\u3002 \u7531\u4e8e\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u6570\u636e\u8bb0\u5f55\u5f88\u591a\uff0c\u5982\u679c\u4e0d\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u5904\u7406\uff0c\u5bf9\u6240\u6709\u7684\u8bb0\u5f55\u76f4\u63a5\u91c7\u7528\u63a8\u8350\u7cfb\u7edf\u8fdb\u884c\u63a8\u8350\uff0c\u8fd9\u6837\u4f1a\u5b58\u5728\u4e00\u4e0b\u95ee\u9898\u3002 \u6570\u636e\u91cf\u592a\u5927\u610f\u5473\u7740\u7269\u54c1\u6570\u4e0e\u7528\u6237\u6570\u5f88\u591a\uff0c\u5728\u6a21\u578b\u6784\u5efa\u7528\u6237\u4e0e\u7269\u54c1\u7a00\u758f\u77e9\u9635\u65f6\uff0c\u51fa\u73b0\u8bbe\u5907\u5185\u5b58\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u6a21\u578b\u8ba1\u7b97\u9700\u8981\u6d88\u8017\u5927\u91cf\u7684\u65f6\u95f4\u3002 \u7528\u6237\u533a\u522b\u5f88\u5927\uff0c\u4e0d\u540c\u7684\u7528\u6237\u5173\u6ce8\u7684\u4fe1\u606f\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5373\u4f7f\u80fd\u591f\u5f97\u5230\u63a8\u8350\u7ed3\u679c\uff0c\u5176\u6548\u679c\u4e5f\u4f1a\u4e0d\u597d\u3002 \u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u4e0a\u8ff0\u95ee\u9898\uff0c\u9700\u8981\u8fdb\u884c\u5206\u7c7b\u5904\u7406\u4e0e\u5206\u6790\u3002 \u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u5174\u8da3\u7231\u597d\u4ee5\u53ca\u9700\u6c42\u8fdb\u884c\u5206\u7c7b\u3002 \u56e0\u4e3a\u5728\u7528\u6237\u8bbf\u95ee\u8bb0\u5f55\u4e2d\uff0c\u6ca1\u6709\u8bb0\u5f55\u7528\u6237\u8bbf\u95ee\u9875\u9762\u65f6\u95f4\u7684\u957f\u77ed\uff0c\u56e0\u6b64\u4e0d\u5bb9\u6613\u5224\u65ad\u7528\u6237\u5174\u8da3\u7231\u597d\u3002 \u56e0\u6b64\uff0c\u672c\u6587\u6839\u636e\u7528\u6237\u6d4f\u89c8\u7684\u7f51\u9875\u4fe1\u606f\u8fdb\u884c\u5206\u6790\u5904\u7406\uff0c\u4e3b\u8981\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5904\u7406\uff1a\u4ee5\u7528\u6237\u6d4f\u89c8\u7f51\u9875\u7684\u7c7b\u578b\u8fdb\u884c\u5206\u7c7b\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7c7b\u578b\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u63a8\u8350\u3002 \u5206\u6790\u8fc7\u7a0b\u5982\u4e0b\uff1a \u4ece\u7cfb\u7edf\u4e2d\u83b7\u53d6\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u539f\u59cb\u8bb0\u5f55\u3002 \u5bf9\u6570\u636e\u8fdb\u884c\u591a\u7ef4\u5206\u6790\uff0c\u5305\u62ec\u7528\u6237\u8bbf\u95ee\u5185\u5bb9\uff0c\u6d41\u5931\u7528\u6237\u5206\u6790\u4ee5\u53ca\u7528\u6237\u5206\u7c7b\u7b49\u5206\u6790\u3002 \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5305\u542b\u6570\u636e\u53bb\u91cd\u3001\u6570\u636e\u53d8\u6362\u548c\u6570\u636e\u5206\u7c7b\u97a5\u5904\u7406\u8fc7\u7a0b\u3002 \u4ee5\u7528\u6237\u8bbf\u95eehtml\u540e\u7f00\u7684\u9875\u9762\u4e3a\u5173\u952e\u6761\u4ef6\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 \u5bf9\u6bd4\u591a\u79cd\u63a8\u8350\u7b97\u6cd5\u8fdb\u884c\u63a8\u8350\uff0c\u901a\u8fc7\u6a21\u578b\u8bc4\u4ef7\uff0c\u5f97\u5230\u6bd4\u8f83\u597d\u7684\u667a\u80fd\u63a8\u8350\u6a21\u578b\u3002\u901a\u8fc7\u6a21\u578b\u5bf9\u6837\u672c\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u83b7\u5f97\u63a8\u8350\u7ed3\u679c\u3002","title":"\u5206\u6790\u65b9\u6cd5\u4e0e\u8fc7\u7a0b"},{"location":"ml/16.RecommendedSystem/#_3","text":"\u63a8\u8350\u65b9\u6cd5 \u63cf\u8ff0 \u57fa\u4e8e\u5185\u5bb9\u63a8\u8350 \u534f\u540c\u8fc7\u6ee4\u63a8\u8350 \u57fa\u4e8e\u89c4\u5219\u63a8\u8350 \u57fa\u4e8e\u6548\u7528\u63a8\u8350 \u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350 \u7ec4\u5408\u63a8\u8350","title":"\u4e3b\u6d41\u63a8\u8350\u7b97\u6cd5"},{"location":"ml/16.RecommendedSystem/#_4","text":"\u57fa\u4e8e\u77e5\u8bc6\u7684\u63a8\u8350\uff08Knowledge-based Recommendation\uff09\u5728\u67d0\u79cd\u7a0b\u5ea6\u662f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u63a8\u7406\uff08Inference\uff09\u6280\u672f\uff0c\u5b83\u4e0d\u662f\u5efa\u7acb\u5728\u7528\u6237\u9700\u8981\u548c\u504f\u597d\u57fa\u7840\u4e0a\u63a8\u8350\u7684\u3002\u57fa\u4e8e\u77e5\u8bc6\u7684\u65b9\u6cd5\u56e0\u5b83\u4eec\u6240\u7528\u7684\u529f\u80fd\u77e5\u8bc6\u4e0d\u540c\u800c\u6709\u660e\u663e\u533a\u522b\u3002\u6548\u7528\u77e5\u8bc6\uff08Functional Knowledge\uff09\u662f\u4e00\u79cd\u5173\u4e8e\u4e00\u4e2a\u9879\u76ee\u5982\u4f55\u6ee1\u8db3\u67d0\u4e00\u7279\u5b9a\u7528\u6237\u7684\u77e5\u8bc6\uff0c\u56e0\u6b64\u80fd\u89e3\u91ca\u9700\u8981\u548c\u63a8\u8350\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u7528\u6237\u8d44\u6599\u53ef\u4ee5\u662f\u4efb\u4f55\u80fd\u652f\u6301\u63a8\u7406\u7684\u77e5\u8bc6\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u662f\u7528\u6237\u5df2\u7ecf\u89c4\u8303\u5316\u7684\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u66f4\u8be6\u7ec6\u7684\u7528\u6237\u9700\u8981\u7684\u8868\u793a\u3002","title":"\u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350"},{"location":"ml/16.RecommendedSystem/#_5","text":"memory-based\u63a8\u8350 Item-based\u65b9\u6cd5 User-based\u65b9\u6cd5 Memory-based\u63a8\u8350\u65b9\u6cd5\u901a\u8fc7\u6267\u884c\u6700\u8fd1\u90bb\u641c\u7d22\uff0c\u628a\u6bcf\u4e00\u4e2aItem\u6216\u8005User\u770b\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u8ba1\u7b97\u5176\u4ed6\u6240\u6709Item\u6216\u8005User\u4e0e\u5b83\u7684\u76f8\u4f3c\u5ea6\u3002\u6709\u4e86Item\u6216\u8005User\u4e4b\u95f4\u7684\u4e24\u4e24\u76f8\u4f3c\u5ea6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u9884\u6d4b\u4e0e\u63a8\u8350\u4e86\u3002 model-based\u63a8\u8350 Model-based\u63a8\u8350\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u4e3aMatrix factorization. \u77e9\u9635\u5206\u89e3\u901a\u8fc7\u628a\u539f\u59cb\u7684\u8bc4\u5206\u77e9\u9635R\u5206\u89e3\u4e3a\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u5e76\u4e14\u53ea\u8003\u8651\u6709\u8bc4\u5206\u7684\u503c\uff0c\u8bad\u7ec3\u65f6\u4e0d\u8003\u8651missing\u9879\u7684\u503c\u3002R\u77e9\u9635\u5206\u89e3\u6210\u4e3aU\u4e0eV\u4e24\u4e2a\u77e9\u9635\u540e\uff0c\u8bc4\u5206\u77e9\u9635R\u4e2dmissing\u7684\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7U\u77e9\u9635\u4e2d\u7684\u67d0\u5217\u548cV\u77e9\u9635\u7684\u67d0\u884c\u76f8\u4e58\u5f97\u5230 \u77e9\u9635\u5206\u89e3\u7684\u76ee\u6807\u51fd\u6570: U\u77e9\u9635\u4e0eV\u77e9\u9635\u7684\u53ef\u4ee5\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d(gradient descent)\u7b97\u6cd5\u6c42\u5f97\uff0c\u901a\u8fc7\u4ea4\u66ff\u66f4\u65b0u\u4e0ev\u591a\u6b21\u8fed\u4ee3\u6536\u655b\u4e4b\u540e\u53ef\u6c42\u51faU\u4e0eV\u3002 \u77e9\u9635\u5206\u89e3\u80cc\u540e\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u627e\u5230\u4e24\u4e2a\u77e9\u9635\uff0c\u5b83\u4eec\u76f8\u4e58\u4e4b\u540e\u5f97\u5230\u7684\u90a3\u4e2a\u77e9\u9635\u7684\u503c\uff0c\u4e0e\u8bc4\u5206\u77e9\u9635R\u4e2d\u6709\u503c\u7684\u4f4d\u7f6e\u4e2d\u7684\u503c\u5c3d\u53ef\u80fd\u63a5\u8fd1\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5206\u89e3\u51fa\u6765\u7684\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\u5c31\u5c3d\u53ef\u80fd\u8fd8\u539f\u4e86\u8bc4\u5206\u77e9\u9635R\uff0c\u56e0\u4e3a\u6709\u503c\u7684\u5730\u65b9\uff0c\u503c\u90fd\u76f8\u5dee\u5f97\u5c3d\u53ef\u80fd\u5730\u5c0f\uff0c\u90a3\u4e48missing\u7684\u503c\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\uff0c\u6bd4\u8f83\u7b26\u5408\u8d8b\u52bf\u3002 \u534f\u540c\u8fc7\u6ee4\u4e2d\u4e3b\u8981\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u95ee\u9898\uff1a\u7a00\u758f\u6027\u4e0e\u51b7\u542f\u52a8\u95ee\u9898\u3002\u5df2\u6709\u7684\u65b9\u6848\u901a\u5e38\u4f1a\u901a\u8fc7\u5f15\u5165\u591a\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u6e90\u6216\u8005\u8f85\u52a9\u4fe1\u606f(Side information)\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7528\u6237\u7684Side information\u53ef\u4ee5\u662f\u7528\u6237\u7684\u57fa\u672c\u4e2a\u4eba\u4fe1\u606f\u3001\u7528\u6237\u753b\u50cf\u4fe1\u606f\u7b49\uff0c\u800cItem\u7684Side information\u53ef\u4ee5\u662f\u7269\u54c1\u7684content\u4fe1\u606f\u7b49\u3002","title":"\u534f\u540c\u8fc7\u6ee4\u63a8\u8350"},{"location":"ml/16.RecommendedSystem/#_6","text":"\u53ec\u56de\u7387\u548c\u51c6\u786e\u7387 \u3010\u4eba\u4e3a\u7edf\u8ba1\u5206\u6790\u3011 F\u503c(P-R\u66f2\u7ebf) \u3010\u504f\u91cd\uff1a\u975e\u5747\u8861\u95ee\u9898\u3011 ROC\u548cAUC \u3010\u504f\u91cd\uff1a\u4e0d\u540c\u7ed3\u679c\u7684\u5bf9\u6bd4\u3011 \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN \u6458\u5f55\u7684\u539f\u6587\u5730\u5740\uff1a \u63a8\u8350\u7cfb\u7edf\u4e2d\u5e38\u7528\u7b97\u6cd5 \u4ee5\u53ca\u4f18\u70b9\u7f3a\u70b9\u5bf9\u6bd4 \u63a8\u8350\u7b97\u6cd5\u7684\u57fa\u4e8e\u77e5\u8bc6\u63a8\u8350 \u63a8\u8350\u7cfb\u7edf\u4e2d\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u6df7\u5408\u534f\u540c\u8fc7\u6ee4\u6a21\u578b","title":"\u6548\u679c\u8bc4\u4f30"},{"location":"ml/2.KNN/","text":"\u7b2c2\u7ae0 k-\u8fd1\u90bb\u7b97\u6cd5 KNN \u6982\u8ff0 k-\u8fd1\u90bb\uff08kNN, k-NearestNeighbor\uff09\u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u672c\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u8ba8\u8bba\u5206\u7c7b\u95ee\u9898\u4e2d\u7684 k-\u8fd1\u90bb\u7b97\u6cd5\u3002 \u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u8fd1\u6731\u8005\u8d64\u8fd1\u58a8\u8005\u9ed1\uff01 k \u8fd1\u90bb\u7b97\u6cd5\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u7279\u5f81\u7a7a\u95f4\u7684\u70b9\uff1b\u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u53d6\u591a\u7c7b\u3002k \u8fd1\u90bb\u7b97\u6cd5\u5047\u8bbe\u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u7684\u5b9e\u4f8b\u7c7b\u522b\u5df2\u5b9a\u3002\u5206\u7c7b\u65f6\uff0c\u5bf9\u65b0\u7684\u5b9e\u4f8b\uff0c\u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b\uff0c\u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b\u3002\u56e0\u6b64\uff0ck\u8fd1\u90bb\u7b97\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002 k \u8fd1\u90bb\u7b97\u6cd5\u5b9e\u9645\u4e0a\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206\uff0c\u5e76\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\u201c\u6a21\u578b\u201d\u3002 k\u503c\u7684\u9009\u62e9\u3001\u8ddd\u79bb\u5ea6\u91cf\u4ee5\u53ca\u5206\u7c7b\u51b3\u7b56\u89c4\u5219\u662fk\u8fd1\u90bb\u7b97\u6cd5\u7684\u4e09\u4e2a\u57fa\u672c\u8981\u7d20\u3002 KNN \u573a\u666f \u7535\u5f71\u53ef\u4ee5\u6309\u7167\u9898\u6750\u5206\u7c7b\uff0c\u90a3\u4e48\u5982\u4f55\u533a\u5206 \u52a8\u4f5c\u7247 \u548c \u7231\u60c5\u7247 \u5462\uff1f 1. \u52a8\u4f5c\u7247\uff1a\u6253\u6597\u6b21\u6570\u66f4\u591a 2. \u7231\u60c5\u7247\uff1a\u4eb2\u543b\u6b21\u6570\u66f4\u591a \u57fa\u4e8e\u7535\u5f71\u4e2d\u7684\u4eb2\u543b\u3001\u6253\u6597\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u7528 k-\u8fd1\u90bb\u7b97\u6cd5\u6784\u9020\u7a0b\u5e8f\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u5212\u5206\u7535\u5f71\u7684\u9898\u6750\u7c7b\u578b\u3002 \u73b0\u5728\u6839\u636e\u4e0a\u9762\u6211\u4eec\u5f97\u5230\u7684\u6837\u672c\u96c6\u4e2d\u6240\u6709\u7535\u5f71\u4e0e\u672a\u77e5\u7535\u5f71\u7684\u8ddd\u79bb\uff0c\u6309\u7167\u8ddd\u79bb\u9012\u589e\u6392\u5e8f\uff0c\u53ef\u4ee5\u627e\u5230 k \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u7535\u5f71\u3002 \u5047\u5b9a k=3\uff0c\u5219\u4e09\u4e2a\u6700\u9760\u8fd1\u7684\u7535\u5f71\u4f9d\u6b21\u662f\uff0c He's Not Really into Dudes \u3001 Beautiful Woman \u548c California Man\u3002 knn \u7b97\u6cd5\u6309\u7167\u8ddd\u79bb\u6700\u8fd1\u7684\u4e09\u90e8\u7535\u5f71\u7684\u7c7b\u578b\uff0c\u51b3\u5b9a\u672a\u77e5\u7535\u5f71\u7684\u7c7b\u578b\uff0c\u800c\u8fd9\u4e09\u90e8\u7535\u5f71\u5168\u662f\u7231\u60c5\u7247\uff0c\u56e0\u6b64\u6211\u4eec\u5224\u5b9a\u672a\u77e5\u7535\u5f71\u662f\u7231\u60c5\u7247\u3002 KNN \u539f\u7406 KNN \u5de5\u4f5c\u539f\u7406 \u5047\u8bbe\u6709\u4e00\u4e2a\u5e26\u6709\u6807\u7b7e\u7684\u6837\u672c\u6570\u636e\u96c6\uff08\u8bad\u7ec3\u6837\u672c\u96c6\uff09\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u6761\u6570\u636e\u4e0e\u6240\u5c5e\u5206\u7c7b\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u8f93\u5165\u6ca1\u6709\u6807\u7b7e\u7684\u65b0\u6570\u636e\u540e\uff0c\u5c06\u65b0\u6570\u636e\u7684\u6bcf\u4e2a\u7279\u5f81\u4e0e\u6837\u672c\u96c6\u4e2d\u6570\u636e\u5bf9\u5e94\u7684\u7279\u5f81\u8fdb\u884c\u6bd4\u8f83\u3002 \u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u6837\u672c\u6570\u636e\u96c6\u4e2d\u6bcf\u6761\u6570\u636e\u7684\u8ddd\u79bb\u3002 \u5bf9\u6c42\u5f97\u7684\u6240\u6709\u8ddd\u79bb\u8fdb\u884c\u6392\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff0c\u8d8a\u5c0f\u8868\u793a\u8d8a\u76f8\u4f3c\uff09\u3002 \u53d6\u524d k \uff08k \u4e00\u822c\u5c0f\u4e8e\u7b49\u4e8e 20 \uff09\u4e2a\u6837\u672c\u6570\u636e\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\u3002 \u6c42 k \u4e2a\u6570\u636e\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5206\u7c7b\u6807\u7b7e\u4f5c\u4e3a\u65b0\u6570\u636e\u7684\u5206\u7c7b\u3002 KNN \u901a\u4fd7\u7406\u89e3 \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u5bf9\u65b0\u7684\u8f93\u5165\u5b9e\u4f8b\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b\uff0c\u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\uff0c\u5c31\u628a\u8be5\u8f93\u5165\u5b9e\u4f8b\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u3002 KNN \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u8ddd\u79bb\u8ba1\u7b97\u6240\u9700\u8981\u7684\u6570\u503c\uff0c\u6700\u597d\u662f\u7ed3\u6784\u5316\u7684\u6570\u636e\u683c\u5f0f \u5206\u6790\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u9519\u8bef\u7387 \u4f7f\u7528\u7b97\u6cd5\uff1a\u8f93\u5165\u6837\u672c\u6570\u636e\u548c\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u7136\u540e\u8fd0\u884c k-\u8fd1\u90bb\u7b97\u6cd5\u5224\u65ad\u8f93\u5165\u6570\u636e\u5206\u7c7b\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7c7b\uff0c\u6700\u540e\u5bf9\u8ba1\u7b97\u51fa\u7684\u5206\u7c7b\u6267\u884c\u540e\u7eed\u5904\u7406 KNN \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u7cbe\u5ea6\u9ad8\u3001\u5bf9\u5f02\u5e38\u503c\u4e0d\u654f\u611f\u3001\u65e0\u6570\u636e\u8f93\u5165\u5047\u5b9a \u7f3a\u70b9\uff1a\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8 \u9002\u7528\u6570\u636e\u8303\u56f4\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b KNN \u9879\u76ee\u6848\u4f8b \u9879\u76ee\u6848\u4f8b1: \u4f18\u5316\u7ea6\u4f1a\u7f51\u7ad9\u7684\u914d\u5bf9\u6548\u679c \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/2.KNN/kNN.py \u9879\u76ee\u6982\u8ff0 \u6d77\u4f26\u4f7f\u7528\u7ea6\u4f1a\u7f51\u7ad9\u5bfb\u627e\u7ea6\u4f1a\u5bf9\u8c61\u3002\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u5979\u53d1\u73b0\u66fe\u4ea4\u5f80\u8fc7\u4e09\u79cd\u7c7b\u578b\u7684\u4eba: \u4e0d\u559c\u6b22\u7684\u4eba \u9b45\u529b\u4e00\u822c\u7684\u4eba * \u6781\u5177\u9b45\u529b\u7684\u4eba \u5979\u5e0c\u671b\uff1a 1. \u5de5\u4f5c\u65e5\u4e0e\u9b45\u529b\u4e00\u822c\u7684\u4eba\u7ea6\u4f1a 2. \u5468\u672b\u4e0e\u6781\u5177\u9b45\u529b\u7684\u4eba\u7ea6\u4f1a 3. \u4e0d\u559c\u6b22\u7684\u4eba\u5219\u76f4\u63a5\u6392\u9664\u6389 \u73b0\u5728\u5979\u6536\u96c6\u5230\u4e86\u4e00\u4e9b\u7ea6\u4f1a\u7f51\u7ad9\u672a\u66fe\u8bb0\u5f55\u7684\u6570\u636e\u4fe1\u606f\uff0c\u8fd9\u66f4\u6709\u52a9\u4e8e\u5339\u914d\u5bf9\u8c61\u7684\u5f52\u7c7b\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u4f7f\u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6 \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528 Matplotlib \u753b\u4e8c\u7ef4\u6563\u70b9\u56fe \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d77\u4f26\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\u3002 \u6d4b\u8bd5\u6837\u672c\u548c\u975e\u6d4b\u8bd5\u6837\u672c\u7684\u533a\u522b\u5728\u4e8e\uff1a \u6d4b\u8bd5\u6837\u672c\u662f\u5df2\u7ecf\u5b8c\u6210\u5206\u7c7b\u7684\u6570\u636e\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u4ea7\u751f\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u7136\u540e\u6d77\u4f26\u53ef\u4ee5\u8f93\u5165\u4e00\u4e9b\u7279\u5f81\u6570\u636e\u4ee5\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u4e3a\u81ea\u5df1\u559c\u6b22\u7684\u7c7b\u578b\u3002 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6d77\u4f26\u628a\u8fd9\u4e9b\u7ea6\u4f1a\u5bf9\u8c61\u7684\u6570\u636e\u5b58\u653e\u5728\u6587\u672c\u6587\u4ef6 datingTestSet2.txt \u4e2d\uff0c\u603b\u5171\u6709 1000 \u884c\u3002\u6d77\u4f26\u7ea6\u4f1a\u7684\u5bf9\u8c61\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b 3 \u79cd\u7279\u5f81\uff1a \u6bcf\u5e74\u83b7\u5f97\u7684\u98de\u884c\u5e38\u5ba2\u91cc\u7a0b\u6570 \u73a9\u89c6\u9891\u6e38\u620f\u6240\u8017\u65f6\u95f4\u767e\u5206\u6bd4 \u6bcf\u5468\u6d88\u8d39\u7684\u51b0\u6dc7\u6dcb\u516c\u5347\u6570 \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 40920 8.326976 0.953952 3 14488 7.153469 1.673904 2 26052 1.441871 0.805124 1 75136 13.147394 0.428964 1 38344 1.669788 0.134296 1 \u51c6\u5907\u6570\u636e\uff1a\u4f7f\u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6 \u5c06\u6587\u672c\u8bb0\u5f55\u8f6c\u6362\u4e3a NumPy \u7684\u89e3\u6790\u7a0b\u5e8f ```python def file2matrix(filename): \"\"\" Desc: \u5bfc\u5165\u8bad\u7ec3\u6570\u636e parameters: filename: \u6570\u636e\u6587\u4ef6\u8def\u5f84 return: \u6570\u636e\u77e9\u9635 returnMat \u548c\u5bf9\u5e94\u7684\u7c7b\u522b classLabelVector \"\"\" fr = open(filename) # \u83b7\u5f97\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u884c\u7684\u884c\u6570 numberOfLines = len(fr.readlines()) # \u751f\u6210\u5bf9\u5e94\u7684\u7a7a\u77e9\u9635 # \u4f8b\u5982\uff1azeros(2\uff0c3)\u5c31\u662f\u751f\u6210\u4e00\u4e2a 2*3\u7684\u77e9\u9635\uff0c\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u5168\u662f 0 returnMat = zeros((numberOfLines, 3)) # prepare matrix to return classLabelVector = [] # prepare labels return fr = open(filename) index = 0 for line in fr.readlines(): # str.strip([chars]) --\u8fd4\u56de\u5df2\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u5b57\u7b26\u6240\u751f\u6210\u7684\u65b0\u5b57\u7b26\u4e32 line = line.strip() # \u4ee5 '\\t' \u5207\u5272\u5b57\u7b26\u4e32 listFromLine = line.split('\\t') # \u6bcf\u5217\u7684\u5c5e\u6027\u6570\u636e returnMat[index, :] = listFromLine[0:3] # \u6bcf\u5217\u7684\u7c7b\u522b\u6570\u636e\uff0c\u5c31\u662f label \u6807\u7b7e\u6570\u636e classLabelVector.append(int(listFromLine[-1])) index += 1 # \u8fd4\u56de\u6570\u636e\u77e9\u9635returnMat\u548c\u5bf9\u5e94\u7684\u7c7b\u522bclassLabelVector return returnMat, classLabelVector > \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528 Matplotlib \u753b\u4e8c\u7ef4\u6563\u70b9\u56fe ```python import matplotlib import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(datingDataMat[:, 0], datingDataMat[:, 1], 15.0*array(datingLabels), 15.0*array(datingLabels)) plt.show() \u4e0b\u56fe\u4e2d\u91c7\u7528\u77e9\u9635\u7684\u7b2c\u4e00\u548c\u7b2c\u4e8c\u5217\u5c5e\u6027\u5f97\u5230\u5f88\u597d\u7684\u5c55\u793a\u6548\u679c\uff0c\u6e05\u6670\u5730\u6807\u8bc6\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6837\u672c\u5206\u7c7b\u533a\u57df\uff0c\u5177\u6709\u4e0d\u540c\u7231\u597d\u7684\u4eba\u5176\u7c7b\u522b\u533a\u57df\u4e5f\u4e0d\u540c\u3002 \u5f52\u4e00\u5316\u6570\u636e \uff08\u5f52\u4e00\u5316\u662f\u4e00\u4e2a\u8ba9\u6743\u91cd\u53d8\u4e3a\u7edf\u4e00\u7684\u8fc7\u7a0b\uff0c\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003\uff1a https://www.zhihu.com/question/19951858 \uff09 \u5e8f\u53f7 \u73a9\u89c6\u9891\u6e38\u620f\u6240\u8017\u65f6\u95f4\u767e\u5206\u6bd4 \u6bcf\u5e74\u83b7\u5f97\u7684\u98de\u884c\u5e38\u5ba2\u91cc\u7a0b\u6570 \u6bcf\u5468\u6d88\u8d39\u7684\u51b0\u6dc7\u6dcb\u516c\u5347\u6570 \u6837\u672c\u5206\u7c7b 1 0.8 400 0.5 1 2 12 134 000 0.9 3 3 0 20 000 1.1 2 4 67 32 000 0.1 2 \u6837\u672c3\u548c\u6837\u672c4\u7684\u8ddd\u79bb\uff1a $$\\sqrt{(0-67)^2 + (20000-32000)^2 + (1.1-0.1)^2 }$$ \u5f52\u4e00\u5316\u7279\u5f81\u503c\uff0c\u6d88\u9664\u7279\u5f81\u4e4b\u95f4\u91cf\u7ea7\u4e0d\u540c\u5bfc\u81f4\u7684\u5f71\u54cd \u5f52\u4e00\u5316\u5b9a\u4e49\uff1a \u6211\u662f\u8fd9\u6837\u8ba4\u4e3a\u7684\uff0c\u5f52\u4e00\u5316\u5c31\u662f\u8981\u628a\u4f60\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u7ecf\u8fc7\u5904\u7406\u540e\uff08\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\uff09\u9650\u5236\u5728\u4f60\u9700\u8981\u7684\u4e00\u5b9a\u8303\u56f4\u5185\u3002\u9996\u5148\u5f52\u4e00\u5316\u662f\u4e3a\u4e86\u540e\u9762\u6570\u636e\u5904\u7406\u7684\u65b9\u4fbf\uff0c\u5176\u6b21\u662f\u4fdd\u6b63\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6536\u655b\u52a0\u5feb\u3002 \u65b9\u6cd5\u6709\u5982\u4e0b\uff1a 1) \u7ebf\u6027\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a\u3000\u3000 y=(x-MinValue)/(MaxValue-MinValue) \u8bf4\u660e\uff1ax\u3001y\u5206\u522b\u4e3a\u8f6c\u6362\u524d\u3001\u540e\u7684\u503c\uff0cMaxValue\u3001MinValue\u5206\u522b\u4e3a\u6837\u672c\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 2) \u5bf9\u6570\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a\u3000\u3000 y=log10(x) \u8bf4\u660e\uff1a\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\u51fd\u6570\u8f6c\u6362\u3002 \u5982\u56fe\uff1a ![\u5bf9\u6570\u51fd\u6570\u56fe\u50cf](/img/ml/2.KNN/knn_1.png) 3) \u53cd\u4f59\u5207\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a y=arctan(x)*2/PI \u5982\u56fe\uff1a ![\u53cd\u4f59\u5207\u51fd\u6570\u56fe\u50cf](/img/ml/2.KNN/arctan_arccot.gif) 4) \u5f0f(1)\u5c06\u8f93\u5165\u503c\u6362\u7b97\u4e3a[-1,1]\u533a\u95f4\u7684\u503c\uff0c\u5728\u8f93\u51fa\u5c42\u7528\u5f0f(2)\u6362\u7b97\u56de\u521d\u59cb\u503c\uff0c\u5176\u4e2d\u548c\u5206\u522b\u8868\u793a\u8bad\u7ec3\u6837\u672c\u96c6\u4e2d\u8d1f\u8377\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u3000 \u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u5f52\u4e00\u5316\u7684\u5177\u4f53\u4f5c\u7528\u662f\u5f52\u7eb3\u7edf\u4e00\u6837\u672c\u7684\u7edf\u8ba1\u5206\u5e03\u6027\u3002\u5f52\u4e00\u5316\u57280-1\u4e4b\u95f4\u662f\u7edf\u8ba1\u7684\u6982\u7387\u5206\u5e03\uff0c\u5f52\u4e00\u5316\u5728-1--+1\u4e4b\u95f4\u662f\u7edf\u8ba1\u7684\u5750\u6807\u5206\u5e03\u3002 def autoNorm(dataSet): \"\"\" Desc: \u5f52\u4e00\u5316\u7279\u5f81\u503c\uff0c\u6d88\u9664\u7279\u5f81\u4e4b\u95f4\u91cf\u7ea7\u4e0d\u540c\u5bfc\u81f4\u7684\u5f71\u54cd parameter: dataSet: \u6570\u636e\u96c6 return: \u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\u96c6 normDataSet. ranges\u548cminVals\u5373\u6700\u5c0f\u503c\u4e0e\u8303\u56f4\uff0c\u5e76\u6ca1\u6709\u7528\u5230 \u5f52\u4e00\u5316\u516c\u5f0f\uff1a Y = (X-Xmin)/(Xmax-Xmin) \u5176\u4e2d\u7684 min \u548c max \u5206\u522b\u662f\u6570\u636e\u96c6\u4e2d\u7684\u6700\u5c0f\u7279\u5f81\u503c\u548c\u6700\u5927\u7279\u5f81\u503c\u3002\u8be5\u51fd\u6570\u53ef\u4ee5\u81ea\u52a8\u5c06\u6570\u5b57\u7279\u5f81\u503c\u8f6c\u5316\u4e3a0\u52301\u7684\u533a\u95f4\u3002 \"\"\" # \u8ba1\u7b97\u6bcf\u79cd\u5c5e\u6027\u7684\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u8303\u56f4 minVals = dataSet.min(0) maxVals = dataSet.max(0) # \u6781\u5dee ranges = maxVals - minVals normDataSet = zeros(shape(dataSet)) m = dataSet.shape[0] # \u751f\u6210\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\u7ec4\u6210\u7684\u77e9\u9635 normDataSet = dataSet - tile(minVals, (m, 1)) # \u5c06\u6700\u5c0f\u503c\u4e4b\u5dee\u9664\u4ee5\u8303\u56f4\u7ec4\u6210\u77e9\u9635 normDataSet = normDataSet / tile(ranges, (m, 1)) # element wise divide return normDataSet, ranges, minVals \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u6bcf\u4e00\u6b21\u90fd\u8981\u4e0e\u5168\u91cf\u7684\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 kNN \u7b97\u6cd5\u4f2a\u4ee3\u7801\uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5728\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u70b9\uff1a \u8ba1\u7b97\u76ee\u6807\u7684\u6570\u636e\u70b9\uff08\u9700\u8981\u5206\u7c7b\u7684\u6570\u636e\u70b9\uff09\u4e0e\u8be5\u6570\u636e\u70b9\u7684\u8ddd\u79bb \u5c06\u8ddd\u79bb\u6392\u5e8f\uff1a\u4ece\u5c0f\u5230\u5927 \u9009\u53d6\u524dK\u4e2a\u6700\u77ed\u8ddd\u79bb \u9009\u53d6\u8fd9K\u4e2a\u4e2d\u6700\u591a\u7684\u5206\u7c7b\u7c7b\u522b \u8fd4\u56de\u8be5\u7c7b\u522b\u6765\u4f5c\u4e3a\u76ee\u6807\u6570\u636e\u70b9\u7684\u9884\u6d4b\u503c def classify0(inX, dataSet, labels, k): dataSetSize = dataSet.shape[0] #\u8ddd\u79bb\u5ea6\u91cf \u5ea6\u91cf\u516c\u5f0f\u4e3a\u6b27\u6c0f\u8ddd\u79bb diffMat = tile(inX, (dataSetSize,1)) \u2013 dataSet sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) distances = sqDistances**0.5 #\u5c06\u8ddd\u79bb\u6392\u5e8f\uff1a\u4ece\u5c0f\u5230\u5927 sortedDistIndicies = distances.argsort() #\u9009\u53d6\u524dK\u4e2a\u6700\u77ed\u8ddd\u79bb\uff0c \u9009\u53d6\u8fd9K\u4e2a\u4e2d\u6700\u591a\u7684\u5206\u7c7b\u7c7b\u522b classCount={} for i in range(k)\uff1a voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d77\u4f26\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\u3002\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef\u3002 kNN \u5206\u7c7b\u5668\u9488\u5bf9\u7ea6\u4f1a\u7f51\u7ad9\u7684\u6d4b\u8bd5\u4ee3\u7801 def datingClassTest(): \"\"\" Desc: \u5bf9\u7ea6\u4f1a\u7f51\u7ad9\u7684\u6d4b\u8bd5\u65b9\u6cd5 parameters: none return: \u9519\u8bef\u6570 \"\"\" # \u8bbe\u7f6e\u6d4b\u8bd5\u6570\u636e\u7684\u7684\u4e00\u4e2a\u6bd4\u4f8b\uff08\u8bad\u7ec3\u6570\u636e\u96c6\u6bd4\u4f8b=1-hoRatio\uff09 hoRatio = 0.1 # \u6d4b\u8bd5\u8303\u56f4,\u4e00\u90e8\u5206\u6d4b\u8bd5\u4e00\u90e8\u5206\u4f5c\u4e3a\u6837\u672c # \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e datingDataMat, datingLabels = file2matrix('db/2.KNN/datingTestSet2.txt') # load data setfrom file # \u5f52\u4e00\u5316\u6570\u636e normMat, ranges, minVals = autoNorm(datingDataMat) # m \u8868\u793a\u6570\u636e\u7684\u884c\u6570\uff0c\u5373\u77e9\u9635\u7684\u7b2c\u4e00\u7ef4 m = normMat.shape[0] # \u8bbe\u7f6e\u6d4b\u8bd5\u7684\u6837\u672c\u6570\u91cf\uff0c numTestVecs:m\u8868\u793a\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf numTestVecs = int(m * hoRatio) print 'numTestVecs=', numTestVecs errorCount = 0.0 for i in range(numTestVecs): # \u5bf9\u6570\u636e\u6d4b\u8bd5 classifierResult = classify0(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 3) print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i]) if (classifierResult != datingLabels[i]): errorCount += 1.0 print \"the total error rate is: %f\" % (errorCount / float(numTestVecs)) print errorCount \u4f7f\u7528\u7b97\u6cd5\uff1a\u4ea7\u751f\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u7136\u540e\u6d77\u4f26\u53ef\u4ee5\u8f93\u5165\u4e00\u4e9b\u7279\u5f81\u6570\u636e\u4ee5\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u4e3a\u81ea\u5df1\u559c\u6b22\u7684\u7c7b\u578b\u3002 \u7ea6\u4f1a\u7f51\u7ad9\u9884\u6d4b\u51fd\u6570 def classifyPerson(): resultList = ['not at all', 'in small doses', 'in large doses'] percentTats = float(raw_input(\"percentage of time spent playing video games ?\")) ffMiles = float(raw_input(\"frequent filer miles earned per year?\")) iceCream = float(raw_input(\"liters of ice cream consumed per year?\")) datingDataMat, datingLabels = file2matrix('datingTestSet2.txt') normMat, ranges, minVals = autoNorm(datingDataMat) inArr = array([ffMiles, percentTats, iceCream]) classifierResult = classify0((inArr-minVals)/ranges,normMat,datingLabels, 3) print \"You will probably like this person: \", resultList[classifierResult - 1] \u5b9e\u9645\u8fd0\u884c\u6548\u679c\u5982\u4e0b: >>> classifyPerson() percentage of time spent playing video games?10 frequent flier miles earned per year?10000 liters of ice cream consumed per year?0.5 You will probably like this person: in small doses \u9879\u76ee\u6848\u4f8b2: \u624b\u5199\u6570\u5b57\u8bc6\u522b\u7cfb\u7edf \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/2.KNN/kNN.py \u9879\u76ee\u6982\u8ff0 \u6784\u9020\u4e00\u4e2a\u80fd\u8bc6\u522b\u6570\u5b57 0 \u5230 9 \u7684\u57fa\u4e8e KNN \u5206\u7c7b\u5668\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7cfb\u7edf\u3002 \u9700\u8981\u8bc6\u522b\u7684\u6570\u5b57\u662f\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u5177\u6709\u76f8\u540c\u7684\u8272\u5f69\u548c\u5927\u5c0f\uff1a\u5bbd\u9ad8\u662f 32 \u50cf\u7d20 * 32 \u50cf\u7d20\u7684\u9ed1\u767d\u56fe\u50cf\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6\u3002 \u51c6\u5907\u6570\u636e\uff1a\u7f16\u5199\u51fd\u6570 img2vector(), \u5c06\u56fe\u50cf\u683c\u5f0f\u8f6c\u6362\u4e3a\u5206\u7c7b\u5668\u4f7f\u7528\u7684\u5411\u91cf\u683c\u5f0f \u5206\u6790\u6570\u636e\uff1a\u5728 Python \u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u5b83\u7b26\u5408\u8981\u6c42 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e KNN \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u7f16\u5199\u51fd\u6570\u4f7f\u7528\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\uff0c\u6d4b\u8bd5\u6837\u672c\u4e0e\u975e\u6d4b\u8bd5\u6837\u672c\u7684 \u533a\u522b\u5728\u4e8e\u6d4b\u8bd5\u6837\u672c\u662f\u5df2\u7ecf\u5b8c\u6210\u5206\u7c7b\u7684\u6570\u636e\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c \u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u6ca1\u6709\u5b8c\u6210\u6b64\u6b65\u9aa4\uff0c\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6 \u6570\u5b57\uff0c\u5e76\u5b8c\u6210\u6570\u5b57\u8bc6\u522b\uff0c\u7f8e\u56fd\u7684\u90ae\u4ef6\u5206\u62e3\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u5b9e\u9645\u8fd0\u884c\u7684\u7c7b\u4f3c\u7cfb\u7edf \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u76ee\u5f55 trainingDigits \u4e2d\u5305\u542b\u4e86\u5927\u7ea6 2000 \u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e2a\u4f8b\u5b50\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u6570\u5b57\u5927\u7ea6\u6709 200 \u4e2a\u6837\u672c\uff1b\u76ee\u5f55 testDigits \u4e2d\u5305\u542b\u4e86\u5927\u7ea6 900 \u4e2a\u6d4b\u8bd5\u6570\u636e\u3002 \u51c6\u5907\u6570\u636e: \u7f16\u5199\u51fd\u6570 img2vector(), \u5c06\u56fe\u50cf\u6587\u672c\u6570\u636e\u8f6c\u6362\u4e3a\u5206\u7c7b\u5668\u4f7f\u7528\u7684\u5411\u91cf \u5c06\u56fe\u50cf\u6587\u672c\u6570\u636e\u8f6c\u6362\u4e3a\u5411\u91cf def img2vector(filename): returnVect = zeros((1,1024)) fr = open(filename) for i in range(32): lineStr = fr.readline() for j in range(32): returnVect[0,32*i+j] = int(lineStr[j]) return returnVect \u5206\u6790\u6570\u636e\uff1a\u5728 Python \u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u5b83\u7b26\u5408\u8981\u6c42 \u5728 Python \u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u6d4b\u8bd5 img2vector \u51fd\u6570\uff0c\u7136\u540e\u4e0e\u6587\u672c\u7f16\u8f91\u5668\u6253\u5f00\u7684\u6587\u4ef6\u8fdb\u884c\u6bd4\u8f83: >>> testVector = kNN.img2vector('testDigits/0_13.txt') >>> testVector[0,0:32] array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) >>> testVector[0,32:64] array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e KNN \u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u6bcf\u4e00\u6b21\u90fd\u8981\u4e0e\u5168\u91cf\u7684\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u7f16\u5199\u51fd\u6570\u4f7f\u7528\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef def handwritingClassTest(): # 1. \u5bfc\u5165\u8bad\u7ec3\u6570\u636e hwLabels = [] trainingFileList = listdir('db/2.KNN/trainingDigits') # load the training set m = len(trainingFileList) trainingMat = zeros((m, 1024)) # hwLabels\u5b58\u50a80\uff5e9\u5bf9\u5e94\u7684index\u4f4d\u7f6e\uff0c trainingMat\u5b58\u653e\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u56fe\u7247\u5411\u91cf for i in range(m): fileNameStr = trainingFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) hwLabels.append(classNumStr) # \u5c06 32*32\u7684\u77e9\u9635->1*1024\u7684\u77e9\u9635 trainingMat[i, :] = img2vector('db/2.KNN/trainingDigits/%s' % fileNameStr) # 2. \u5bfc\u5165\u6d4b\u8bd5\u6570\u636e testFileList = listdir('db/2.KNN/testDigits') # iterate through the test set errorCount = 0.0 mTest = len(testFileList) for i in range(mTest): fileNameStr = testFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) vectorUnderTest = img2vector('db/2.KNN/testDigits/%s' % fileNameStr) classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3) print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, classNumStr) if (classifierResult != classNumStr): errorCount += 1.0 print \"\\nthe total number of errors is: %d\" % errorCount print \"\\nthe total error rate is: %f\" % (errorCount / float(mTest)) \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u6ca1\u6709\u5b8c\u6210\u6b64\u6b65\u9aa4\uff0c\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u6570\u5b57\uff0c\u5e76\u5b8c\u6210\u6570\u5b57\u8bc6\u522b\uff0c\u7f8e\u56fd\u7684\u90ae\u4ef6\u5206\u62e3\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u5b9e\u9645\u8fd0\u884c\u7684\u7c7b\u4f3c\u7cfb\u7edf\u3002 KNN \u5c0f\u7ed3 KNN \u662f\u4ec0\u4e48\uff1f\u5b9a\u4e49\uff1a \u76d1\u7763\u5b66\u4e60\uff1f \u975e\u76d1\u7763\u5b66\u4e60\uff1f KNN \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u65e0\u663e\u793a\u5b66\u4e60\u8fc7\u7a0b\uff0c\u975e\u6cdb\u5316\u5b66\u4e60\u7684\u76d1\u7763\u5b66\u4e60\u6a21\u578b\u3002\u5728\u5206\u7c7b\u548c\u56de\u5f52\u4e2d\u5747\u6709\u5e94\u7528\u3002 \u57fa\u672c\u539f\u7406 \u7b80\u5355\u6765\u8bf4\uff1a \u901a\u8fc7\u8ddd\u79bb\u5ea6\u91cf\u6765\u8ba1\u7b97\u67e5\u8be2\u70b9\uff08query point\uff09\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u9009\u51fa\u4e0e\u67e5\u8be2\u70b9\uff08query point\uff09\u76f8\u8fd1\u7684K\u4e2a\u6700\u90bb\u70b9\uff08K nearest neighbors\uff09\uff0c\u4f7f\u7528\u5206\u7c7b\u51b3\u7b56\u6765\u9009\u51fa\u5bf9\u5e94\u7684\u6807\u7b7e\u6765\u4f5c\u4e3a\u8be5\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u3002 KNN \u4e09\u8981\u7d20 K, K\u7684\u53d6\u503c \u5bf9\u67e5\u8be2\u70b9\u6807\u7b7e\u5f71\u54cd\u663e\u8457\uff08\u6548\u679c\u62d4\u7fa4\uff09\u3002k\u503c\u5c0f\u7684\u65f6\u5019 \u8fd1\u4f3c\u8bef\u5dee\u5c0f\uff0c\u4f30\u8ba1\u8bef\u5dee\u5927\u3002 k\u503c\u5927 \u8fd1\u4f3c\u8bef\u5dee\u5927\uff0c\u4f30\u8ba1\u8bef\u5dee\u5c0f\u3002 \u5982\u679c\u9009\u62e9\u8f83\u5c0f\u7684 k \u503c\uff0c\u5c31\u76f8\u5f53\u4e8e\u7528\u8f83\u5c0f\u7684\u90bb\u57df\u4e2d\u7684\u8bad\u7ec3\u5b9e\u4f8b\u8fdb\u884c\u9884\u6d4b\uff0c\u201c\u5b66\u4e60\u201d\u7684\u8fd1\u4f3c\u8bef\u5dee\uff08approximation error\uff09\u4f1a\u51cf\u5c0f\uff0c\u53ea\u6709\u4e0e\u8f93\u5165\u5b9e\u4f8b\u8f83\u8fd1\u7684\uff08\u76f8\u4f3c\u7684\uff09\u8bad\u7ec3\u5b9e\u4f8b\u624d\u4f1a\u5bf9\u9884\u6d4b\u7ed3\u679c\u8d77\u4f5c\u7528\u3002\u4f46\u7f3a\u70b9\u662f\u201c\u5b66\u4e60\u201d\u7684\u4f30\u8ba1\u8bef\u5dee\uff08estimation error\uff09\u4f1a\u589e\u5927\uff0c\u9884\u6d4b\u7ed3\u679c\u4f1a\u5bf9\u8fd1\u90bb\u7684\u5b9e\u4f8b\u70b9\u975e\u5e38\u654f\u611f\u3002\u5982\u679c\u90bb\u8fd1\u7684\u5b9e\u4f8b\u70b9\u6070\u5de7\u662f\u566a\u58f0\uff0c\u9884\u6d4b\u5c31\u4f1a\u51fa\u9519\u3002\u6362\u53e5\u8bdd\u8bf4\uff0ck \u503c\u7684\u51cf\u5c0f\u5c31\u610f\u5473\u7740\u6574\u4f53\u6a21\u578b\u53d8\u5f97\u590d\u6742\uff0c\u5bb9\u6613\u53d1\u751f\u8fc7\u62df\u5408\u3002 \u5982\u679c\u9009\u62e9\u8f83\u5927\u7684 k \u503c\uff0c\u5c31\u76f8\u5f53\u4e8e\u7528\u8f83\u5927\u7684\u90bb\u57df\u4e2d\u7684\u8bad\u7ec3\u5b9e\u4f8b\u8fdb\u884c\u9884\u6d4b\u3002\u5176\u4f18\u70b9\u662f\u53ef\u4ee5\u51cf\u5c11\u5b66\u4e60\u7684\u4f30\u8ba1\u8bef\u5dee\u3002\u4f46\u7f3a\u70b9\u662f\u5b66\u4e60\u7684\u8fd1\u4f3c\u8bef\u5dee\u4f1a\u589e\u5927\u3002\u8fd9\u65f6\u4e0e\u8f93\u5165\u5b9e\u4f8b\u8f83\u8fdc\u7684\uff08\u4e0d\u76f8\u4f3c\u7684\uff09\u8bad\u7ec3\u5b9e\u4f8b\u4e5f\u4f1a\u5bf9\u9884\u6d4b\u8d77\u4f5c\u7528\uff0c\u4f7f\u9884\u6d4b\u53d1\u751f\u9519\u8bef\u3002 k \u503c\u7684\u589e\u5927\u5c31\u610f\u5473\u7740\u6574\u4f53\u7684\u6a21\u578b\u53d8\u5f97\u7b80\u5355\u3002 \u592a\u5927\u592a\u5c0f\u90fd\u4e0d\u592a\u597d\uff0c\u53ef\u4ee5\u7528\u4ea4\u53c9\u9a8c\u8bc1\uff08cross validation\uff09\u6765\u9009\u53d6\u9002\u5408\u7684k\u503c\u3002 \u8fd1\u4f3c\u8bef\u5dee\u548c\u4f30\u8ba1\u8bef\u5dee\uff0c\u8bf7\u770b\u8fd9\u91cc\uff1ahttps://www.zhihu.com/question/60793482 \u8ddd\u79bb\u5ea6\u91cf Metric/Distance Measure \u8ddd\u79bb\u5ea6\u91cf \u901a\u5e38\u4e3a \u6b27\u5f0f\u8ddd\u79bb\uff08Euclidean distance\uff09\uff0c\u8fd8\u53ef\u4ee5\u662f Minkowski \u8ddd\u79bb \u6216\u8005 \u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u4e5f\u53ef\u4ee5\u662f \u5730\u7406\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e9b\u8ddd\u79bb\u516c\u5f0f\u3002\uff08\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u770b sklearn \u4e2d valid_metric \u90e8\u5206\uff09 \u5206\u7c7b\u51b3\u7b56 \uff08decision rule\uff09 \u5206\u7c7b\u51b3\u7b56 \u5728 \u5206\u7c7b\u95ee\u9898\u4e2d \u901a\u5e38\u4e3a\u901a\u8fc7\u5c11\u6570\u670d\u4ece\u591a\u6570 \u6765\u9009\u53d6\u7968\u6570\u6700\u591a\u7684\u6807\u7b7e\uff0c\u5728\u56de\u5f52\u95ee\u9898\u4e2d\u901a\u5e38\u4e3a K\u4e2a\u6700\u90bb\u70b9\u7684\u6807\u7b7e\u7684\u5e73\u5747\u503c\u3002 \u7b97\u6cd5\uff1a\uff08sklearn \u4e0a\u6709\u4e09\u79cd\uff09 Brute Force \u66b4\u529b\u8ba1\u7b97/\u7ebf\u6027\u626b\u63cf KD Tree \u4f7f\u7528\u4e8c\u53c9\u6811\u6839\u636e\u6570\u636e\u7ef4\u5ea6\u6765\u5e73\u5206\u53c2\u6570\u7a7a\u95f4\u3002 Ball Tree \u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u8d85\u7403\u4f53\u6765\u5e73\u5206\u8bad\u7ec3\u6570\u636e\u96c6\u3002 \u6811\u7ed3\u6784\u7684\u7b97\u6cd5\u90fd\u6709\u5efa\u6811\u548c\u67e5\u8be2\u4e24\u4e2a\u8fc7\u7a0b\u3002Brute Force \u6ca1\u6709\u5efa\u6811\u7684\u8fc7\u7a0b\u3002 \u7b97\u6cd5\u7279\u70b9\uff1a \u4f18\u70b9\uff1a High Accuracy\uff0c No Assumption on data\uff0c not sensitive to outliers \u7f3a\u70b9\uff1a\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6 \u9ad8 \u9002\u7528\u8303\u56f4\uff1a continuous values and nominal values \u76f8\u4f3c\u540c\u6e90\u4ea7\u7269\uff1a radius neighbors \u6839\u636e\u5236\u5b9a\u7684\u534a\u5f84\u6765\u627e\u5bfb\u90bb\u70b9 \u5f71\u54cd\u7b97\u6cd5\u56e0\u7d20\uff1a N \u6570\u636e\u96c6\u6837\u672c\u6570\u91cf(number of samples)\uff0c D \u6570\u636e\u7ef4\u5ea6 (number of features) \u603b\u6d88\u8017\uff1a Brute Force: O[DN^2] \u6b64\u5904\u8003\u8651\u7684\u662f\u6700\u8822\u7684\u65b9\u6cd5\uff1a\u628a\u6240\u6709\u8bad\u7ec3\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u7b97\u4e00\u904d\u3002\u5f53\u7136\u6709\u66f4\u5feb\u7684\u5b9e\u73b0\u65b9\u5f0f, \u6bd4\u5982 O(ND + kN) \u548c O(NDK) , \u6700\u5feb\u7684\u662f O[DN] \u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u9605\u8bfb\u8fd9\u4e2a\u94fe\u63a5\uff1a k-NN computational complexity KD Tree: O[DN log(N)] Ball Tree: O[DN log(N)] \u8ddf KD Tree \u5904\u4e8e\u76f8\u540c\u7684\u6570\u91cf\u7ea7\uff0c\u867d\u7136\u5efa\u6811\u65f6\u95f4\u4f1a\u6bd4 KD Tree \u4e45\u4e00\u70b9\uff0c\u4f46\u662f\u5728\u9ad8\u7ed3\u6784\u7684\u6570\u636e\uff0c\u751a\u81f3\u662f\u9ad8\u7eac\u5ea6\u7684\u6570\u636e\u4e2d\uff0c\u67e5\u8be2\u901f\u5ea6\u6709\u5f88\u5927\u7684\u63d0\u5347\u3002 \u67e5\u8be2\u6240\u9700\u6d88\u8017: Brute Force: O[DN] KD Tree: \u5f53\u7ef4\u5ea6\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c \u6bd4\u5982 D<20, O[Dlog(N)] \u3002\u76f8\u53cd\uff0c\u5c06\u4f1a\u8d8b\u5411\u4e8e O[DN] Ball Tree: O[Dlog(N)] \u5f53\u6570\u636e\u96c6\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u6bd4\u5982 N<30\u7684\u65f6\u5019\uff0cBrute Force \u66f4\u6709\u4f18\u52bf\u3002 Intrinsic Dimensionality(\u672c\u5f81\u7ef4\u6570) \u548c Sparsity\uff08\u7a00\u758f\u5ea6\uff09 \u6570\u636e\u7684 intrinsic dimensionality \u662f\u6307\u6570\u636e\u6240\u5728\u7684\u6d41\u5f62\u7684\u7ef4\u6570 d < D , \u5728\u53c2\u6570\u7a7a\u95f4\u53ef\u4ee5\u662f\u7ebf\u6027\u6216\u975e\u7ebf\u6027\u7684\u3002\u7a00\u758f\u5ea6\u6307\u7684\u662f\u6570\u636e\u586b\u5145\u53c2\u6570\u7a7a\u95f4\u7684\u7a0b\u5ea6(\u8fd9\u4e0e\u201c\u7a00\u758f\u201d\u77e9\u9635\u4e2d\u4f7f\u7528\u7684\u6982\u5ff5\u4e0d\u540c, \u6570\u636e\u77e9\u9635\u53ef\u80fd\u6ca1\u6709\u96f6\u9879, \u4f46\u662f\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u6765\u8bb2,\u5b83\u7684\u7ed3\u6784 \u4ecd\u7136\u662f \"\u7a00\u758f\" \u7684)\u3002 Brute Force \u7684\u67e5\u8be2\u65f6\u95f4\u4e0d\u53d7\u5f71\u54cd\u3002 \u5bf9\u4e8e KD Tree \u548c Ball Tree\u7684\u67e5\u8be2\u65f6\u95f4, \u8f83\u5c0f\u672c\u5f81\u7ef4\u6570\u4e14\u66f4\u7a00\u758f\u7684\u6570\u636e\u96c6\u7684\u67e5\u8be2\u65f6\u95f4\u66f4\u5feb\u3002KD Tree \u7684\u6539\u5584\u7531\u4e8e\u901a\u8fc7\u5750\u6807\u8f74\u6765\u5e73\u5206\u53c2\u6570\u7a7a\u95f4\u7684\u81ea\u8eab\u7279\u6027 \u6ca1\u6709Ball Tree \u663e\u8457\u3002 k\u7684\u53d6\u503c (k \u4e2a\u90bb\u70b9) Brute Force \u7684\u67e5\u8be2\u65f6\u95f4\u57fa\u672c\u4e0d\u53d7\u5f71\u54cd\u3002 \u4f46\u662f\u5bf9\u4e8e KD Tree \u548c Ball Tree , k\u8d8a\u5927\uff0c\u67e5\u8be2\u65f6\u95f4\u8d8a\u6162\u3002 k \u5728N\u7684\u5360\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u4f7f\u7528 Brute Force \u6bd4\u8f83\u597d\u3002 Number of Query Points \uff08\u67e5\u8be2\u70b9\u6570\u91cf\uff0c \u5373\u6d4b\u8bd5\u6570\u636e\u7684\u6570\u91cf\uff09 \u67e5\u8be2\u70b9\u8f83\u5c11\u7684\u65f6\u5019\u7528Brute Force\u3002\u67e5\u8be2\u70b9\u8f83\u591a\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u6811\u7ed3\u6784\u7b97\u6cd5\u3002 \u5173\u4e8e sklearn \u4e2d\u6a21\u578b\u7684\u4e00\u4e9b\u989d\u5916\u5e72\u8d27\uff1a \u5982\u679cKD Tree\uff0cBall Tree \u548cBrute Force \u5e94\u7528\u573a\u666f\u50bb\u50bb\u5206\u4e0d\u6e05\u695a\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u542b\u6709algorithm='auto'\u7684\u6a21\u7ec4\u3002 algorithm='auto' \u81ea\u52a8\u4e3a\u60a8\u9009\u62e9\u6700\u4f18\u7b97\u6cd5\u3002 \u6709 regressor \u548c classifier \u53ef\u4ee5\u6765\u9009\u62e9\u3002 metric/distance measure \u53ef\u4ee5\u9009\u62e9\u3002 \u53e6\u5916\u8ddd\u79bb \u53ef\u4ee5\u901a\u8fc7weight \u6765\u52a0\u6743\u3002 leaf size \u5bf9KD Tree \u548c Ball Tree \u7684\u5f71\u54cd \u5efa\u6811\u65f6\u95f4\uff1aleaf size \u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u5efa\u6811\u65f6\u95f4\u4e5f\u5c31\u5feb\u70b9\u3002 \u67e5\u8be2\u65f6\u95f4\uff1a leaf size \u592a\u5927\u592a\u5c0f\u90fd\u4e0d\u592a\u597d\u3002\u5982\u679cleaf size \u8d8b\u5411\u4e8e N\uff08\u8bad\u7ec3\u6570\u636e\u7684\u6837\u672c\u6570\u91cf\uff09\uff0c\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f brute force\u4e86\u3002\u5982\u679cleaf size \u592a\u5c0f\u4e86\uff0c\u8d8b\u5411\u4e8e1\uff0c\u90a3\u67e5\u8be2\u7684\u65f6\u5019 \u904d\u5386\u6811\u7684\u65f6\u95f4\u5c31\u4f1a\u5927\u5927\u589e\u52a0\u3002leaf size \u5efa\u8bae\u7684\u6570\u503c\u662f 30\uff0c\u4e5f\u5c31\u662f\u9ed8\u8ba4\u503c\u3002 \u5185\u5b58\uff1a leaf size \u53d8\u5927\uff0c\u5b58\u6811\u7ed3\u6784\u7684\u5185\u5b58\u53d8\u5c0f\u3002 Nearest Centroid Classifier \u5206\u7c7b\u51b3\u7b56\u662f\u54ea\u4e2a\u6807\u7b7e\u7684\u8d28\u5fc3\u4e0e\u6d4b\u8bd5\u70b9\u6700\u8fd1\uff0c\u5c31\u9009\u54ea\u4e2a\u6807\u7b7e\u3002 \u8be5\u6a21\u578b\u5047\u8bbe\u5728\u6240\u6709\u7ef4\u5ea6\u4e2d\u65b9\u5dee\u76f8\u540c\u3002 \u662f\u4e00\u4e2a\u5f88\u597d\u7684base line\u3002 \u8fdb\u9636\u7248\uff1a Nearest Shrunken Centroid \u53ef\u4ee5\u901a\u8fc7shrink_threshold\u6765\u8bbe\u7f6e\u3002 \u4f5c\u7528\uff1a \u53ef\u4ee5\u79fb\u9664\u67d0\u4e9b\u5f71\u54cd\u5206\u7c7b\u7684\u7279\u5f81\uff0c\u4f8b\u5982\u79fb\u9664\u566a\u97f3\u7279\u5f81\u7684\u5f71\u54cd \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c2\u7ae0_K\u8fd1\u90bb\u7b97\u6cd5"},{"location":"ml/2.KNN/#2-k-","text":"","title":"\u7b2c2\u7ae0 k-\u8fd1\u90bb\u7b97\u6cd5"},{"location":"ml/2.KNN/#knn","text":"k-\u8fd1\u90bb\uff08kNN, k-NearestNeighbor\uff09\u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u672c\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u8ba8\u8bba\u5206\u7c7b\u95ee\u9898\u4e2d\u7684 k-\u8fd1\u90bb\u7b97\u6cd5\u3002 \u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u8fd1\u6731\u8005\u8d64\u8fd1\u58a8\u8005\u9ed1\uff01 k \u8fd1\u90bb\u7b97\u6cd5\u7684\u8f93\u5165\u4e3a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u7279\u5f81\u7a7a\u95f4\u7684\u70b9\uff1b\u8f93\u51fa\u4e3a\u5b9e\u4f8b\u7684\u7c7b\u522b\uff0c\u53ef\u4ee5\u53d6\u591a\u7c7b\u3002k \u8fd1\u90bb\u7b97\u6cd5\u5047\u8bbe\u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u7684\u5b9e\u4f8b\u7c7b\u522b\u5df2\u5b9a\u3002\u5206\u7c7b\u65f6\uff0c\u5bf9\u65b0\u7684\u5b9e\u4f8b\uff0c\u6839\u636e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u7684\u8bad\u7ec3\u5b9e\u4f8b\u7684\u7c7b\u522b\uff0c\u901a\u8fc7\u591a\u6570\u8868\u51b3\u7b49\u65b9\u5f0f\u8fdb\u884c\u9884\u6d4b\u3002\u56e0\u6b64\uff0ck\u8fd1\u90bb\u7b97\u6cd5\u4e0d\u5177\u6709\u663e\u5f0f\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002 k \u8fd1\u90bb\u7b97\u6cd5\u5b9e\u9645\u4e0a\u5229\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u5bf9\u7279\u5f81\u5411\u91cf\u7a7a\u95f4\u8fdb\u884c\u5212\u5206\uff0c\u5e76\u4f5c\u4e3a\u5176\u5206\u7c7b\u7684\u201c\u6a21\u578b\u201d\u3002 k\u503c\u7684\u9009\u62e9\u3001\u8ddd\u79bb\u5ea6\u91cf\u4ee5\u53ca\u5206\u7c7b\u51b3\u7b56\u89c4\u5219\u662fk\u8fd1\u90bb\u7b97\u6cd5\u7684\u4e09\u4e2a\u57fa\u672c\u8981\u7d20\u3002","title":"KNN \u6982\u8ff0"},{"location":"ml/2.KNN/#knn_1","text":"\u7535\u5f71\u53ef\u4ee5\u6309\u7167\u9898\u6750\u5206\u7c7b\uff0c\u90a3\u4e48\u5982\u4f55\u533a\u5206 \u52a8\u4f5c\u7247 \u548c \u7231\u60c5\u7247 \u5462\uff1f 1. \u52a8\u4f5c\u7247\uff1a\u6253\u6597\u6b21\u6570\u66f4\u591a 2. \u7231\u60c5\u7247\uff1a\u4eb2\u543b\u6b21\u6570\u66f4\u591a \u57fa\u4e8e\u7535\u5f71\u4e2d\u7684\u4eb2\u543b\u3001\u6253\u6597\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u7528 k-\u8fd1\u90bb\u7b97\u6cd5\u6784\u9020\u7a0b\u5e8f\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u5212\u5206\u7535\u5f71\u7684\u9898\u6750\u7c7b\u578b\u3002 \u73b0\u5728\u6839\u636e\u4e0a\u9762\u6211\u4eec\u5f97\u5230\u7684\u6837\u672c\u96c6\u4e2d\u6240\u6709\u7535\u5f71\u4e0e\u672a\u77e5\u7535\u5f71\u7684\u8ddd\u79bb\uff0c\u6309\u7167\u8ddd\u79bb\u9012\u589e\u6392\u5e8f\uff0c\u53ef\u4ee5\u627e\u5230 k \u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u7535\u5f71\u3002 \u5047\u5b9a k=3\uff0c\u5219\u4e09\u4e2a\u6700\u9760\u8fd1\u7684\u7535\u5f71\u4f9d\u6b21\u662f\uff0c He's Not Really into Dudes \u3001 Beautiful Woman \u548c California Man\u3002 knn \u7b97\u6cd5\u6309\u7167\u8ddd\u79bb\u6700\u8fd1\u7684\u4e09\u90e8\u7535\u5f71\u7684\u7c7b\u578b\uff0c\u51b3\u5b9a\u672a\u77e5\u7535\u5f71\u7684\u7c7b\u578b\uff0c\u800c\u8fd9\u4e09\u90e8\u7535\u5f71\u5168\u662f\u7231\u60c5\u7247\uff0c\u56e0\u6b64\u6211\u4eec\u5224\u5b9a\u672a\u77e5\u7535\u5f71\u662f\u7231\u60c5\u7247\u3002","title":"KNN \u573a\u666f"},{"location":"ml/2.KNN/#knn_2","text":"KNN \u5de5\u4f5c\u539f\u7406 \u5047\u8bbe\u6709\u4e00\u4e2a\u5e26\u6709\u6807\u7b7e\u7684\u6837\u672c\u6570\u636e\u96c6\uff08\u8bad\u7ec3\u6837\u672c\u96c6\uff09\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u6761\u6570\u636e\u4e0e\u6240\u5c5e\u5206\u7c7b\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u8f93\u5165\u6ca1\u6709\u6807\u7b7e\u7684\u65b0\u6570\u636e\u540e\uff0c\u5c06\u65b0\u6570\u636e\u7684\u6bcf\u4e2a\u7279\u5f81\u4e0e\u6837\u672c\u96c6\u4e2d\u6570\u636e\u5bf9\u5e94\u7684\u7279\u5f81\u8fdb\u884c\u6bd4\u8f83\u3002 \u8ba1\u7b97\u65b0\u6570\u636e\u4e0e\u6837\u672c\u6570\u636e\u96c6\u4e2d\u6bcf\u6761\u6570\u636e\u7684\u8ddd\u79bb\u3002 \u5bf9\u6c42\u5f97\u7684\u6240\u6709\u8ddd\u79bb\u8fdb\u884c\u6392\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff0c\u8d8a\u5c0f\u8868\u793a\u8d8a\u76f8\u4f3c\uff09\u3002 \u53d6\u524d k \uff08k \u4e00\u822c\u5c0f\u4e8e\u7b49\u4e8e 20 \uff09\u4e2a\u6837\u672c\u6570\u636e\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\u3002 \u6c42 k \u4e2a\u6570\u636e\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5206\u7c7b\u6807\u7b7e\u4f5c\u4e3a\u65b0\u6570\u636e\u7684\u5206\u7c7b\u3002 KNN \u901a\u4fd7\u7406\u89e3 \u7ed9\u5b9a\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u5bf9\u65b0\u7684\u8f93\u5165\u5b9e\u4f8b\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b\uff0c\u8fd9 k \u4e2a\u5b9e\u4f8b\u7684\u591a\u6570\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\uff0c\u5c31\u628a\u8be5\u8f93\u5165\u5b9e\u4f8b\u5206\u4e3a\u8fd9\u4e2a\u7c7b\u3002 KNN \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u8ddd\u79bb\u8ba1\u7b97\u6240\u9700\u8981\u7684\u6570\u503c\uff0c\u6700\u597d\u662f\u7ed3\u6784\u5316\u7684\u6570\u636e\u683c\u5f0f \u5206\u6790\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u9519\u8bef\u7387 \u4f7f\u7528\u7b97\u6cd5\uff1a\u8f93\u5165\u6837\u672c\u6570\u636e\u548c\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u7136\u540e\u8fd0\u884c k-\u8fd1\u90bb\u7b97\u6cd5\u5224\u65ad\u8f93\u5165\u6570\u636e\u5206\u7c7b\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7c7b\uff0c\u6700\u540e\u5bf9\u8ba1\u7b97\u51fa\u7684\u5206\u7c7b\u6267\u884c\u540e\u7eed\u5904\u7406 KNN \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u7cbe\u5ea6\u9ad8\u3001\u5bf9\u5f02\u5e38\u503c\u4e0d\u654f\u611f\u3001\u65e0\u6570\u636e\u8f93\u5165\u5047\u5b9a \u7f3a\u70b9\uff1a\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8 \u9002\u7528\u6570\u636e\u8303\u56f4\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b","title":"KNN \u539f\u7406"},{"location":"ml/2.KNN/#knn_3","text":"","title":"KNN \u9879\u76ee\u6848\u4f8b"},{"location":"ml/2.KNN/#1","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/2.KNN/kNN.py","title":"\u9879\u76ee\u6848\u4f8b1: \u4f18\u5316\u7ea6\u4f1a\u7f51\u7ad9\u7684\u914d\u5bf9\u6548\u679c"},{"location":"ml/2.KNN/#_1","text":"\u6d77\u4f26\u4f7f\u7528\u7ea6\u4f1a\u7f51\u7ad9\u5bfb\u627e\u7ea6\u4f1a\u5bf9\u8c61\u3002\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u5979\u53d1\u73b0\u66fe\u4ea4\u5f80\u8fc7\u4e09\u79cd\u7c7b\u578b\u7684\u4eba: \u4e0d\u559c\u6b22\u7684\u4eba \u9b45\u529b\u4e00\u822c\u7684\u4eba * \u6781\u5177\u9b45\u529b\u7684\u4eba \u5979\u5e0c\u671b\uff1a 1. \u5de5\u4f5c\u65e5\u4e0e\u9b45\u529b\u4e00\u822c\u7684\u4eba\u7ea6\u4f1a 2. \u5468\u672b\u4e0e\u6781\u5177\u9b45\u529b\u7684\u4eba\u7ea6\u4f1a 3. \u4e0d\u559c\u6b22\u7684\u4eba\u5219\u76f4\u63a5\u6392\u9664\u6389 \u73b0\u5728\u5979\u6536\u96c6\u5230\u4e86\u4e00\u4e9b\u7ea6\u4f1a\u7f51\u7ad9\u672a\u66fe\u8bb0\u5f55\u7684\u6570\u636e\u4fe1\u606f\uff0c\u8fd9\u66f4\u6709\u52a9\u4e8e\u5339\u914d\u5bf9\u8c61\u7684\u5f52\u7c7b\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/2.KNN/#_2","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u4f7f\u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6 \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528 Matplotlib \u753b\u4e8c\u7ef4\u6563\u70b9\u56fe \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d77\u4f26\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\u3002 \u6d4b\u8bd5\u6837\u672c\u548c\u975e\u6d4b\u8bd5\u6837\u672c\u7684\u533a\u522b\u5728\u4e8e\uff1a \u6d4b\u8bd5\u6837\u672c\u662f\u5df2\u7ecf\u5b8c\u6210\u5206\u7c7b\u7684\u6570\u636e\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u4ea7\u751f\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u7136\u540e\u6d77\u4f26\u53ef\u4ee5\u8f93\u5165\u4e00\u4e9b\u7279\u5f81\u6570\u636e\u4ee5\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u4e3a\u81ea\u5df1\u559c\u6b22\u7684\u7c7b\u578b\u3002 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6d77\u4f26\u628a\u8fd9\u4e9b\u7ea6\u4f1a\u5bf9\u8c61\u7684\u6570\u636e\u5b58\u653e\u5728\u6587\u672c\u6587\u4ef6 datingTestSet2.txt \u4e2d\uff0c\u603b\u5171\u6709 1000 \u884c\u3002\u6d77\u4f26\u7ea6\u4f1a\u7684\u5bf9\u8c61\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b 3 \u79cd\u7279\u5f81\uff1a \u6bcf\u5e74\u83b7\u5f97\u7684\u98de\u884c\u5e38\u5ba2\u91cc\u7a0b\u6570 \u73a9\u89c6\u9891\u6e38\u620f\u6240\u8017\u65f6\u95f4\u767e\u5206\u6bd4 \u6bcf\u5468\u6d88\u8d39\u7684\u51b0\u6dc7\u6dcb\u516c\u5347\u6570 \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a 40920 8.326976 0.953952 3 14488 7.153469 1.673904 2 26052 1.441871 0.805124 1 75136 13.147394 0.428964 1 38344 1.669788 0.134296 1 \u51c6\u5907\u6570\u636e\uff1a\u4f7f\u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6 \u5c06\u6587\u672c\u8bb0\u5f55\u8f6c\u6362\u4e3a NumPy \u7684\u89e3\u6790\u7a0b\u5e8f ```python def file2matrix(filename): \"\"\" Desc: \u5bfc\u5165\u8bad\u7ec3\u6570\u636e parameters: filename: \u6570\u636e\u6587\u4ef6\u8def\u5f84 return: \u6570\u636e\u77e9\u9635 returnMat \u548c\u5bf9\u5e94\u7684\u7c7b\u522b classLabelVector \"\"\" fr = open(filename) # \u83b7\u5f97\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u884c\u7684\u884c\u6570 numberOfLines = len(fr.readlines()) # \u751f\u6210\u5bf9\u5e94\u7684\u7a7a\u77e9\u9635 # \u4f8b\u5982\uff1azeros(2\uff0c3)\u5c31\u662f\u751f\u6210\u4e00\u4e2a 2*3\u7684\u77e9\u9635\uff0c\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u5168\u662f 0 returnMat = zeros((numberOfLines, 3)) # prepare matrix to return classLabelVector = [] # prepare labels return fr = open(filename) index = 0 for line in fr.readlines(): # str.strip([chars]) --\u8fd4\u56de\u5df2\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u5b57\u7b26\u6240\u751f\u6210\u7684\u65b0\u5b57\u7b26\u4e32 line = line.strip() # \u4ee5 '\\t' \u5207\u5272\u5b57\u7b26\u4e32 listFromLine = line.split('\\t') # \u6bcf\u5217\u7684\u5c5e\u6027\u6570\u636e returnMat[index, :] = listFromLine[0:3] # \u6bcf\u5217\u7684\u7c7b\u522b\u6570\u636e\uff0c\u5c31\u662f label \u6807\u7b7e\u6570\u636e classLabelVector.append(int(listFromLine[-1])) index += 1 # \u8fd4\u56de\u6570\u636e\u77e9\u9635returnMat\u548c\u5bf9\u5e94\u7684\u7c7b\u522bclassLabelVector return returnMat, classLabelVector > \u5206\u6790\u6570\u636e\uff1a\u4f7f\u7528 Matplotlib \u753b\u4e8c\u7ef4\u6563\u70b9\u56fe ```python import matplotlib import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(datingDataMat[:, 0], datingDataMat[:, 1], 15.0*array(datingLabels), 15.0*array(datingLabels)) plt.show() \u4e0b\u56fe\u4e2d\u91c7\u7528\u77e9\u9635\u7684\u7b2c\u4e00\u548c\u7b2c\u4e8c\u5217\u5c5e\u6027\u5f97\u5230\u5f88\u597d\u7684\u5c55\u793a\u6548\u679c\uff0c\u6e05\u6670\u5730\u6807\u8bc6\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6837\u672c\u5206\u7c7b\u533a\u57df\uff0c\u5177\u6709\u4e0d\u540c\u7231\u597d\u7684\u4eba\u5176\u7c7b\u522b\u533a\u57df\u4e5f\u4e0d\u540c\u3002 \u5f52\u4e00\u5316\u6570\u636e \uff08\u5f52\u4e00\u5316\u662f\u4e00\u4e2a\u8ba9\u6743\u91cd\u53d8\u4e3a\u7edf\u4e00\u7684\u8fc7\u7a0b\uff0c\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003\uff1a https://www.zhihu.com/question/19951858 \uff09 \u5e8f\u53f7 \u73a9\u89c6\u9891\u6e38\u620f\u6240\u8017\u65f6\u95f4\u767e\u5206\u6bd4 \u6bcf\u5e74\u83b7\u5f97\u7684\u98de\u884c\u5e38\u5ba2\u91cc\u7a0b\u6570 \u6bcf\u5468\u6d88\u8d39\u7684\u51b0\u6dc7\u6dcb\u516c\u5347\u6570 \u6837\u672c\u5206\u7c7b 1 0.8 400 0.5 1 2 12 134 000 0.9 3 3 0 20 000 1.1 2 4 67 32 000 0.1 2 \u6837\u672c3\u548c\u6837\u672c4\u7684\u8ddd\u79bb\uff1a $$\\sqrt{(0-67)^2 + (20000-32000)^2 + (1.1-0.1)^2 }$$ \u5f52\u4e00\u5316\u7279\u5f81\u503c\uff0c\u6d88\u9664\u7279\u5f81\u4e4b\u95f4\u91cf\u7ea7\u4e0d\u540c\u5bfc\u81f4\u7684\u5f71\u54cd \u5f52\u4e00\u5316\u5b9a\u4e49\uff1a \u6211\u662f\u8fd9\u6837\u8ba4\u4e3a\u7684\uff0c\u5f52\u4e00\u5316\u5c31\u662f\u8981\u628a\u4f60\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u7ecf\u8fc7\u5904\u7406\u540e\uff08\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\uff09\u9650\u5236\u5728\u4f60\u9700\u8981\u7684\u4e00\u5b9a\u8303\u56f4\u5185\u3002\u9996\u5148\u5f52\u4e00\u5316\u662f\u4e3a\u4e86\u540e\u9762\u6570\u636e\u5904\u7406\u7684\u65b9\u4fbf\uff0c\u5176\u6b21\u662f\u4fdd\u6b63\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6536\u655b\u52a0\u5feb\u3002 \u65b9\u6cd5\u6709\u5982\u4e0b\uff1a 1) \u7ebf\u6027\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a\u3000\u3000 y=(x-MinValue)/(MaxValue-MinValue) \u8bf4\u660e\uff1ax\u3001y\u5206\u522b\u4e3a\u8f6c\u6362\u524d\u3001\u540e\u7684\u503c\uff0cMaxValue\u3001MinValue\u5206\u522b\u4e3a\u6837\u672c\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 2) \u5bf9\u6570\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a\u3000\u3000 y=log10(x) \u8bf4\u660e\uff1a\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\u51fd\u6570\u8f6c\u6362\u3002 \u5982\u56fe\uff1a ![\u5bf9\u6570\u51fd\u6570\u56fe\u50cf](/img/ml/2.KNN/knn_1.png) 3) \u53cd\u4f59\u5207\u51fd\u6570\u8f6c\u6362\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a y=arctan(x)*2/PI \u5982\u56fe\uff1a ![\u53cd\u4f59\u5207\u51fd\u6570\u56fe\u50cf](/img/ml/2.KNN/arctan_arccot.gif) 4) \u5f0f(1)\u5c06\u8f93\u5165\u503c\u6362\u7b97\u4e3a[-1,1]\u533a\u95f4\u7684\u503c\uff0c\u5728\u8f93\u51fa\u5c42\u7528\u5f0f(2)\u6362\u7b97\u56de\u521d\u59cb\u503c\uff0c\u5176\u4e2d\u548c\u5206\u522b\u8868\u793a\u8bad\u7ec3\u6837\u672c\u96c6\u4e2d\u8d1f\u8377\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u3000 \u5728\u7edf\u8ba1\u5b66\u4e2d\uff0c\u5f52\u4e00\u5316\u7684\u5177\u4f53\u4f5c\u7528\u662f\u5f52\u7eb3\u7edf\u4e00\u6837\u672c\u7684\u7edf\u8ba1\u5206\u5e03\u6027\u3002\u5f52\u4e00\u5316\u57280-1\u4e4b\u95f4\u662f\u7edf\u8ba1\u7684\u6982\u7387\u5206\u5e03\uff0c\u5f52\u4e00\u5316\u5728-1--+1\u4e4b\u95f4\u662f\u7edf\u8ba1\u7684\u5750\u6807\u5206\u5e03\u3002 def autoNorm(dataSet): \"\"\" Desc: \u5f52\u4e00\u5316\u7279\u5f81\u503c\uff0c\u6d88\u9664\u7279\u5f81\u4e4b\u95f4\u91cf\u7ea7\u4e0d\u540c\u5bfc\u81f4\u7684\u5f71\u54cd parameter: dataSet: \u6570\u636e\u96c6 return: \u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\u96c6 normDataSet. ranges\u548cminVals\u5373\u6700\u5c0f\u503c\u4e0e\u8303\u56f4\uff0c\u5e76\u6ca1\u6709\u7528\u5230 \u5f52\u4e00\u5316\u516c\u5f0f\uff1a Y = (X-Xmin)/(Xmax-Xmin) \u5176\u4e2d\u7684 min \u548c max \u5206\u522b\u662f\u6570\u636e\u96c6\u4e2d\u7684\u6700\u5c0f\u7279\u5f81\u503c\u548c\u6700\u5927\u7279\u5f81\u503c\u3002\u8be5\u51fd\u6570\u53ef\u4ee5\u81ea\u52a8\u5c06\u6570\u5b57\u7279\u5f81\u503c\u8f6c\u5316\u4e3a0\u52301\u7684\u533a\u95f4\u3002 \"\"\" # \u8ba1\u7b97\u6bcf\u79cd\u5c5e\u6027\u7684\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u8303\u56f4 minVals = dataSet.min(0) maxVals = dataSet.max(0) # \u6781\u5dee ranges = maxVals - minVals normDataSet = zeros(shape(dataSet)) m = dataSet.shape[0] # \u751f\u6210\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\u7ec4\u6210\u7684\u77e9\u9635 normDataSet = dataSet - tile(minVals, (m, 1)) # \u5c06\u6700\u5c0f\u503c\u4e4b\u5dee\u9664\u4ee5\u8303\u56f4\u7ec4\u6210\u77e9\u9635 normDataSet = normDataSet / tile(ranges, (m, 1)) # element wise divide return normDataSet, ranges, minVals \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e k-\u8fd1\u90bb\u7b97\u6cd5 \u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u6bcf\u4e00\u6b21\u90fd\u8981\u4e0e\u5168\u91cf\u7684\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 kNN \u7b97\u6cd5\u4f2a\u4ee3\u7801\uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5728\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u70b9\uff1a \u8ba1\u7b97\u76ee\u6807\u7684\u6570\u636e\u70b9\uff08\u9700\u8981\u5206\u7c7b\u7684\u6570\u636e\u70b9\uff09\u4e0e\u8be5\u6570\u636e\u70b9\u7684\u8ddd\u79bb \u5c06\u8ddd\u79bb\u6392\u5e8f\uff1a\u4ece\u5c0f\u5230\u5927 \u9009\u53d6\u524dK\u4e2a\u6700\u77ed\u8ddd\u79bb \u9009\u53d6\u8fd9K\u4e2a\u4e2d\u6700\u591a\u7684\u5206\u7c7b\u7c7b\u522b \u8fd4\u56de\u8be5\u7c7b\u522b\u6765\u4f5c\u4e3a\u76ee\u6807\u6570\u636e\u70b9\u7684\u9884\u6d4b\u503c def classify0(inX, dataSet, labels, k): dataSetSize = dataSet.shape[0] #\u8ddd\u79bb\u5ea6\u91cf \u5ea6\u91cf\u516c\u5f0f\u4e3a\u6b27\u6c0f\u8ddd\u79bb diffMat = tile(inX, (dataSetSize,1)) \u2013 dataSet sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) distances = sqDistances**0.5 #\u5c06\u8ddd\u79bb\u6392\u5e8f\uff1a\u4ece\u5c0f\u5230\u5927 sortedDistIndicies = distances.argsort() #\u9009\u53d6\u524dK\u4e2a\u6700\u77ed\u8ddd\u79bb\uff0c \u9009\u53d6\u8fd9K\u4e2a\u4e2d\u6700\u591a\u7684\u5206\u7c7b\u7c7b\u522b classCount={} for i in range(k)\uff1a voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d77\u4f26\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\u3002\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef\u3002 kNN \u5206\u7c7b\u5668\u9488\u5bf9\u7ea6\u4f1a\u7f51\u7ad9\u7684\u6d4b\u8bd5\u4ee3\u7801 def datingClassTest(): \"\"\" Desc: \u5bf9\u7ea6\u4f1a\u7f51\u7ad9\u7684\u6d4b\u8bd5\u65b9\u6cd5 parameters: none return: \u9519\u8bef\u6570 \"\"\" # \u8bbe\u7f6e\u6d4b\u8bd5\u6570\u636e\u7684\u7684\u4e00\u4e2a\u6bd4\u4f8b\uff08\u8bad\u7ec3\u6570\u636e\u96c6\u6bd4\u4f8b=1-hoRatio\uff09 hoRatio = 0.1 # \u6d4b\u8bd5\u8303\u56f4,\u4e00\u90e8\u5206\u6d4b\u8bd5\u4e00\u90e8\u5206\u4f5c\u4e3a\u6837\u672c # \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e datingDataMat, datingLabels = file2matrix('db/2.KNN/datingTestSet2.txt') # load data setfrom file # \u5f52\u4e00\u5316\u6570\u636e normMat, ranges, minVals = autoNorm(datingDataMat) # m \u8868\u793a\u6570\u636e\u7684\u884c\u6570\uff0c\u5373\u77e9\u9635\u7684\u7b2c\u4e00\u7ef4 m = normMat.shape[0] # \u8bbe\u7f6e\u6d4b\u8bd5\u7684\u6837\u672c\u6570\u91cf\uff0c numTestVecs:m\u8868\u793a\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf numTestVecs = int(m * hoRatio) print 'numTestVecs=', numTestVecs errorCount = 0.0 for i in range(numTestVecs): # \u5bf9\u6570\u636e\u6d4b\u8bd5 classifierResult = classify0(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 3) print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i]) if (classifierResult != datingLabels[i]): errorCount += 1.0 print \"the total error rate is: %f\" % (errorCount / float(numTestVecs)) print errorCount \u4f7f\u7528\u7b97\u6cd5\uff1a\u4ea7\u751f\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u7136\u540e\u6d77\u4f26\u53ef\u4ee5\u8f93\u5165\u4e00\u4e9b\u7279\u5f81\u6570\u636e\u4ee5\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u4e3a\u81ea\u5df1\u559c\u6b22\u7684\u7c7b\u578b\u3002 \u7ea6\u4f1a\u7f51\u7ad9\u9884\u6d4b\u51fd\u6570 def classifyPerson(): resultList = ['not at all', 'in small doses', 'in large doses'] percentTats = float(raw_input(\"percentage of time spent playing video games ?\")) ffMiles = float(raw_input(\"frequent filer miles earned per year?\")) iceCream = float(raw_input(\"liters of ice cream consumed per year?\")) datingDataMat, datingLabels = file2matrix('datingTestSet2.txt') normMat, ranges, minVals = autoNorm(datingDataMat) inArr = array([ffMiles, percentTats, iceCream]) classifierResult = classify0((inArr-minVals)/ranges,normMat,datingLabels, 3) print \"You will probably like this person: \", resultList[classifierResult - 1] \u5b9e\u9645\u8fd0\u884c\u6548\u679c\u5982\u4e0b: >>> classifyPerson() percentage of time spent playing video games?10 frequent flier miles earned per year?10000 liters of ice cream consumed per year?0.5 You will probably like this person: in small doses","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/2.KNN/#2","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/2.KNN/kNN.py","title":"\u9879\u76ee\u6848\u4f8b2: \u624b\u5199\u6570\u5b57\u8bc6\u522b\u7cfb\u7edf"},{"location":"ml/2.KNN/#_3","text":"\u6784\u9020\u4e00\u4e2a\u80fd\u8bc6\u522b\u6570\u5b57 0 \u5230 9 \u7684\u57fa\u4e8e KNN \u5206\u7c7b\u5668\u7684\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7cfb\u7edf\u3002 \u9700\u8981\u8bc6\u522b\u7684\u6570\u5b57\u662f\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u5177\u6709\u76f8\u540c\u7684\u8272\u5f69\u548c\u5927\u5c0f\uff1a\u5bbd\u9ad8\u662f 32 \u50cf\u7d20 * 32 \u50cf\u7d20\u7684\u9ed1\u767d\u56fe\u50cf\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/2.KNN/#_4","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u6587\u672c\u6587\u4ef6\u3002 \u51c6\u5907\u6570\u636e\uff1a\u7f16\u5199\u51fd\u6570 img2vector(), \u5c06\u56fe\u50cf\u683c\u5f0f\u8f6c\u6362\u4e3a\u5206\u7c7b\u5668\u4f7f\u7528\u7684\u5411\u91cf\u683c\u5f0f \u5206\u6790\u6570\u636e\uff1a\u5728 Python \u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u5b83\u7b26\u5408\u8981\u6c42 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e KNN \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u7f16\u5199\u51fd\u6570\u4f7f\u7528\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\uff0c\u6d4b\u8bd5\u6837\u672c\u4e0e\u975e\u6d4b\u8bd5\u6837\u672c\u7684 \u533a\u522b\u5728\u4e8e\u6d4b\u8bd5\u6837\u672c\u662f\u5df2\u7ecf\u5b8c\u6210\u5206\u7c7b\u7684\u6570\u636e\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c \u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u6ca1\u6709\u5b8c\u6210\u6b64\u6b65\u9aa4\uff0c\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6 \u6570\u5b57\uff0c\u5e76\u5b8c\u6210\u6570\u5b57\u8bc6\u522b\uff0c\u7f8e\u56fd\u7684\u90ae\u4ef6\u5206\u62e3\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u5b9e\u9645\u8fd0\u884c\u7684\u7c7b\u4f3c\u7cfb\u7edf \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u76ee\u5f55 trainingDigits \u4e2d\u5305\u542b\u4e86\u5927\u7ea6 2000 \u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e2a\u4f8b\u5b50\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u6570\u5b57\u5927\u7ea6\u6709 200 \u4e2a\u6837\u672c\uff1b\u76ee\u5f55 testDigits \u4e2d\u5305\u542b\u4e86\u5927\u7ea6 900 \u4e2a\u6d4b\u8bd5\u6570\u636e\u3002 \u51c6\u5907\u6570\u636e: \u7f16\u5199\u51fd\u6570 img2vector(), \u5c06\u56fe\u50cf\u6587\u672c\u6570\u636e\u8f6c\u6362\u4e3a\u5206\u7c7b\u5668\u4f7f\u7528\u7684\u5411\u91cf \u5c06\u56fe\u50cf\u6587\u672c\u6570\u636e\u8f6c\u6362\u4e3a\u5411\u91cf def img2vector(filename): returnVect = zeros((1,1024)) fr = open(filename) for i in range(32): lineStr = fr.readline() for j in range(32): returnVect[0,32*i+j] = int(lineStr[j]) return returnVect \u5206\u6790\u6570\u636e\uff1a\u5728 Python \u547d\u4ee4\u63d0\u793a\u7b26\u4e2d\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u5b83\u7b26\u5408\u8981\u6c42 \u5728 Python \u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u6d4b\u8bd5 img2vector \u51fd\u6570\uff0c\u7136\u540e\u4e0e\u6587\u672c\u7f16\u8f91\u5668\u6253\u5f00\u7684\u6587\u4ef6\u8fdb\u884c\u6bd4\u8f83: >>> testVector = kNN.img2vector('testDigits/0_13.txt') >>> testVector[0,0:32] array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) >>> testVector[0,32:64] array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u4e0d\u9002\u7528\u4e8e KNN \u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u6bcf\u4e00\u6b21\u90fd\u8981\u4e0e\u5168\u91cf\u7684\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u7f16\u5199\u51fd\u6570\u4f7f\u7528\u63d0\u4f9b\u7684\u90e8\u5206\u6570\u636e\u96c6\u4f5c\u4e3a\u6d4b\u8bd5\u6837\u672c\uff0c\u5982\u679c\u9884\u6d4b\u5206\u7c7b\u4e0e\u5b9e\u9645\u7c7b\u522b\u4e0d\u540c\uff0c\u5219\u6807\u8bb0\u4e3a\u4e00\u4e2a\u9519\u8bef def handwritingClassTest(): # 1. \u5bfc\u5165\u8bad\u7ec3\u6570\u636e hwLabels = [] trainingFileList = listdir('db/2.KNN/trainingDigits') # load the training set m = len(trainingFileList) trainingMat = zeros((m, 1024)) # hwLabels\u5b58\u50a80\uff5e9\u5bf9\u5e94\u7684index\u4f4d\u7f6e\uff0c trainingMat\u5b58\u653e\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u56fe\u7247\u5411\u91cf for i in range(m): fileNameStr = trainingFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) hwLabels.append(classNumStr) # \u5c06 32*32\u7684\u77e9\u9635->1*1024\u7684\u77e9\u9635 trainingMat[i, :] = img2vector('db/2.KNN/trainingDigits/%s' % fileNameStr) # 2. \u5bfc\u5165\u6d4b\u8bd5\u6570\u636e testFileList = listdir('db/2.KNN/testDigits') # iterate through the test set errorCount = 0.0 mTest = len(testFileList) for i in range(mTest): fileNameStr = testFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) vectorUnderTest = img2vector('db/2.KNN/testDigits/%s' % fileNameStr) classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3) print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, classNumStr) if (classifierResult != classNumStr): errorCount += 1.0 print \"\\nthe total number of errors is: %d\" % errorCount print \"\\nthe total error rate is: %f\" % (errorCount / float(mTest)) \u4f7f\u7528\u7b97\u6cd5\uff1a\u672c\u4f8b\u6ca1\u6709\u5b8c\u6210\u6b64\u6b65\u9aa4\uff0c\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u6570\u5b57\uff0c\u5e76\u5b8c\u6210\u6570\u5b57\u8bc6\u522b\uff0c\u7f8e\u56fd\u7684\u90ae\u4ef6\u5206\u62e3\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u5b9e\u9645\u8fd0\u884c\u7684\u7c7b\u4f3c\u7cfb\u7edf\u3002","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/2.KNN/#knn_4","text":"KNN \u662f\u4ec0\u4e48\uff1f\u5b9a\u4e49\uff1a \u76d1\u7763\u5b66\u4e60\uff1f \u975e\u76d1\u7763\u5b66\u4e60\uff1f KNN \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u65e0\u663e\u793a\u5b66\u4e60\u8fc7\u7a0b\uff0c\u975e\u6cdb\u5316\u5b66\u4e60\u7684\u76d1\u7763\u5b66\u4e60\u6a21\u578b\u3002\u5728\u5206\u7c7b\u548c\u56de\u5f52\u4e2d\u5747\u6709\u5e94\u7528\u3002","title":"KNN \u5c0f\u7ed3"},{"location":"ml/2.KNN/#_5","text":"\u7b80\u5355\u6765\u8bf4\uff1a \u901a\u8fc7\u8ddd\u79bb\u5ea6\u91cf\u6765\u8ba1\u7b97\u67e5\u8be2\u70b9\uff08query point\uff09\u4e0e\u6bcf\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u9009\u51fa\u4e0e\u67e5\u8be2\u70b9\uff08query point\uff09\u76f8\u8fd1\u7684K\u4e2a\u6700\u90bb\u70b9\uff08K nearest neighbors\uff09\uff0c\u4f7f\u7528\u5206\u7c7b\u51b3\u7b56\u6765\u9009\u51fa\u5bf9\u5e94\u7684\u6807\u7b7e\u6765\u4f5c\u4e3a\u8be5\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"ml/2.KNN/#knn_5","text":"K, K\u7684\u53d6\u503c \u5bf9\u67e5\u8be2\u70b9\u6807\u7b7e\u5f71\u54cd\u663e\u8457\uff08\u6548\u679c\u62d4\u7fa4\uff09\u3002k\u503c\u5c0f\u7684\u65f6\u5019 \u8fd1\u4f3c\u8bef\u5dee\u5c0f\uff0c\u4f30\u8ba1\u8bef\u5dee\u5927\u3002 k\u503c\u5927 \u8fd1\u4f3c\u8bef\u5dee\u5927\uff0c\u4f30\u8ba1\u8bef\u5dee\u5c0f\u3002 \u5982\u679c\u9009\u62e9\u8f83\u5c0f\u7684 k \u503c\uff0c\u5c31\u76f8\u5f53\u4e8e\u7528\u8f83\u5c0f\u7684\u90bb\u57df\u4e2d\u7684\u8bad\u7ec3\u5b9e\u4f8b\u8fdb\u884c\u9884\u6d4b\uff0c\u201c\u5b66\u4e60\u201d\u7684\u8fd1\u4f3c\u8bef\u5dee\uff08approximation error\uff09\u4f1a\u51cf\u5c0f\uff0c\u53ea\u6709\u4e0e\u8f93\u5165\u5b9e\u4f8b\u8f83\u8fd1\u7684\uff08\u76f8\u4f3c\u7684\uff09\u8bad\u7ec3\u5b9e\u4f8b\u624d\u4f1a\u5bf9\u9884\u6d4b\u7ed3\u679c\u8d77\u4f5c\u7528\u3002\u4f46\u7f3a\u70b9\u662f\u201c\u5b66\u4e60\u201d\u7684\u4f30\u8ba1\u8bef\u5dee\uff08estimation error\uff09\u4f1a\u589e\u5927\uff0c\u9884\u6d4b\u7ed3\u679c\u4f1a\u5bf9\u8fd1\u90bb\u7684\u5b9e\u4f8b\u70b9\u975e\u5e38\u654f\u611f\u3002\u5982\u679c\u90bb\u8fd1\u7684\u5b9e\u4f8b\u70b9\u6070\u5de7\u662f\u566a\u58f0\uff0c\u9884\u6d4b\u5c31\u4f1a\u51fa\u9519\u3002\u6362\u53e5\u8bdd\u8bf4\uff0ck \u503c\u7684\u51cf\u5c0f\u5c31\u610f\u5473\u7740\u6574\u4f53\u6a21\u578b\u53d8\u5f97\u590d\u6742\uff0c\u5bb9\u6613\u53d1\u751f\u8fc7\u62df\u5408\u3002 \u5982\u679c\u9009\u62e9\u8f83\u5927\u7684 k \u503c\uff0c\u5c31\u76f8\u5f53\u4e8e\u7528\u8f83\u5927\u7684\u90bb\u57df\u4e2d\u7684\u8bad\u7ec3\u5b9e\u4f8b\u8fdb\u884c\u9884\u6d4b\u3002\u5176\u4f18\u70b9\u662f\u53ef\u4ee5\u51cf\u5c11\u5b66\u4e60\u7684\u4f30\u8ba1\u8bef\u5dee\u3002\u4f46\u7f3a\u70b9\u662f\u5b66\u4e60\u7684\u8fd1\u4f3c\u8bef\u5dee\u4f1a\u589e\u5927\u3002\u8fd9\u65f6\u4e0e\u8f93\u5165\u5b9e\u4f8b\u8f83\u8fdc\u7684\uff08\u4e0d\u76f8\u4f3c\u7684\uff09\u8bad\u7ec3\u5b9e\u4f8b\u4e5f\u4f1a\u5bf9\u9884\u6d4b\u8d77\u4f5c\u7528\uff0c\u4f7f\u9884\u6d4b\u53d1\u751f\u9519\u8bef\u3002 k \u503c\u7684\u589e\u5927\u5c31\u610f\u5473\u7740\u6574\u4f53\u7684\u6a21\u578b\u53d8\u5f97\u7b80\u5355\u3002 \u592a\u5927\u592a\u5c0f\u90fd\u4e0d\u592a\u597d\uff0c\u53ef\u4ee5\u7528\u4ea4\u53c9\u9a8c\u8bc1\uff08cross validation\uff09\u6765\u9009\u53d6\u9002\u5408\u7684k\u503c\u3002 \u8fd1\u4f3c\u8bef\u5dee\u548c\u4f30\u8ba1\u8bef\u5dee\uff0c\u8bf7\u770b\u8fd9\u91cc\uff1ahttps://www.zhihu.com/question/60793482 \u8ddd\u79bb\u5ea6\u91cf Metric/Distance Measure \u8ddd\u79bb\u5ea6\u91cf \u901a\u5e38\u4e3a \u6b27\u5f0f\u8ddd\u79bb\uff08Euclidean distance\uff09\uff0c\u8fd8\u53ef\u4ee5\u662f Minkowski \u8ddd\u79bb \u6216\u8005 \u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u4e5f\u53ef\u4ee5\u662f \u5730\u7406\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e9b\u8ddd\u79bb\u516c\u5f0f\u3002\uff08\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u770b sklearn \u4e2d valid_metric \u90e8\u5206\uff09 \u5206\u7c7b\u51b3\u7b56 \uff08decision rule\uff09 \u5206\u7c7b\u51b3\u7b56 \u5728 \u5206\u7c7b\u95ee\u9898\u4e2d \u901a\u5e38\u4e3a\u901a\u8fc7\u5c11\u6570\u670d\u4ece\u591a\u6570 \u6765\u9009\u53d6\u7968\u6570\u6700\u591a\u7684\u6807\u7b7e\uff0c\u5728\u56de\u5f52\u95ee\u9898\u4e2d\u901a\u5e38\u4e3a K\u4e2a\u6700\u90bb\u70b9\u7684\u6807\u7b7e\u7684\u5e73\u5747\u503c\u3002","title":"KNN \u4e09\u8981\u7d20"},{"location":"ml/2.KNN/#sklearn","text":"Brute Force \u66b4\u529b\u8ba1\u7b97/\u7ebf\u6027\u626b\u63cf KD Tree \u4f7f\u7528\u4e8c\u53c9\u6811\u6839\u636e\u6570\u636e\u7ef4\u5ea6\u6765\u5e73\u5206\u53c2\u6570\u7a7a\u95f4\u3002 Ball Tree \u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u8d85\u7403\u4f53\u6765\u5e73\u5206\u8bad\u7ec3\u6570\u636e\u96c6\u3002 \u6811\u7ed3\u6784\u7684\u7b97\u6cd5\u90fd\u6709\u5efa\u6811\u548c\u67e5\u8be2\u4e24\u4e2a\u8fc7\u7a0b\u3002Brute Force \u6ca1\u6709\u5efa\u6811\u7684\u8fc7\u7a0b\u3002 \u7b97\u6cd5\u7279\u70b9\uff1a \u4f18\u70b9\uff1a High Accuracy\uff0c No Assumption on data\uff0c not sensitive to outliers \u7f3a\u70b9\uff1a\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6 \u9ad8 \u9002\u7528\u8303\u56f4\uff1a continuous values and nominal values \u76f8\u4f3c\u540c\u6e90\u4ea7\u7269\uff1a radius neighbors \u6839\u636e\u5236\u5b9a\u7684\u534a\u5f84\u6765\u627e\u5bfb\u90bb\u70b9 \u5f71\u54cd\u7b97\u6cd5\u56e0\u7d20\uff1a N \u6570\u636e\u96c6\u6837\u672c\u6570\u91cf(number of samples)\uff0c D \u6570\u636e\u7ef4\u5ea6 (number of features) \u603b\u6d88\u8017\uff1a Brute Force: O[DN^2] \u6b64\u5904\u8003\u8651\u7684\u662f\u6700\u8822\u7684\u65b9\u6cd5\uff1a\u628a\u6240\u6709\u8bad\u7ec3\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u7b97\u4e00\u904d\u3002\u5f53\u7136\u6709\u66f4\u5feb\u7684\u5b9e\u73b0\u65b9\u5f0f, \u6bd4\u5982 O(ND + kN) \u548c O(NDK) , \u6700\u5feb\u7684\u662f O[DN] \u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u9605\u8bfb\u8fd9\u4e2a\u94fe\u63a5\uff1a k-NN computational complexity KD Tree: O[DN log(N)] Ball Tree: O[DN log(N)] \u8ddf KD Tree \u5904\u4e8e\u76f8\u540c\u7684\u6570\u91cf\u7ea7\uff0c\u867d\u7136\u5efa\u6811\u65f6\u95f4\u4f1a\u6bd4 KD Tree \u4e45\u4e00\u70b9\uff0c\u4f46\u662f\u5728\u9ad8\u7ed3\u6784\u7684\u6570\u636e\uff0c\u751a\u81f3\u662f\u9ad8\u7eac\u5ea6\u7684\u6570\u636e\u4e2d\uff0c\u67e5\u8be2\u901f\u5ea6\u6709\u5f88\u5927\u7684\u63d0\u5347\u3002 \u67e5\u8be2\u6240\u9700\u6d88\u8017: Brute Force: O[DN] KD Tree: \u5f53\u7ef4\u5ea6\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c \u6bd4\u5982 D<20, O[Dlog(N)] \u3002\u76f8\u53cd\uff0c\u5c06\u4f1a\u8d8b\u5411\u4e8e O[DN] Ball Tree: O[Dlog(N)] \u5f53\u6570\u636e\u96c6\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u6bd4\u5982 N<30\u7684\u65f6\u5019\uff0cBrute Force \u66f4\u6709\u4f18\u52bf\u3002 Intrinsic Dimensionality(\u672c\u5f81\u7ef4\u6570) \u548c Sparsity\uff08\u7a00\u758f\u5ea6\uff09 \u6570\u636e\u7684 intrinsic dimensionality \u662f\u6307\u6570\u636e\u6240\u5728\u7684\u6d41\u5f62\u7684\u7ef4\u6570 d < D , \u5728\u53c2\u6570\u7a7a\u95f4\u53ef\u4ee5\u662f\u7ebf\u6027\u6216\u975e\u7ebf\u6027\u7684\u3002\u7a00\u758f\u5ea6\u6307\u7684\u662f\u6570\u636e\u586b\u5145\u53c2\u6570\u7a7a\u95f4\u7684\u7a0b\u5ea6(\u8fd9\u4e0e\u201c\u7a00\u758f\u201d\u77e9\u9635\u4e2d\u4f7f\u7528\u7684\u6982\u5ff5\u4e0d\u540c, \u6570\u636e\u77e9\u9635\u53ef\u80fd\u6ca1\u6709\u96f6\u9879, \u4f46\u662f\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u6765\u8bb2,\u5b83\u7684\u7ed3\u6784 \u4ecd\u7136\u662f \"\u7a00\u758f\" \u7684)\u3002 Brute Force \u7684\u67e5\u8be2\u65f6\u95f4\u4e0d\u53d7\u5f71\u54cd\u3002 \u5bf9\u4e8e KD Tree \u548c Ball Tree\u7684\u67e5\u8be2\u65f6\u95f4, \u8f83\u5c0f\u672c\u5f81\u7ef4\u6570\u4e14\u66f4\u7a00\u758f\u7684\u6570\u636e\u96c6\u7684\u67e5\u8be2\u65f6\u95f4\u66f4\u5feb\u3002KD Tree \u7684\u6539\u5584\u7531\u4e8e\u901a\u8fc7\u5750\u6807\u8f74\u6765\u5e73\u5206\u53c2\u6570\u7a7a\u95f4\u7684\u81ea\u8eab\u7279\u6027 \u6ca1\u6709Ball Tree \u663e\u8457\u3002 k\u7684\u53d6\u503c (k \u4e2a\u90bb\u70b9) Brute Force \u7684\u67e5\u8be2\u65f6\u95f4\u57fa\u672c\u4e0d\u53d7\u5f71\u54cd\u3002 \u4f46\u662f\u5bf9\u4e8e KD Tree \u548c Ball Tree , k\u8d8a\u5927\uff0c\u67e5\u8be2\u65f6\u95f4\u8d8a\u6162\u3002 k \u5728N\u7684\u5360\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u4f7f\u7528 Brute Force \u6bd4\u8f83\u597d\u3002 Number of Query Points \uff08\u67e5\u8be2\u70b9\u6570\u91cf\uff0c \u5373\u6d4b\u8bd5\u6570\u636e\u7684\u6570\u91cf\uff09 \u67e5\u8be2\u70b9\u8f83\u5c11\u7684\u65f6\u5019\u7528Brute Force\u3002\u67e5\u8be2\u70b9\u8f83\u591a\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u6811\u7ed3\u6784\u7b97\u6cd5\u3002 \u5173\u4e8e sklearn \u4e2d\u6a21\u578b\u7684\u4e00\u4e9b\u989d\u5916\u5e72\u8d27\uff1a \u5982\u679cKD Tree\uff0cBall Tree \u548cBrute Force \u5e94\u7528\u573a\u666f\u50bb\u50bb\u5206\u4e0d\u6e05\u695a\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u542b\u6709algorithm='auto'\u7684\u6a21\u7ec4\u3002 algorithm='auto' \u81ea\u52a8\u4e3a\u60a8\u9009\u62e9\u6700\u4f18\u7b97\u6cd5\u3002 \u6709 regressor \u548c classifier \u53ef\u4ee5\u6765\u9009\u62e9\u3002 metric/distance measure \u53ef\u4ee5\u9009\u62e9\u3002 \u53e6\u5916\u8ddd\u79bb \u53ef\u4ee5\u901a\u8fc7weight \u6765\u52a0\u6743\u3002 leaf size \u5bf9KD Tree \u548c Ball Tree \u7684\u5f71\u54cd \u5efa\u6811\u65f6\u95f4\uff1aleaf size \u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u5efa\u6811\u65f6\u95f4\u4e5f\u5c31\u5feb\u70b9\u3002 \u67e5\u8be2\u65f6\u95f4\uff1a leaf size \u592a\u5927\u592a\u5c0f\u90fd\u4e0d\u592a\u597d\u3002\u5982\u679cleaf size \u8d8b\u5411\u4e8e N\uff08\u8bad\u7ec3\u6570\u636e\u7684\u6837\u672c\u6570\u91cf\uff09\uff0c\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f brute force\u4e86\u3002\u5982\u679cleaf size \u592a\u5c0f\u4e86\uff0c\u8d8b\u5411\u4e8e1\uff0c\u90a3\u67e5\u8be2\u7684\u65f6\u5019 \u904d\u5386\u6811\u7684\u65f6\u95f4\u5c31\u4f1a\u5927\u5927\u589e\u52a0\u3002leaf size \u5efa\u8bae\u7684\u6570\u503c\u662f 30\uff0c\u4e5f\u5c31\u662f\u9ed8\u8ba4\u503c\u3002 \u5185\u5b58\uff1a leaf size \u53d8\u5927\uff0c\u5b58\u6811\u7ed3\u6784\u7684\u5185\u5b58\u53d8\u5c0f\u3002 Nearest Centroid Classifier \u5206\u7c7b\u51b3\u7b56\u662f\u54ea\u4e2a\u6807\u7b7e\u7684\u8d28\u5fc3\u4e0e\u6d4b\u8bd5\u70b9\u6700\u8fd1\uff0c\u5c31\u9009\u54ea\u4e2a\u6807\u7b7e\u3002 \u8be5\u6a21\u578b\u5047\u8bbe\u5728\u6240\u6709\u7ef4\u5ea6\u4e2d\u65b9\u5dee\u76f8\u540c\u3002 \u662f\u4e00\u4e2a\u5f88\u597d\u7684base line\u3002 \u8fdb\u9636\u7248\uff1a Nearest Shrunken Centroid \u53ef\u4ee5\u901a\u8fc7shrink_threshold\u6765\u8bbe\u7f6e\u3002 \u4f5c\u7528\uff1a \u53ef\u4ee5\u79fb\u9664\u67d0\u4e9b\u5f71\u54cd\u5206\u7c7b\u7684\u7279\u5f81\uff0c\u4f8b\u5982\u79fb\u9664\u566a\u97f3\u7279\u5f81\u7684\u5f71\u54cd \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b97\u6cd5\uff1a\uff08sklearn \u4e0a\u6709\u4e09\u79cd\uff09"},{"location":"ml/3.DecisionTree/","text":"\u7b2c3\u7ae0 \u51b3\u7b56\u6811 \u51b3\u7b56\u6811 \u6982\u8ff0 \u51b3\u7b56\u6811\uff08Decision Tree\uff09\u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u662f\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u6570\u636e\u6316\u6398\u7b97\u6cd5\u4e4b\u4e00\u3002\u6211\u4eec\u8fd9\u7ae0\u8282\u53ea\u8ba8\u8bba\u7528\u4e8e\u5206\u7c7b\u7684\u51b3\u7b56\u6811\u3002 \u51b3\u7b56\u6811\u6a21\u578b\u5448\u6811\u5f62\u7ed3\u6784\uff0c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e\u7279\u5f81\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u8fc7\u7a0b\u3002\u5b83\u53ef\u4ee5\u8ba4\u4e3a\u662f if-then \u89c4\u5219\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b9a\u4e49\u5728\u7279\u5f81\u7a7a\u95f4\u4e0e\u7c7b\u7a7a\u95f4\u4e0a\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u3002 \u51b3\u7b56\u6811\u5b66\u4e60\u901a\u5e38\u5305\u62ec 3 \u4e2a\u6b65\u9aa4\uff1a\u7279\u5f81\u9009\u62e9\u3001\u51b3\u7b56\u6811\u7684\u751f\u6210\u548c\u51b3\u7b56\u6811\u7684\u4fee\u526a\u3002 \u51b3\u7b56\u6811 \u573a\u666f \u4e00\u4e2a\u53eb\u505a \"\u4e8c\u5341\u4e2a\u95ee\u9898\" \u7684\u6e38\u620f\uff0c\u6e38\u620f\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u53c2\u4e0e\u6e38\u620f\u7684\u4e00\u65b9\u5728\u8111\u6d77\u4e2d\u60f3\u67d0\u4e2a\u4e8b\u7269\uff0c\u5176\u4ed6\u53c2\u4e0e\u8005\u5411\u4ed6\u63d0\u95ee\uff0c\u53ea\u5141\u8bb8\u63d0 20 \u4e2a\u95ee\u9898\uff0c\u95ee\u9898\u7684\u7b54\u6848\u4e5f\u53ea\u80fd\u7528\u5bf9\u6216\u9519\u56de\u7b54\u3002\u95ee\u95ee\u9898\u7684\u4eba\u901a\u8fc7\u63a8\u65ad\u5206\u89e3\uff0c\u9010\u6b65\u7f29\u5c0f\u5f85\u731c\u6d4b\u4e8b\u7269\u7684\u8303\u56f4\uff0c\u6700\u540e\u5f97\u5230\u6e38\u620f\u7684\u7b54\u6848\u3002 \u4e00\u4e2a\u90ae\u4ef6\u5206\u7c7b\u7cfb\u7edf\uff0c\u5927\u81f4\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u68c0\u6d4b\u53d1\u9001\u90ae\u4ef6\u57df\u540d\u5730\u5740\u3002\u5982\u679c\u5730\u5740\u4e3a myEmployer.com, \u5219\u5c06\u5176\u653e\u5728\u5206\u7c7b \"\u65e0\u804a\u65f6\u9700\u8981\u9605\u8bfb\u7684\u90ae\u4ef6\"\u4e2d\u3002 \u5982\u679c\u90ae\u4ef6\u4e0d\u662f\u6765\u81ea\u8fd9\u4e2a\u57df\u540d\uff0c\u5219\u68c0\u6d4b\u90ae\u4ef6\u5185\u5bb9\u91cc\u662f\u5426\u5305\u542b\u5355\u8bcd \"\u66f2\u68cd\u7403\" , \u5982\u679c\u5305\u542b\u5219\u5c06\u90ae\u4ef6\u5f52\u7c7b\u5230 \"\u9700\u8981\u53ca\u65f6\u5904\u7406\u7684\u670b\u53cb\u90ae\u4ef6\", \u5982\u679c\u4e0d\u5305\u542b\u5219\u5c06\u90ae\u4ef6\u5f52\u7c7b\u5230 \"\u65e0\u9700\u9605\u8bfb\u7684\u5783\u573e\u90ae\u4ef6\" \u3002 \u51b3\u7b56\u6811\u7684\u5b9a\u4e49\uff1a \u5206\u7c7b\u51b3\u7b56\u6811\u6a21\u578b\u662f\u4e00\u79cd\u63cf\u8ff0\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u6811\u5f62\u7ed3\u6784\u3002\u51b3\u7b56\u6811\u7531\u7ed3\u70b9\uff08node\uff09\u548c\u6709\u5411\u8fb9\uff08directed edge\uff09\u7ec4\u6210\u3002\u7ed3\u70b9\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u5185\u90e8\u7ed3\u70b9\uff08internal node\uff09\u548c\u53f6\u7ed3\u70b9\uff08leaf node\uff09\u3002\u5185\u90e8\u7ed3\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027(features)\uff0c\u53f6\u7ed3\u70b9\u8868\u793a\u4e00\u4e2a\u7c7b(labels)\u3002 \u7528\u51b3\u7b56\u6811\u5bf9\u9700\u8981\u6d4b\u8bd5\u7684\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5bf9\u5b9e\u4f8b\u7684\u67d0\u4e00\u7279\u5f81\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6839\u636e\u6d4b\u8bd5\u7ed3\u679c\uff0c\u5c06\u5b9e\u4f8b\u5206\u914d\u5230\u5176\u5b50\u7ed3\u70b9\uff1b\u8fd9\u65f6\uff0c\u6bcf\u4e00\u4e2a\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7740\u8be5\u7279\u5f81\u7684\u4e00\u4e2a\u53d6\u503c\u3002\u5982\u6b64\u9012\u5f52\u5730\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6d4b\u8bd5\u5e76\u5206\u914d\uff0c\u76f4\u81f3\u8fbe\u5230\u53f6\u7ed3\u70b9\u3002\u6700\u540e\u5c06\u5b9e\u4f8b\u5206\u914d\u5230\u53f6\u7ed3\u70b9\u7684\u7c7b\u4e2d\u3002 \u51b3\u7b56\u6811 \u539f\u7406 \u51b3\u7b56\u6811 \u987b\u77e5\u6982\u5ff5 \u4fe1\u606f\u71b5 & \u4fe1\u606f\u589e\u76ca \u71b5\uff08entropy\uff09\uff1a \u71b5\u6307\u7684\u662f\u4f53\u7cfb\u7684\u6df7\u4e71\u7684\u7a0b\u5ea6\uff0c\u5728\u4e0d\u540c\u7684\u5b66\u79d1\u4e2d\u4e5f\u6709\u5f15\u7533\u51fa\u7684\u66f4\u4e3a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u662f\u5404\u9886\u57df\u5341\u5206\u91cd\u8981\u7684\u53c2\u91cf\u3002 \u4fe1\u606f\u8bba\uff08information theory\uff09\u4e2d\u7684\u71b5\uff08\u9999\u519c\u71b5\uff09\uff1a \u662f\u4e00\u79cd\u4fe1\u606f\u7684\u5ea6\u91cf\u65b9\u5f0f\uff0c\u8868\u793a\u4fe1\u606f\u7684\u6df7\u4e71\u7a0b\u5ea6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a\u4fe1\u606f\u8d8a\u6709\u5e8f\uff0c\u4fe1\u606f\u71b5\u8d8a\u4f4e\u3002\u4f8b\u5982\uff1a\u706b\u67f4\u6709\u5e8f\u653e\u5728\u706b\u67f4\u76d2\u91cc\uff0c\u71b5\u503c\u5f88\u4f4e\uff0c\u76f8\u53cd\uff0c\u71b5\u503c\u5f88\u9ad8\u3002 \u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\uff1a \u5728\u5212\u5206\u6570\u636e\u96c6\u524d\u540e\u4fe1\u606f\u53d1\u751f\u7684\u53d8\u5316\u79f0\u4e3a\u4fe1\u606f\u589e\u76ca\u3002 \u51b3\u7b56\u6811 \u5de5\u4f5c\u539f\u7406 \u5982\u4f55\u6784\u9020\u4e00\u4e2a\u51b3\u7b56\u6811? \u6211\u4eec\u4f7f\u7528 createBranch() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a def createBranch(): ''' \u6b64\u5904\u8fd0\u7528\u4e86\u8fed\u4ee3\u7684\u601d\u60f3\u3002 \u611f\u5174\u8da3\u53ef\u4ee5\u641c\u7d22 \u8fed\u4ee3 recursion\uff0c \u751a\u81f3\u662f dynamic programing\u3002 ''' \u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7684\u5206\u7c7b\u6807\u7b7e\u662f\u5426\u76f8\u540c: If so return \u7c7b\u6807\u7b7e Else: \u5bfb\u627e\u5212\u5206\u6570\u636e\u96c6\u7684\u6700\u597d\u7279\u5f81\uff08\u5212\u5206\u4e4b\u540e\u4fe1\u606f\u71b5\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\uff09 \u5212\u5206\u6570\u636e\u96c6 \u521b\u5efa\u5206\u652f\u8282\u70b9 for \u6bcf\u4e2a\u5212\u5206\u7684\u5b50\u96c6 \u8c03\u7528\u51fd\u6570 createBranch \uff08\u521b\u5efa\u5206\u652f\u7684\u51fd\u6570\uff09\u5e76\u589e\u52a0\u8fd4\u56de\u7ed3\u679c\u5230\u5206\u652f\u8282\u70b9\u4e2d return \u5206\u652f\u8282\u70b9 \u51b3\u7b56\u6811 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5 (\u8fd9\u91cc\u4f7f\u7528\u7684\u662fID3\u7b97\u6cd5\uff0c\u53ea\u9002\u7528\u4e8e\u6807\u79f0\u578b\u6570\u636e\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6570\u503c\u578b\u6570\u636e\u5fc5\u987b\u79bb\u6563\u5316\u3002 \u8fd8\u6709\u5176\u4ed6\u7684\u6811\u6784\u9020\u7b97\u6cd5\uff0c\u6bd4\u5982CART) \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u56fe\u5f62\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6811\u8ba1\u7b97\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49\u3002 \u51b3\u7b56\u6811 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u8ba1\u7b97\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u8f93\u51fa\u7ed3\u679c\u6613\u4e8e\u7406\u89e3\uff0c\u6570\u636e\u6709\u7f3a\u5931\u4e5f\u80fd\u8dd1\uff0c\u53ef\u4ee5\u5904\u7406\u4e0d\u76f8\u5173\u7279\u5f81\u3002 \u7f3a\u70b9\uff1a\u5bb9\u6613\u8fc7\u62df\u5408\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u3002 \u51b3\u7b56\u6811 \u9879\u76ee\u6848\u4f8b \u9879\u76ee\u6848\u4f8b1: \u5224\u5b9a\u9c7c\u7c7b\u548c\u975e\u9c7c\u7c7b \u9879\u76ee\u6982\u8ff0 \u6839\u636e\u4ee5\u4e0b 2 \u4e2a\u7279\u5f81\uff0c\u5c06\u52a8\u7269\u5206\u6210\u4e24\u7c7b\uff1a\u9c7c\u7c7b\u548c\u975e\u9c7c\u7c7b\u3002 \u7279\u5f81\uff1a 1. \u4e0d\u6d6e\u51fa\u6c34\u9762\u662f\u5426\u53ef\u4ee5\u751f\u5b58 2. \u662f\u5426\u6709\u811a\u8e7c \u5f00\u53d1\u6d41\u7a0b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/3.DecisionTree/DecisionTree.py \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u662fID3\u7b97\u6cd5\uff0c\u56e0\u6b64\u6570\u503c\u578b\u6570\u636e\u5fc5\u987b\u79bb\u6563\u5316\u3002\uff09 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u753b\u51fa\u6765\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7ed3\u6784 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4e60\u5f97\u7684\u51b3\u7b56\u6811\u6267\u884c\u5206\u7c7b \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49 \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u6211\u4eec\u5229\u7528 createDataSet() \u51fd\u6570\u8f93\u5165\u6570\u636e def createDataSet(): dataSet = [[1, 1, 'yes'], [1, 1, 'yes'], [1, 0, 'no'], [0, 1, 'no'], [0, 1, 'no']] labels = ['no surfacing', 'flippers'] return dataSet, labels \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5 \u6b64\u5904\uff0c\u7531\u4e8e\u6211\u4eec\u8f93\u5165\u7684\u6570\u636e\u672c\u8eab\u5c31\u662f\u79bb\u6563\u5316\u6570\u636e\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65\u5c31\u7701\u7565\u4e86\u3002 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u753b\u51fa\u6765\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u6570\u636e\u96c6\u7684\u9999\u519c\u71b5\u7684\u51fd\u6570 def calcShannonEnt(dataSet): # \u6c42list\u7684\u957f\u5ea6\uff0c\u8868\u793a\u8ba1\u7b97\u53c2\u4e0e\u8bad\u7ec3\u7684\u6570\u636e\u91cf numEntries = len(dataSet) # \u8ba1\u7b97\u5206\u7c7b\u6807\u7b7elabel\u51fa\u73b0\u7684\u6b21\u6570 labelCounts = {} # the the number of unique elements and their occurrence for featVec in dataSet: # \u5c06\u5f53\u524d\u5b9e\u4f8b\u7684\u6807\u7b7e\u5b58\u50a8\uff0c\u5373\u6bcf\u4e00\u884c\u6570\u636e\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u4ee3\u8868\u7684\u662f\u6807\u7b7e currentLabel = featVec[-1] # \u4e3a\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u521b\u5efa\u5b57\u5178\uff0c\u5982\u679c\u5f53\u524d\u7684\u952e\u503c\u4e0d\u5b58\u5728\uff0c\u5219\u6269\u5c55\u5b57\u5178\u5e76\u5c06\u5f53\u524d\u952e\u503c\u52a0\u5165\u5b57\u5178\u3002\u6bcf\u4e2a\u952e\u503c\u90fd\u8bb0\u5f55\u4e86\u5f53\u524d\u7c7b\u522b\u51fa\u73b0\u7684\u6b21\u6570\u3002 if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 # \u5bf9\u4e8e label \u6807\u7b7e\u7684\u5360\u6bd4\uff0c\u6c42\u51fa label \u6807\u7b7e\u7684\u9999\u519c\u71b5 shannonEnt = 0.0 for key in labelCounts: # \u4f7f\u7528\u6240\u6709\u7c7b\u6807\u7b7e\u7684\u53d1\u751f\u9891\u7387\u8ba1\u7b97\u7c7b\u522b\u51fa\u73b0\u7684\u6982\u7387\u3002 prob = float(labelCounts[key])/numEntries # \u8ba1\u7b97\u9999\u519c\u71b5\uff0c\u4ee5 2 \u4e3a\u5e95\u6c42\u5bf9\u6570 shannonEnt -= prob * log(prob, 2) return shannonEnt \u6309\u7167\u7ed9\u5b9a\u7279\u5f81\u5212\u5206\u6570\u636e\u96c6 \u5c06\u6307\u5b9a\u7279\u5f81\u7684\u7279\u5f81\u503c\u7b49\u4e8e value \u7684\u884c\u5269\u4e0b\u5217\u4f5c\u4e3a\u5b50\u6570\u636e\u96c6\u3002 def splitDataSet(dataSet, index, value): \"\"\"splitDataSet(\u901a\u8fc7\u904d\u5386dataSet\u6570\u636e\u96c6\uff0c\u6c42\u51faindex\u5bf9\u5e94\u7684colnum\u5217\u7684\u503c\u4e3avalue\u7684\u884c) \u5c31\u662f\u4f9d\u636eindex\u5217\u8fdb\u884c\u5206\u7c7b\uff0c\u5982\u679cindex\u5217\u7684\u6570\u636e\u7b49\u4e8e value\u7684\u65f6\u5019\uff0c\u5c31\u8981\u5c06 index \u5212\u5206\u5230\u6211\u4eec\u521b\u5efa\u7684\u65b0\u7684\u6570\u636e\u96c6\u4e2d Args: dataSet \u6570\u636e\u96c6 \u5f85\u5212\u5206\u7684\u6570\u636e\u96c6 index \u8868\u793a\u6bcf\u4e00\u884c\u7684index\u5217 \u5212\u5206\u6570\u636e\u96c6\u7684\u7279\u5f81 value \u8868\u793aindex\u5217\u5bf9\u5e94\u7684value\u503c \u9700\u8981\u8fd4\u56de\u7684\u7279\u5f81\u7684\u503c\u3002 Returns: index\u5217\u4e3avalue\u7684\u6570\u636e\u96c6\u3010\u8be5\u6570\u636e\u96c6\u9700\u8981\u6392\u9664index\u5217\u3011 \"\"\" retDataSet = [] for featVec in dataSet: # index\u5217\u4e3avalue\u7684\u6570\u636e\u96c6\u3010\u8be5\u6570\u636e\u96c6\u9700\u8981\u6392\u9664index\u5217\u3011 # \u5224\u65adindex\u5217\u7684\u503c\u662f\u5426\u4e3avalue if featVec[index] == value: # chop out index used for splitting # [:index]\u8868\u793a\u524dindex\u884c\uff0c\u5373\u82e5 index \u4e3a2\uff0c\u5c31\u662f\u53d6 featVec \u7684\u524d index \u884c reducedFeatVec = featVec[:index] ''' \u8bf7\u767e\u5ea6\u67e5\u8be2\u4e00\u4e0b\uff1a extend\u548cappend\u7684\u533a\u522b music_media.append(object) \u5411\u5217\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5bf9\u8c61object music_media.extend(sequence) \u628a\u4e00\u4e2a\u5e8f\u5217seq\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u5217\u8868\u4e2d (\u8ddf += \u5728list\u8fd0\u7528\u7c7b\u4f3c\uff0c music_media += sequence) 1\u3001\u4f7f\u7528append\u7684\u65f6\u5019\uff0c\u662f\u5c06object\u770b\u4f5c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6574\u4f53\u6253\u5305\u6dfb\u52a0\u5230music_media\u5bf9\u8c61\u4e2d\u3002 2\u3001\u4f7f\u7528extend\u7684\u65f6\u5019\uff0c\u662f\u5c06sequence\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff0c\u5c06\u8fd9\u4e2a\u5e8f\u5217\u548cmusic_media\u5e8f\u5217\u5408\u5e76\uff0c\u5e76\u653e\u5728\u5176\u540e\u9762\u3002 music_media = [] music_media.extend([1,2,3]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3] music_media.append([4,5,6]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3, [4, 5, 6]] music_media.extend([7,8,9]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3, [4, 5, 6], 7, 8, 9] ''' reducedFeatVec.extend(featVec[index+1:]) # [index+1:]\u8868\u793a\u4ece\u8df3\u8fc7 index \u7684 index+1\u884c\uff0c\u53d6\u63a5\u4e0b\u6765\u7684\u6570\u636e # \u6536\u96c6\u7ed3\u679c\u503c index\u5217\u4e3avalue\u7684\u884c\u3010\u8be5\u884c\u9700\u8981\u6392\u9664index\u5217\u3011 retDataSet.append(reducedFeatVec) return retDataSet \u9009\u62e9\u6700\u597d\u7684\u6570\u636e\u96c6\u5212\u5206\u65b9\u5f0f def chooseBestFeatureToSplit(dataSet): \"\"\"chooseBestFeatureToSplit(\u9009\u62e9\u6700\u597d\u7684\u7279\u5f81) Args: dataSet \u6570\u636e\u96c6 Returns: bestFeature \u6700\u4f18\u7684\u7279\u5f81\u5217 \"\"\" # \u6c42\u7b2c\u4e00\u884c\u6709\u591a\u5c11\u5217\u7684 Feature, \u6700\u540e\u4e00\u5217\u662flabel\u5217\u561b numFeatures = len(dataSet[0]) - 1 # \u6570\u636e\u96c6\u7684\u539f\u59cb\u4fe1\u606f\u71b5 baseEntropy = calcShannonEnt(dataSet) # \u6700\u4f18\u7684\u4fe1\u606f\u589e\u76ca\u503c, \u548c\u6700\u4f18\u7684Featurn\u7f16\u53f7 bestInfoGain, bestFeature = 0.0, -1 # iterate over all the features for i in range(numFeatures): # create a list of all the examples of this feature # \u83b7\u53d6\u5bf9\u5e94\u7684feature\u4e0b\u7684\u6240\u6709\u6570\u636e featList = [example[i] for example in dataSet] # get a set of unique values # \u83b7\u53d6\u5254\u91cd\u540e\u7684\u96c6\u5408\uff0c\u4f7f\u7528set\u5bf9list\u6570\u636e\u8fdb\u884c\u53bb\u91cd uniqueVals = set(featList) # \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u4fe1\u606f\u71b5 newEntropy = 0.0 # \u904d\u5386\u67d0\u4e00\u5217\u7684value\u96c6\u5408\uff0c\u8ba1\u7b97\u8be5\u5217\u7684\u4fe1\u606f\u71b5 # \u904d\u5386\u5f53\u524d\u7279\u5f81\u4e2d\u7684\u6240\u6709\u552f\u4e00\u5c5e\u6027\u503c\uff0c\u5bf9\u6bcf\u4e2a\u552f\u4e00\u5c5e\u6027\u503c\u5212\u5206\u4e00\u6b21\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u6570\u636e\u96c6\u7684\u65b0\u71b5\u503c\uff0c\u5e76\u5bf9\u6240\u6709\u552f\u4e00\u7279\u5f81\u503c\u5f97\u5230\u7684\u71b5\u6c42\u548c\u3002 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) # \u8ba1\u7b97\u6982\u7387 prob = len(subDataSet)/float(len(dataSet)) # \u8ba1\u7b97\u4fe1\u606f\u71b5 newEntropy += prob * calcShannonEnt(subDataSet) # gain[\u4fe1\u606f\u589e\u76ca]: \u5212\u5206\u6570\u636e\u96c6\u524d\u540e\u7684\u4fe1\u606f\u53d8\u5316\uff0c \u83b7\u53d6\u4fe1\u606f\u71b5\u6700\u5927\u7684\u503c # \u4fe1\u606f\u589e\u76ca\u662f\u71b5\u7684\u51cf\u5c11\u6216\u8005\u662f\u6570\u636e\u65e0\u5e8f\u5ea6\u7684\u51cf\u5c11\u3002\u6700\u540e\uff0c\u6bd4\u8f83\u6240\u6709\u7279\u5f81\u4e2d\u7684\u4fe1\u606f\u589e\u76ca\uff0c\u8fd4\u56de\u6700\u597d\u7279\u5f81\u5212\u5206\u7684\u7d22\u5f15\u503c\u3002 infoGain = baseEntropy - newEntropy print 'infoGain=', infoGain, 'bestFeature=', i, baseEntropy, newEntropy if (infoGain > bestInfoGain): bestInfoGain = infoGain bestFeature = i return bestFeature \u95ee\uff1a\u4e0a\u9762\u7684 newEntropy \u4e3a\u4ec0\u4e48\u662f\u6839\u636e\u5b50\u96c6\u8ba1\u7b97\u7684\u5462\uff1f \u7b54\uff1a\u56e0\u4e3a\u6211\u4eec\u5728\u6839\u636e\u4e00\u4e2a\u7279\u5f81\u8ba1\u7b97\u9999\u519c\u71b5\u7684\u65f6\u5019\uff0c\u8be5\u7279\u5f81\u7684\u5206\u7c7b\u503c\u662f\u76f8\u540c\uff0c\u8fd9\u4e2a\u7279\u5f81\u8fd9\u4e2a\u5206\u7c7b\u7684\u9999\u519c\u71b5\u4e3a 0\uff1b \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8ba1\u7b97\u65b0\u7684\u9999\u519c\u71b5\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662f\u5b50\u96c6\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784 \u521b\u5efa\u6811\u7684\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a def createTree(dataSet, labels): classList = [example[-1] for example in dataSet] # \u5982\u679c\u6570\u636e\u96c6\u7684\u6700\u540e\u4e00\u5217\u7684\u7b2c\u4e00\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570=\u6574\u4e2a\u96c6\u5408\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u8bf4\u53ea\u6709\u4e00\u4e2a\u7c7b\u522b\uff0c\u5c31\u53ea\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u5c31\u884c # \u7b2c\u4e00\u4e2a\u505c\u6b62\u6761\u4ef6\uff1a\u6240\u6709\u7684\u7c7b\u6807\u7b7e\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u8be5\u7c7b\u6807\u7b7e\u3002 # count() \u51fd\u6570\u662f\u7edf\u8ba1\u62ec\u53f7\u4e2d\u7684\u503c\u5728list\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 if classList.count(classList[0]) == len(classList): return classList[0] # \u5982\u679c\u6570\u636e\u96c6\u53ea\u67091\u5217\uff0c\u90a3\u4e48\u6700\u521d\u51fa\u73b0label\u6b21\u6570\u6700\u591a\u7684\u4e00\u7c7b\uff0c\u4f5c\u4e3a\u7ed3\u679c # \u7b2c\u4e8c\u4e2a\u505c\u6b62\u6761\u4ef6\uff1a\u4f7f\u7528\u5b8c\u4e86\u6240\u6709\u7279\u5f81\uff0c\u4ecd\u7136\u4e0d\u80fd\u5c06\u6570\u636e\u96c6\u5212\u5206\u6210\u4ec5\u5305\u542b\u552f\u4e00\u7c7b\u522b\u7684\u5206\u7ec4\u3002 if len(dataSet[0]) == 1: return majorityCnt(classList) # \u9009\u62e9\u6700\u4f18\u7684\u5217\uff0c\u5f97\u5230\u6700\u4f18\u5217\u5bf9\u5e94\u7684label\u542b\u4e49 bestFeat = chooseBestFeatureToSplit(dataSet) # \u83b7\u53d6label\u7684\u540d\u79f0 bestFeatLabel = labels[bestFeat] # \u521d\u59cb\u5316myTree myTree = {bestFeatLabel: {}} # \u6ce8\uff1alabels\u5217\u8868\u662f\u53ef\u53d8\u5bf9\u8c61\uff0c\u5728PYTHON\u51fd\u6570\u4e2d\u4f5c\u4e3a\u53c2\u6570\u65f6\u4f20\u5740\u5f15\u7528\uff0c\u80fd\u591f\u88ab\u5168\u5c40\u4fee\u6539 # \u6240\u4ee5\u8fd9\u884c\u4ee3\u7801\u5bfc\u81f4\u51fd\u6570\u5916\u7684\u540c\u540d\u53d8\u91cf\u88ab\u5220\u9664\u4e86\u5143\u7d20\uff0c\u9020\u6210\u4f8b\u53e5\u65e0\u6cd5\u6267\u884c\uff0c\u63d0\u793a'no surfacing' is not in list del(labels[bestFeat]) # \u53d6\u51fa\u6700\u4f18\u5217\uff0c\u7136\u540e\u5b83\u7684branch\u505a\u5206\u7c7b featValues = [example[bestFeat] for example in dataSet] uniqueVals = set(featValues) for value in uniqueVals: # \u6c42\u51fa\u5269\u4f59\u7684\u6807\u7b7elabel subLabels = labels[:] # \u904d\u5386\u5f53\u524d\u9009\u62e9\u7279\u5f81\u5305\u542b\u7684\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5728\u6bcf\u4e2a\u6570\u636e\u96c6\u5212\u5206\u4e0a\u9012\u5f52\u8c03\u7528\u51fd\u6570createTree() myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), subLabels) # print 'myTree', value, myTree return myTree \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u51b3\u7b56\u6811\u6267\u884c\u5206\u7c7b def classify(inputTree, featLabels, testVec): \"\"\"classify(\u7ed9\u8f93\u5165\u7684\u8282\u70b9\uff0c\u8fdb\u884c\u5206\u7c7b) Args: inputTree \u51b3\u7b56\u6811\u6a21\u578b featLabels Feature\u6807\u7b7e\u5bf9\u5e94\u7684\u540d\u79f0 testVec \u6d4b\u8bd5\u8f93\u5165\u7684\u6570\u636e Returns: classLabel \u5206\u7c7b\u7684\u7ed3\u679c\u503c\uff0c\u9700\u8981\u6620\u5c04label\u624d\u80fd\u77e5\u9053\u540d\u79f0 \"\"\" # \u83b7\u53d6tree\u7684\u6839\u8282\u70b9\u5bf9\u4e8e\u7684key\u503c firstStr = inputTree.keys()[0] # \u901a\u8fc7key\u5f97\u5230\u6839\u8282\u70b9\u5bf9\u5e94\u7684value secondDict = inputTree[firstStr] # \u5224\u65ad\u6839\u8282\u70b9\u540d\u79f0\u83b7\u53d6\u6839\u8282\u70b9\u5728label\u4e2d\u7684\u5148\u540e\u987a\u5e8f\uff0c\u8fd9\u6837\u5c31\u77e5\u9053\u8f93\u5165\u7684testVec\u600e\u4e48\u5f00\u59cb\u5bf9\u7167\u6811\u6765\u505a\u5206\u7c7b featIndex = featLabels.index(firstStr) # \u6d4b\u8bd5\u6570\u636e\uff0c\u627e\u5230\u6839\u8282\u70b9\u5bf9\u5e94\u7684label\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u77e5\u9053\u4ece\u8f93\u5165\u7684\u6570\u636e\u7684\u7b2c\u51e0\u4f4d\u6765\u5f00\u59cb\u5206\u7c7b key = testVec[featIndex] valueOfFeat = secondDict[key] print '+++', firstStr, 'xxx', secondDict, '---', key, '>>>', valueOfFeat # \u5224\u65ad\u5206\u679d\u662f\u5426\u7ed3\u675f: \u5224\u65advalueOfFeat\u662f\u5426\u662fdict\u7c7b\u578b if isinstance(valueOfFeat, dict): classLabel = classify(valueOfFeat, featLabels, testVec) else: classLabel = valueOfFeat return classLabel \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49\u3002 \u9879\u76ee\u6848\u4f8b2: \u4f7f\u7528\u51b3\u7b56\u6811\u9884\u6d4b\u9690\u5f62\u773c\u955c\u7c7b\u578b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/3.DecisionTree/DecisionTree.py \u9879\u76ee\u6982\u8ff0 \u9690\u5f62\u773c\u955c\u7c7b\u578b\u5305\u62ec\u786c\u6750\u8d28\u3001\u8f6f\u6750\u8d28\u4ee5\u53ca\u4e0d\u9002\u5408\u4f69\u6234\u9690\u5f62\u773c\u955c\u3002\u6211\u4eec\u9700\u8981\u4f7f\u7528\u51b3\u7b56\u6811\u9884\u6d4b\u60a3\u8005\u9700\u8981\u4f69\u6234\u7684\u9690\u5f62\u773c\u955c\u7c7b\u578b\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6\u3002 \u89e3\u6790\u6570\u636e: \u89e3\u6790 tab \u952e\u5206\u9694\u7684\u6570\u636e\u884c \u5206\u6790\u6570\u636e: \u5feb\u901f\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u6b63\u786e\u5730\u89e3\u6790\u6570\u636e\u5185\u5bb9\uff0c\u4f7f\u7528 createPlot() \u51fd\u6570\u7ed8\u5236\u6700\u7ec8\u7684\u6811\u5f62\u56fe\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528 createTree() \u51fd\u6570\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570\u9a8c\u8bc1\u51b3\u7b56\u6811\u53ef\u4ee5\u6b63\u786e\u5206\u7c7b\u7ed9\u5b9a\u7684\u6570\u636e\u5b9e\u4f8b\u3002 \u4f7f\u7528\u7b97\u6cd5: \u5b58\u50a8\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u65f6\u65e0\u9700\u91cd\u65b0\u6784\u9020\u6811\u3002 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a young myope no reduced no lenses pre myope no reduced no lenses presbyopic myope no reduced no lenses \u89e3\u6790\u6570\u636e\uff1a\u89e3\u6790 tab \u952e\u5206\u9694\u7684\u6570\u636e\u884c lecses = [inst.strip().split('\\t') for inst in fr.readlines()] lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate'] \u5206\u6790\u6570\u636e\uff1a\u5feb\u901f\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u6b63\u786e\u5730\u89e3\u6790\u6570\u636e\u5185\u5bb9\uff0c\u4f7f\u7528 createPlot() \u51fd\u6570\u7ed8\u5236\u6700\u7ec8\u7684\u6811\u5f62\u56fe\u3002 >>> treePlotter.createPlot(lensesTree) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4f7f\u7528 createTree() \u51fd\u6570 >>> lensesTree = trees.createTree(lenses, lensesLabels) >>> lensesTree {'tearRate': {'reduced': 'no lenses', 'normal': {'astigmatic':{'yes': {'prescript':{'hyper':{'age':{'pre':'no lenses', 'presbyopic': 'no lenses', 'young':'hard'}}, 'myope':'hard'}}, 'no':{'age':{'pre': 'soft', 'presbyopic':{'prescript': {'hyper':'soft', 'myope': 'no lenses'}}, 'young':'soft'}}}}} \u6d4b\u8bd5\u7b97\u6cd5: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570\u9a8c\u8bc1\u51b3\u7b56\u6811\u53ef\u4ee5\u6b63\u786e\u5206\u7c7b\u7ed9\u5b9a\u7684\u6570\u636e\u5b9e\u4f8b\u3002 \u4f7f\u7528\u7b97\u6cd5: \u5b58\u50a8\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u65f6\u65e0\u9700\u91cd\u65b0\u6784\u9020\u6811\u3002 \u4f7f\u7528 pickle \u6a21\u5757\u5b58\u50a8\u51b3\u7b56\u6811 def storeTree(inputTree, filename): import pickle fw = open(filename, 'wb') pickle.dump(inputTree, fw) fw.close() def grabTree(filename): import pickle fr = open(filename, 'rb') return pickle.load(fr) \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c3\u7ae0_\u51b3\u7b56\u6811\u7b97\u6cd5"},{"location":"ml/3.DecisionTree/#3","text":"","title":"\u7b2c3\u7ae0 \u51b3\u7b56\u6811"},{"location":"ml/3.DecisionTree/#_1","text":"\u51b3\u7b56\u6811\uff08Decision Tree\uff09\u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u662f\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u6570\u636e\u6316\u6398\u7b97\u6cd5\u4e4b\u4e00\u3002\u6211\u4eec\u8fd9\u7ae0\u8282\u53ea\u8ba8\u8bba\u7528\u4e8e\u5206\u7c7b\u7684\u51b3\u7b56\u6811\u3002 \u51b3\u7b56\u6811\u6a21\u578b\u5448\u6811\u5f62\u7ed3\u6784\uff0c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e\u7279\u5f81\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u8fc7\u7a0b\u3002\u5b83\u53ef\u4ee5\u8ba4\u4e3a\u662f if-then \u89c4\u5219\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b9a\u4e49\u5728\u7279\u5f81\u7a7a\u95f4\u4e0e\u7c7b\u7a7a\u95f4\u4e0a\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u3002 \u51b3\u7b56\u6811\u5b66\u4e60\u901a\u5e38\u5305\u62ec 3 \u4e2a\u6b65\u9aa4\uff1a\u7279\u5f81\u9009\u62e9\u3001\u51b3\u7b56\u6811\u7684\u751f\u6210\u548c\u51b3\u7b56\u6811\u7684\u4fee\u526a\u3002","title":"\u51b3\u7b56\u6811 \u6982\u8ff0"},{"location":"ml/3.DecisionTree/#_2","text":"\u4e00\u4e2a\u53eb\u505a \"\u4e8c\u5341\u4e2a\u95ee\u9898\" \u7684\u6e38\u620f\uff0c\u6e38\u620f\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u53c2\u4e0e\u6e38\u620f\u7684\u4e00\u65b9\u5728\u8111\u6d77\u4e2d\u60f3\u67d0\u4e2a\u4e8b\u7269\uff0c\u5176\u4ed6\u53c2\u4e0e\u8005\u5411\u4ed6\u63d0\u95ee\uff0c\u53ea\u5141\u8bb8\u63d0 20 \u4e2a\u95ee\u9898\uff0c\u95ee\u9898\u7684\u7b54\u6848\u4e5f\u53ea\u80fd\u7528\u5bf9\u6216\u9519\u56de\u7b54\u3002\u95ee\u95ee\u9898\u7684\u4eba\u901a\u8fc7\u63a8\u65ad\u5206\u89e3\uff0c\u9010\u6b65\u7f29\u5c0f\u5f85\u731c\u6d4b\u4e8b\u7269\u7684\u8303\u56f4\uff0c\u6700\u540e\u5f97\u5230\u6e38\u620f\u7684\u7b54\u6848\u3002 \u4e00\u4e2a\u90ae\u4ef6\u5206\u7c7b\u7cfb\u7edf\uff0c\u5927\u81f4\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u68c0\u6d4b\u53d1\u9001\u90ae\u4ef6\u57df\u540d\u5730\u5740\u3002\u5982\u679c\u5730\u5740\u4e3a myEmployer.com, \u5219\u5c06\u5176\u653e\u5728\u5206\u7c7b \"\u65e0\u804a\u65f6\u9700\u8981\u9605\u8bfb\u7684\u90ae\u4ef6\"\u4e2d\u3002 \u5982\u679c\u90ae\u4ef6\u4e0d\u662f\u6765\u81ea\u8fd9\u4e2a\u57df\u540d\uff0c\u5219\u68c0\u6d4b\u90ae\u4ef6\u5185\u5bb9\u91cc\u662f\u5426\u5305\u542b\u5355\u8bcd \"\u66f2\u68cd\u7403\" , \u5982\u679c\u5305\u542b\u5219\u5c06\u90ae\u4ef6\u5f52\u7c7b\u5230 \"\u9700\u8981\u53ca\u65f6\u5904\u7406\u7684\u670b\u53cb\u90ae\u4ef6\", \u5982\u679c\u4e0d\u5305\u542b\u5219\u5c06\u90ae\u4ef6\u5f52\u7c7b\u5230 \"\u65e0\u9700\u9605\u8bfb\u7684\u5783\u573e\u90ae\u4ef6\" \u3002 \u51b3\u7b56\u6811\u7684\u5b9a\u4e49\uff1a \u5206\u7c7b\u51b3\u7b56\u6811\u6a21\u578b\u662f\u4e00\u79cd\u63cf\u8ff0\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u6811\u5f62\u7ed3\u6784\u3002\u51b3\u7b56\u6811\u7531\u7ed3\u70b9\uff08node\uff09\u548c\u6709\u5411\u8fb9\uff08directed edge\uff09\u7ec4\u6210\u3002\u7ed3\u70b9\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u5185\u90e8\u7ed3\u70b9\uff08internal node\uff09\u548c\u53f6\u7ed3\u70b9\uff08leaf node\uff09\u3002\u5185\u90e8\u7ed3\u70b9\u8868\u793a\u4e00\u4e2a\u7279\u5f81\u6216\u5c5e\u6027(features)\uff0c\u53f6\u7ed3\u70b9\u8868\u793a\u4e00\u4e2a\u7c7b(labels)\u3002 \u7528\u51b3\u7b56\u6811\u5bf9\u9700\u8981\u6d4b\u8bd5\u7684\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5bf9\u5b9e\u4f8b\u7684\u67d0\u4e00\u7279\u5f81\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6839\u636e\u6d4b\u8bd5\u7ed3\u679c\uff0c\u5c06\u5b9e\u4f8b\u5206\u914d\u5230\u5176\u5b50\u7ed3\u70b9\uff1b\u8fd9\u65f6\uff0c\u6bcf\u4e00\u4e2a\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7740\u8be5\u7279\u5f81\u7684\u4e00\u4e2a\u53d6\u503c\u3002\u5982\u6b64\u9012\u5f52\u5730\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6d4b\u8bd5\u5e76\u5206\u914d\uff0c\u76f4\u81f3\u8fbe\u5230\u53f6\u7ed3\u70b9\u3002\u6700\u540e\u5c06\u5b9e\u4f8b\u5206\u914d\u5230\u53f6\u7ed3\u70b9\u7684\u7c7b\u4e2d\u3002","title":"\u51b3\u7b56\u6811 \u573a\u666f"},{"location":"ml/3.DecisionTree/#_3","text":"","title":"\u51b3\u7b56\u6811 \u539f\u7406"},{"location":"ml/3.DecisionTree/#_4","text":"","title":"\u51b3\u7b56\u6811 \u987b\u77e5\u6982\u5ff5"},{"location":"ml/3.DecisionTree/#_5","text":"\u71b5\uff08entropy\uff09\uff1a \u71b5\u6307\u7684\u662f\u4f53\u7cfb\u7684\u6df7\u4e71\u7684\u7a0b\u5ea6\uff0c\u5728\u4e0d\u540c\u7684\u5b66\u79d1\u4e2d\u4e5f\u6709\u5f15\u7533\u51fa\u7684\u66f4\u4e3a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u662f\u5404\u9886\u57df\u5341\u5206\u91cd\u8981\u7684\u53c2\u91cf\u3002 \u4fe1\u606f\u8bba\uff08information theory\uff09\u4e2d\u7684\u71b5\uff08\u9999\u519c\u71b5\uff09\uff1a \u662f\u4e00\u79cd\u4fe1\u606f\u7684\u5ea6\u91cf\u65b9\u5f0f\uff0c\u8868\u793a\u4fe1\u606f\u7684\u6df7\u4e71\u7a0b\u5ea6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a\u4fe1\u606f\u8d8a\u6709\u5e8f\uff0c\u4fe1\u606f\u71b5\u8d8a\u4f4e\u3002\u4f8b\u5982\uff1a\u706b\u67f4\u6709\u5e8f\u653e\u5728\u706b\u67f4\u76d2\u91cc\uff0c\u71b5\u503c\u5f88\u4f4e\uff0c\u76f8\u53cd\uff0c\u71b5\u503c\u5f88\u9ad8\u3002 \u4fe1\u606f\u589e\u76ca\uff08information gain\uff09\uff1a \u5728\u5212\u5206\u6570\u636e\u96c6\u524d\u540e\u4fe1\u606f\u53d1\u751f\u7684\u53d8\u5316\u79f0\u4e3a\u4fe1\u606f\u589e\u76ca\u3002","title":"\u4fe1\u606f\u71b5 &amp; \u4fe1\u606f\u589e\u76ca"},{"location":"ml/3.DecisionTree/#_6","text":"\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u51b3\u7b56\u6811? \u6211\u4eec\u4f7f\u7528 createBranch() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a def createBranch(): ''' \u6b64\u5904\u8fd0\u7528\u4e86\u8fed\u4ee3\u7684\u601d\u60f3\u3002 \u611f\u5174\u8da3\u53ef\u4ee5\u641c\u7d22 \u8fed\u4ee3 recursion\uff0c \u751a\u81f3\u662f dynamic programing\u3002 ''' \u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7684\u5206\u7c7b\u6807\u7b7e\u662f\u5426\u76f8\u540c: If so return \u7c7b\u6807\u7b7e Else: \u5bfb\u627e\u5212\u5206\u6570\u636e\u96c6\u7684\u6700\u597d\u7279\u5f81\uff08\u5212\u5206\u4e4b\u540e\u4fe1\u606f\u71b5\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u4fe1\u606f\u589e\u76ca\u6700\u5927\u7684\u7279\u5f81\uff09 \u5212\u5206\u6570\u636e\u96c6 \u521b\u5efa\u5206\u652f\u8282\u70b9 for \u6bcf\u4e2a\u5212\u5206\u7684\u5b50\u96c6 \u8c03\u7528\u51fd\u6570 createBranch \uff08\u521b\u5efa\u5206\u652f\u7684\u51fd\u6570\uff09\u5e76\u589e\u52a0\u8fd4\u56de\u7ed3\u679c\u5230\u5206\u652f\u8282\u70b9\u4e2d return \u5206\u652f\u8282\u70b9","title":"\u51b3\u7b56\u6811 \u5de5\u4f5c\u539f\u7406"},{"location":"ml/3.DecisionTree/#_7","text":"\u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5 (\u8fd9\u91cc\u4f7f\u7528\u7684\u662fID3\u7b97\u6cd5\uff0c\u53ea\u9002\u7528\u4e8e\u6807\u79f0\u578b\u6570\u636e\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6570\u503c\u578b\u6570\u636e\u5fc5\u987b\u79bb\u6563\u5316\u3002 \u8fd8\u6709\u5176\u4ed6\u7684\u6811\u6784\u9020\u7b97\u6cd5\uff0c\u6bd4\u5982CART) \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u56fe\u5f62\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6811\u8ba1\u7b97\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49\u3002","title":"\u51b3\u7b56\u6811 \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/3.DecisionTree/#_8","text":"\u4f18\u70b9\uff1a\u8ba1\u7b97\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u8f93\u51fa\u7ed3\u679c\u6613\u4e8e\u7406\u89e3\uff0c\u6570\u636e\u6709\u7f3a\u5931\u4e5f\u80fd\u8dd1\uff0c\u53ef\u4ee5\u5904\u7406\u4e0d\u76f8\u5173\u7279\u5f81\u3002 \u7f3a\u70b9\uff1a\u5bb9\u6613\u8fc7\u62df\u5408\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u3002","title":"\u51b3\u7b56\u6811 \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/3.DecisionTree/#_9","text":"","title":"\u51b3\u7b56\u6811 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/3.DecisionTree/#1","text":"","title":"\u9879\u76ee\u6848\u4f8b1: \u5224\u5b9a\u9c7c\u7c7b\u548c\u975e\u9c7c\u7c7b"},{"location":"ml/3.DecisionTree/#_10","text":"\u6839\u636e\u4ee5\u4e0b 2 \u4e2a\u7279\u5f81\uff0c\u5c06\u52a8\u7269\u5206\u6210\u4e24\u7c7b\uff1a\u9c7c\u7c7b\u548c\u975e\u9c7c\u7c7b\u3002 \u7279\u5f81\uff1a 1. \u4e0d\u6d6e\u51fa\u6c34\u9762\u662f\u5426\u53ef\u4ee5\u751f\u5b58 2. \u662f\u5426\u6709\u811a\u8e7c","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/3.DecisionTree/#_11","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/3.DecisionTree/DecisionTree.py \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u662fID3\u7b97\u6cd5\uff0c\u56e0\u6b64\u6570\u503c\u578b\u6570\u636e\u5fc5\u987b\u79bb\u6563\u5316\u3002\uff09 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u753b\u51fa\u6765\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7ed3\u6784 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4e60\u5f97\u7684\u51b3\u7b56\u6811\u6267\u884c\u5206\u7c7b \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49 \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u6211\u4eec\u5229\u7528 createDataSet() \u51fd\u6570\u8f93\u5165\u6570\u636e def createDataSet(): dataSet = [[1, 1, 'yes'], [1, 1, 'yes'], [1, 0, 'no'], [0, 1, 'no'], [0, 1, 'no']] labels = ['no surfacing', 'flippers'] return dataSet, labels \u51c6\u5907\u6570\u636e\uff1a\u6811\u6784\u9020\u7b97\u6cd5 \u6b64\u5904\uff0c\u7531\u4e8e\u6211\u4eec\u8f93\u5165\u7684\u6570\u636e\u672c\u8eab\u5c31\u662f\u79bb\u6563\u5316\u6570\u636e\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65\u5c31\u7701\u7565\u4e86\u3002 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\uff0c\u6784\u9020\u6811\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u753b\u51fa\u6765\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u6570\u636e\u96c6\u7684\u9999\u519c\u71b5\u7684\u51fd\u6570 def calcShannonEnt(dataSet): # \u6c42list\u7684\u957f\u5ea6\uff0c\u8868\u793a\u8ba1\u7b97\u53c2\u4e0e\u8bad\u7ec3\u7684\u6570\u636e\u91cf numEntries = len(dataSet) # \u8ba1\u7b97\u5206\u7c7b\u6807\u7b7elabel\u51fa\u73b0\u7684\u6b21\u6570 labelCounts = {} # the the number of unique elements and their occurrence for featVec in dataSet: # \u5c06\u5f53\u524d\u5b9e\u4f8b\u7684\u6807\u7b7e\u5b58\u50a8\uff0c\u5373\u6bcf\u4e00\u884c\u6570\u636e\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u4ee3\u8868\u7684\u662f\u6807\u7b7e currentLabel = featVec[-1] # \u4e3a\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u521b\u5efa\u5b57\u5178\uff0c\u5982\u679c\u5f53\u524d\u7684\u952e\u503c\u4e0d\u5b58\u5728\uff0c\u5219\u6269\u5c55\u5b57\u5178\u5e76\u5c06\u5f53\u524d\u952e\u503c\u52a0\u5165\u5b57\u5178\u3002\u6bcf\u4e2a\u952e\u503c\u90fd\u8bb0\u5f55\u4e86\u5f53\u524d\u7c7b\u522b\u51fa\u73b0\u7684\u6b21\u6570\u3002 if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 # \u5bf9\u4e8e label \u6807\u7b7e\u7684\u5360\u6bd4\uff0c\u6c42\u51fa label \u6807\u7b7e\u7684\u9999\u519c\u71b5 shannonEnt = 0.0 for key in labelCounts: # \u4f7f\u7528\u6240\u6709\u7c7b\u6807\u7b7e\u7684\u53d1\u751f\u9891\u7387\u8ba1\u7b97\u7c7b\u522b\u51fa\u73b0\u7684\u6982\u7387\u3002 prob = float(labelCounts[key])/numEntries # \u8ba1\u7b97\u9999\u519c\u71b5\uff0c\u4ee5 2 \u4e3a\u5e95\u6c42\u5bf9\u6570 shannonEnt -= prob * log(prob, 2) return shannonEnt \u6309\u7167\u7ed9\u5b9a\u7279\u5f81\u5212\u5206\u6570\u636e\u96c6 \u5c06\u6307\u5b9a\u7279\u5f81\u7684\u7279\u5f81\u503c\u7b49\u4e8e value \u7684\u884c\u5269\u4e0b\u5217\u4f5c\u4e3a\u5b50\u6570\u636e\u96c6\u3002 def splitDataSet(dataSet, index, value): \"\"\"splitDataSet(\u901a\u8fc7\u904d\u5386dataSet\u6570\u636e\u96c6\uff0c\u6c42\u51faindex\u5bf9\u5e94\u7684colnum\u5217\u7684\u503c\u4e3avalue\u7684\u884c) \u5c31\u662f\u4f9d\u636eindex\u5217\u8fdb\u884c\u5206\u7c7b\uff0c\u5982\u679cindex\u5217\u7684\u6570\u636e\u7b49\u4e8e value\u7684\u65f6\u5019\uff0c\u5c31\u8981\u5c06 index \u5212\u5206\u5230\u6211\u4eec\u521b\u5efa\u7684\u65b0\u7684\u6570\u636e\u96c6\u4e2d Args: dataSet \u6570\u636e\u96c6 \u5f85\u5212\u5206\u7684\u6570\u636e\u96c6 index \u8868\u793a\u6bcf\u4e00\u884c\u7684index\u5217 \u5212\u5206\u6570\u636e\u96c6\u7684\u7279\u5f81 value \u8868\u793aindex\u5217\u5bf9\u5e94\u7684value\u503c \u9700\u8981\u8fd4\u56de\u7684\u7279\u5f81\u7684\u503c\u3002 Returns: index\u5217\u4e3avalue\u7684\u6570\u636e\u96c6\u3010\u8be5\u6570\u636e\u96c6\u9700\u8981\u6392\u9664index\u5217\u3011 \"\"\" retDataSet = [] for featVec in dataSet: # index\u5217\u4e3avalue\u7684\u6570\u636e\u96c6\u3010\u8be5\u6570\u636e\u96c6\u9700\u8981\u6392\u9664index\u5217\u3011 # \u5224\u65adindex\u5217\u7684\u503c\u662f\u5426\u4e3avalue if featVec[index] == value: # chop out index used for splitting # [:index]\u8868\u793a\u524dindex\u884c\uff0c\u5373\u82e5 index \u4e3a2\uff0c\u5c31\u662f\u53d6 featVec \u7684\u524d index \u884c reducedFeatVec = featVec[:index] ''' \u8bf7\u767e\u5ea6\u67e5\u8be2\u4e00\u4e0b\uff1a extend\u548cappend\u7684\u533a\u522b music_media.append(object) \u5411\u5217\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5bf9\u8c61object music_media.extend(sequence) \u628a\u4e00\u4e2a\u5e8f\u5217seq\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u5217\u8868\u4e2d (\u8ddf += \u5728list\u8fd0\u7528\u7c7b\u4f3c\uff0c music_media += sequence) 1\u3001\u4f7f\u7528append\u7684\u65f6\u5019\uff0c\u662f\u5c06object\u770b\u4f5c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6574\u4f53\u6253\u5305\u6dfb\u52a0\u5230music_media\u5bf9\u8c61\u4e2d\u3002 2\u3001\u4f7f\u7528extend\u7684\u65f6\u5019\uff0c\u662f\u5c06sequence\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff0c\u5c06\u8fd9\u4e2a\u5e8f\u5217\u548cmusic_media\u5e8f\u5217\u5408\u5e76\uff0c\u5e76\u653e\u5728\u5176\u540e\u9762\u3002 music_media = [] music_media.extend([1,2,3]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3] music_media.append([4,5,6]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3, [4, 5, 6]] music_media.extend([7,8,9]) print music_media #\u7ed3\u679c\uff1a #[1, 2, 3, [4, 5, 6], 7, 8, 9] ''' reducedFeatVec.extend(featVec[index+1:]) # [index+1:]\u8868\u793a\u4ece\u8df3\u8fc7 index \u7684 index+1\u884c\uff0c\u53d6\u63a5\u4e0b\u6765\u7684\u6570\u636e # \u6536\u96c6\u7ed3\u679c\u503c index\u5217\u4e3avalue\u7684\u884c\u3010\u8be5\u884c\u9700\u8981\u6392\u9664index\u5217\u3011 retDataSet.append(reducedFeatVec) return retDataSet \u9009\u62e9\u6700\u597d\u7684\u6570\u636e\u96c6\u5212\u5206\u65b9\u5f0f def chooseBestFeatureToSplit(dataSet): \"\"\"chooseBestFeatureToSplit(\u9009\u62e9\u6700\u597d\u7684\u7279\u5f81) Args: dataSet \u6570\u636e\u96c6 Returns: bestFeature \u6700\u4f18\u7684\u7279\u5f81\u5217 \"\"\" # \u6c42\u7b2c\u4e00\u884c\u6709\u591a\u5c11\u5217\u7684 Feature, \u6700\u540e\u4e00\u5217\u662flabel\u5217\u561b numFeatures = len(dataSet[0]) - 1 # \u6570\u636e\u96c6\u7684\u539f\u59cb\u4fe1\u606f\u71b5 baseEntropy = calcShannonEnt(dataSet) # \u6700\u4f18\u7684\u4fe1\u606f\u589e\u76ca\u503c, \u548c\u6700\u4f18\u7684Featurn\u7f16\u53f7 bestInfoGain, bestFeature = 0.0, -1 # iterate over all the features for i in range(numFeatures): # create a list of all the examples of this feature # \u83b7\u53d6\u5bf9\u5e94\u7684feature\u4e0b\u7684\u6240\u6709\u6570\u636e featList = [example[i] for example in dataSet] # get a set of unique values # \u83b7\u53d6\u5254\u91cd\u540e\u7684\u96c6\u5408\uff0c\u4f7f\u7528set\u5bf9list\u6570\u636e\u8fdb\u884c\u53bb\u91cd uniqueVals = set(featList) # \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u4fe1\u606f\u71b5 newEntropy = 0.0 # \u904d\u5386\u67d0\u4e00\u5217\u7684value\u96c6\u5408\uff0c\u8ba1\u7b97\u8be5\u5217\u7684\u4fe1\u606f\u71b5 # \u904d\u5386\u5f53\u524d\u7279\u5f81\u4e2d\u7684\u6240\u6709\u552f\u4e00\u5c5e\u6027\u503c\uff0c\u5bf9\u6bcf\u4e2a\u552f\u4e00\u5c5e\u6027\u503c\u5212\u5206\u4e00\u6b21\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u6570\u636e\u96c6\u7684\u65b0\u71b5\u503c\uff0c\u5e76\u5bf9\u6240\u6709\u552f\u4e00\u7279\u5f81\u503c\u5f97\u5230\u7684\u71b5\u6c42\u548c\u3002 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) # \u8ba1\u7b97\u6982\u7387 prob = len(subDataSet)/float(len(dataSet)) # \u8ba1\u7b97\u4fe1\u606f\u71b5 newEntropy += prob * calcShannonEnt(subDataSet) # gain[\u4fe1\u606f\u589e\u76ca]: \u5212\u5206\u6570\u636e\u96c6\u524d\u540e\u7684\u4fe1\u606f\u53d8\u5316\uff0c \u83b7\u53d6\u4fe1\u606f\u71b5\u6700\u5927\u7684\u503c # \u4fe1\u606f\u589e\u76ca\u662f\u71b5\u7684\u51cf\u5c11\u6216\u8005\u662f\u6570\u636e\u65e0\u5e8f\u5ea6\u7684\u51cf\u5c11\u3002\u6700\u540e\uff0c\u6bd4\u8f83\u6240\u6709\u7279\u5f81\u4e2d\u7684\u4fe1\u606f\u589e\u76ca\uff0c\u8fd4\u56de\u6700\u597d\u7279\u5f81\u5212\u5206\u7684\u7d22\u5f15\u503c\u3002 infoGain = baseEntropy - newEntropy print 'infoGain=', infoGain, 'bestFeature=', i, baseEntropy, newEntropy if (infoGain > bestInfoGain): bestInfoGain = infoGain bestFeature = i return bestFeature \u95ee\uff1a\u4e0a\u9762\u7684 newEntropy \u4e3a\u4ec0\u4e48\u662f\u6839\u636e\u5b50\u96c6\u8ba1\u7b97\u7684\u5462\uff1f \u7b54\uff1a\u56e0\u4e3a\u6211\u4eec\u5728\u6839\u636e\u4e00\u4e2a\u7279\u5f81\u8ba1\u7b97\u9999\u519c\u71b5\u7684\u65f6\u5019\uff0c\u8be5\u7279\u5f81\u7684\u5206\u7c7b\u503c\u662f\u76f8\u540c\uff0c\u8fd9\u4e2a\u7279\u5f81\u8fd9\u4e2a\u5206\u7c7b\u7684\u9999\u519c\u71b5\u4e3a 0\uff1b \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8ba1\u7b97\u65b0\u7684\u9999\u519c\u71b5\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662f\u5b50\u96c6\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784 \u521b\u5efa\u6811\u7684\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a def createTree(dataSet, labels): classList = [example[-1] for example in dataSet] # \u5982\u679c\u6570\u636e\u96c6\u7684\u6700\u540e\u4e00\u5217\u7684\u7b2c\u4e00\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570=\u6574\u4e2a\u96c6\u5408\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u8bf4\u53ea\u6709\u4e00\u4e2a\u7c7b\u522b\uff0c\u5c31\u53ea\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u5c31\u884c # \u7b2c\u4e00\u4e2a\u505c\u6b62\u6761\u4ef6\uff1a\u6240\u6709\u7684\u7c7b\u6807\u7b7e\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u8be5\u7c7b\u6807\u7b7e\u3002 # count() \u51fd\u6570\u662f\u7edf\u8ba1\u62ec\u53f7\u4e2d\u7684\u503c\u5728list\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 if classList.count(classList[0]) == len(classList): return classList[0] # \u5982\u679c\u6570\u636e\u96c6\u53ea\u67091\u5217\uff0c\u90a3\u4e48\u6700\u521d\u51fa\u73b0label\u6b21\u6570\u6700\u591a\u7684\u4e00\u7c7b\uff0c\u4f5c\u4e3a\u7ed3\u679c # \u7b2c\u4e8c\u4e2a\u505c\u6b62\u6761\u4ef6\uff1a\u4f7f\u7528\u5b8c\u4e86\u6240\u6709\u7279\u5f81\uff0c\u4ecd\u7136\u4e0d\u80fd\u5c06\u6570\u636e\u96c6\u5212\u5206\u6210\u4ec5\u5305\u542b\u552f\u4e00\u7c7b\u522b\u7684\u5206\u7ec4\u3002 if len(dataSet[0]) == 1: return majorityCnt(classList) # \u9009\u62e9\u6700\u4f18\u7684\u5217\uff0c\u5f97\u5230\u6700\u4f18\u5217\u5bf9\u5e94\u7684label\u542b\u4e49 bestFeat = chooseBestFeatureToSplit(dataSet) # \u83b7\u53d6label\u7684\u540d\u79f0 bestFeatLabel = labels[bestFeat] # \u521d\u59cb\u5316myTree myTree = {bestFeatLabel: {}} # \u6ce8\uff1alabels\u5217\u8868\u662f\u53ef\u53d8\u5bf9\u8c61\uff0c\u5728PYTHON\u51fd\u6570\u4e2d\u4f5c\u4e3a\u53c2\u6570\u65f6\u4f20\u5740\u5f15\u7528\uff0c\u80fd\u591f\u88ab\u5168\u5c40\u4fee\u6539 # \u6240\u4ee5\u8fd9\u884c\u4ee3\u7801\u5bfc\u81f4\u51fd\u6570\u5916\u7684\u540c\u540d\u53d8\u91cf\u88ab\u5220\u9664\u4e86\u5143\u7d20\uff0c\u9020\u6210\u4f8b\u53e5\u65e0\u6cd5\u6267\u884c\uff0c\u63d0\u793a'no surfacing' is not in list del(labels[bestFeat]) # \u53d6\u51fa\u6700\u4f18\u5217\uff0c\u7136\u540e\u5b83\u7684branch\u505a\u5206\u7c7b featValues = [example[bestFeat] for example in dataSet] uniqueVals = set(featValues) for value in uniqueVals: # \u6c42\u51fa\u5269\u4f59\u7684\u6807\u7b7elabel subLabels = labels[:] # \u904d\u5386\u5f53\u524d\u9009\u62e9\u7279\u5f81\u5305\u542b\u7684\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5728\u6bcf\u4e2a\u6570\u636e\u96c6\u5212\u5206\u4e0a\u9012\u5f52\u8c03\u7528\u51fd\u6570createTree() myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), subLabels) # print 'myTree', value, myTree return myTree \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u51b3\u7b56\u6811\u6267\u884c\u5206\u7c7b def classify(inputTree, featLabels, testVec): \"\"\"classify(\u7ed9\u8f93\u5165\u7684\u8282\u70b9\uff0c\u8fdb\u884c\u5206\u7c7b) Args: inputTree \u51b3\u7b56\u6811\u6a21\u578b featLabels Feature\u6807\u7b7e\u5bf9\u5e94\u7684\u540d\u79f0 testVec \u6d4b\u8bd5\u8f93\u5165\u7684\u6570\u636e Returns: classLabel \u5206\u7c7b\u7684\u7ed3\u679c\u503c\uff0c\u9700\u8981\u6620\u5c04label\u624d\u80fd\u77e5\u9053\u540d\u79f0 \"\"\" # \u83b7\u53d6tree\u7684\u6839\u8282\u70b9\u5bf9\u4e8e\u7684key\u503c firstStr = inputTree.keys()[0] # \u901a\u8fc7key\u5f97\u5230\u6839\u8282\u70b9\u5bf9\u5e94\u7684value secondDict = inputTree[firstStr] # \u5224\u65ad\u6839\u8282\u70b9\u540d\u79f0\u83b7\u53d6\u6839\u8282\u70b9\u5728label\u4e2d\u7684\u5148\u540e\u987a\u5e8f\uff0c\u8fd9\u6837\u5c31\u77e5\u9053\u8f93\u5165\u7684testVec\u600e\u4e48\u5f00\u59cb\u5bf9\u7167\u6811\u6765\u505a\u5206\u7c7b featIndex = featLabels.index(firstStr) # \u6d4b\u8bd5\u6570\u636e\uff0c\u627e\u5230\u6839\u8282\u70b9\u5bf9\u5e94\u7684label\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u77e5\u9053\u4ece\u8f93\u5165\u7684\u6570\u636e\u7684\u7b2c\u51e0\u4f4d\u6765\u5f00\u59cb\u5206\u7c7b key = testVec[featIndex] valueOfFeat = secondDict[key] print '+++', firstStr, 'xxx', secondDict, '---', key, '>>>', valueOfFeat # \u5224\u65ad\u5206\u679d\u662f\u5426\u7ed3\u675f: \u5224\u65advalueOfFeat\u662f\u5426\u662fdict\u7c7b\u578b if isinstance(valueOfFeat, dict): classLabel = classify(valueOfFeat, featLabels, testVec) else: classLabel = valueOfFeat return classLabel \u4f7f\u7528\u7b97\u6cd5\uff1a\u6b64\u6b65\u9aa4\u53ef\u4ee5\u9002\u7528\u4e8e\u4efb\u4f55\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\uff0c\u800c\u4f7f\u7528\u51b3\u7b56\u6811\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u7684\u5185\u5728\u542b\u4e49\u3002","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/3.DecisionTree/#2","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/3.DecisionTree/DecisionTree.py","title":"\u9879\u76ee\u6848\u4f8b2: \u4f7f\u7528\u51b3\u7b56\u6811\u9884\u6d4b\u9690\u5f62\u773c\u955c\u7c7b\u578b"},{"location":"ml/3.DecisionTree/#_12","text":"\u9690\u5f62\u773c\u955c\u7c7b\u578b\u5305\u62ec\u786c\u6750\u8d28\u3001\u8f6f\u6750\u8d28\u4ee5\u53ca\u4e0d\u9002\u5408\u4f69\u6234\u9690\u5f62\u773c\u955c\u3002\u6211\u4eec\u9700\u8981\u4f7f\u7528\u51b3\u7b56\u6811\u9884\u6d4b\u60a3\u8005\u9700\u8981\u4f69\u6234\u7684\u9690\u5f62\u773c\u955c\u7c7b\u578b\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/3.DecisionTree/#_13","text":"\u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6\u3002 \u89e3\u6790\u6570\u636e: \u89e3\u6790 tab \u952e\u5206\u9694\u7684\u6570\u636e\u884c \u5206\u6790\u6570\u636e: \u5feb\u901f\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u6b63\u786e\u5730\u89e3\u6790\u6570\u636e\u5185\u5bb9\uff0c\u4f7f\u7528 createPlot() \u51fd\u6570\u7ed8\u5236\u6700\u7ec8\u7684\u6811\u5f62\u56fe\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528 createTree() \u51fd\u6570\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570\u9a8c\u8bc1\u51b3\u7b56\u6811\u53ef\u4ee5\u6b63\u786e\u5206\u7c7b\u7ed9\u5b9a\u7684\u6570\u636e\u5b9e\u4f8b\u3002 \u4f7f\u7528\u7b97\u6cd5: \u5b58\u50a8\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u65f6\u65e0\u9700\u91cd\u65b0\u6784\u9020\u6811\u3002 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u6587\u672c\u6587\u4ef6\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a young myope no reduced no lenses pre myope no reduced no lenses presbyopic myope no reduced no lenses \u89e3\u6790\u6570\u636e\uff1a\u89e3\u6790 tab \u952e\u5206\u9694\u7684\u6570\u636e\u884c lecses = [inst.strip().split('\\t') for inst in fr.readlines()] lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate'] \u5206\u6790\u6570\u636e\uff1a\u5feb\u901f\u68c0\u67e5\u6570\u636e\uff0c\u786e\u4fdd\u6b63\u786e\u5730\u89e3\u6790\u6570\u636e\u5185\u5bb9\uff0c\u4f7f\u7528 createPlot() \u51fd\u6570\u7ed8\u5236\u6700\u7ec8\u7684\u6811\u5f62\u56fe\u3002 >>> treePlotter.createPlot(lensesTree) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u4f7f\u7528 createTree() \u51fd\u6570 >>> lensesTree = trees.createTree(lenses, lensesLabels) >>> lensesTree {'tearRate': {'reduced': 'no lenses', 'normal': {'astigmatic':{'yes': {'prescript':{'hyper':{'age':{'pre':'no lenses', 'presbyopic': 'no lenses', 'young':'hard'}}, 'myope':'hard'}}, 'no':{'age':{'pre': 'soft', 'presbyopic':{'prescript': {'hyper':'soft', 'myope': 'no lenses'}}, 'young':'soft'}}}}} \u6d4b\u8bd5\u7b97\u6cd5: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570\u9a8c\u8bc1\u51b3\u7b56\u6811\u53ef\u4ee5\u6b63\u786e\u5206\u7c7b\u7ed9\u5b9a\u7684\u6570\u636e\u5b9e\u4f8b\u3002 \u4f7f\u7528\u7b97\u6cd5: \u5b58\u50a8\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\u65f6\u65e0\u9700\u91cd\u65b0\u6784\u9020\u6811\u3002 \u4f7f\u7528 pickle \u6a21\u5757\u5b58\u50a8\u51b3\u7b56\u6811 def storeTree(inputTree, filename): import pickle fw = open(filename, 'wb') pickle.dump(inputTree, fw) fw.close() def grabTree(filename): import pickle fr = open(filename, 'rb') return pickle.load(fr) \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/4.NaiveBayesian/","text":"\u7b2c4\u7ae0 \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af \u6734\u7d20\u8d1d\u53f6\u65af \u6982\u8ff0 \u8d1d\u53f6\u65af\u5206\u7c7b\u662f\u4e00\u7c7b\u5206\u7c7b\u7b97\u6cd5\u7684\u603b\u79f0\uff0c\u8fd9\u7c7b\u7b97\u6cd5\u5747\u4ee5\u8d1d\u53f6\u65af\u5b9a\u7406\u4e3a\u57fa\u7840\uff0c\u6545\u7edf\u79f0\u4e3a\u8d1d\u53f6\u65af\u5206\u7c7b\u3002\u672c\u7ae0\u9996\u5148\u4ecb\u7ecd\u8d1d\u53f6\u65af\u5206\u7c7b\u7b97\u6cd5\u7684\u57fa\u7840\u2014\u2014\u8d1d\u53f6\u65af\u5b9a\u7406\u3002\u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u4f8b\u6765\u8ba8\u8bba\u8d1d\u53f6\u65af\u5206\u7c7b\u7684\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd: \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u3002 \u8d1d\u53f6\u65af\u7406\u8bba & \u6761\u4ef6\u6982\u7387 \u8d1d\u53f6\u65af\u7406\u8bba \u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u5b83\u7531\u4e24\u7c7b\u6570\u636e\u7ec4\u6210\uff0c\u6570\u636e\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u73b0\u5728\u7528 p1(x,y) \u8868\u793a\u6570\u636e\u70b9 (x,y) \u5c5e\u4e8e\u7c7b\u522b 1\uff08\u56fe\u4e2d\u7528\u5706\u70b9\u8868\u793a\u7684\u7c7b\u522b\uff09\u7684\u6982\u7387\uff0c\u7528 p2(x,y) \u8868\u793a\u6570\u636e\u70b9 (x,y) \u5c5e\u4e8e\u7c7b\u522b 2\uff08\u56fe\u4e2d\u4e09\u89d2\u5f62\u8868\u793a\u7684\u7c7b\u522b\uff09\u7684\u6982\u7387\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u6570\u636e\u70b9 (x,y)\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u89c4\u5219\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u522b\uff1a \u5982\u679c p1(x,y) > p2(x,y) \uff0c\u90a3\u4e48\u7c7b\u522b\u4e3a1 \u5982\u679c p2(x,y) > p1(x,y) \uff0c\u90a3\u4e48\u7c7b\u522b\u4e3a2 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u9ad8\u6982\u7387\u5bf9\u5e94\u7684\u7c7b\u522b\u3002\u8fd9\u5c31\u662f\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5373\u9009\u62e9\u5177\u6709\u6700\u9ad8\u6982\u7387\u7684\u51b3\u7b56\u3002 \u6761\u4ef6\u6982\u7387 \u5982\u679c\u4f60\u5bf9 p(x,y|c1) \u7b26\u53f7\u5f88\u719f\u6089\uff0c\u90a3\u4e48\u53ef\u4ee5\u8df3\u8fc7\u672c\u5c0f\u8282\u3002 \u6709\u4e00\u4e2a\u88c5\u4e86 7 \u5757\u77f3\u5934\u7684\u7f50\u5b50\uff0c\u5176\u4e2d 3 \u5757\u662f\u767d\u8272\u7684\uff0c4 \u5757\u662f\u9ed1\u8272\u7684\u3002\u5982\u679c\u4ece\u7f50\u5b50\u4e2d\u968f\u673a\u53d6\u51fa\u4e00\u5757\u77f3\u5934\uff0c\u90a3\u4e48\u662f\u767d\u8272\u77f3\u5934\u7684\u53ef\u80fd\u6027\u662f\u591a\u5c11\uff1f\u7531\u4e8e\u53d6\u77f3\u5934\u6709 7 \u79cd\u53ef\u80fd\uff0c\u5176\u4e2d 3 \u79cd\u4e3a\u767d\u8272\uff0c\u6240\u4ee5\u53d6\u51fa\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\u4e3a 3/7 \u3002\u90a3\u4e48\u53d6\u5230\u9ed1\u8272\u77f3\u5934\u7684\u6982\u7387\u53c8\u662f\u591a\u5c11\u5462\uff1f\u5f88\u663e\u7136\uff0c\u662f 4/7 \u3002\u6211\u4eec\u4f7f\u7528 P(white) \u6765\u8868\u793a\u53d6\u5230\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\uff0c\u5176\u6982\u7387\u503c\u53ef\u4ee5\u901a\u8fc7\u767d\u8272\u77f3\u5934\u6570\u76ee\u9664\u4ee5\u603b\u7684\u77f3\u5934\u6570\u76ee\u6765\u5f97\u5230\u3002 \u5982\u679c\u8fd9 7 \u5757\u77f3\u5934\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u653e\u5728\u4e24\u4e2a\u6876\u4e2d\uff0c\u90a3\u4e48\u4e0a\u8ff0\u6982\u7387\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\uff1f \u8ba1\u7b97 P(white) \u6216\u8005 P(black) \uff0c\u5982\u679c\u4e8b\u5148\u6211\u4eec\u77e5\u9053\u77f3\u5934\u6240\u5728\u6876\u7684\u4fe1\u606f\u662f\u4f1a\u6539\u53d8\u7ed3\u679c\u7684\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u6982\u7387\uff08conditional probablity\uff09\u3002\u5047\u5b9a\u8ba1\u7b97\u7684\u662f\u4ece B \u6876\u53d6\u5230\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\uff0c\u8fd9\u4e2a\u6982\u7387\u53ef\u4ee5\u8bb0\u4f5c P(white|bucketB) \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u5728\u5df2\u77e5\u77f3\u5934\u51fa\u81ea B \u6876\u7684\u6761\u4ef6\u4e0b\uff0c\u53d6\u51fa\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\u201d\u3002\u5f88\u5bb9\u6613\u5f97\u5230\uff0cP(white|bucketA) \u503c\u4e3a 2/4 \uff0cP(white|bucketB) \u7684\u503c\u4e3a 1/3 \u3002 \u6761\u4ef6\u6982\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a P(white|bucketB) = P(white and bucketB) / P(bucketB) \u9996\u5148\uff0c\u6211\u4eec\u7528 B \u6876\u4e2d\u767d\u8272\u77f3\u5934\u7684\u4e2a\u6570\u9664\u4ee5\u4e24\u4e2a\u6876\u4e2d\u603b\u7684\u77f3\u5934\u6570\uff0c\u5f97\u5230 P(white and bucketB) = 1/7 .\u5176\u6b21\uff0c\u7531\u4e8e B \u6876\u4e2d\u6709 3 \u5757\u77f3\u5934\uff0c\u800c\u603b\u77f3\u5934\u6570\u4e3a 7 \uff0c\u4e8e\u662f P(bucketB) \u5c31\u7b49\u4e8e 3/7 \u3002\u4e8e\u662f\u53c8 P(white|bucketB) = P(white and bucketB) / P(bucketB) = (1/7) / (3/7) = 1/3 \u3002 \u53e6\u5916\u4e00\u79cd\u6709\u6548\u8ba1\u7b97\u6761\u4ef6\u6982\u7387\u7684\u65b9\u6cd5\u79f0\u4e3a\u8d1d\u53f6\u65af\u51c6\u5219\u3002\u8d1d\u53f6\u65af\u51c6\u5219\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u4ea4\u6362\u6761\u4ef6\u6982\u7387\u4e2d\u7684\u6761\u4ef6\u4e0e\u7ed3\u679c\uff0c\u5373\u5982\u679c\u5df2\u77e5 P(x|c)\uff0c\u8981\u6c42 P(c|x)\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a ![\u8ba1\u7b97p(c|x)\u7684\u65b9\u6cd5/img/ml/4.NaiveBayesian/NB_4.png) \u4f7f\u7528\u6761\u4ef6\u6982\u7387\u6765\u5206\u7c7b \u4e0a\u9762\u6211\u4eec\u63d0\u5230\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u8981\u6c42\u8ba1\u7b97\u4e24\u4e2a\u6982\u7387 p1(x, y) \u548c p2(x, y): \u5982\u679c p1(x, y) > p2(x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b 1; \u5982\u679c p2(x, y) > p1(X, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b 2. \u8fd9\u5e76\u4e0d\u662f\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u7684\u6240\u6709\u5185\u5bb9\u3002\u4f7f\u7528 p1() \u548c p2() \u53ea\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u7b80\u5316\u63cf\u8ff0\uff0c\u800c\u771f\u6b63\u9700\u8981\u8ba1\u7b97\u548c\u6bd4\u8f83\u7684\u662f p(c1|x, y) \u548c p(c2|x, y) .\u8fd9\u4e9b\u7b26\u53f7\u6240\u4ee3\u8868\u7684\u5177\u4f53\u610f\u4e49\u662f: \u7ed9\u5b9a\u67d0\u4e2a\u7531 x\u3001y \u8868\u793a\u7684\u6570\u636e\u70b9\uff0c\u90a3\u4e48\u8be5\u6570\u636e\u70b9\u6765\u81ea\u7c7b\u522b c1 \u7684\u6982\u7387\u662f\u591a\u5c11\uff1f\u6570\u636e\u70b9\u6765\u81ea\u7c7b\u522b c2 \u7684\u6982\u7387\u53c8\u662f\u591a\u5c11\uff1f\u6ce8\u610f\u8fd9\u4e9b\u6982\u7387\u4e0e\u6982\u7387 p(x, y|c1) \u5e76\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528\u8d1d\u53f6\u65af\u51c6\u5219\u6765\u4ea4\u6362\u6982\u7387\u4e2d\u6761\u4ef6\u4e0e\u7ed3\u679c\u3002\u5177\u4f53\u5730\uff0c\u5e94\u7528\u8d1d\u53f6\u65af\u51c6\u5219\u5f97\u5230: \u4f7f\u7528\u4e0a\u9762\u8fd9\u4e9b\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5b9a\u4e49\u8d1d\u53f6\u65af\u5206\u7c7b\u51c6\u5219\u4e3a: \u5982\u679c P(c1|x, y) > P(c2|x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b c1; \u5982\u679c P(c2|x, y) > P(c1|x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b c2. \u5728\u6587\u6863\u5206\u7c7b\u4e2d\uff0c\u6574\u4e2a\u6587\u6863\uff08\u5982\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff09\u662f\u5b9e\u4f8b\uff0c\u800c\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\u5219\u6784\u6210\u7279\u5f81\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u8bcd\uff0c\u5e76\u628a\u6bcf\u4e2a\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u800c\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u4f5c\u4e3a\u8be5\u7279\u5f81\u7684\u503c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7279\u5f81\u6570\u76ee\u5c31\u4f1a\u8ddf\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u7684\u6570\u76ee\u4e00\u6837\u591a\u3002 \u6211\u4eec\u5047\u8bbe\u7279\u5f81\u4e4b\u95f4 \u76f8\u4e92\u72ec\u7acb \u3002\u6240\u8c13 \u72ec\u7acb(independence) \u6307\u7684\u662f\u7edf\u8ba1\u610f\u4e49\u4e0a\u7684\u72ec\u7acb\uff0c\u5373\u4e00\u4e2a\u7279\u5f81\u6216\u8005\u5355\u8bcd\u51fa\u73b0\u7684\u53ef\u80fd\u6027\u4e0e\u5b83\u548c\u5176\u4ed6\u5355\u8bcd\u76f8\u90bb\u6ca1\u6709\u5173\u7cfb\uff0c\u6bd4\u5982\u8bf4\uff0c\u201c\u6211\u4eec\u201d\u4e2d\u7684\u201c\u6211\u201d\u548c\u201c\u4eec\u201d\u51fa\u73b0\u7684\u6982\u7387\u4e0e\u8fd9\u4e24\u4e2a\u5b57\u76f8\u90bb\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u8fd9\u4e2a\u5047\u8bbe\u6b63\u662f\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4e2d \u6734\u7d20(naive) \u4e00\u8bcd\u7684\u542b\u4e49\u3002\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4e2d\u7684\u53e6\u4e00\u4e2a\u5047\u8bbe\u662f\uff0c \u6bcf\u4e2a\u7279\u5f81\u540c\u7b49\u91cd\u8981 \u3002 Note: \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u901a\u5e38\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f: \u4e00\u79cd\u57fa\u4e8e\u4f2f\u52aa\u5229\u6a21\u578b\u5b9e\u73b0\uff0c\u4e00\u79cd\u57fa\u4e8e\u591a\u9879\u5f0f\u6a21\u578b\u5b9e\u73b0\u3002\u8fd9\u91cc\u91c7\u7528\u524d\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u8be5\u5b9e\u73b0\u65b9\u5f0f\u4e2d\u5e76\u4e0d\u8003\u8651\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53ea\u8003\u8651\u51fa\u4e0d\u51fa\u73b0\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\u76f8\u5f53\u4e8e\u5047\u8bbe\u8bcd\u662f\u7b49\u6743\u91cd\u7684\u3002 \u6734\u7d20\u8d1d\u53f6\u65af \u573a\u666f \u673a\u5668\u5b66\u4e60\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u5c31\u662f\u6587\u6863\u7684\u81ea\u52a8\u5206\u7c7b\u3002 \u5728\u6587\u6863\u5206\u7c7b\u4e2d\uff0c\u6574\u4e2a\u6587\u6863\uff08\u5982\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff09\u662f\u5b9e\u4f8b\uff0c\u800c\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\u5219\u6784\u6210\u7279\u5f81\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u8bcd\uff0c\u5e76\u628a\u6bcf\u4e2a\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u800c\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u4f5c\u4e3a\u8be5\u7279\u5f81\u7684\u503c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7279\u5f81\u6570\u76ee\u5c31\u4f1a\u8ddf\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u7684\u6570\u76ee\u4e00\u6837\u591a\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u662f\u4e0a\u9762\u4ecb\u7ecd\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u662f\u7528\u4e8e\u6587\u6863\u5206\u7c7b\u7684\u5e38\u7528\u7b97\u6cd5\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8fdb\u884c\u4e00\u4e9b\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u7684\u5b9e\u8df5\u9879\u76ee\u3002 \u6734\u7d20\u8d1d\u53f6\u65af \u539f\u7406 \u6734\u7d20\u8d1d\u53f6\u65af \u5de5\u4f5c\u539f\u7406 \u63d0\u53d6\u6240\u6709\u6587\u6863\u4e2d\u7684\u8bcd\u6761\u5e76\u8fdb\u884c\u53bb\u91cd \u83b7\u53d6\u6587\u6863\u7684\u6240\u6709\u7c7b\u522b \u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u7684\u6587\u6863\u6570\u76ee \u5bf9\u6bcf\u7bc7\u8bad\u7ec3\u6587\u6863: \u5bf9\u6bcf\u4e2a\u7c7b\u522b: \u5982\u679c\u8bcd\u6761\u51fa\u73b0\u5728\u6587\u6863\u4e2d-->\u589e\u52a0\u8be5\u8bcd\u6761\u7684\u8ba1\u6570\u503c\uff08for\u5faa\u73af\u6216\u8005\u77e9\u9635\u76f8\u52a0\uff09 \u589e\u52a0\u6240\u6709\u8bcd\u6761\u7684\u8ba1\u6570\u503c\uff08\u6b64\u7c7b\u522b\u4e0b\u8bcd\u6761\u603b\u6570\uff09 \u5bf9\u6bcf\u4e2a\u7c7b\u522b: \u5bf9\u6bcf\u4e2a\u8bcd\u6761: \u5c06\u8be5\u8bcd\u6761\u7684\u6570\u76ee\u9664\u4ee5\u603b\u8bcd\u6761\u6570\u76ee\u5f97\u5230\u7684\u6761\u4ef6\u6982\u7387\uff08P(\u8bcd\u6761|\u7c7b\u522b)\uff09 \u8fd4\u56de\u8be5\u6587\u6863\u5c5e\u4e8e\u6bcf\u4e2a\u7c7b\u522b\u7684\u6761\u4ef6\u6982\u7387\uff08P(\u7c7b\u522b|\u6587\u6863\u7684\u6240\u6709\u8bcd\u6761)\uff09 \u6734\u7d20\u8d1d\u53f6\u65af \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e: \u9700\u8981\u6570\u503c\u578b\u6216\u8005\u5e03\u5c14\u578b\u6570\u636e\u3002 \u5206\u6790\u6570\u636e: \u6709\u5927\u91cf\u7279\u5f81\u65f6\uff0c\u7ed8\u5236\u7279\u5f81\u4f5c\u7528\u4e0d\u5927\uff0c\u6b64\u65f6\u4f7f\u7528\u76f4\u65b9\u56fe\u6548\u679c\u66f4\u597d\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u8ba1\u7b97\u4e0d\u540c\u7684\u72ec\u7acb\u7279\u5f81\u7684\u6761\u4ef6\u6982\u7387\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u8ba1\u7b97\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5: \u4e00\u4e2a\u5e38\u89c1\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5e94\u7528\u662f\u6587\u6863\u5206\u7c7b\u3002\u53ef\u4ee5\u5728\u4efb\u610f\u7684\u5206\u7c7b\u573a\u666f\u4e2d\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u662f\u6587\u672c\u3002 \u6734\u7d20\u8d1d\u53f6\u65af \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9: \u5728\u6570\u636e\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548\uff0c\u53ef\u4ee5\u5904\u7406\u591a\u7c7b\u522b\u95ee\u9898\u3002 \u7f3a\u70b9: \u5bf9\u4e8e\u8f93\u5165\u6570\u636e\u7684\u51c6\u5907\u65b9\u5f0f\u8f83\u4e3a\u654f\u611f\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6807\u79f0\u578b\u6570\u636e\u3002 \u6734\u7d20\u8d1d\u53f6\u65af \u9879\u76ee\u6848\u4f8b \u9879\u76ee\u6848\u4f8b1: \u5c4f\u853d\u793e\u533a\u7559\u8a00\u677f\u7684\u4fae\u8fb1\u6027\u8a00\u8bba \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py \u9879\u76ee\u6982\u8ff0 \u6784\u5efa\u4e00\u4e2a\u5feb\u901f\u8fc7\u6ee4\u5668\u6765\u5c4f\u853d\u5728\u7ebf\u793e\u533a\u7559\u8a00\u677f\u4e0a\u7684\u4fae\u8fb1\u6027\u8a00\u8bba\u3002\u5982\u679c\u67d0\u6761\u7559\u8a00\u4f7f\u7528\u4e86\u8d1f\u9762\u6216\u8005\u4fae\u8fb1\u6027\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u5c31\u5c06\u8be5\u7559\u8a00\u6807\u8bc6\u4e3a\u5185\u5bb9\u4e0d\u5f53\u3002\u5bf9\u6b64\u95ee\u9898\u5efa\u7acb\u4e24\u4e2a\u7c7b\u522b: \u4fae\u8fb1\u7c7b\u548c\u975e\u4fae\u8fb1\u7c7b\uff0c\u4f7f\u7528 1 \u548c 0 \u5206\u522b\u8868\u793a\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e: \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u8bcd\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4ece\u8bcd\u5411\u91cf\u8ba1\u7b97\u6982\u7387 \u6d4b\u8bd5\u7b97\u6cd5: \u6839\u636e\u73b0\u5b9e\u60c5\u51b5\u4fee\u6539\u5206\u7c7b\u5668 \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u793e\u533a\u7559\u8a00\u677f\u8a00\u8bba\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u672c\u4f8b\u662f\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u8bcd\u8868: def loadDataSet(): \"\"\" \u521b\u5efa\u6570\u636e\u96c6 :return: \u5355\u8bcd\u5217\u8868postingList, \u6240\u5c5e\u7c7b\u522bclassVec \"\"\" postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'], #[0,0,1,1,1......] ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'], ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'], ['stop', 'posting', 'stupid', 'worthless', 'garbage'], ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'], ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']] classVec = [0, 1, 0, 1, 0, 1] # 1 is abusive, 0 not return postingList, classVec \u51c6\u5907\u6570\u636e: \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u8bcd\u5411\u91cf def createVocabList(dataSet): \"\"\" \u83b7\u53d6\u6240\u6709\u5355\u8bcd\u7684\u96c6\u5408 :param dataSet: \u6570\u636e\u96c6 :return: \u6240\u6709\u5355\u8bcd\u7684\u96c6\u5408(\u5373\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u5355\u8bcd\u5217\u8868) \"\"\" vocabSet = set([]) # create empty set for document in dataSet: # \u64cd\u4f5c\u7b26 | \u7528\u4e8e\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 vocabSet = vocabSet | set(document) # union of the two sets return list(vocabSet) def setOfWords2Vec(vocabList, inputSet): \"\"\" \u904d\u5386\u67e5\u770b\u8be5\u5355\u8bcd\u662f\u5426\u51fa\u73b0\uff0c\u51fa\u73b0\u8be5\u5355\u8bcd\u5219\u5c06\u8be5\u5355\u8bcd\u7f6e1 :param vocabList: \u6240\u6709\u5355\u8bcd\u96c6\u5408\u5217\u8868 :param inputSet: \u8f93\u5165\u6570\u636e\u96c6 :return: \u5339\u914d\u5217\u8868[0,1,0,1...]\uff0c\u5176\u4e2d 1\u4e0e0 \u8868\u793a\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u8f93\u5165\u7684\u6570\u636e\u96c6\u4e2d \"\"\" # \u521b\u5efa\u4e00\u4e2a\u548c\u8bcd\u6c47\u8868\u7b49\u957f\u7684\u5411\u91cf\uff0c\u5e76\u5c06\u5176\u5143\u7d20\u90fd\u8bbe\u7f6e\u4e3a0 returnVec = [0] * len(vocabList)# [0,0......] # \u904d\u5386\u6587\u6863\u4e2d\u7684\u6240\u6709\u5355\u8bcd\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd\uff0c\u5219\u5c06\u8f93\u51fa\u7684\u6587\u6863\u5411\u91cf\u4e2d\u7684\u5bf9\u5e94\u503c\u8bbe\u4e3a1 for word in inputSet: if word in vocabList: returnVec[vocabList.index(word)] = 1 else: print \"the word: %s is not in my Vocabulary!\" % word return returnVec \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u68c0\u67e5\u51fd\u6570\u6267\u884c\u60c5\u51b5\uff0c\u68c0\u67e5\u8bcd\u8868\uff0c\u4e0d\u51fa\u73b0\u91cd\u590d\u5355\u8bcd\uff0c\u9700\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 >>> listOPosts, listClasses = bayes.loadDataSet() >>> myVocabList = bayes.createVocabList(listOPosts) >>> myVocabList ['cute', 'love', 'help', 'garbage', 'quit', 'I', 'problems', 'is', 'park', 'stop', 'flea', 'dalmation', 'licks', 'food', 'not', 'him', 'buying', 'posting', 'has', 'worthless', 'ate', 'to', 'maybe', 'please', 'dog', 'how', 'stupid', 'so', 'take', 'mr', 'steak', 'my'] \u68c0\u67e5\u51fd\u6570\u6709\u6548\u6027\u3002\u4f8b\u5982\uff1amyVocabList \u4e2d\u7d22\u5f15\u4e3a 2 \u7684\u5143\u7d20\u662f\u4ec0\u4e48\u5355\u8bcd\uff1f\u5e94\u8be5\u662f\u662f help \u3002\u8be5\u5355\u8bcd\u5728\u7b2c\u4e00\u7bc7\u6587\u6863\u4e2d\u51fa\u73b0\u4e86\uff0c\u73b0\u5728\u68c0\u67e5\u4e00\u4e0b\u770b\u770b\u5b83\u662f\u5426\u51fa\u73b0\u5728\u7b2c\u56db\u7bc7\u6587\u6863\u4e2d\u3002 >>> bayes.setOfWords2Vec(myVocabList, listOPosts[0]) [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1] >>> bayes.setOfWords2Vec(myVocabList, listOPosts[3]) [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0] \u8bad\u7ec3\u7b97\u6cd5: \u4ece\u8bcd\u5411\u91cf\u8ba1\u7b97\u6982\u7387 \u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u4e86\u4e00\u4e2a\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u4e00\u7bc7\u6587\u6863\u4e2d\uff0c\u4e5f\u77e5\u9053\u8be5\u6587\u6863\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u91cd\u5199\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u5c06\u4e4b\u524d\u7684 x, y \u66ff\u6362\u4e3a w . \u7c97\u4f53\u7684 w \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5373\u5b83\u7531\u591a\u4e2a\u503c\u7ec4\u6210\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6570\u503c\u4e2a\u6570\u4e0e\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u4e2a\u6570\u76f8\u540c\u3002 \u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\uff0c\u5bf9\u6bcf\u4e2a\u7c7b\u8ba1\u7b97\u8be5\u503c\uff0c\u7136\u540e\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u6982\u7387\u503c\u7684\u5927\u5c0f\u3002 \u95ee: \u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u8ba1\u7b97P(w)\uff1f \u7b54\uff1a\u6839\u636e\u4e0a\u8ff0\u516c\u5f0f\u53ef\u77e5\uff0c\u6211\u4eec\u53f3\u8fb9\u7684\u5f0f\u5b50\u7b49\u540c\u4e8e\u5de6\u8fb9\u7684\u5f0f\u5b50\uff0c\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2aci\uff0cP(w)\u662f\u56fa\u5b9a\u7684\u3002\u5e76\u4e14\u6211\u4eec\u53ea\u9700\u8981\u6bd4\u8f83\u5de6\u8fb9\u5f0f\u5b50\u503c\u7684\u5927\u5c0f\u6765\u51b3\u7b56\u5206\u7c7b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\u901a\u8fc7\u6bd4\u8f83\u53f3\u8fb9\u5206\u5b50\u503c\u5f97\u5927\u5c0f\u6765\u505a\u51b3\u7b56\u5206\u7c7b\u3002 \u9996\u5148\u53ef\u4ee5\u901a\u8fc7\u7c7b\u522b i (\u4fae\u8fb1\u6027\u7559\u8a00\u6216\u8005\u975e\u4fae\u8fb1\u6027\u7559\u8a00)\u4e2d\u7684\u6587\u6863\u6570\u9664\u4ee5\u603b\u7684\u6587\u6863\u6570\u6765\u8ba1\u7b97\u6982\u7387 p(ci) \u3002\u63a5\u4e0b\u6765\u8ba1\u7b97 p( w | ci) \uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230\u6734\u7d20\u8d1d\u53f6\u65af\u5047\u8bbe\u3002\u5982\u679c\u5c06 w \u5c55\u5f00\u4e3a\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7279\u5f81\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u6982\u7387\u5199\u4f5c p(w0, w1, w2...wn | ci) \u3002\u8fd9\u91cc\u5047\u8bbe\u6240\u6709\u8bcd\u90fd\u4e92\u76f8\u72ec\u7acb\uff0c\u8be5\u5047\u8bbe\u4e5f\u79f0\u4f5c\u6761\u4ef6\u72ec\u7acb\u6027\u5047\u8bbe\uff08\u4f8b\u5982 A \u548c B \u4e24\u4e2a\u4eba\u629b\u9ab0\u5b50\uff0c\u6982\u7387\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\uff0c\u4e5f\u5c31\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0cA \u629b 2\u70b9\u7684\u540c\u65f6 B \u629b 3 \u70b9\u7684\u6982\u7387\u5c31\u662f 1/6 * 1/6\uff09\uff0c\u5b83\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528 p(w0 | ci)p(w1 | ci)p(w2 | ci)...p(wn | ci) \u6765\u8ba1\u7b97\u4e0a\u8ff0\u6982\u7387\uff0c\u8fd9\u6837\u5c31\u6781\u5927\u5730\u7b80\u5316\u4e86\u8ba1\u7b97\u7684\u8fc7\u7a0b\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u8bad\u7ec3\u51fd\u6570 def _trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u539f\u7248 :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 [[1,0,1,1,1....],[],[]...] :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b[0,1,1,0....]\uff0c\u5217\u8868\u957f\u5ea6\u7b49\u4e8e\u5355\u8bcd\u77e9\u9635\u6570\uff0c\u5176\u4e2d\u76841\u4ee3\u8868\u5bf9\u5e94\u7684\u6587\u4ef6\u662f\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c0\u4ee3\u8868\u4e0d\u662f\u4fae\u8fb1\u6027\u77e9\u9635 :return: \"\"\" # \u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387\uff0c\u5373trainCategory\u4e2d\u6240\u6709\u76841\u7684\u4e2a\u6570\uff0c # \u4ee3\u8868\u7684\u5c31\u662f\u591a\u5c11\u4e2a\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c\u4e0e\u6587\u4ef6\u7684\u603b\u6570\u76f8\u9664\u5c31\u5f97\u5230\u4e86\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 p0Num = zeros(numWords) # [0,0,0,.....] p1Num = zeros(numWords) # [0,0,0,.....] # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570 p0Denom = 0.0 p1Denom = 0.0 for i in range(numTrainDocs): # \u662f\u5426\u662f\u4fae\u8fb1\u6027\u6587\u4ef6 if trainCategory[i] == 1: # \u5982\u679c\u662f\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c\u5bf9\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u5411\u91cf\u8fdb\u884c\u52a0\u548c p1Num += trainMatrix[i] #[0,1,1,....] + [0,1,1,....]->[0,2,2,...] # \u5bf9\u5411\u91cf\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6c42\u548c\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u6240\u6709\u4fae\u8fb1\u6027\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u603b\u6570 p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[P(F1|C1),P(F2|C1),P(F3|C1),P(F4|C1),P(F5|C1)....]\u5217\u8868 # \u5373 \u57281\u7c7b\u522b\u4e0b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 p1Vect = p1Num / p1Denom# [1,2,3,5]/90->[1/90,...] # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[P(F1|C0),P(F2|C0),P(F3|C0),P(F4|C0),P(F5|C0)....]\u5217\u8868 # \u5373 \u57280\u7c7b\u522b\u4e0b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 p0Vect = p0Num / p0Denom return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u6839\u636e\u73b0\u5b9e\u60c5\u51b5\u4fee\u6539\u5206\u7c7b\u5668 \u5728\u5229\u7528\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5bf9\u6587\u6863\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u8981\u8ba1\u7b97\u591a\u4e2a\u6982\u7387\u7684\u4e58\u79ef\u4ee5\u83b7\u5f97\u6587\u6863\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b\u7684\u6982\u7387\uff0c\u5373\u8ba1\u7b97 p(w0|1) * p(w1|1) * p(w2|1)\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u6982\u7387\u503c\u4e3a 0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a 0\u3002\u4e3a\u964d\u4f4e\u8fd9\u79cd\u5f71\u54cd\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u8bcd\u7684\u51fa\u73b0\u6570\u521d\u59cb\u5316\u4e3a 1\uff0c\u5e76\u5c06\u5206\u6bcd\u521d\u59cb\u5316\u4e3a 2 \uff08\u53d61 \u6216 2 \u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5206\u5b50\u548c\u5206\u6bcd\u4e0d\u4e3a0\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8fdb\u884c\u66f4\u6539\uff09\u3002 \u53e6\u4e00\u4e2a\u9047\u5230\u7684\u95ee\u9898\u662f\u4e0b\u6ea2\u51fa\uff0c\u8fd9\u662f\u7531\u4e8e\u592a\u591a\u5f88\u5c0f\u7684\u6570\u76f8\u4e58\u9020\u6210\u7684\u3002\u5f53\u8ba1\u7b97\u4e58\u79ef p(w0|ci) * p(w1|ci) * p(w2|ci)... p(wn|ci) \u65f6\uff0c\u7531\u4e8e\u5927\u90e8\u5206\u56e0\u5b50\u90fd\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u4e0b\u6ea2\u51fa\u6216\u8005\u5f97\u5230\u4e0d\u6b63\u786e\u7684\u7b54\u6848\u3002\uff08\u7528 Python \u5c1d\u8bd5\u76f8\u4e58\u8bb8\u591a\u5f88\u5c0f\u7684\u6570\uff0c\u6700\u540e\u56db\u820d\u4e94\u5165\u540e\u4f1a\u5f97\u5230 0\uff09\u3002\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5bf9\u4e58\u79ef\u53d6\u81ea\u7136\u5bf9\u6570\u3002\u5728\u4ee3\u6570\u4e2d\u6709 ln(a * b) = ln(a) + ln(b), \u4e8e\u662f\u901a\u8fc7\u6c42\u5bf9\u6570\u53ef\u4ee5\u907f\u514d\u4e0b\u6ea2\u51fa\u6216\u8005\u6d6e\u70b9\u6570\u820d\u5165\u5bfc\u81f4\u7684\u9519\u8bef\u3002\u540c\u65f6\uff0c\u91c7\u7528\u81ea\u7136\u5bf9\u6570\u8fdb\u884c\u5904\u7406\u4e0d\u4f1a\u6709\u4efb\u4f55\u635f\u5931\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86\u51fd\u6570 f(x) \u4e0e ln(f(x)) \u7684\u66f2\u7ebf\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u4eec\u5728\u76f8\u540c\u533a\u57df\u5185\u540c\u65f6\u589e\u52a0\u6216\u8005\u51cf\u5c11\uff0c\u5e76\u4e14\u5728\u76f8\u540c\u70b9\u4e0a\u53d6\u5230\u6781\u503c\u3002\u5b83\u4eec\u7684\u53d6\u503c\u867d\u7136\u4e0d\u540c\uff0c\u4f46\u4e0d\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u793e\u533a\u7559\u8a00\u677f\u8a00\u8bba\u8fdb\u884c\u5206\u7c7b \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u51fd\u6570 def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1): \"\"\" \u4f7f\u7528\u7b97\u6cd5\uff1a # \u5c06\u4e58\u6cd5\u8f6c\u6362\u4e3a\u52a0\u6cd5 \u4e58\u6cd5\uff1aP(C|F1F2...Fn) = P(F1F2...Fn|C)P(C)/P(F1F2...Fn) \u52a0\u6cd5\uff1aP(F1|C)*P(F2|C)....P(Fn|C)P(C) -> log(P(F1|C))+log(P(F2|C))+....+log(P(Fn|C))+log(P(C)) :param vec2Classify: \u5f85\u6d4b\u6570\u636e[0,1,1,1,1...]\uff0c\u5373\u8981\u5206\u7c7b\u7684\u5411\u91cf :param p0Vec: \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 :param p1Vec: \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 :param pClass1: \u7c7b\u522b1\uff0c\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 :return: \u7c7b\u522b1 or 0 \"\"\" # \u8ba1\u7b97\u516c\u5f0f log(P(F1|C))+log(P(F2|C))+....+log(P(Fn|C))+log(P(C)) # \u5927\u5bb6\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u4e0a\u9762\u7684\u8ba1\u7b97\u516c\u5f0f\uff0c\u6ca1\u6709\u9664\u4ee5\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u516c\u5f0f\u7684\u5206\u6bcd\uff0c\u4e5f\u5c31\u662f P(w) \uff08P(w) \u6307\u7684\u662f\u6b64\u6587\u6863\u5728\u6240\u6709\u7684\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u6982\u7387\uff09\u5c31\u8fdb\u884c\u6982\u7387\u5927\u5c0f\u7684\u6bd4\u8f83\u4e86\uff0c # \u56e0\u4e3a P(w) \u9488\u5bf9\u7684\u662f\u5305\u542b\u4fae\u8fb1\u548c\u975e\u4fae\u8fb1\u7684\u5168\u90e8\u6587\u6863\uff0c\u6240\u4ee5 P(w) \u662f\u76f8\u540c\u7684\u3002 # \u4f7f\u7528 NumPy \u6570\u7ec4\u6765\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u76f8\u4e58\u7684\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u76f8\u4e58\u662f\u6307\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u5373\u5148\u5c06\u4e24\u4e2a\u5411\u91cf\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u7b2c2\u4e2a\u5143\u7d20\u76f8\u4e58\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 # \u6211\u7684\u7406\u89e3\u662f\uff1a\u8fd9\u91cc\u7684 vec2Classify * p1Vec \u7684\u610f\u601d\u5c31\u662f\u5c06\u6bcf\u4e2a\u8bcd\u4e0e\u5176\u5bf9\u5e94\u7684\u6982\u7387\u76f8\u5173\u8054\u8d77\u6765 p1 = sum(vec2Classify * p1Vec) + log(pClass1) # P(w|c1) * P(c1) \uff0c\u5373\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u5206\u5b50 p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1) # P(w|c0) * P(c0) \uff0c\u5373\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u5206\u5b50\u00b7 if p1 > p0: return 1 else: return 0 def testingNB(): \"\"\" \u6d4b\u8bd5\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5 \"\"\" # 1. \u52a0\u8f7d\u6570\u636e\u96c6 listOPosts, listClasses = loadDataSet() # 2. \u521b\u5efa\u5355\u8bcd\u96c6\u5408 myVocabList = createVocabList(listOPosts) # 3. \u8ba1\u7b97\u5355\u8bcd\u662f\u5426\u51fa\u73b0\u5e76\u521b\u5efa\u6570\u636e\u77e9\u9635 trainMat = [] for postinDoc in listOPosts: # \u8fd4\u56dem*len(myVocabList)\u7684\u77e9\u9635\uff0c \u8bb0\u5f55\u7684\u90fd\u662f0\uff0c1\u4fe1\u606f trainMat.append(setOfWords2Vec(myVocabList, postinDoc)) # 4. \u8bad\u7ec3\u6570\u636e p0V, p1V, pAb = trainNB0(array(trainMat), array(listClasses)) # 5. \u6d4b\u8bd5\u6570\u636e testEntry = ['love', 'my', 'dalmation'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb) testEntry = ['stupid', 'garbage'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb) \u9879\u76ee\u6848\u4f8b2: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fc7\u6ee4\u5783\u573e\u90ae\u4ef6 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py \u9879\u76ee\u6982\u8ff0 \u5b8c\u6210\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u4e00\u4e2a\u6700\u8457\u540d\u7684\u5e94\u7528: \u7535\u5b50\u90ae\u4ef6\u5783\u573e\u8fc7\u6ee4\u3002 \u5f00\u53d1\u6d41\u7a0b \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5bf9\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB() \u51fd\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u5bf9\u4e00\u7ec4\u6587\u6863\u8fdb\u884c\u5206\u7c7b\uff0c\u5c06\u9519\u5206\u7684\u6587\u6863\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6587\u672c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b: Hi Peter, With Jose out of town, do you want to meet once in a while to keep things going and do some interesting stuff? Let me know Eugene \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5207\u5206\u6587\u672c >>> mySent = 'This book is the best book on Python or M.L. I have ever laid eyes upon.' >>> import re >>> regEx = re.compile('\\\\W*') >>> listOfTokens = regEx.split(mySent) >>> listOfTokens ['This', 'book', 'is', 'the', 'best', 'book', 'on', 'Python', 'or', 'M.L.', 'I', 'have', 'ever', 'laid', 'eyes', 'upon', ''] \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u6587\u4ef6\u89e3\u6790\u53ca\u5b8c\u6574\u7684\u5783\u573e\u90ae\u4ef6\u6d4b\u8bd5\u51fd\u6570 # \u5207\u5206\u6587\u672c def textParse(bigString): ''' Desc: \u63a5\u6536\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u5e76\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5217\u8868 Args: bigString -- \u5927\u5b57\u7b26\u4e32 Returns: \u53bb\u6389\u5c11\u4e8e 2 \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u5217\u8868 ''' import re # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5207\u5206\u53e5\u5b50\uff0c\u5176\u4e2d\u5206\u9694\u7b26\u662f\u9664\u5355\u8bcd\u3001\u6570\u5b57\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32 listOfTokens = re.split(r'\\W*', bigString) return [tok.lower() for tok in listOfTokens if len(tok) > 2] def spamTest(): ''' Desc: \u5bf9\u8d1d\u53f6\u65af\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u8fdb\u884c\u81ea\u52a8\u5316\u5904\u7406\u3002 Args: none Returns: \u5bf9\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u5c01\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u82e5\u90ae\u4ef6\u5206\u7c7b\u9519\u8bef\uff0c\u5219\u9519\u8bef\u6570\u52a0 1\uff0c\u6700\u540e\u8fd4\u56de\u603b\u7684\u9519\u8bef\u767e\u5206\u6bd4\u3002 ''' docList = [] classList = [] fullText = [] for i in range(1, 26): # \u5207\u5206\uff0c\u89e3\u6790\u6570\u636e\uff0c\u5e76\u5f52\u7c7b\u4e3a 1 \u7c7b\u522b wordList = textParse(open('db/4.NaiveBayes/email/spam/%d.txt' % i).read()) docList.append(wordList) classList.append(1) # \u5207\u5206\uff0c\u89e3\u6790\u6570\u636e\uff0c\u5e76\u5f52\u7c7b\u4e3a 0 \u7c7b\u522b wordList = textParse(open('db/4.NaiveBayes/email/ham/%d.txt' % i).read()) docList.append(wordList) fullText.extend(wordList) classList.append(0) # \u521b\u5efa\u8bcd\u6c47\u8868 vocabList = createVocabList(docList) trainingSet = range(50) testSet = [] # \u968f\u673a\u53d6 10 \u4e2a\u90ae\u4ef6\u7528\u6765\u6d4b\u8bd5 for i in range(10): # random.uniform(x, y) \u968f\u673a\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u4e3a x ~ y \u7684\u5b9e\u6570 randIndex = int(random.uniform(0, len(trainingSet))) testSet.append(trainingSet[randIndex]) del(trainingSet[randIndex]) trainMat = [] trainClasses = [] for docIndex in trainingSet: trainMat.append(setOfWords2Vec(vocabList, docList[docIndex])) trainClasses.append(classList[docIndex]) p0V, p1V, pSpam = trainNB0(array(trainMat), array(trainClasses)) errorCount = 0 for docIndex in testSet: wordVector = setOfWords2Vec(vocabList, docList[docIndex]) if classifyNB(array(wordVector), p0V, p1V, pSpam) != classList[docIndex]: errorCount += 1 print 'the errorCount is: ', errorCount print 'the testSet length is :', len(testSet) print 'the error rate is :', float(errorCount)/len(testSet) \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u5bf9\u4e00\u7ec4\u6587\u6863\u8fdb\u884c\u5206\u7c7b\uff0c\u5c06\u9519\u5206\u7684\u6587\u6863\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a \u9879\u76ee\u6848\u4f8b3: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4ece\u4e2a\u4eba\u5e7f\u544a\u4e2d\u83b7\u53d6\u533a\u57df\u503e\u5411 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py \u9879\u76ee\u6982\u8ff0 \u5e7f\u544a\u5546\u5f80\u5f80\u60f3\u77e5\u9053\u5173\u4e8e\u4e00\u4e2a\u4eba\u7684\u4e00\u4e9b\u7279\u5b9a\u4eba\u53e3\u7edf\u8ba1\u4fe1\u606f\uff0c\u4ee5\u4fbf\u80fd\u66f4\u597d\u5730\u5b9a\u5411\u63a8\u9500\u5e7f\u544a\u3002 \u6211\u4eec\u5c06\u5206\u522b\u4ece\u7f8e\u56fd\u7684\u4e24\u4e2a\u57ce\u5e02\u4e2d\u9009\u53d6\u4e00\u4e9b\u4eba\uff0c\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u4eba\u53d1\u5e03\u7684\u4fe1\u606f\uff0c\u6765\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u57ce\u5e02\u7684\u4eba\u4eec\u5728\u5e7f\u544a\u7528\u8bcd\u4e0a\u662f\u5426\u4e0d\u540c\u3002\u5982\u679c\u7ed3\u8bba\u786e\u5b9e\u4e0d\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u5404\u81ea\u5e38\u7528\u7684\u8bcd\u662f\u54ea\u4e9b\uff0c\u4ece\u4eba\u4eec\u7684\u7528\u8bcd\u5f53\u4e2d\uff0c\u6211\u4eec\u80fd\u5426\u5bf9\u4e0d\u540c\u57ce\u5e02\u7684\u4eba\u6240\u5173\u5fc3\u7684\u5185\u5bb9\u6709\u6240\u4e86\u89e3\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u4ece RSS \u6e90\u6536\u96c6\u5185\u5bb9\uff0c\u8fd9\u91cc\u9700\u8981\u5bf9 RSS \u6e90\u6784\u5efa\u4e00\u4e2a\u63a5\u53e3 \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u89c2\u5bdf\u9519\u8bef\u7387\uff0c\u786e\u4fdd\u5206\u7c7b\u5668\u53ef\u7528\u3002\u53ef\u4ee5\u4fee\u6539\u5207\u5206\u7a0b\u5e8f\uff0c\u4ee5\u964d\u4f4e\u9519\u8bef\u7387\uff0c\u63d0\u9ad8\u5206\u7c7b\u7ed3\u679c \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5c01\u88c5\u6240\u6709\u5185\u5bb9\u3002\u7ed9\u5b9a\u4e24\u4e2a RSS \u6e90\uff0c\u6539\u7a0b\u5e8f\u4f1a\u663e\u793a\u6700\u5e38\u7528\u7684\u516c\u5171\u8bcd \u6536\u96c6\u6570\u636e: \u4ece RSS \u6e90\u6536\u96c6\u5185\u5bb9\uff0c\u8fd9\u91cc\u9700\u8981\u5bf9 RSS \u6e90\u6784\u5efa\u4e00\u4e2a\u63a5\u53e3 \u4e5f\u5c31\u662f\u5bfc\u5165 RSS \u6e90\uff0c\u6211\u4eec\u4f7f\u7528 python \u4e0b\u8f7d\u6587\u672c\uff0c\u5728http://code.google.com/p/feedparser/ \u4e0b\u6d4f\u89c8\u76f8\u5173\u6587\u6863\uff0c\u5b89\u88c5 feedparse\uff0c\u9996\u5148\u89e3\u538b\u4e0b\u8f7d\u7684\u5305\uff0c\u5e76\u5c06\u5f53\u524d\u76ee\u5f55\u5207\u6362\u5230\u89e3\u538b\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5728 python \u63d0\u793a\u7b26\u4e0b\u8f93\u5165\uff1a >>> python setup.py install \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u6587\u6863\u8bcd\u888b\u6a21\u578b \u6211\u4eec\u5c06\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u4e0e\u5426\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u8fd9\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a \u8bcd\u96c6\u6a21\u578b(set-of-words model) \u3002\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u5305\u542b\u8be5\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u6587\u6863\u4e2d\u6240\u4e0d\u80fd\u8868\u8fbe\u7684\u67d0\u79cd\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a \u8bcd\u888b\u6a21\u578b(bag-of-words model) \u3002\u5728\u8bcd\u888b\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u800c\u5728\u8bcd\u96c6\u4e2d\uff0c\u6bcf\u4e2a\u8bcd\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\u4e3a\u9002\u5e94\u8bcd\u888b\u6a21\u578b\uff0c\u9700\u8981\u5bf9\u51fd\u6570 setOfWords2Vec() \u7a0d\u52a0\u4fee\u6539\uff0c\u4fee\u6539\u540e\u7684\u51fd\u6570\u4e3a bagOfWords2Vec() \u3002 \u5982\u4e0b\u7ed9\u51fa\u4e86\u57fa\u4e8e\u8bcd\u888b\u6a21\u578b\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u4ee3\u7801\u3002\u5b83\u4e0e\u51fd\u6570 setOfWords2Vec() \u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u5355\u8bcd\u65f6\uff0c\u5b83\u4f1a\u589e\u52a0\u8bcd\u5411\u91cf\u4e2d\u7684\u5bf9\u5e94\u503c\uff0c\u800c\u4e0d\u53ea\u662f\u5c06\u5bf9\u5e94\u7684\u6570\u503c\u8bbe\u4e3a 1 \u3002 def bagOfWords2VecMN(vocaList, inputSet): returnVec = [0] * len(vocabList) for word in inputSet: if word in vocaList: returnVec[vocabList.index(word)] += 1 return returnVec #\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u5728\u6240\u6709\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u4e0d\u91cd\u590d\u8bcd\u7684\u5217\u8868 def createVocabList(dataSet): vocabSet=set([]) #\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6 for document in dataSet: vocabSet=vocabSet|set(document) #\u521b\u5efa\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 return list(vocabSet) def setOfWords2VecMN(vocabList,inputSet): returnVec=[0]*len(vocabList) #\u521b\u5efa\u4e00\u4e2a\u5176\u4e2d\u6240\u542b\u5143\u7d20\u90fd\u4e3a0\u7684\u5411\u91cf for word in inputSet: if word in vocabList: returnVec[vocabList.index(word)]+=1 return returnVec #\u6587\u4ef6\u89e3\u6790 def textParse(bigString): import re listOfTokens=re.split(r'\\W*',bigString) return [tok.lower() for tok in listOfTokens if len(tok)>2] \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 # \u907f\u514d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5355\u8bcd\u4e3a0\uff0c\u800c\u5bfc\u81f4\u6700\u540e\u7684\u4e58\u79ef\u4e3a0\uff0c\u6240\u4ee5\u5c06\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u521d\u59cb\u5316\u4e3a 1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u89c2\u5bdf\u9519\u8bef\u7387\uff0c\u786e\u4fdd\u5206\u7c7b\u5668\u53ef\u7528\u3002\u53ef\u4ee5\u4fee\u6539\u5207\u5206\u7a0b\u5e8f\uff0c\u4ee5\u964d\u4f4e\u9519\u8bef\u7387\uff0c\u63d0\u9ad8\u5206\u7c7b\u7ed3\u679c #RSS\u6e90\u5206\u7c7b\u5668\u53ca\u9ad8\u9891\u8bcd\u53bb\u9664\u51fd\u6570 def calcMostFreq(vocabList,fullText): import operator freqDict={} for token in vocabList: #\u904d\u5386\u8bcd\u6c47\u8868\u4e2d\u7684\u6bcf\u4e2a\u8bcd freqDict[token]=fullText.count(token) #\u7edf\u8ba1\u6bcf\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 sortedFreq=sorted(freqDict.iteritems(),key=operator.itemgetter(1),reverse=True) #\u6839\u636e\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u4ece\u9ad8\u5230\u5e95\u5bf9\u5b57\u5178\u8fdb\u884c\u6392\u5e8f return sortedFreq[:30] #\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u768430\u4e2a\u5355\u8bcd def localWords(feed1,feed0): import feedparser docList=[];classList=[];fullText=[] minLen=min(len(feed1['entries']),len(feed0['entries'])) for i in range(minLen): wordList=textParse(feed1['entries'][i]['summary']) #\u6bcf\u6b21\u8bbf\u95ee\u4e00\u6761RSS\u6e90 docList.append(wordList) fullText.extend(wordList) classList.append(1) wordList=textParse(feed0['entries'][i]['summary']) docList.append(wordList) fullText.extend(wordList) classList.append(0) vocabList=createVocabList(docList) top30Words=calcMostFreq(vocabList,fullText) for pairW in top30Words: if pairW[0] in vocabList:vocabList.remove(pairW[0]) #\u53bb\u6389\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u7684\u90a3\u4e9b\u8bcd trainingSet=range(2*minLen);testSet=[] for i in range(20): randIndex=int(random.uniform(0,len(trainingSet))) testSet.append(trainingSet[randIndex]) del(trainingSet[randIndex]) trainMat=[];trainClasses=[] for docIndex in trainingSet: trainMat.append(bagOfWords2VecMN(vocabList,docList[docIndex])) trainClasses.append(classList[docIndex]) p0V,p1V,pSpam=trainNBO(array(trainMat),array(trainClasses)) errorCount=0 for docIndex in testSet: wordVector=bagOfWords2VecMN(vocabList,docList[docIndex]) if classifyNB(array(wordVector),p0V,p1V,pSpam)!=classList[docIndex]: errorCount+=1 print 'the error rate is:',float(errorCount)/len(testSet) return vocabList,p0V,p1V #\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u51fd\u6570 def classifyNB(vec2Classify,p0Vec,p1Vec,pClass1): p1=sum(vec2Classify*p1Vec)+log(pClass1) p0=sum(vec2Classify*p0Vec)+log(1.0-pClass1) if p1>p0: return 1 else: return 0 \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5c01\u88c5\u6240\u6709\u5185\u5bb9\u3002\u7ed9\u5b9a\u4e24\u4e2a RSS \u6e90\uff0c\u6539\u7a0b\u5e8f\u4f1a\u663e\u793a\u6700\u5e38\u7528\u7684\u516c\u5171\u8bcd \u51fd\u6570 localWords() \u4f7f\u7528\u4e86\u4e24\u4e2a RSS \u6e90\u4f5c\u4e3a\u53c2\u6570\uff0cRSS \u6e90\u8981\u5728\u51fd\u6570\u5916\u5bfc\u5165\uff0c\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f RSS \u6e90\u4f1a\u968f\u65f6\u95f4\u800c\u6539\u53d8\uff0c\u91cd\u65b0\u52a0\u8f7d RSS \u6e90\u5c31\u4f1a\u5f97\u5230\u65b0\u7684\u6570\u636e >>> reload(bayes) <module 'bayes' from 'bayes.pyc'> >>> import feedparser >>> ny=feedparser.parse('http://newyork.craigslist.org/stp/index.rss') >>> sy=feedparser.parse('http://sfbay.craigslist.org/stp/index.rss') >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.2 >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.3 >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.55 \u4e3a\u4e86\u5f97\u5230\u9519\u8bef\u7387\u7684\u7cbe\u786e\u4f30\u8ba1\uff0c\u5e94\u8be5\u591a\u6b21\u8fdb\u884c\u4e0a\u8ff0\u5b9e\u9a8c\uff0c\u7136\u540e\u53d6\u5e73\u5747\u503c \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5206\u6790\u4e00\u4e0b\u6570\u636e\uff0c\u663e\u793a\u5730\u57df\u76f8\u5173\u7684\u7528\u8bcd \u53ef\u4ee5\u5148\u5bf9\u5411\u91cfpSF\u4e0epNY\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u6253\u5370\u51fa\u6765\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u6587\u4ef6\u4e2d\uff1a #\u6700\u5177\u8868\u5f81\u6027\u7684\u8bcd\u6c47\u663e\u793a\u51fd\u6570 def getTopWords(ny,sf): import operator vocabList,p0V,p1V=localWords(ny,sf) topNY=[];topSF=[] for i in range(len(p0V)): if p0V[i]>-6.0:topSF.append((vocabList[i],p0V[i])) if p1V[i]>-6.0:topNY.append((vocabList[i],p1V[i])) sortedSF=sorted(topSF,key=lambda pair:pair[1],reverse=True) print \"SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**\" for item in sortedSF: print item[0] sortedNY=sorted(topNY,key=lambda pair:pair[1],reverse=True) print \"NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**\" for item in sortedNY: print item[0] \u51fd\u6570 getTopWords() \u4f7f\u7528\u4e24\u4e2a RSS \u6e90\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8bad\u7ec3\u5e76\u6d4b\u8bd5\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\uff0c\u8fd4\u56de\u4f7f\u7528\u7684\u6982\u7387\u503c\u3002\u7136\u540e\u521b\u5efa\u4e24\u4e2a\u5217\u8868\u7528\u4e8e\u5143\u7ec4\u7684\u5b58\u50a8\uff0c\u4e0e\u4e4b\u524d\u8fd4\u56de\u6392\u540d\u6700\u9ad8\u7684 X \u4e2a\u5355\u8bcd\u4e0d\u540c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u7684\u6240\u6709\u8bcd\uff0c\u8fd9\u4e9b\u5143\u7ec4\u4f1a\u6309\u7167\u5b83\u4eec\u7684\u6761\u4ef6\u6982\u7387\u8fdb\u884c\u6392\u5e8f\u3002 \u4fdd\u5b58 bayes.py \u6587\u4ef6\uff0c\u5728python\u63d0\u793a\u7b26\u4e0b\u8f93\u5165\uff1a >>> reload(bayes) <module 'bayes' from 'bayes.pyc'> >>> bayes.getTopWords(ny,sf) the error rate is: 0.55 SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF** how last man ... veteran still ends late off own know NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY** someone meet ... apparel recalled starting strings \u5f53\u6ce8\u91ca\u6389\u7528\u4e8e\u79fb\u9664\u9ad8\u9891\u8bcd\u7684\u4e09\u884c\u4ee3\u7801\uff0c\u7136\u540e\u6bd4\u8f83\u6ce8\u91ca\u524d\u540e\u7684\u5206\u7c7b\u6027\u80fd\uff0c\u53bb\u6389\u8fd9\u51e0\u884c\u4ee3\u7801\u4e4b\u540e\uff0c\u9519\u8bef\u7387\u4e3a54%\uff0c\uff0c\u800c\u4fdd\u7559\u8fd9\u4e9b\u4ee3\u7801\u5f97\u5230\u7684\u9519\u8bef\u7387\u4e3a70%\u3002\u8fd9\u91cc\u89c2\u5bdf\u5230\uff0c\u8fd9\u4e9b\u7559\u8a00\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u524d30\u4e2a\u8bcd\u6db5\u76d6\u4e86\u6240\u6709\u7528\u8bcd\u768430%\uff0cvocabList\u7684\u5927\u5c0f\u7ea6\u4e3a3000\u4e2a\u8bcd\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bcd\u6c47\u8868\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206\u5355\u8bcd\u5374\u5360\u636e\u4e86\u6240\u6709\u6587\u672c\u7528\u8bcd\u7684\u4e00\u5927\u90e8\u5206\u3002\u4ea7\u751f\u8fd9\u79cd\u73b0\u8c61\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u8bed\u8a00\u4e2d\u5927\u90e8\u5206\u90fd\u662f\u5197\u4f59\u548c\u7ed3\u6784\u8f85\u52a9\u6027\u5185\u5bb9\u3002\u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4e0d\u4ec5\u79fb\u9664\u9ad8\u9891\u8bcd\uff0c\u540c\u65f6\u4ece\u67d0\u4e2a\u9884\u5b9a\u9ad8\u9891\u8bcd\u4e2d\u79fb\u9664\u7ed3\u6784\u4e0a\u7684\u8f85\u52a9\u8bcd\uff0c\u8be5\u8bcd\u8868\u79f0\u4e3a\u505c\u7528\u8bcd\u8868\u3002 \u4ece\u6700\u540e\u8f93\u51fa\u7684\u5355\u8bcd\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u8f93\u51fa\u4e86\u5927\u91cf\u7684\u505c\u7528\u8bcd\uff0c\u53ef\u4ee5\u79fb\u9664\u56fa\u5b9a\u7684\u505c\u7528\u8bcd\u770b\u770b\u7ed3\u679c\u5982\u4f55\uff0c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5206\u7c7b\u9519\u8bef\u7387\u4e5f\u4f1a\u964d\u4f4e\u3002 \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c4\u7ae0_\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"ml/4.NaiveBayesian/#4","text":"","title":"\u7b2c4\u7ae0 \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"ml/4.NaiveBayesian/#_1","text":"\u8d1d\u53f6\u65af\u5206\u7c7b\u662f\u4e00\u7c7b\u5206\u7c7b\u7b97\u6cd5\u7684\u603b\u79f0\uff0c\u8fd9\u7c7b\u7b97\u6cd5\u5747\u4ee5\u8d1d\u53f6\u65af\u5b9a\u7406\u4e3a\u57fa\u7840\uff0c\u6545\u7edf\u79f0\u4e3a\u8d1d\u53f6\u65af\u5206\u7c7b\u3002\u672c\u7ae0\u9996\u5148\u4ecb\u7ecd\u8d1d\u53f6\u65af\u5206\u7c7b\u7b97\u6cd5\u7684\u57fa\u7840\u2014\u2014\u8d1d\u53f6\u65af\u5b9a\u7406\u3002\u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u4f8b\u6765\u8ba8\u8bba\u8d1d\u53f6\u65af\u5206\u7c7b\u7684\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd: \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u6982\u8ff0"},{"location":"ml/4.NaiveBayesian/#_2","text":"","title":"\u8d1d\u53f6\u65af\u7406\u8bba &amp; \u6761\u4ef6\u6982\u7387"},{"location":"ml/4.NaiveBayesian/#_3","text":"\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u5b83\u7531\u4e24\u7c7b\u6570\u636e\u7ec4\u6210\uff0c\u6570\u636e\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u73b0\u5728\u7528 p1(x,y) \u8868\u793a\u6570\u636e\u70b9 (x,y) \u5c5e\u4e8e\u7c7b\u522b 1\uff08\u56fe\u4e2d\u7528\u5706\u70b9\u8868\u793a\u7684\u7c7b\u522b\uff09\u7684\u6982\u7387\uff0c\u7528 p2(x,y) \u8868\u793a\u6570\u636e\u70b9 (x,y) \u5c5e\u4e8e\u7c7b\u522b 2\uff08\u56fe\u4e2d\u4e09\u89d2\u5f62\u8868\u793a\u7684\u7c7b\u522b\uff09\u7684\u6982\u7387\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u6570\u636e\u70b9 (x,y)\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u89c4\u5219\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u522b\uff1a \u5982\u679c p1(x,y) > p2(x,y) \uff0c\u90a3\u4e48\u7c7b\u522b\u4e3a1 \u5982\u679c p2(x,y) > p1(x,y) \uff0c\u90a3\u4e48\u7c7b\u522b\u4e3a2 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u9ad8\u6982\u7387\u5bf9\u5e94\u7684\u7c7b\u522b\u3002\u8fd9\u5c31\u662f\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5373\u9009\u62e9\u5177\u6709\u6700\u9ad8\u6982\u7387\u7684\u51b3\u7b56\u3002","title":"\u8d1d\u53f6\u65af\u7406\u8bba"},{"location":"ml/4.NaiveBayesian/#_4","text":"\u5982\u679c\u4f60\u5bf9 p(x,y|c1) \u7b26\u53f7\u5f88\u719f\u6089\uff0c\u90a3\u4e48\u53ef\u4ee5\u8df3\u8fc7\u672c\u5c0f\u8282\u3002 \u6709\u4e00\u4e2a\u88c5\u4e86 7 \u5757\u77f3\u5934\u7684\u7f50\u5b50\uff0c\u5176\u4e2d 3 \u5757\u662f\u767d\u8272\u7684\uff0c4 \u5757\u662f\u9ed1\u8272\u7684\u3002\u5982\u679c\u4ece\u7f50\u5b50\u4e2d\u968f\u673a\u53d6\u51fa\u4e00\u5757\u77f3\u5934\uff0c\u90a3\u4e48\u662f\u767d\u8272\u77f3\u5934\u7684\u53ef\u80fd\u6027\u662f\u591a\u5c11\uff1f\u7531\u4e8e\u53d6\u77f3\u5934\u6709 7 \u79cd\u53ef\u80fd\uff0c\u5176\u4e2d 3 \u79cd\u4e3a\u767d\u8272\uff0c\u6240\u4ee5\u53d6\u51fa\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\u4e3a 3/7 \u3002\u90a3\u4e48\u53d6\u5230\u9ed1\u8272\u77f3\u5934\u7684\u6982\u7387\u53c8\u662f\u591a\u5c11\u5462\uff1f\u5f88\u663e\u7136\uff0c\u662f 4/7 \u3002\u6211\u4eec\u4f7f\u7528 P(white) \u6765\u8868\u793a\u53d6\u5230\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\uff0c\u5176\u6982\u7387\u503c\u53ef\u4ee5\u901a\u8fc7\u767d\u8272\u77f3\u5934\u6570\u76ee\u9664\u4ee5\u603b\u7684\u77f3\u5934\u6570\u76ee\u6765\u5f97\u5230\u3002 \u5982\u679c\u8fd9 7 \u5757\u77f3\u5934\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u653e\u5728\u4e24\u4e2a\u6876\u4e2d\uff0c\u90a3\u4e48\u4e0a\u8ff0\u6982\u7387\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\uff1f \u8ba1\u7b97 P(white) \u6216\u8005 P(black) \uff0c\u5982\u679c\u4e8b\u5148\u6211\u4eec\u77e5\u9053\u77f3\u5934\u6240\u5728\u6876\u7684\u4fe1\u606f\u662f\u4f1a\u6539\u53d8\u7ed3\u679c\u7684\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6761\u4ef6\u6982\u7387\uff08conditional probablity\uff09\u3002\u5047\u5b9a\u8ba1\u7b97\u7684\u662f\u4ece B \u6876\u53d6\u5230\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\uff0c\u8fd9\u4e2a\u6982\u7387\u53ef\u4ee5\u8bb0\u4f5c P(white|bucketB) \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u5728\u5df2\u77e5\u77f3\u5934\u51fa\u81ea B \u6876\u7684\u6761\u4ef6\u4e0b\uff0c\u53d6\u51fa\u767d\u8272\u77f3\u5934\u7684\u6982\u7387\u201d\u3002\u5f88\u5bb9\u6613\u5f97\u5230\uff0cP(white|bucketA) \u503c\u4e3a 2/4 \uff0cP(white|bucketB) \u7684\u503c\u4e3a 1/3 \u3002 \u6761\u4ef6\u6982\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a P(white|bucketB) = P(white and bucketB) / P(bucketB) \u9996\u5148\uff0c\u6211\u4eec\u7528 B \u6876\u4e2d\u767d\u8272\u77f3\u5934\u7684\u4e2a\u6570\u9664\u4ee5\u4e24\u4e2a\u6876\u4e2d\u603b\u7684\u77f3\u5934\u6570\uff0c\u5f97\u5230 P(white and bucketB) = 1/7 .\u5176\u6b21\uff0c\u7531\u4e8e B \u6876\u4e2d\u6709 3 \u5757\u77f3\u5934\uff0c\u800c\u603b\u77f3\u5934\u6570\u4e3a 7 \uff0c\u4e8e\u662f P(bucketB) \u5c31\u7b49\u4e8e 3/7 \u3002\u4e8e\u662f\u53c8 P(white|bucketB) = P(white and bucketB) / P(bucketB) = (1/7) / (3/7) = 1/3 \u3002 \u53e6\u5916\u4e00\u79cd\u6709\u6548\u8ba1\u7b97\u6761\u4ef6\u6982\u7387\u7684\u65b9\u6cd5\u79f0\u4e3a\u8d1d\u53f6\u65af\u51c6\u5219\u3002\u8d1d\u53f6\u65af\u51c6\u5219\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u4ea4\u6362\u6761\u4ef6\u6982\u7387\u4e2d\u7684\u6761\u4ef6\u4e0e\u7ed3\u679c\uff0c\u5373\u5982\u679c\u5df2\u77e5 P(x|c)\uff0c\u8981\u6c42 P(c|x)\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a ![\u8ba1\u7b97p(c|x)\u7684\u65b9\u6cd5/img/ml/4.NaiveBayesian/NB_4.png)","title":"\u6761\u4ef6\u6982\u7387"},{"location":"ml/4.NaiveBayesian/#_5","text":"\u4e0a\u9762\u6211\u4eec\u63d0\u5230\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u8981\u6c42\u8ba1\u7b97\u4e24\u4e2a\u6982\u7387 p1(x, y) \u548c p2(x, y): \u5982\u679c p1(x, y) > p2(x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b 1; \u5982\u679c p2(x, y) > p1(X, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b 2. \u8fd9\u5e76\u4e0d\u662f\u8d1d\u53f6\u65af\u51b3\u7b56\u7406\u8bba\u7684\u6240\u6709\u5185\u5bb9\u3002\u4f7f\u7528 p1() \u548c p2() \u53ea\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u7b80\u5316\u63cf\u8ff0\uff0c\u800c\u771f\u6b63\u9700\u8981\u8ba1\u7b97\u548c\u6bd4\u8f83\u7684\u662f p(c1|x, y) \u548c p(c2|x, y) .\u8fd9\u4e9b\u7b26\u53f7\u6240\u4ee3\u8868\u7684\u5177\u4f53\u610f\u4e49\u662f: \u7ed9\u5b9a\u67d0\u4e2a\u7531 x\u3001y \u8868\u793a\u7684\u6570\u636e\u70b9\uff0c\u90a3\u4e48\u8be5\u6570\u636e\u70b9\u6765\u81ea\u7c7b\u522b c1 \u7684\u6982\u7387\u662f\u591a\u5c11\uff1f\u6570\u636e\u70b9\u6765\u81ea\u7c7b\u522b c2 \u7684\u6982\u7387\u53c8\u662f\u591a\u5c11\uff1f\u6ce8\u610f\u8fd9\u4e9b\u6982\u7387\u4e0e\u6982\u7387 p(x, y|c1) \u5e76\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528\u8d1d\u53f6\u65af\u51c6\u5219\u6765\u4ea4\u6362\u6982\u7387\u4e2d\u6761\u4ef6\u4e0e\u7ed3\u679c\u3002\u5177\u4f53\u5730\uff0c\u5e94\u7528\u8d1d\u53f6\u65af\u51c6\u5219\u5f97\u5230: \u4f7f\u7528\u4e0a\u9762\u8fd9\u4e9b\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5b9a\u4e49\u8d1d\u53f6\u65af\u5206\u7c7b\u51c6\u5219\u4e3a: \u5982\u679c P(c1|x, y) > P(c2|x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b c1; \u5982\u679c P(c2|x, y) > P(c1|x, y), \u90a3\u4e48\u5c5e\u4e8e\u7c7b\u522b c2. \u5728\u6587\u6863\u5206\u7c7b\u4e2d\uff0c\u6574\u4e2a\u6587\u6863\uff08\u5982\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff09\u662f\u5b9e\u4f8b\uff0c\u800c\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\u5219\u6784\u6210\u7279\u5f81\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u8bcd\uff0c\u5e76\u628a\u6bcf\u4e2a\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u800c\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u4f5c\u4e3a\u8be5\u7279\u5f81\u7684\u503c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7279\u5f81\u6570\u76ee\u5c31\u4f1a\u8ddf\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u7684\u6570\u76ee\u4e00\u6837\u591a\u3002 \u6211\u4eec\u5047\u8bbe\u7279\u5f81\u4e4b\u95f4 \u76f8\u4e92\u72ec\u7acb \u3002\u6240\u8c13 \u72ec\u7acb(independence) \u6307\u7684\u662f\u7edf\u8ba1\u610f\u4e49\u4e0a\u7684\u72ec\u7acb\uff0c\u5373\u4e00\u4e2a\u7279\u5f81\u6216\u8005\u5355\u8bcd\u51fa\u73b0\u7684\u53ef\u80fd\u6027\u4e0e\u5b83\u548c\u5176\u4ed6\u5355\u8bcd\u76f8\u90bb\u6ca1\u6709\u5173\u7cfb\uff0c\u6bd4\u5982\u8bf4\uff0c\u201c\u6211\u4eec\u201d\u4e2d\u7684\u201c\u6211\u201d\u548c\u201c\u4eec\u201d\u51fa\u73b0\u7684\u6982\u7387\u4e0e\u8fd9\u4e24\u4e2a\u5b57\u76f8\u90bb\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u8fd9\u4e2a\u5047\u8bbe\u6b63\u662f\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4e2d \u6734\u7d20(naive) \u4e00\u8bcd\u7684\u542b\u4e49\u3002\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4e2d\u7684\u53e6\u4e00\u4e2a\u5047\u8bbe\u662f\uff0c \u6bcf\u4e2a\u7279\u5f81\u540c\u7b49\u91cd\u8981 \u3002 Note: \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u901a\u5e38\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f: \u4e00\u79cd\u57fa\u4e8e\u4f2f\u52aa\u5229\u6a21\u578b\u5b9e\u73b0\uff0c\u4e00\u79cd\u57fa\u4e8e\u591a\u9879\u5f0f\u6a21\u578b\u5b9e\u73b0\u3002\u8fd9\u91cc\u91c7\u7528\u524d\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u8be5\u5b9e\u73b0\u65b9\u5f0f\u4e2d\u5e76\u4e0d\u8003\u8651\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53ea\u8003\u8651\u51fa\u4e0d\u51fa\u73b0\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\u76f8\u5f53\u4e8e\u5047\u8bbe\u8bcd\u662f\u7b49\u6743\u91cd\u7684\u3002","title":"\u4f7f\u7528\u6761\u4ef6\u6982\u7387\u6765\u5206\u7c7b"},{"location":"ml/4.NaiveBayesian/#_6","text":"\u673a\u5668\u5b66\u4e60\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u5c31\u662f\u6587\u6863\u7684\u81ea\u52a8\u5206\u7c7b\u3002 \u5728\u6587\u6863\u5206\u7c7b\u4e2d\uff0c\u6574\u4e2a\u6587\u6863\uff08\u5982\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff09\u662f\u5b9e\u4f8b\uff0c\u800c\u7535\u5b50\u90ae\u4ef6\u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\u5219\u6784\u6210\u7279\u5f81\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u8bcd\uff0c\u5e76\u628a\u6bcf\u4e2a\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u800c\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6216\u8005\u4e0d\u51fa\u73b0\u4f5c\u4e3a\u8be5\u7279\u5f81\u7684\u503c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7279\u5f81\u6570\u76ee\u5c31\u4f1a\u8ddf\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u7684\u6570\u76ee\u4e00\u6837\u591a\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u662f\u4e0a\u9762\u4ecb\u7ecd\u7684\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u662f\u7528\u4e8e\u6587\u6863\u5206\u7c7b\u7684\u5e38\u7528\u7b97\u6cd5\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8fdb\u884c\u4e00\u4e9b\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u7684\u5b9e\u8df5\u9879\u76ee\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u573a\u666f"},{"location":"ml/4.NaiveBayesian/#_7","text":"","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u539f\u7406"},{"location":"ml/4.NaiveBayesian/#_8","text":"\u63d0\u53d6\u6240\u6709\u6587\u6863\u4e2d\u7684\u8bcd\u6761\u5e76\u8fdb\u884c\u53bb\u91cd \u83b7\u53d6\u6587\u6863\u7684\u6240\u6709\u7c7b\u522b \u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u7684\u6587\u6863\u6570\u76ee \u5bf9\u6bcf\u7bc7\u8bad\u7ec3\u6587\u6863: \u5bf9\u6bcf\u4e2a\u7c7b\u522b: \u5982\u679c\u8bcd\u6761\u51fa\u73b0\u5728\u6587\u6863\u4e2d-->\u589e\u52a0\u8be5\u8bcd\u6761\u7684\u8ba1\u6570\u503c\uff08for\u5faa\u73af\u6216\u8005\u77e9\u9635\u76f8\u52a0\uff09 \u589e\u52a0\u6240\u6709\u8bcd\u6761\u7684\u8ba1\u6570\u503c\uff08\u6b64\u7c7b\u522b\u4e0b\u8bcd\u6761\u603b\u6570\uff09 \u5bf9\u6bcf\u4e2a\u7c7b\u522b: \u5bf9\u6bcf\u4e2a\u8bcd\u6761: \u5c06\u8be5\u8bcd\u6761\u7684\u6570\u76ee\u9664\u4ee5\u603b\u8bcd\u6761\u6570\u76ee\u5f97\u5230\u7684\u6761\u4ef6\u6982\u7387\uff08P(\u8bcd\u6761|\u7c7b\u522b)\uff09 \u8fd4\u56de\u8be5\u6587\u6863\u5c5e\u4e8e\u6bcf\u4e2a\u7c7b\u522b\u7684\u6761\u4ef6\u6982\u7387\uff08P(\u7c7b\u522b|\u6587\u6863\u7684\u6240\u6709\u8bcd\u6761)\uff09","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u5de5\u4f5c\u539f\u7406"},{"location":"ml/4.NaiveBayesian/#_9","text":"\u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e: \u9700\u8981\u6570\u503c\u578b\u6216\u8005\u5e03\u5c14\u578b\u6570\u636e\u3002 \u5206\u6790\u6570\u636e: \u6709\u5927\u91cf\u7279\u5f81\u65f6\uff0c\u7ed8\u5236\u7279\u5f81\u4f5c\u7528\u4e0d\u5927\uff0c\u6b64\u65f6\u4f7f\u7528\u76f4\u65b9\u56fe\u6548\u679c\u66f4\u597d\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u8ba1\u7b97\u4e0d\u540c\u7684\u72ec\u7acb\u7279\u5f81\u7684\u6761\u4ef6\u6982\u7387\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u8ba1\u7b97\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5: \u4e00\u4e2a\u5e38\u89c1\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5e94\u7528\u662f\u6587\u6863\u5206\u7c7b\u3002\u53ef\u4ee5\u5728\u4efb\u610f\u7684\u5206\u7c7b\u573a\u666f\u4e2d\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u662f\u6587\u672c\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/4.NaiveBayesian/#_10","text":"\u4f18\u70b9: \u5728\u6570\u636e\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548\uff0c\u53ef\u4ee5\u5904\u7406\u591a\u7c7b\u522b\u95ee\u9898\u3002 \u7f3a\u70b9: \u5bf9\u4e8e\u8f93\u5165\u6570\u636e\u7684\u51c6\u5907\u65b9\u5f0f\u8f83\u4e3a\u654f\u611f\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6807\u79f0\u578b\u6570\u636e\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/4.NaiveBayesian/#_11","text":"","title":"\u6734\u7d20\u8d1d\u53f6\u65af \u9879\u76ee\u6848\u4f8b"},{"location":"ml/4.NaiveBayesian/#1","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py","title":"\u9879\u76ee\u6848\u4f8b1: \u5c4f\u853d\u793e\u533a\u7559\u8a00\u677f\u7684\u4fae\u8fb1\u6027\u8a00\u8bba"},{"location":"ml/4.NaiveBayesian/#_12","text":"\u6784\u5efa\u4e00\u4e2a\u5feb\u901f\u8fc7\u6ee4\u5668\u6765\u5c4f\u853d\u5728\u7ebf\u793e\u533a\u7559\u8a00\u677f\u4e0a\u7684\u4fae\u8fb1\u6027\u8a00\u8bba\u3002\u5982\u679c\u67d0\u6761\u7559\u8a00\u4f7f\u7528\u4e86\u8d1f\u9762\u6216\u8005\u4fae\u8fb1\u6027\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u5c31\u5c06\u8be5\u7559\u8a00\u6807\u8bc6\u4e3a\u5185\u5bb9\u4e0d\u5f53\u3002\u5bf9\u6b64\u95ee\u9898\u5efa\u7acb\u4e24\u4e2a\u7c7b\u522b: \u4fae\u8fb1\u7c7b\u548c\u975e\u4fae\u8fb1\u7c7b\uff0c\u4f7f\u7528 1 \u548c 0 \u5206\u522b\u8868\u793a\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/4.NaiveBayesian/#_13","text":"\u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e: \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u8bcd\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4ece\u8bcd\u5411\u91cf\u8ba1\u7b97\u6982\u7387 \u6d4b\u8bd5\u7b97\u6cd5: \u6839\u636e\u73b0\u5b9e\u60c5\u51b5\u4fee\u6539\u5206\u7c7b\u5668 \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u793e\u533a\u7559\u8a00\u677f\u8a00\u8bba\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u672c\u4f8b\u662f\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u8bcd\u8868: def loadDataSet(): \"\"\" \u521b\u5efa\u6570\u636e\u96c6 :return: \u5355\u8bcd\u5217\u8868postingList, \u6240\u5c5e\u7c7b\u522bclassVec \"\"\" postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'], #[0,0,1,1,1......] ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'], ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'], ['stop', 'posting', 'stupid', 'worthless', 'garbage'], ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'], ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']] classVec = [0, 1, 0, 1, 0, 1] # 1 is abusive, 0 not return postingList, classVec \u51c6\u5907\u6570\u636e: \u4ece\u6587\u672c\u4e2d\u6784\u5efa\u8bcd\u5411\u91cf def createVocabList(dataSet): \"\"\" \u83b7\u53d6\u6240\u6709\u5355\u8bcd\u7684\u96c6\u5408 :param dataSet: \u6570\u636e\u96c6 :return: \u6240\u6709\u5355\u8bcd\u7684\u96c6\u5408(\u5373\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u5355\u8bcd\u5217\u8868) \"\"\" vocabSet = set([]) # create empty set for document in dataSet: # \u64cd\u4f5c\u7b26 | \u7528\u4e8e\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 vocabSet = vocabSet | set(document) # union of the two sets return list(vocabSet) def setOfWords2Vec(vocabList, inputSet): \"\"\" \u904d\u5386\u67e5\u770b\u8be5\u5355\u8bcd\u662f\u5426\u51fa\u73b0\uff0c\u51fa\u73b0\u8be5\u5355\u8bcd\u5219\u5c06\u8be5\u5355\u8bcd\u7f6e1 :param vocabList: \u6240\u6709\u5355\u8bcd\u96c6\u5408\u5217\u8868 :param inputSet: \u8f93\u5165\u6570\u636e\u96c6 :return: \u5339\u914d\u5217\u8868[0,1,0,1...]\uff0c\u5176\u4e2d 1\u4e0e0 \u8868\u793a\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u8f93\u5165\u7684\u6570\u636e\u96c6\u4e2d \"\"\" # \u521b\u5efa\u4e00\u4e2a\u548c\u8bcd\u6c47\u8868\u7b49\u957f\u7684\u5411\u91cf\uff0c\u5e76\u5c06\u5176\u5143\u7d20\u90fd\u8bbe\u7f6e\u4e3a0 returnVec = [0] * len(vocabList)# [0,0......] # \u904d\u5386\u6587\u6863\u4e2d\u7684\u6240\u6709\u5355\u8bcd\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd\uff0c\u5219\u5c06\u8f93\u51fa\u7684\u6587\u6863\u5411\u91cf\u4e2d\u7684\u5bf9\u5e94\u503c\u8bbe\u4e3a1 for word in inputSet: if word in vocabList: returnVec[vocabList.index(word)] = 1 else: print \"the word: %s is not in my Vocabulary!\" % word return returnVec \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u68c0\u67e5\u51fd\u6570\u6267\u884c\u60c5\u51b5\uff0c\u68c0\u67e5\u8bcd\u8868\uff0c\u4e0d\u51fa\u73b0\u91cd\u590d\u5355\u8bcd\uff0c\u9700\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 >>> listOPosts, listClasses = bayes.loadDataSet() >>> myVocabList = bayes.createVocabList(listOPosts) >>> myVocabList ['cute', 'love', 'help', 'garbage', 'quit', 'I', 'problems', 'is', 'park', 'stop', 'flea', 'dalmation', 'licks', 'food', 'not', 'him', 'buying', 'posting', 'has', 'worthless', 'ate', 'to', 'maybe', 'please', 'dog', 'how', 'stupid', 'so', 'take', 'mr', 'steak', 'my'] \u68c0\u67e5\u51fd\u6570\u6709\u6548\u6027\u3002\u4f8b\u5982\uff1amyVocabList \u4e2d\u7d22\u5f15\u4e3a 2 \u7684\u5143\u7d20\u662f\u4ec0\u4e48\u5355\u8bcd\uff1f\u5e94\u8be5\u662f\u662f help \u3002\u8be5\u5355\u8bcd\u5728\u7b2c\u4e00\u7bc7\u6587\u6863\u4e2d\u51fa\u73b0\u4e86\uff0c\u73b0\u5728\u68c0\u67e5\u4e00\u4e0b\u770b\u770b\u5b83\u662f\u5426\u51fa\u73b0\u5728\u7b2c\u56db\u7bc7\u6587\u6863\u4e2d\u3002 >>> bayes.setOfWords2Vec(myVocabList, listOPosts[0]) [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1] >>> bayes.setOfWords2Vec(myVocabList, listOPosts[3]) [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0] \u8bad\u7ec3\u7b97\u6cd5: \u4ece\u8bcd\u5411\u91cf\u8ba1\u7b97\u6982\u7387 \u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u4e86\u4e00\u4e2a\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u4e00\u7bc7\u6587\u6863\u4e2d\uff0c\u4e5f\u77e5\u9053\u8be5\u6587\u6863\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u91cd\u5199\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u5c06\u4e4b\u524d\u7684 x, y \u66ff\u6362\u4e3a w . \u7c97\u4f53\u7684 w \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5373\u5b83\u7531\u591a\u4e2a\u503c\u7ec4\u6210\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6570\u503c\u4e2a\u6570\u4e0e\u8bcd\u6c47\u8868\u4e2d\u7684\u8bcd\u4e2a\u6570\u76f8\u540c\u3002 \u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\uff0c\u5bf9\u6bcf\u4e2a\u7c7b\u8ba1\u7b97\u8be5\u503c\uff0c\u7136\u540e\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u6982\u7387\u503c\u7684\u5927\u5c0f\u3002 \u95ee: \u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u8ba1\u7b97P(w)\uff1f \u7b54\uff1a\u6839\u636e\u4e0a\u8ff0\u516c\u5f0f\u53ef\u77e5\uff0c\u6211\u4eec\u53f3\u8fb9\u7684\u5f0f\u5b50\u7b49\u540c\u4e8e\u5de6\u8fb9\u7684\u5f0f\u5b50\uff0c\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2aci\uff0cP(w)\u662f\u56fa\u5b9a\u7684\u3002\u5e76\u4e14\u6211\u4eec\u53ea\u9700\u8981\u6bd4\u8f83\u5de6\u8fb9\u5f0f\u5b50\u503c\u7684\u5927\u5c0f\u6765\u51b3\u7b56\u5206\u7c7b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\u901a\u8fc7\u6bd4\u8f83\u53f3\u8fb9\u5206\u5b50\u503c\u5f97\u5927\u5c0f\u6765\u505a\u51b3\u7b56\u5206\u7c7b\u3002 \u9996\u5148\u53ef\u4ee5\u901a\u8fc7\u7c7b\u522b i (\u4fae\u8fb1\u6027\u7559\u8a00\u6216\u8005\u975e\u4fae\u8fb1\u6027\u7559\u8a00)\u4e2d\u7684\u6587\u6863\u6570\u9664\u4ee5\u603b\u7684\u6587\u6863\u6570\u6765\u8ba1\u7b97\u6982\u7387 p(ci) \u3002\u63a5\u4e0b\u6765\u8ba1\u7b97 p( w | ci) \uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230\u6734\u7d20\u8d1d\u53f6\u65af\u5047\u8bbe\u3002\u5982\u679c\u5c06 w \u5c55\u5f00\u4e3a\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7279\u5f81\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u6982\u7387\u5199\u4f5c p(w0, w1, w2...wn | ci) \u3002\u8fd9\u91cc\u5047\u8bbe\u6240\u6709\u8bcd\u90fd\u4e92\u76f8\u72ec\u7acb\uff0c\u8be5\u5047\u8bbe\u4e5f\u79f0\u4f5c\u6761\u4ef6\u72ec\u7acb\u6027\u5047\u8bbe\uff08\u4f8b\u5982 A \u548c B \u4e24\u4e2a\u4eba\u629b\u9ab0\u5b50\uff0c\u6982\u7387\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\uff0c\u4e5f\u5c31\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0cA \u629b 2\u70b9\u7684\u540c\u65f6 B \u629b 3 \u70b9\u7684\u6982\u7387\u5c31\u662f 1/6 * 1/6\uff09\uff0c\u5b83\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528 p(w0 | ci)p(w1 | ci)p(w2 | ci)...p(wn | ci) \u6765\u8ba1\u7b97\u4e0a\u8ff0\u6982\u7387\uff0c\u8fd9\u6837\u5c31\u6781\u5927\u5730\u7b80\u5316\u4e86\u8ba1\u7b97\u7684\u8fc7\u7a0b\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u8bad\u7ec3\u51fd\u6570 def _trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u539f\u7248 :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 [[1,0,1,1,1....],[],[]...] :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b[0,1,1,0....]\uff0c\u5217\u8868\u957f\u5ea6\u7b49\u4e8e\u5355\u8bcd\u77e9\u9635\u6570\uff0c\u5176\u4e2d\u76841\u4ee3\u8868\u5bf9\u5e94\u7684\u6587\u4ef6\u662f\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c0\u4ee3\u8868\u4e0d\u662f\u4fae\u8fb1\u6027\u77e9\u9635 :return: \"\"\" # \u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387\uff0c\u5373trainCategory\u4e2d\u6240\u6709\u76841\u7684\u4e2a\u6570\uff0c # \u4ee3\u8868\u7684\u5c31\u662f\u591a\u5c11\u4e2a\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c\u4e0e\u6587\u4ef6\u7684\u603b\u6570\u76f8\u9664\u5c31\u5f97\u5230\u4e86\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 p0Num = zeros(numWords) # [0,0,0,.....] p1Num = zeros(numWords) # [0,0,0,.....] # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570 p0Denom = 0.0 p1Denom = 0.0 for i in range(numTrainDocs): # \u662f\u5426\u662f\u4fae\u8fb1\u6027\u6587\u4ef6 if trainCategory[i] == 1: # \u5982\u679c\u662f\u4fae\u8fb1\u6027\u6587\u4ef6\uff0c\u5bf9\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u5411\u91cf\u8fdb\u884c\u52a0\u548c p1Num += trainMatrix[i] #[0,1,1,....] + [0,1,1,....]->[0,2,2,...] # \u5bf9\u5411\u91cf\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6c42\u548c\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u6240\u6709\u4fae\u8fb1\u6027\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u603b\u6570 p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[P(F1|C1),P(F2|C1),P(F3|C1),P(F4|C1),P(F5|C1)....]\u5217\u8868 # \u5373 \u57281\u7c7b\u522b\u4e0b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 p1Vect = p1Num / p1Denom# [1,2,3,5]/90->[1/90,...] # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[P(F1|C0),P(F2|C0),P(F3|C0),P(F4|C0),P(F5|C0)....]\u5217\u8868 # \u5373 \u57280\u7c7b\u522b\u4e0b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 p0Vect = p0Num / p0Denom return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u6839\u636e\u73b0\u5b9e\u60c5\u51b5\u4fee\u6539\u5206\u7c7b\u5668 \u5728\u5229\u7528\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5bf9\u6587\u6863\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u8981\u8ba1\u7b97\u591a\u4e2a\u6982\u7387\u7684\u4e58\u79ef\u4ee5\u83b7\u5f97\u6587\u6863\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b\u7684\u6982\u7387\uff0c\u5373\u8ba1\u7b97 p(w0|1) * p(w1|1) * p(w2|1)\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u6982\u7387\u503c\u4e3a 0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a 0\u3002\u4e3a\u964d\u4f4e\u8fd9\u79cd\u5f71\u54cd\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u8bcd\u7684\u51fa\u73b0\u6570\u521d\u59cb\u5316\u4e3a 1\uff0c\u5e76\u5c06\u5206\u6bcd\u521d\u59cb\u5316\u4e3a 2 \uff08\u53d61 \u6216 2 \u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5206\u5b50\u548c\u5206\u6bcd\u4e0d\u4e3a0\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8fdb\u884c\u66f4\u6539\uff09\u3002 \u53e6\u4e00\u4e2a\u9047\u5230\u7684\u95ee\u9898\u662f\u4e0b\u6ea2\u51fa\uff0c\u8fd9\u662f\u7531\u4e8e\u592a\u591a\u5f88\u5c0f\u7684\u6570\u76f8\u4e58\u9020\u6210\u7684\u3002\u5f53\u8ba1\u7b97\u4e58\u79ef p(w0|ci) * p(w1|ci) * p(w2|ci)... p(wn|ci) \u65f6\uff0c\u7531\u4e8e\u5927\u90e8\u5206\u56e0\u5b50\u90fd\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u4e0b\u6ea2\u51fa\u6216\u8005\u5f97\u5230\u4e0d\u6b63\u786e\u7684\u7b54\u6848\u3002\uff08\u7528 Python \u5c1d\u8bd5\u76f8\u4e58\u8bb8\u591a\u5f88\u5c0f\u7684\u6570\uff0c\u6700\u540e\u56db\u820d\u4e94\u5165\u540e\u4f1a\u5f97\u5230 0\uff09\u3002\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5bf9\u4e58\u79ef\u53d6\u81ea\u7136\u5bf9\u6570\u3002\u5728\u4ee3\u6570\u4e2d\u6709 ln(a * b) = ln(a) + ln(b), \u4e8e\u662f\u901a\u8fc7\u6c42\u5bf9\u6570\u53ef\u4ee5\u907f\u514d\u4e0b\u6ea2\u51fa\u6216\u8005\u6d6e\u70b9\u6570\u820d\u5165\u5bfc\u81f4\u7684\u9519\u8bef\u3002\u540c\u65f6\uff0c\u91c7\u7528\u81ea\u7136\u5bf9\u6570\u8fdb\u884c\u5904\u7406\u4e0d\u4f1a\u6709\u4efb\u4f55\u635f\u5931\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86\u51fd\u6570 f(x) \u4e0e ln(f(x)) \u7684\u66f2\u7ebf\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u4eec\u5728\u76f8\u540c\u533a\u57df\u5185\u540c\u65f6\u589e\u52a0\u6216\u8005\u51cf\u5c11\uff0c\u5e76\u4e14\u5728\u76f8\u540c\u70b9\u4e0a\u53d6\u5230\u6781\u503c\u3002\u5b83\u4eec\u7684\u53d6\u503c\u867d\u7136\u4e0d\u540c\uff0c\u4f46\u4e0d\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u793e\u533a\u7559\u8a00\u677f\u8a00\u8bba\u8fdb\u884c\u5206\u7c7b \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u51fd\u6570 def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1): \"\"\" \u4f7f\u7528\u7b97\u6cd5\uff1a # \u5c06\u4e58\u6cd5\u8f6c\u6362\u4e3a\u52a0\u6cd5 \u4e58\u6cd5\uff1aP(C|F1F2...Fn) = P(F1F2...Fn|C)P(C)/P(F1F2...Fn) \u52a0\u6cd5\uff1aP(F1|C)*P(F2|C)....P(Fn|C)P(C) -> log(P(F1|C))+log(P(F2|C))+....+log(P(Fn|C))+log(P(C)) :param vec2Classify: \u5f85\u6d4b\u6570\u636e[0,1,1,1,1...]\uff0c\u5373\u8981\u5206\u7c7b\u7684\u5411\u91cf :param p0Vec: \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 :param p1Vec: \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 :param pClass1: \u7c7b\u522b1\uff0c\u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 :return: \u7c7b\u522b1 or 0 \"\"\" # \u8ba1\u7b97\u516c\u5f0f log(P(F1|C))+log(P(F2|C))+....+log(P(Fn|C))+log(P(C)) # \u5927\u5bb6\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u4e0a\u9762\u7684\u8ba1\u7b97\u516c\u5f0f\uff0c\u6ca1\u6709\u9664\u4ee5\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u516c\u5f0f\u7684\u5206\u6bcd\uff0c\u4e5f\u5c31\u662f P(w) \uff08P(w) \u6307\u7684\u662f\u6b64\u6587\u6863\u5728\u6240\u6709\u7684\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u6982\u7387\uff09\u5c31\u8fdb\u884c\u6982\u7387\u5927\u5c0f\u7684\u6bd4\u8f83\u4e86\uff0c # \u56e0\u4e3a P(w) \u9488\u5bf9\u7684\u662f\u5305\u542b\u4fae\u8fb1\u548c\u975e\u4fae\u8fb1\u7684\u5168\u90e8\u6587\u6863\uff0c\u6240\u4ee5 P(w) \u662f\u76f8\u540c\u7684\u3002 # \u4f7f\u7528 NumPy \u6570\u7ec4\u6765\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u76f8\u4e58\u7684\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u76f8\u4e58\u662f\u6307\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u5373\u5148\u5c06\u4e24\u4e2a\u5411\u91cf\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u7b2c2\u4e2a\u5143\u7d20\u76f8\u4e58\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 # \u6211\u7684\u7406\u89e3\u662f\uff1a\u8fd9\u91cc\u7684 vec2Classify * p1Vec \u7684\u610f\u601d\u5c31\u662f\u5c06\u6bcf\u4e2a\u8bcd\u4e0e\u5176\u5bf9\u5e94\u7684\u6982\u7387\u76f8\u5173\u8054\u8d77\u6765 p1 = sum(vec2Classify * p1Vec) + log(pClass1) # P(w|c1) * P(c1) \uff0c\u5373\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u5206\u5b50 p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1) # P(w|c0) * P(c0) \uff0c\u5373\u8d1d\u53f6\u65af\u51c6\u5219\u7684\u5206\u5b50\u00b7 if p1 > p0: return 1 else: return 0 def testingNB(): \"\"\" \u6d4b\u8bd5\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5 \"\"\" # 1. \u52a0\u8f7d\u6570\u636e\u96c6 listOPosts, listClasses = loadDataSet() # 2. \u521b\u5efa\u5355\u8bcd\u96c6\u5408 myVocabList = createVocabList(listOPosts) # 3. \u8ba1\u7b97\u5355\u8bcd\u662f\u5426\u51fa\u73b0\u5e76\u521b\u5efa\u6570\u636e\u77e9\u9635 trainMat = [] for postinDoc in listOPosts: # \u8fd4\u56dem*len(myVocabList)\u7684\u77e9\u9635\uff0c \u8bb0\u5f55\u7684\u90fd\u662f0\uff0c1\u4fe1\u606f trainMat.append(setOfWords2Vec(myVocabList, postinDoc)) # 4. \u8bad\u7ec3\u6570\u636e p0V, p1V, pAb = trainNB0(array(trainMat), array(listClasses)) # 5. \u6d4b\u8bd5\u6570\u636e testEntry = ['love', 'my', 'dalmation'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb) testEntry = ['stupid', 'garbage'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb)","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/4.NaiveBayesian/#2","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py","title":"\u9879\u76ee\u6848\u4f8b2: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fc7\u6ee4\u5783\u573e\u90ae\u4ef6"},{"location":"ml/4.NaiveBayesian/#_14","text":"\u5b8c\u6210\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u4e00\u4e2a\u6700\u8457\u540d\u7684\u5e94\u7528: \u7535\u5b50\u90ae\u4ef6\u5783\u573e\u8fc7\u6ee4\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/4.NaiveBayesian/#_15","text":"\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5bf9\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB() \u51fd\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u5bf9\u4e00\u7ec4\u6587\u6863\u8fdb\u884c\u5206\u7c7b\uff0c\u5c06\u9519\u5206\u7684\u6587\u6863\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a \u6536\u96c6\u6570\u636e: \u63d0\u4f9b\u6587\u672c\u6587\u4ef6 \u6587\u672c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b: Hi Peter, With Jose out of town, do you want to meet once in a while to keep things going and do some interesting stuff? Let me know Eugene \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5207\u5206\u6587\u672c >>> mySent = 'This book is the best book on Python or M.L. I have ever laid eyes upon.' >>> import re >>> regEx = re.compile('\\\\W*') >>> listOfTokens = regEx.split(mySent) >>> listOfTokens ['This', 'book', 'is', 'the', 'best', 'book', 'on', 'Python', 'or', 'M.L.', 'I', 'have', 'ever', 'laid', 'eyes', 'upon', ''] \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u6587\u4ef6\u89e3\u6790\u53ca\u5b8c\u6574\u7684\u5783\u573e\u90ae\u4ef6\u6d4b\u8bd5\u51fd\u6570 # \u5207\u5206\u6587\u672c def textParse(bigString): ''' Desc: \u63a5\u6536\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u5e76\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5217\u8868 Args: bigString -- \u5927\u5b57\u7b26\u4e32 Returns: \u53bb\u6389\u5c11\u4e8e 2 \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u5217\u8868 ''' import re # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5207\u5206\u53e5\u5b50\uff0c\u5176\u4e2d\u5206\u9694\u7b26\u662f\u9664\u5355\u8bcd\u3001\u6570\u5b57\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32 listOfTokens = re.split(r'\\W*', bigString) return [tok.lower() for tok in listOfTokens if len(tok) > 2] def spamTest(): ''' Desc: \u5bf9\u8d1d\u53f6\u65af\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u8fdb\u884c\u81ea\u52a8\u5316\u5904\u7406\u3002 Args: none Returns: \u5bf9\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u5c01\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u82e5\u90ae\u4ef6\u5206\u7c7b\u9519\u8bef\uff0c\u5219\u9519\u8bef\u6570\u52a0 1\uff0c\u6700\u540e\u8fd4\u56de\u603b\u7684\u9519\u8bef\u767e\u5206\u6bd4\u3002 ''' docList = [] classList = [] fullText = [] for i in range(1, 26): # \u5207\u5206\uff0c\u89e3\u6790\u6570\u636e\uff0c\u5e76\u5f52\u7c7b\u4e3a 1 \u7c7b\u522b wordList = textParse(open('db/4.NaiveBayes/email/spam/%d.txt' % i).read()) docList.append(wordList) classList.append(1) # \u5207\u5206\uff0c\u89e3\u6790\u6570\u636e\uff0c\u5e76\u5f52\u7c7b\u4e3a 0 \u7c7b\u522b wordList = textParse(open('db/4.NaiveBayes/email/ham/%d.txt' % i).read()) docList.append(wordList) fullText.extend(wordList) classList.append(0) # \u521b\u5efa\u8bcd\u6c47\u8868 vocabList = createVocabList(docList) trainingSet = range(50) testSet = [] # \u968f\u673a\u53d6 10 \u4e2a\u90ae\u4ef6\u7528\u6765\u6d4b\u8bd5 for i in range(10): # random.uniform(x, y) \u968f\u673a\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u4e3a x ~ y \u7684\u5b9e\u6570 randIndex = int(random.uniform(0, len(trainingSet))) testSet.append(trainingSet[randIndex]) del(trainingSet[randIndex]) trainMat = [] trainClasses = [] for docIndex in trainingSet: trainMat.append(setOfWords2Vec(vocabList, docList[docIndex])) trainClasses.append(classList[docIndex]) p0V, p1V, pSpam = trainNB0(array(trainMat), array(trainClasses)) errorCount = 0 for docIndex in testSet: wordVector = setOfWords2Vec(vocabList, docList[docIndex]) if classifyNB(array(wordVector), p0V, p1V, pSpam) != classList[docIndex]: errorCount += 1 print 'the errorCount is: ', errorCount print 'the testSet length is :', len(testSet) print 'the error rate is :', float(errorCount)/len(testSet) \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u5bf9\u4e00\u7ec4\u6587\u6863\u8fdb\u884c\u5206\u7c7b\uff0c\u5c06\u9519\u5206\u7684\u6587\u6863\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/4.NaiveBayesian/#3","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/4.NaiveBayes/bayes.py","title":"\u9879\u76ee\u6848\u4f8b3: \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u4ece\u4e2a\u4eba\u5e7f\u544a\u4e2d\u83b7\u53d6\u533a\u57df\u503e\u5411"},{"location":"ml/4.NaiveBayesian/#_16","text":"\u5e7f\u544a\u5546\u5f80\u5f80\u60f3\u77e5\u9053\u5173\u4e8e\u4e00\u4e2a\u4eba\u7684\u4e00\u4e9b\u7279\u5b9a\u4eba\u53e3\u7edf\u8ba1\u4fe1\u606f\uff0c\u4ee5\u4fbf\u80fd\u66f4\u597d\u5730\u5b9a\u5411\u63a8\u9500\u5e7f\u544a\u3002 \u6211\u4eec\u5c06\u5206\u522b\u4ece\u7f8e\u56fd\u7684\u4e24\u4e2a\u57ce\u5e02\u4e2d\u9009\u53d6\u4e00\u4e9b\u4eba\uff0c\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u4eba\u53d1\u5e03\u7684\u4fe1\u606f\uff0c\u6765\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u57ce\u5e02\u7684\u4eba\u4eec\u5728\u5e7f\u544a\u7528\u8bcd\u4e0a\u662f\u5426\u4e0d\u540c\u3002\u5982\u679c\u7ed3\u8bba\u786e\u5b9e\u4e0d\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u5404\u81ea\u5e38\u7528\u7684\u8bcd\u662f\u54ea\u4e9b\uff0c\u4ece\u4eba\u4eec\u7684\u7528\u8bcd\u5f53\u4e2d\uff0c\u6211\u4eec\u80fd\u5426\u5bf9\u4e0d\u540c\u57ce\u5e02\u7684\u4eba\u6240\u5173\u5fc3\u7684\u5185\u5bb9\u6709\u6240\u4e86\u89e3\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/4.NaiveBayesian/#_17","text":"\u6536\u96c6\u6570\u636e: \u4ece RSS \u6e90\u6536\u96c6\u5185\u5bb9\uff0c\u8fd9\u91cc\u9700\u8981\u5bf9 RSS \u6e90\u6784\u5efa\u4e00\u4e2a\u63a5\u53e3 \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u89c2\u5bdf\u9519\u8bef\u7387\uff0c\u786e\u4fdd\u5206\u7c7b\u5668\u53ef\u7528\u3002\u53ef\u4ee5\u4fee\u6539\u5207\u5206\u7a0b\u5e8f\uff0c\u4ee5\u964d\u4f4e\u9519\u8bef\u7387\uff0c\u63d0\u9ad8\u5206\u7c7b\u7ed3\u679c \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5c01\u88c5\u6240\u6709\u5185\u5bb9\u3002\u7ed9\u5b9a\u4e24\u4e2a RSS \u6e90\uff0c\u6539\u7a0b\u5e8f\u4f1a\u663e\u793a\u6700\u5e38\u7528\u7684\u516c\u5171\u8bcd \u6536\u96c6\u6570\u636e: \u4ece RSS \u6e90\u6536\u96c6\u5185\u5bb9\uff0c\u8fd9\u91cc\u9700\u8981\u5bf9 RSS \u6e90\u6784\u5efa\u4e00\u4e2a\u63a5\u53e3 \u4e5f\u5c31\u662f\u5bfc\u5165 RSS \u6e90\uff0c\u6211\u4eec\u4f7f\u7528 python \u4e0b\u8f7d\u6587\u672c\uff0c\u5728http://code.google.com/p/feedparser/ \u4e0b\u6d4f\u89c8\u76f8\u5173\u6587\u6863\uff0c\u5b89\u88c5 feedparse\uff0c\u9996\u5148\u89e3\u538b\u4e0b\u8f7d\u7684\u5305\uff0c\u5e76\u5c06\u5f53\u524d\u76ee\u5f55\u5207\u6362\u5230\u89e3\u538b\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5728 python \u63d0\u793a\u7b26\u4e0b\u8f93\u5165\uff1a >>> python setup.py install \u51c6\u5907\u6570\u636e: \u5c06\u6587\u672c\u6587\u4ef6\u89e3\u6790\u6210\u8bcd\u6761\u5411\u91cf \u6587\u6863\u8bcd\u888b\u6a21\u578b \u6211\u4eec\u5c06\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u4e0e\u5426\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\uff0c\u8fd9\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a \u8bcd\u96c6\u6a21\u578b(set-of-words model) \u3002\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u5305\u542b\u8be5\u8bcd\u662f\u5426\u51fa\u73b0\u5728\u6587\u6863\u4e2d\u6240\u4e0d\u80fd\u8868\u8fbe\u7684\u67d0\u79cd\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a \u8bcd\u888b\u6a21\u578b(bag-of-words model) \u3002\u5728\u8bcd\u888b\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u800c\u5728\u8bcd\u96c6\u4e2d\uff0c\u6bcf\u4e2a\u8bcd\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\u4e3a\u9002\u5e94\u8bcd\u888b\u6a21\u578b\uff0c\u9700\u8981\u5bf9\u51fd\u6570 setOfWords2Vec() \u7a0d\u52a0\u4fee\u6539\uff0c\u4fee\u6539\u540e\u7684\u51fd\u6570\u4e3a bagOfWords2Vec() \u3002 \u5982\u4e0b\u7ed9\u51fa\u4e86\u57fa\u4e8e\u8bcd\u888b\u6a21\u578b\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u4ee3\u7801\u3002\u5b83\u4e0e\u51fd\u6570 setOfWords2Vec() \u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u6bcf\u5f53\u9047\u5230\u4e00\u4e2a\u5355\u8bcd\u65f6\uff0c\u5b83\u4f1a\u589e\u52a0\u8bcd\u5411\u91cf\u4e2d\u7684\u5bf9\u5e94\u503c\uff0c\u800c\u4e0d\u53ea\u662f\u5c06\u5bf9\u5e94\u7684\u6570\u503c\u8bbe\u4e3a 1 \u3002 def bagOfWords2VecMN(vocaList, inputSet): returnVec = [0] * len(vocabList) for word in inputSet: if word in vocaList: returnVec[vocabList.index(word)] += 1 return returnVec #\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u5728\u6240\u6709\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u4e0d\u91cd\u590d\u8bcd\u7684\u5217\u8868 def createVocabList(dataSet): vocabSet=set([]) #\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6 for document in dataSet: vocabSet=vocabSet|set(document) #\u521b\u5efa\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 return list(vocabSet) def setOfWords2VecMN(vocabList,inputSet): returnVec=[0]*len(vocabList) #\u521b\u5efa\u4e00\u4e2a\u5176\u4e2d\u6240\u542b\u5143\u7d20\u90fd\u4e3a0\u7684\u5411\u91cf for word in inputSet: if word in vocabList: returnVec[vocabList.index(word)]+=1 return returnVec #\u6587\u4ef6\u89e3\u6790 def textParse(bigString): import re listOfTokens=re.split(r'\\W*',bigString) return [tok.lower() for tok in listOfTokens if len(tok)>2] \u5206\u6790\u6570\u636e: \u68c0\u67e5\u8bcd\u6761\u786e\u4fdd\u89e3\u6790\u7684\u6b63\u786e\u6027 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u5efa\u7acb\u7684 trainNB0() \u51fd\u6570 def trainNB0(trainMatrix, trainCategory): \"\"\" \u8bad\u7ec3\u6570\u636e\u4f18\u5316\u7248\u672c :param trainMatrix: \u6587\u4ef6\u5355\u8bcd\u77e9\u9635 :param trainCategory: \u6587\u4ef6\u5bf9\u5e94\u7684\u7c7b\u522b :return: \"\"\" # \u603b\u6587\u4ef6\u6570 numTrainDocs = len(trainMatrix) # \u603b\u5355\u8bcd\u6570 numWords = len(trainMatrix[0]) # \u4fae\u8fb1\u6027\u6587\u4ef6\u7684\u51fa\u73b0\u6982\u7387 pAbusive = sum(trainCategory) / float(numTrainDocs) # \u6784\u9020\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u5217\u8868 # p0Num \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Num \u4fae\u8fb1\u7684\u7edf\u8ba1 # \u907f\u514d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5355\u8bcd\u4e3a0\uff0c\u800c\u5bfc\u81f4\u6700\u540e\u7684\u4e58\u79ef\u4e3a0\uff0c\u6240\u4ee5\u5c06\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u521d\u59cb\u5316\u4e3a 1 p0Num = ones(numWords)#[0,0......]->[1,1,1,1,1.....] p1Num = ones(numWords) # \u6574\u4e2a\u6570\u636e\u96c6\u5355\u8bcd\u51fa\u73b0\u603b\u6570\uff0c2.0\u6839\u636e\u6837\u672c/\u5b9e\u9645\u8c03\u67e5\u7ed3\u679c\u8c03\u6574\u5206\u6bcd\u7684\u503c\uff082\u4e3b\u8981\u662f\u907f\u514d\u5206\u6bcd\u4e3a0\uff0c\u5f53\u7136\u503c\u53ef\u4ee5\u8c03\u6574\uff09 # p0Denom \u6b63\u5e38\u7684\u7edf\u8ba1 # p1Denom \u4fae\u8fb1\u7684\u7edf\u8ba1 p0Denom = 2.0 p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: # \u7d2f\u52a0\u8fb1\u9a82\u8bcd\u7684\u9891\u6b21 p1Num += trainMatrix[i] # \u5bf9\u6bcf\u7bc7\u6587\u7ae0\u7684\u8fb1\u9a82\u7684\u9891\u6b21 \u8fdb\u884c\u7edf\u8ba1\u6c47\u603b p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) # \u7c7b\u522b1\uff0c\u5373\u4fae\u8fb1\u6027\u6587\u6863\u7684[log(P(F1|C1)),log(P(F2|C1)),log(P(F3|C1)),log(P(F4|C1)),log(P(F5|C1))....]\u5217\u8868 p1Vect = log(p1Num / p1Denom) # \u7c7b\u522b0\uff0c\u5373\u6b63\u5e38\u6587\u6863\u7684[log(P(F1|C0)),log(P(F2|C0)),log(P(F3|C0)),log(P(F4|C0)),log(P(F5|C0))....]\u5217\u8868 p0Vect = log(p0Num / p0Denom) return p0Vect, p1Vect, pAbusive \u6d4b\u8bd5\u7b97\u6cd5: \u89c2\u5bdf\u9519\u8bef\u7387\uff0c\u786e\u4fdd\u5206\u7c7b\u5668\u53ef\u7528\u3002\u53ef\u4ee5\u4fee\u6539\u5207\u5206\u7a0b\u5e8f\uff0c\u4ee5\u964d\u4f4e\u9519\u8bef\u7387\uff0c\u63d0\u9ad8\u5206\u7c7b\u7ed3\u679c #RSS\u6e90\u5206\u7c7b\u5668\u53ca\u9ad8\u9891\u8bcd\u53bb\u9664\u51fd\u6570 def calcMostFreq(vocabList,fullText): import operator freqDict={} for token in vocabList: #\u904d\u5386\u8bcd\u6c47\u8868\u4e2d\u7684\u6bcf\u4e2a\u8bcd freqDict[token]=fullText.count(token) #\u7edf\u8ba1\u6bcf\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 sortedFreq=sorted(freqDict.iteritems(),key=operator.itemgetter(1),reverse=True) #\u6839\u636e\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u4ece\u9ad8\u5230\u5e95\u5bf9\u5b57\u5178\u8fdb\u884c\u6392\u5e8f return sortedFreq[:30] #\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u768430\u4e2a\u5355\u8bcd def localWords(feed1,feed0): import feedparser docList=[];classList=[];fullText=[] minLen=min(len(feed1['entries']),len(feed0['entries'])) for i in range(minLen): wordList=textParse(feed1['entries'][i]['summary']) #\u6bcf\u6b21\u8bbf\u95ee\u4e00\u6761RSS\u6e90 docList.append(wordList) fullText.extend(wordList) classList.append(1) wordList=textParse(feed0['entries'][i]['summary']) docList.append(wordList) fullText.extend(wordList) classList.append(0) vocabList=createVocabList(docList) top30Words=calcMostFreq(vocabList,fullText) for pairW in top30Words: if pairW[0] in vocabList:vocabList.remove(pairW[0]) #\u53bb\u6389\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u7684\u90a3\u4e9b\u8bcd trainingSet=range(2*minLen);testSet=[] for i in range(20): randIndex=int(random.uniform(0,len(trainingSet))) testSet.append(trainingSet[randIndex]) del(trainingSet[randIndex]) trainMat=[];trainClasses=[] for docIndex in trainingSet: trainMat.append(bagOfWords2VecMN(vocabList,docList[docIndex])) trainClasses.append(classList[docIndex]) p0V,p1V,pSpam=trainNBO(array(trainMat),array(trainClasses)) errorCount=0 for docIndex in testSet: wordVector=bagOfWords2VecMN(vocabList,docList[docIndex]) if classifyNB(array(wordVector),p0V,p1V,pSpam)!=classList[docIndex]: errorCount+=1 print 'the error rate is:',float(errorCount)/len(testSet) return vocabList,p0V,p1V #\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u51fd\u6570 def classifyNB(vec2Classify,p0Vec,p1Vec,pClass1): p1=sum(vec2Classify*p1Vec)+log(pClass1) p0=sum(vec2Classify*p0Vec)+log(1.0-pClass1) if p1>p0: return 1 else: return 0 \u4f7f\u7528\u7b97\u6cd5: \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5c01\u88c5\u6240\u6709\u5185\u5bb9\u3002\u7ed9\u5b9a\u4e24\u4e2a RSS \u6e90\uff0c\u6539\u7a0b\u5e8f\u4f1a\u663e\u793a\u6700\u5e38\u7528\u7684\u516c\u5171\u8bcd \u51fd\u6570 localWords() \u4f7f\u7528\u4e86\u4e24\u4e2a RSS \u6e90\u4f5c\u4e3a\u53c2\u6570\uff0cRSS \u6e90\u8981\u5728\u51fd\u6570\u5916\u5bfc\u5165\uff0c\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f RSS \u6e90\u4f1a\u968f\u65f6\u95f4\u800c\u6539\u53d8\uff0c\u91cd\u65b0\u52a0\u8f7d RSS \u6e90\u5c31\u4f1a\u5f97\u5230\u65b0\u7684\u6570\u636e >>> reload(bayes) <module 'bayes' from 'bayes.pyc'> >>> import feedparser >>> ny=feedparser.parse('http://newyork.craigslist.org/stp/index.rss') >>> sy=feedparser.parse('http://sfbay.craigslist.org/stp/index.rss') >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.2 >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.3 >>> vocabList,pSF,pNY=bayes.localWords(ny,sf) the error rate is: 0.55 \u4e3a\u4e86\u5f97\u5230\u9519\u8bef\u7387\u7684\u7cbe\u786e\u4f30\u8ba1\uff0c\u5e94\u8be5\u591a\u6b21\u8fdb\u884c\u4e0a\u8ff0\u5b9e\u9a8c\uff0c\u7136\u540e\u53d6\u5e73\u5747\u503c \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5206\u6790\u4e00\u4e0b\u6570\u636e\uff0c\u663e\u793a\u5730\u57df\u76f8\u5173\u7684\u7528\u8bcd \u53ef\u4ee5\u5148\u5bf9\u5411\u91cfpSF\u4e0epNY\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u6253\u5370\u51fa\u6765\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u6587\u4ef6\u4e2d\uff1a #\u6700\u5177\u8868\u5f81\u6027\u7684\u8bcd\u6c47\u663e\u793a\u51fd\u6570 def getTopWords(ny,sf): import operator vocabList,p0V,p1V=localWords(ny,sf) topNY=[];topSF=[] for i in range(len(p0V)): if p0V[i]>-6.0:topSF.append((vocabList[i],p0V[i])) if p1V[i]>-6.0:topNY.append((vocabList[i],p1V[i])) sortedSF=sorted(topSF,key=lambda pair:pair[1],reverse=True) print \"SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**\" for item in sortedSF: print item[0] sortedNY=sorted(topNY,key=lambda pair:pair[1],reverse=True) print \"NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**\" for item in sortedNY: print item[0] \u51fd\u6570 getTopWords() \u4f7f\u7528\u4e24\u4e2a RSS \u6e90\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8bad\u7ec3\u5e76\u6d4b\u8bd5\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\uff0c\u8fd4\u56de\u4f7f\u7528\u7684\u6982\u7387\u503c\u3002\u7136\u540e\u521b\u5efa\u4e24\u4e2a\u5217\u8868\u7528\u4e8e\u5143\u7ec4\u7684\u5b58\u50a8\uff0c\u4e0e\u4e4b\u524d\u8fd4\u56de\u6392\u540d\u6700\u9ad8\u7684 X \u4e2a\u5355\u8bcd\u4e0d\u540c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\u7684\u6240\u6709\u8bcd\uff0c\u8fd9\u4e9b\u5143\u7ec4\u4f1a\u6309\u7167\u5b83\u4eec\u7684\u6761\u4ef6\u6982\u7387\u8fdb\u884c\u6392\u5e8f\u3002 \u4fdd\u5b58 bayes.py \u6587\u4ef6\uff0c\u5728python\u63d0\u793a\u7b26\u4e0b\u8f93\u5165\uff1a >>> reload(bayes) <module 'bayes' from 'bayes.pyc'> >>> bayes.getTopWords(ny,sf) the error rate is: 0.55 SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF**SF** how last man ... veteran still ends late off own know NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY**NY** someone meet ... apparel recalled starting strings \u5f53\u6ce8\u91ca\u6389\u7528\u4e8e\u79fb\u9664\u9ad8\u9891\u8bcd\u7684\u4e09\u884c\u4ee3\u7801\uff0c\u7136\u540e\u6bd4\u8f83\u6ce8\u91ca\u524d\u540e\u7684\u5206\u7c7b\u6027\u80fd\uff0c\u53bb\u6389\u8fd9\u51e0\u884c\u4ee3\u7801\u4e4b\u540e\uff0c\u9519\u8bef\u7387\u4e3a54%\uff0c\uff0c\u800c\u4fdd\u7559\u8fd9\u4e9b\u4ee3\u7801\u5f97\u5230\u7684\u9519\u8bef\u7387\u4e3a70%\u3002\u8fd9\u91cc\u89c2\u5bdf\u5230\uff0c\u8fd9\u4e9b\u7559\u8a00\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u524d30\u4e2a\u8bcd\u6db5\u76d6\u4e86\u6240\u6709\u7528\u8bcd\u768430%\uff0cvocabList\u7684\u5927\u5c0f\u7ea6\u4e3a3000\u4e2a\u8bcd\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bcd\u6c47\u8868\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206\u5355\u8bcd\u5374\u5360\u636e\u4e86\u6240\u6709\u6587\u672c\u7528\u8bcd\u7684\u4e00\u5927\u90e8\u5206\u3002\u4ea7\u751f\u8fd9\u79cd\u73b0\u8c61\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u8bed\u8a00\u4e2d\u5927\u90e8\u5206\u90fd\u662f\u5197\u4f59\u548c\u7ed3\u6784\u8f85\u52a9\u6027\u5185\u5bb9\u3002\u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4e0d\u4ec5\u79fb\u9664\u9ad8\u9891\u8bcd\uff0c\u540c\u65f6\u4ece\u67d0\u4e2a\u9884\u5b9a\u9ad8\u9891\u8bcd\u4e2d\u79fb\u9664\u7ed3\u6784\u4e0a\u7684\u8f85\u52a9\u8bcd\uff0c\u8be5\u8bcd\u8868\u79f0\u4e3a\u505c\u7528\u8bcd\u8868\u3002 \u4ece\u6700\u540e\u8f93\u51fa\u7684\u5355\u8bcd\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u8f93\u51fa\u4e86\u5927\u91cf\u7684\u505c\u7528\u8bcd\uff0c\u53ef\u4ee5\u79fb\u9664\u56fa\u5b9a\u7684\u505c\u7528\u8bcd\u770b\u770b\u7ed3\u679c\u5982\u4f55\uff0c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5206\u7c7b\u9519\u8bef\u7387\u4e5f\u4f1a\u964d\u4f4e\u3002 \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/5.Logistic/","text":"\u7b2c5\u7ae0 Logistic\u56de\u5f52 Logistic \u56de\u5f52 \u6982\u8ff0 Logistic \u56de\u5f52 \u6216\u8005\u53eb\u903b\u8f91\u56de\u5f52 \u867d\u7136\u540d\u5b57\u6709\u56de\u5f52\uff0c\u4f46\u662f\u5b83\u662f\u7528\u6765\u505a\u5206\u7c7b\u7684\u3002\u5176\u4e3b\u8981\u601d\u60f3\u662f: \u6839\u636e\u73b0\u6709\u6570\u636e\u5bf9\u5206\u7c7b\u8fb9\u754c\u7ebf(Decision Boundary)\u5efa\u7acb\u56de\u5f52\u516c\u5f0f\uff0c\u4ee5\u6b64\u8fdb\u884c\u5206\u7c7b\u3002 \u987b\u77e5\u6982\u5ff5 Sigmoid \u51fd\u6570 \u56de\u5f52 \u6982\u5ff5 \u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e9b\u6570\u636e\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u6761\u76f4\u7ebf\u5bf9\u8fd9\u4e9b\u70b9\u8fdb\u884c\u62df\u5408\uff08\u8fd9\u6761\u76f4\u7ebf\u79f0\u4e3a\u6700\u4f73\u62df\u5408\u76f4\u7ebf\uff09\uff0c\u8fd9\u4e2a\u62df\u5408\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u56de\u5f52\u3002\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230\u5bf9\u8fd9\u4e9b\u70b9\u7684\u62df\u5408\u76f4\u7ebf\u65b9\u7a0b\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u8fd9\u4e2a\u56de\u5f52\u65b9\u7a0b\uff0c\u600e\u4e48\u8fdb\u884c\u5206\u7c7b\u5462\uff1f\u8bf7\u770b\u4e0b\u9762\u3002 \u4e8c\u503c\u578b\u8f93\u51fa\u5206\u7c7b\u51fd\u6570 \u6211\u4eec\u60f3\u8981\u7684\u51fd\u6570\u5e94\u8be5\u662f: \u80fd\u63a5\u53d7\u6240\u6709\u7684\u8f93\u5165\u7136\u540e\u9884\u6d4b\u51fa\u7c7b\u522b\u3002\u4f8b\u5982\uff0c\u5728\u4e24\u4e2a\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0a\u8ff0\u51fd\u6570\u8f93\u51fa 0 \u6216 1.\u6216\u8bb8\u4f60\u4e4b\u524d\u63a5\u89e6\u8fc7\u5177\u6709\u8fd9\u79cd\u6027\u8d28\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u79f0\u4e3a \u6d77\u7ef4\u585e\u5f97\u9636\u8dc3\u51fd\u6570(Heaviside step function) \uff0c\u6216\u8005\u76f4\u63a5\u79f0\u4e3a \u5355\u4f4d\u9636\u8dc3\u51fd\u6570 \u3002\u7136\u800c\uff0c\u6d77\u7ef4\u585e\u5f97\u9636\u8dc3\u51fd\u6570\u7684\u95ee\u9898\u5728\u4e8e: \u8be5\u51fd\u6570\u5728\u8df3\u8dc3\u70b9\u4e0a\u4ece 0 \u77ac\u95f4\u8df3\u8dc3\u5230 1\uff0c\u8fd9\u4e2a\u77ac\u95f4\u8df3\u8dc3\u8fc7\u7a0b\u6709\u65f6\u5f88\u96be\u5904\u7406\u3002\u5e78\u597d\uff0c\u53e6\u4e00\u4e2a\u51fd\u6570\u4e5f\u6709\u7c7b\u4f3c\u7684\u6027\u8d28\uff08\u53ef\u4ee5\u8f93\u51fa 0 \u6216\u8005 1 \u7684\u6027\u8d28\uff09\uff0c\u4e14\u6570\u5b66\u4e0a\u66f4\u6613\u5904\u7406\uff0c\u8fd9\u5c31\u662f Sigmoid \u51fd\u6570\u3002 Sigmoid \u51fd\u6570\u5177\u4f53\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b: \u4e0b\u56fe\u7ed9\u51fa\u4e86 Sigmoid \u51fd\u6570\u5728\u4e0d\u540c\u5750\u6807\u5c3a\u5ea6\u4e0b\u7684\u4e24\u6761\u66f2\u7ebf\u56fe\u3002\u5f53 x \u4e3a 0 \u65f6\uff0cSigmoid \u51fd\u6570\u503c\u4e3a 0.5 \u3002\u968f\u7740 x \u7684\u589e\u5927\uff0c\u5bf9\u5e94\u7684 Sigmoid \u503c\u5c06\u903c\u8fd1\u4e8e 1 ; \u800c\u968f\u7740 x \u7684\u51cf\u5c0f\uff0c Sigmoid \u503c\u5c06\u903c\u8fd1\u4e8e 0 \u3002\u5982\u679c\u6a2a\u5750\u6807\u523b\u5ea6\u8db3\u591f\u5927\uff0c Sigmoid \u51fd\u6570\u770b\u8d77\u6765\u5f88\u50cf\u4e00\u4e2a\u9636\u8dc3\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u5b9e\u73b0 Logistic \u56de\u5f52\u5206\u7c7b\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7279\u5f81\u4e0a\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56de\u5f52\u7cfb\u6570\uff08\u5982\u4e0b\u516c\u5f0f\u6240\u793a\uff09\uff0c\u7136\u540e\u628a\u6240\u6709\u7ed3\u679c\u503c\u76f8\u52a0\uff0c\u5c06\u8fd9\u4e2a\u603b\u548c\u4ee3\u5165 Sigmoid \u51fd\u6570\u4e2d\uff0c\u8fdb\u800c\u5f97\u5230\u4e00\u4e2a\u8303\u56f4\u5728 0~1 \u4e4b\u95f4\u7684\u6570\u503c\u3002\u4efb\u4f55\u5927\u4e8e 0.5 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.5 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002\u6240\u4ee5\uff0cLogistic \u56de\u5f52\u4e5f\u662f\u4e00\u79cd\u6982\u7387\u4f30\u8ba1\uff0c\u6bd4\u5982\u8fd9\u91ccSigmoid \u51fd\u6570\u5f97\u51fa\u7684\u503c\u4e3a0.5\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ed9\u5b9a\u6570\u636e\u548c\u53c2\u6570\uff0c\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\u7684\u6982\u7387\u4e3a0.5\u3002\u60f3\u5bf9Sigmoid \u51fd\u6570\u6709\u66f4\u591a\u4e86\u89e3\uff0c\u53ef\u4ee5\u70b9\u5f00 \u6b64\u94fe\u63a5 \u8ddf\u6b64\u51fd\u6570\u4e92\u52a8\u3002 \u57fa\u4e8e\u6700\u4f18\u5316\u65b9\u6cd5\u7684\u56de\u5f52\u7cfb\u6570\u786e\u5b9a Sigmoid \u51fd\u6570\u7684\u8f93\u5165\u8bb0\u4e3a z \uff0c\u7531\u4e0b\u9762\u516c\u5f0f\u5f97\u5230: \u5982\u679c\u91c7\u7528\u5411\u91cf\u7684\u5199\u6cd5\uff0c\u4e0a\u8ff0\u516c\u5f0f\u53ef\u4ee5\u5199\u6210 \uff0c\u5b83\u8868\u793a\u5c06\u8fd9\u4e24\u4e2a\u6570\u503c\u5411\u91cf\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\u7136\u540e\u5168\u90e8\u52a0\u8d77\u6765\u5373\u5f97\u5230 z \u503c\u3002\u5176\u4e2d\u7684\u5411\u91cf x \u662f\u5206\u7c7b\u5668\u7684\u8f93\u5165\u6570\u636e\uff0c\u5411\u91cf w \u4e5f\u5c31\u662f\u6211\u4eec\u8981\u627e\u5230\u7684\u6700\u4f73\u53c2\u6570\uff08\u7cfb\u6570\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5206\u7c7b\u5668\u5c3d\u53ef\u80fd\u5730\u7cbe\u786e\u3002\u4e3a\u4e86\u5bfb\u627e\u8be5\u6700\u4f73\u53c2\u6570\uff0c\u9700\u8981\u7528\u5230\u6700\u4f18\u5316\u7406\u8bba\u7684\u4e00\u4e9b\u77e5\u8bc6\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u2014\u2014\u68af\u5ea6\u4e0a\u5347\u6cd5\uff08Gradient Ascent\uff09\u3002 \u68af\u5ea6\u4e0a\u5347\u6cd5 \u68af\u5ea6\u7684\u4ecb\u7ecd \u9700\u8981\u4e00\u70b9\u70b9\u5411\u91cf\u65b9\u9762\u7684\u6570\u5b66\u77e5\u8bc6 \u5411\u91cf = \u503c + \u65b9\u5411 \u68af\u5ea6 = \u5411\u91cf \u68af\u5ea6 = \u68af\u5ea6\u503c + \u68af\u5ea6\u65b9\u5411 \u68af\u5ea6\u4e0a\u5347\u6cd5\u7684\u601d\u60f3 \u8981\u627e\u5230\u67d0\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u6cbf\u7740\u8be5\u51fd\u6570\u7684\u68af\u5ea6\u65b9\u5411\u63a2\u5bfb\u3002\u5982\u679c\u68af\u5ea6\u8bb0\u4e3a \u25bd \uff0c\u5219\u51fd\u6570 f(x, y) \u7684\u68af\u5ea6\u7531\u4e0b\u5f0f\u8868\u793a: \u8fd9\u4e2a\u68af\u5ea6\u610f\u5473\u7740\u8981\u6cbf x \u7684\u65b9\u5411\u79fb\u52a8 \uff0c\u6cbf y \u7684\u65b9\u5411\u79fb\u52a8 \u3002\u5176\u4e2d\uff0c\u51fd\u6570f(x, y) \u5fc5\u987b\u8981\u5728\u5f85\u8ba1\u7b97\u7684\u70b9\u4e0a\u6709\u5b9a\u4e49\u5e76\u4e14\u53ef\u5fae\u3002\u4e0b\u56fe\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \u4e0a\u56fe\u5c55\u793a\u7684\uff0c\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5230\u8fbe\u6bcf\u4e2a\u70b9\u540e\u90fd\u4f1a\u91cd\u65b0\u4f30\u8ba1\u79fb\u52a8\u7684\u65b9\u5411\u3002\u4ece P0 \u5f00\u59cb\uff0c\u8ba1\u7b97\u5b8c\u8be5\u70b9\u7684\u68af\u5ea6\uff0c\u51fd\u6570\u5c31\u6839\u636e\u68af\u5ea6\u79fb\u52a8\u5230\u4e0b\u4e00\u70b9 P1\u3002\u5728 P1 \u70b9\uff0c\u68af\u5ea6\u518d\u6b21\u88ab\u91cd\u65b0\u8ba1\u7b97\uff0c\u5e76\u6cbf\u7740\u65b0\u7684\u68af\u5ea6\u65b9\u5411\u79fb\u52a8\u5230 P2 \u3002\u5982\u6b64\u5faa\u73af\u8fed\u4ee3\uff0c\u76f4\u5230\u6ee1\u8db3\u505c\u6b62\u6761\u4ef6\u3002\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u68af\u5ea6\u7b97\u5b50\u603b\u662f\u4fdd\u8bc1\u6211\u4eec\u80fd\u9009\u53d6\u5230\u6700\u4f73\u7684\u79fb\u52a8\u65b9\u5411\u3002 \u4e0a\u56fe\u4e2d\u7684\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u6cbf\u68af\u5ea6\u65b9\u5411\u79fb\u52a8\u4e86\u4e00\u6b65\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u68af\u5ea6\u7b97\u5b50\u603b\u662f\u6307\u5411\u51fd\u6570\u503c\u589e\u957f\u6700\u5feb\u7684\u65b9\u5411\u3002\u8fd9\u91cc\u6240\u8bf4\u7684\u662f\u79fb\u52a8\u65b9\u5411\uff0c\u800c\u672a\u63d0\u5230\u79fb\u52a8\u91cf\u7684\u5927\u5c0f\u3002\u8be5\u91cf\u503c\u79f0\u4e3a\u6b65\u957f\uff0c\u8bb0\u4f5c \u03b1 \u3002\u7528\u5411\u91cf\u6765\u8868\u793a\u7684\u8bdd\uff0c\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u7684\u8fed\u4ee3\u516c\u5f0f\u5982\u4e0b: \u8be5\u516c\u5f0f\u5c06\u4e00\u76f4\u88ab\u8fed\u4ee3\u6267\u884c\uff0c\u76f4\u81f3\u8fbe\u5230\u67d0\u4e2a\u505c\u6b62\u6761\u4ef6\u4e3a\u6b62\uff0c\u6bd4\u5982\u8fed\u4ee3\u6b21\u6570\u8fbe\u5230\u67d0\u4e2a\u6307\u5b9a\u503c\u6216\u8005\u7b97\u6cd5\u8fbe\u5230\u67d0\u4e2a\u53ef\u4ee5\u5141\u8bb8\u7684\u8bef\u5dee\u8303\u56f4\u3002 \u4ecb\u7ecd\u4e00\u4e0b\u51e0\u4e2a\u76f8\u5173\u7684\u6982\u5ff5\uff1a \u4f8b\u5982\uff1ay = w0 + w1x1 + w2x2 + ... + wnxn \u68af\u5ea6\uff1a\u53c2\u8003\u4e0a\u56fe\u7684\u4f8b\u5b50\uff0c\u4e8c\u7ef4\u56fe\u50cf\uff0cx\u65b9\u5411\u4ee3\u8868\u7b2c\u4e00\u4e2a\u7cfb\u6570\uff0c\u4e5f\u5c31\u662f w1\uff0cy\u65b9\u5411\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u7cfb\u6570\u4e5f\u5c31\u662f w2\uff0c\u8fd9\u6837\u7684\u5411\u91cf\u5c31\u662f\u68af\u5ea6\u3002 \u03b1\uff1a\u4e0a\u9762\u7684\u68af\u5ea6\u7b97\u6cd5\u7684\u8fed\u4ee3\u516c\u5f0f\u4e2d\u7684\u963f\u5c14\u6cd5\uff0c\u8fd9\u4e2a\u4ee3\u8868\u7684\u662f\u79fb\u52a8\u6b65\u957f\uff08step length\uff09\u3002\u79fb\u52a8\u6b65\u957f\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u7684\u62df\u5408\u7a0b\u5ea6\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u5c31\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u66f4\u6539\u79fb\u52a8\u6b65\u957f\u3002 \u6b65\u957f\u901a\u4fd7\u7684\u7406\u89e3\uff0c100\u7c73\uff0c\u5982\u679c\u6211\u4e00\u6b65\u8d7010\u7c73\uff0c\u6211\u9700\u8981\u8d7010\u6b65\uff1b\u5982\u679c\u4e00\u6b65\u8d7020\u7c73\uff0c\u6211\u53ea\u9700\u8981\u8d705\u6b65\u3002\u8fd9\u91cc\u7684\u4e00\u6b65\u8d70\u591a\u5c11\u7c73\u5c31\u662f\u6b65\u957f\u7684\u610f\u601d\u3002 \u25bdf(w)\uff1a\u4ee3\u8868\u6cbf\u7740\u68af\u5ea6\u53d8\u5316\u7684\u65b9\u5411\u3002 \u95ee\uff1a\u6709\u4eba\u4f1a\u597d\u5947\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4e66\u7c4d\u4e0a\u8bf4\u7684\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\uff08Gradient Decent\uff09? \u7b54\uff1a \u5176\u5b9e\u8fd9\u4e2a\u4e24\u4e2a\u65b9\u6cd5\u5728\u6b64\u60c5\u51b5\u4e0b\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u3002\u5173\u952e\u5728\u4e8e\u4ee3\u4ef7\u51fd\u6570\uff08cost function\uff09\u6216\u8005\u53eb\u76ee\u6807\u51fd\u6570\uff08objective function\uff09\u3002\u5982\u679c\u76ee\u6807\u51fd\u6570\u662f\u635f\u5931\u51fd\u6570\uff0c\u90a3\u5c31\u662f\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u6765\u6c42\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u7528\u68af\u5ea6\u4e0b\u964d\u3002 \u5982\u679c\u76ee\u6807\u51fd\u6570\u662f\u4f3c\u7136\u51fd\u6570\uff08Likelihood function\uff09\uff0c\u5c31\u662f\u8981\u6700\u5927\u5316\u4f3c\u7136\u51fd\u6570\u6765\u6c42\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u90a3\u5c31\u7528\u68af\u5ea6\u4e0a\u5347\u3002\u5728\u903b\u8f91\u56de\u5f52\u4e2d\uff0c \u635f\u5931\u51fd\u6570\u548c\u4f3c\u7136\u51fd\u6570\u65e0\u975e\u5c31\u662f\u4e92\u4e3a\u6b63\u8d1f\u5173\u7cfb\u3002 \u53ea\u9700\u8981\u5728\u8fed\u4ee3\u516c\u5f0f\u4e2d\u7684\u52a0\u6cd5\u53d8\u6210\u51cf\u6cd5\u3002\u56e0\u6b64\uff0c\u5bf9\u5e94\u7684\u516c\u5f0f\u53ef\u4ee5\u5199\u6210 \u5c40\u90e8\u6700\u4f18\u73b0\u8c61 \uff08Local Optima\uff09 \u4e0a\u56fe\u8868\u793a\u53c2\u6570 \u03b8 \u4e0e\u8bef\u5dee\u51fd\u6570 J(\u03b8) \u7684\u5173\u7cfb\u56fe (\u8fd9\u91cc\u7684\u8bef\u5dee\u51fd\u6570\u662f\u635f\u5931\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570)\uff0c\u7ea2\u8272\u7684\u90e8\u5206\u662f\u8868\u793a J(\u03b8) \u6709\u7740\u6bd4\u8f83\u9ad8\u7684\u53d6\u503c\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\uff0c\u80fd\u591f\u8ba9 J(\u03b8) \u7684\u503c\u5c3d\u91cf\u7684\u4f4e\u3002\u4e5f\u5c31\u662f\u6df1\u84dd\u8272\u7684\u90e8\u5206\u3002\u03b80\uff0c\u03b81 \u8868\u793a \u03b8 \u5411\u91cf\u7684\u4e24\u4e2a\u7ef4\u5ea6\uff08\u6b64\u5904\u7684\u03b80\uff0c\u03b81\u662fx0\u548cx1\u7684\u7cfb\u6570\uff0c\u4e5f\u5bf9\u5e94\u7684\u662f\u4e0a\u6587w0\u548cw1\uff09\u3002 \u53ef\u80fd\u68af\u5ea6\u4e0b\u964d\u7684\u6700\u7ec8\u70b9\u5e76\u975e\u662f\u5168\u5c40\u6700\u5c0f\u70b9\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5c40\u90e8\u6700\u5c0f\u70b9\uff0c\u5982\u6211\u4eec\u4e0a\u56fe\u4e2d\u7684\u53f3\u8fb9\u7684\u68af\u5ea6\u4e0b\u964d\u66f2\u7ebf\uff0c\u63cf\u8ff0\u7684\u662f\u6700\u7ec8\u5230\u8fbe\u4e00\u4e2a\u5c40\u90e8\u6700\u5c0f\u70b9\uff0c\u8fd9\u662f\u6211\u4eec\u91cd\u65b0\u9009\u62e9\u4e86\u4e00\u4e2a\u521d\u59cb\u70b9\u5f97\u5230\u7684\u3002 \u770b\u6765\u6211\u4eec\u8fd9\u4e2a\u7b97\u6cd5\u5c06\u4f1a\u5728\u5f88\u5927\u7684\u7a0b\u5ea6\u4e0a\u88ab\u521d\u59cb\u70b9\u7684\u9009\u62e9\u5f71\u54cd\u800c\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u70b9\u3002 Logistic \u56de\u5f52 \u539f\u7406 Logistic \u56de\u5f52 \u5de5\u4f5c\u539f\u7406 \u6bcf\u4e2a\u56de\u5f52\u7cfb\u6570\u521d\u59cb\u5316\u4e3a 1 \u91cd\u590d R \u6b21: \u8ba1\u7b97\u6574\u4e2a\u6570\u636e\u96c6\u7684\u68af\u5ea6 \u4f7f\u7528 \u6b65\u957f x \u68af\u5ea6 \u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u7684\u5411\u91cf \u8fd4\u56de\u56de\u5f52\u7cfb\u6570 Logistic \u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73\u3002 \u5206\u6790\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u5927\u90e8\u5206\u65f6\u95f4\u5c06\u7528\u4e8e\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u627e\u5230\u6700\u4f73\u7684\u5206\u7c7b\u56de\u5f52\u7cfb\u6570\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u4e00\u65e6\u8bad\u7ec3\u6b65\u9aa4\u5b8c\u6210\uff0c\u5206\u7c7b\u5c06\u4f1a\u5f88\u5feb\u3002 \u4f7f\u7528\u7b97\u6cd5: \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165\u4e00\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7ed3\u6784\u5316\u6570\u503c\uff1b\u63a5\u7740\uff0c\u57fa\u4e8e\u8bad\u7ec3\u597d\u7684\u56de\u5f52\u7cfb\u6570\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u6570\u503c\u8fdb\u884c\u7b80\u5355\u7684\u56de\u5f52\u8ba1\u7b97\uff0c\u5224\u5b9a\u5b83\u4eec\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff1b\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u51fa\u7684\u7c7b\u522b\u4e0a\u505a\u4e00\u4e9b\u5176\u4ed6\u5206\u6790\u5de5\u4f5c\u3002 Logistic \u56de\u5f52 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9: \u8ba1\u7b97\u4ee3\u4ef7\u4e0d\u9ad8\uff0c\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u3002 \u7f3a\u70b9: \u5bb9\u6613\u6b20\u62df\u5408\uff0c\u5206\u7c7b\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u9ad8\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 \u9644\u52a0 \u65b9\u5411\u5bfc\u6570\u4e0e\u68af\u5ea6 Logistic \u56de\u5f52 \u9879\u76ee\u6848\u4f8b \u9879\u76ee\u6848\u4f8b1: \u4f7f\u7528 Logistic \u56de\u5f52\u5728\u7b80\u5355\u6570\u636e\u96c6\u4e0a\u7684\u5206\u7c7b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/5.Logistic/logistic.py \u9879\u76ee\u6982\u8ff0 \u5728\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u91c7\u7528\u68af\u5ea6\u4e0a\u5347\u6cd5\u627e\u5230 Logistic \u56de\u5f52\u5206\u7c7b\u5668\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u7684\u6700\u4f73\u56de\u5f52\u7cfb\u6570 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73 \u5206\u6790\u6570\u636e: \u753b\u51fa\u51b3\u7b56\u8fb9\u754c \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u627e\u5230\u6700\u4f73\u53c2\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u7b80\u5355\u6570\u636e\u96c6\u4e2d\u6570\u636e\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u6211\u4eec\u91c7\u7528\u5b58\u50a8\u5728 TestSet.txt \u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u5b58\u50a8\u683c\u5f0f\u5982\u4e0b: -0.017612 14.053064 0 -1.395634 4.662541 1 -0.752157 6.538620 0 -1.322371 7.152853 0 0.423363 11.054677 0 \u7ed8\u5236\u5728\u56fe\u4e2d\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73 # \u89e3\u6790\u6570\u636e def loadDataSet(file_name): ''' Desc: \u52a0\u8f7d\u5e76\u89e3\u6790\u6570\u636e Args: file_name -- \u8981\u89e3\u6790\u7684\u6587\u4ef6\u8def\u5f84 Returns: dataMat -- \u539f\u59cb\u6570\u636e\u7684\u7279\u5f81 labelMat -- \u539f\u59cb\u6570\u636e\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6bcf\u6761\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u3002\u5373\u76ee\u6807\u5411\u91cf ''' # dataMat\u4e3a\u539f\u59cb\u6570\u636e\uff0c labelMat\u4e3a\u539f\u59cb\u6570\u636e\u7684\u6807\u7b7e dataMat = [] labelMat = [] fr = open(file_name) for line in fr.readlines(): lineArr = line.strip().split() # \u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6211\u4eec\u5c06 X0 \u7684\u503c\u8bbe\u4e3a 1.0 \uff0c\u4e5f\u5c31\u662f\u5728\u6bcf\u4e00\u884c\u7684\u5f00\u5934\u6dfb\u52a0\u4e00\u4e2a 1.0 \u4f5c\u4e3a X0 dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])]) labelMat.append(int(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\uff0c\u6b64\u5904\u4e0d\u9700\u8981 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u627e\u5230\u6700\u4f73\u53c2\u6570 \u5b9a\u4e49sigmoid\u9636\u8dc3\u51fd\u6570 # sigmoid\u9636\u8dc3\u51fd\u6570 def sigmoid(inX): # return 1.0 / (1 + exp(-inX)) # Tanh\u662fSigmoid\u7684\u53d8\u5f62\uff0c\u4e0e sigmoid \u4e0d\u540c\u7684\u662f\uff0ctanh \u662f0\u5747\u503c\u7684\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\uff0ctanh \u4f1a\u6bd4 sigmoid \u66f4\u597d\u3002 return 2 * 1.0/(1+exp(-2*inX)) - 1 Logistic \u56de\u5f52\u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5 # \u6b63\u5e38\u7684\u5904\u7406\u65b9\u6848 # \u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570==> dataMatIn \u662f\u4e00\u4e2a2\u7ef4NumPy\u6570\u7ec4\uff0c\u6bcf\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u4e2a\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u6bcf\u884c\u5219\u4ee3\u8868\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u3002 # \u7b2c\u4e8c\u4e2a\u53c2\u6570==> classLabels \u662f\u7c7b\u522b\u6807\u7b7e\uff0c\u5b83\u662f\u4e00\u4e2a 1*100 \u7684\u884c\u5411\u91cf\u3002\u4e3a\u4e86\u4fbf\u4e8e\u77e9\u9635\u8ba1\u7b97\uff0c\u9700\u8981\u5c06\u8be5\u884c\u5411\u91cf\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\uff0c\u505a\u6cd5\u662f\u5c06\u539f\u5411\u91cf\u8f6c\u7f6e\uff0c\u518d\u5c06\u5b83\u8d4b\u503c\u7ed9labelMat\u3002 def gradAscent(dataMatIn, classLabels): # \u8f6c\u5316\u4e3a\u77e9\u9635[[1,1,2],[1,1,2]....] dataMatrix = mat(dataMatIn) # \u8f6c\u6362\u4e3a NumPy \u77e9\u9635 # \u8f6c\u5316\u4e3a\u77e9\u9635[[0,1,0,1,0,1.....]]\uff0c\u5e76\u8f6c\u5236[[0],[1],[0].....] # transpose() \u884c\u5217\u8f6c\u7f6e\u51fd\u6570 # \u5c06\u884c\u5411\u91cf\u8f6c\u5316\u4e3a\u5217\u5411\u91cf => \u77e9\u9635\u7684\u8f6c\u7f6e labelMat = mat(classLabels).transpose() # \u9996\u5148\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a NumPy \u77e9\u9635\uff0c\u7136\u540e\u518d\u5c06\u884c\u5411\u91cf\u8f6c\u7f6e\u4e3a\u5217\u5411\u91cf # m->\u6570\u636e\u91cf\uff0c\u6837\u672c\u6570 n->\u7279\u5f81\u6570 m,n = shape(dataMatrix) # print m, n, '__'*10, shape(dataMatrix.transpose()), '__'*100 # alpha\u4ee3\u8868\u5411\u76ee\u6807\u79fb\u52a8\u7684\u6b65\u957f alpha = 0.001 # \u8fed\u4ee3\u6b21\u6570 maxCycles = 500 # \u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u6b64\u5904n\u4e3a3 -> [[1],[1],[1]] # weights \u4ee3\u8868\u56de\u5f52\u7cfb\u6570\uff0c \u6b64\u5904\u7684 ones((n,1)) \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u6570\u5168\u90e8\u90fd\u662f 1 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations # m*3 \u7684\u77e9\u9635 * 3*1 \u7684\u77e9\u9635 \uff1d m*1\u7684\u77e9\u9635 # \u90a3\u4e48\u4e58\u4e0a\u77e9\u9635\u7684\u610f\u4e49\uff0c\u5c31\u4ee3\u8868\uff1a\u901a\u8fc7\u516c\u5f0f\u5f97\u5230\u7684\u7406\u8bba\u503c # \u53c2\u8003\u5730\u5740\uff1a \u77e9\u9635\u4e58\u6cd5\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f https://www.zhihu.com/question/21351965/answer/31050145 # print 'dataMatrix====', dataMatrix # print 'weights====', weights # n*3 * 3*1 = n*1 h = sigmoid(dataMatrix*weights) # \u77e9\u9635\u4e58\u6cd5 # print 'hhhhhhh====', h # labelMat\u662f\u5b9e\u9645\u503c error = (labelMat - h) # \u5411\u91cf\u76f8\u51cf # 0.001* (3*m)*(m*1) \u8868\u793a\u5728\u6bcf\u4e00\u4e2a\u5217\u4e0a\u7684\u4e00\u4e2a\u8bef\u5dee\u60c5\u51b5\uff0c\u6700\u540e\u5f97\u51fa x1,x2,xn\u7684\u7cfb\u6570\u7684\u504f\u79fb\u91cf weights = weights + alpha * dataMatrix.transpose() * error # \u77e9\u9635\u4e58\u6cd5\uff0c\u6700\u540e\u5f97\u5230\u56de\u5f52\u7cfb\u6570 return array(weights) \u5927\u5bb6\u770b\u5230\u8fd9\u513f\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7591\u60d1\uff0c\u5c31\u662f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u4e2d\u66f4\u65b0\u6211\u4eec\u7684\u56de\u5f52\u7cfb\u6570\uff0c\u540e\u8fb9\u7684\u90e8\u5206\u662f\u600e\u4e48\u8ba1\u7b97\u51fa\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u662f alpha * dataMatrix.transpose() * error ?\u56e0\u4e3a\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u6c42\u7684\u68af\u5ea6\uff0c\u4e5f\u5c31\u662f\u5bf9 f(w) \u5bf9 w \u6c42\u4e00\u9636\u5bfc\u6570\u3002\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b: \u53ef\u53c2\u8003http://blog.csdn.net/achuo/article/details/51160101 \u753b\u51fa\u6570\u636e\u96c6\u548c Logistic \u56de\u5f52\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u7684\u51fd\u6570 def plotBestFit(dataArr, labelMat, weights): ''' Desc: \u5c06\u6211\u4eec\u5f97\u5230\u7684\u6570\u636e\u53ef\u89c6\u5316\u5c55\u793a\u51fa\u6765 Args: dataArr:\u6837\u672c\u6570\u636e\u7684\u7279\u5f81 labelMat:\u6837\u672c\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf weights:\u56de\u5f52\u7cfb\u6570 Returns: None ''' n = shape(dataArr)[0] xcord1 = []; ycord1 = [] xcord2 = []; ycord2 = [] for i in range(n): if int(labelMat[i])== 1: xcord1.append(dataArr[i,1]); ycord1.append(dataArr[i,2]) else: xcord2.append(dataArr[i,1]); ycord2.append(dataArr[i,2]) fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(xcord1, ycord1, s=30, c='red', marker='s') ax.scatter(xcord2, ycord2, s=30, c='green') x = arange(-3.0, 3.0, 0.1) \"\"\" y\u7684\u7531\u6765\uff0c\u5367\u69fd\uff0c\u662f\u4e0d\u662f\u6ca1\u770b\u61c2\uff1f \u9996\u5148\u7406\u8bba\u4e0a\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])]) w0*x0+w1*x1+w2*x2=f(x) x0\u6700\u5f00\u59cb\u5c31\u8bbe\u7f6e\u4e3a1\u53fb\uff0c x2\u5c31\u662f\u6211\u4eec\u753b\u56fe\u7684y\u503c\uff0c\u800cf(x)\u88ab\u6211\u4eec\u78e8\u5408\u8bef\u5dee\u7ed9\u7b97\u5230w0,w1,w2\u8eab\u4e0a\u53bb\u4e86 \u6240\u4ee5\uff1a w0+w1*x+w2*y=0 => y = (-w0-w1*x)/w2 \"\"\" y = (-weights[0]-weights[1]*x)/weights[2] ax.plot(x, y) plt.xlabel('X'); plt.ylabel('Y') plt.show() \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b def testLR(): # 1.\u6536\u96c6\u5e76\u51c6\u5907\u6570\u636e dataMat, labelMat = loadDataSet(\"db/5.Logistic/TestSet.txt\") # print dataMat, '---\\n', labelMat # 2.\u8bad\u7ec3\u6a21\u578b\uff0c f(x)=a1*x1+b2*x2+..+nn*xn\u4e2d (a1,b2, .., nn).T\u7684\u77e9\u9635\u503c # \u56e0\u4e3a\u6570\u7ec4\u6ca1\u6709\u662f\u590d\u5236n\u4efd\uff0c array\u7684\u4e58\u6cd5\u5c31\u662f\u4e58\u6cd5 dataArr = array(dataMat) # print dataArr weights = gradAscent(dataArr, labelMat) # weights = stocGradAscent0(dataArr, labelMat) # weights = stocGradAscent1(dataArr, labelMat) # print '*'*30, weights # \u6570\u636e\u53ef\u89c6\u5316 plotBestFit(dataArr, labelMat, weights) \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u7b80\u5355\u6570\u636e\u96c6\u4e2d\u6570\u636e\u8fdb\u884c\u5206\u7c7b \u6ce8\u610f \u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8be5\u65b9\u6cd5\u5728\u5904\u7406 100 \u4e2a\u5de6\u53f3\u7684\u6570\u636e\u96c6\u65f6\u5c1a\u53ef\uff0c\u4f46\u5982\u679c\u6709\u6570\u5341\u4ebf\u6837\u672c\u548c\u6210\u5343\u4e0a\u4e07\u7684\u7279\u5f81\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5c31\u592a\u9ad8\u4e86\u3002\u4e00\u79cd\u6539\u8fdb\u65b9\u6cd5\u662f\u4e00\u6b21\u4ec5\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\uff0c\u8be5\u65b9\u6cd5\u79f0\u4e3a \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5 \u3002\u7531\u4e8e\u53ef\u4ee5\u5728\u65b0\u6837\u672c\u5230\u6765\u65f6\u5bf9\u5206\u7c7b\u5668\u8fdb\u884c\u589e\u91cf\u5f0f\u66f4\u65b0\uff0c\u56e0\u800c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u662f\u4e00\u4e2a\u5728\u7ebf\u5b66\u4e60(online learning)\u7b97\u6cd5\u3002\u4e0e \u201c\u5728\u7ebf\u5b66\u4e60\u201d \u76f8\u5bf9\u5e94\uff0c\u4e00\u6b21\u5904\u7406\u6240\u6709\u6570\u636e\u88ab\u79f0\u4f5c\u662f \u201c\u6279\u5904\u7406\u201d \uff08batch\uff09 \u3002 \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u7684\u4f2a\u4ee3\u7801: \u6240\u6709\u56de\u5f52\u7cfb\u6570\u521d\u59cb\u5316\u4e3a 1 \u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u6837\u672c \u8ba1\u7b97\u8be5\u6837\u672c\u7684\u68af\u5ea6 \u4f7f\u7528 alpha x gradient \u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u503c \u8fd4\u56de\u56de\u5f52\u7cfb\u6570\u503c \u4ee5\u4e0b\u662f\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u7684\u5b9e\u73b0\u4ee3\u7801: # \u968f\u673a\u68af\u5ea6\u4e0a\u5347 # \u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u96c6\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u590d\u6742\u90fd\u8f83\u9ad8 # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u4e00\u6b21\u53ea\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570 def stocGradAscent0(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 # n*1\u7684\u77e9\u9635 # \u51fd\u6570ones\u521b\u5efa\u4e00\u4e2a\u51681\u7684\u6570\u7ec4 weights = ones(n) # \u521d\u59cb\u5316\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u5168\u90e8\u4e3a 1 for i in range(m): # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn,\u6b64\u5904\u6c42\u51fa\u7684 h \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635 h = sigmoid(sum(dataMatrix[i]*weights)) # print 'dataMatrix[i]===', dataMatrix[i] # \u8ba1\u7b97\u771f\u5b9e\u7c7b\u522b\u4e0e\u9884\u6d4b\u7c7b\u522b\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u7136\u540e\u6309\u7167\u8be5\u5dee\u503c\u8c03\u6574\u56de\u5f52\u7cfb\u6570 error = classLabels[i] - h # 0.01*(1*1)*(1*n) print weights, \"*\"*10 , dataMatrix[i], \"*\"*10 , error weights = weights + alpha * error * dataMatrix[i] return weights \u53ef\u4ee5\u770b\u5230\uff0c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u4e0e\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728\u4ee3\u7801\u4e0a\u5f88\u76f8\u4f3c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u533a\u522b: \u7b2c\u4e00\uff0c\u540e\u8005\u7684\u53d8\u91cf h \u548c\u8bef\u5dee error \u90fd\u662f\u5411\u91cf\uff0c\u800c\u524d\u8005\u5219\u5168\u662f\u6570\u503c\uff1b\u7b2c\u4e8c\uff0c\u524d\u8005\u6ca1\u6709\u77e9\u9635\u7684\u8f6c\u6362\u8fc7\u7a0b\uff0c\u6240\u6709\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u90fd\u662f NumPy \u6570\u7ec4\u3002 \u5224\u65ad\u4f18\u5316\u7b97\u6cd5\u4f18\u52a3\u7684\u53ef\u9760\u65b9\u6cd5\u662f\u770b\u5b83\u662f\u5426\u6536\u655b\uff0c\u4e5f\u5c31\u662f\u8bf4\u53c2\u6570\u662f\u5426\u8fbe\u5230\u4e86\u7a33\u5b9a\u503c\uff0c\u662f\u5426\u8fd8\u4f1a\u4e0d\u65ad\u5730\u53d8\u5316\uff1f\u4e0b\u56fe\u5c55\u793a\u4e86\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728 200 \u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u56de\u5f52\u7cfb\u6570\u7684\u53d8\u5316\u60c5\u51b5\u3002\u5176\u4e2d\u7684\u7cfb\u65702\uff0c\u4e5f\u5c31\u662f X2 \u53ea\u7ecf\u8fc7\u4e86 50 \u6b21\u8fed\u4ee3\u5c31\u8fbe\u5230\u4e86\u7a33\u5b9a\u503c\uff0c\u4f46\u7cfb\u6570 1 \u548c 0 \u5219\u9700\u8981\u66f4\u591a\u6b21\u7684\u8fed\u4ee3\u3002\u5982\u4e0b\u56fe\u6240\u793a: \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6539\u8fdb\u4e86\u4e4b\u524d\u7684\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u5982\u4e0b: # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff08\u968f\u673a\u5316\uff09 def stocGradAscent1(dataMatrix, classLabels, numIter=150): m,n = shape(dataMatrix) weights = ones(n) # \u521b\u5efa\u4e0e\u5217\u6570\u76f8\u540c\u7684\u77e9\u9635\u7684\u7cfb\u6570\u77e9\u9635\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u662f1 # \u968f\u673a\u68af\u5ea6, \u5faa\u73af150,\u89c2\u5bdf\u662f\u5426\u6536\u655b for j in range(numIter): # [0, 1, 2 .. m-1] dataIndex = range(m) for i in range(m): # i\u548cj\u7684\u4e0d\u65ad\u589e\u5927\uff0c\u5bfc\u81f4alpha\u7684\u503c\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u4e3a0 alpha = 4/(1.0+j+i)+0.0001 # alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u52300\uff0c\u56e0\u4e3a\u540e\u8fb9\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570\u98790.0001 # \u968f\u673a\u4ea7\u751f\u4e00\u4e2a 0\uff5elen()\u4e4b\u95f4\u7684\u4e00\u4e2a\u503c # random.uniform(x, y) \u65b9\u6cd5\u5c06\u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185,x\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\uff0cy\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\u3002 randIndex = int(random.uniform(0,len(dataIndex))) # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn h = sigmoid(sum(dataMatrix[dataIndex[randIndex]]*weights)) error = classLabels[dataIndex[randIndex]] - h # print weights, '__h=%s' % h, '__'*20, alpha, '__'*20, error, '__'*20, dataMatrix[randIndex] weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] del(dataIndex[randIndex]) return weights \u4e0a\u9762\u7684\u6539\u8fdb\u7248\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u6211\u4eec\u4fee\u6539\u4e86\u4e24\u5904\u4ee3\u7801\u3002 \u7b2c\u4e00\u5904\u6539\u8fdb\u4e3a alpha \u7684\u503c\u3002alpha \u5728\u6bcf\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u6574\uff0c\u8fd9\u56de\u7f13\u89e3\u4e0a\u9762\u6ce2\u52a8\u56fe\u7684\u6570\u636e\u6ce2\u52a8\u6216\u8005\u9ad8\u9891\u6ce2\u52a8\u3002\u53e6\u5916\uff0c\u867d\u7136 alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u5230 0\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u516c\u5f0f\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5e38\u6570\u9879\u3002 \u7b2c\u4e8c\u5904\u4fee\u6539\u4e3a randIndex \u66f4\u65b0\uff0c\u8fd9\u91cc\u901a\u8fc7\u968f\u673a\u9009\u53d6\u6837\u672c\u62c9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u51cf\u5c11\u5468\u671f\u6027\u7684\u6ce2\u52a8\u3002\u8fd9\u79cd\u65b9\u6cd5\u6bcf\u6b21\u968f\u673a\u4ece\u5217\u8868\u4e2d\u9009\u51fa\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u4ece\u5217\u8868\u4e2d\u5220\u6389\u8be5\u503c\uff08\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u8fed\u4ee3\uff09\u3002 \u7a0b\u5e8f\u8fd0\u884c\u4e4b\u540e\u80fd\u770b\u5230\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\u7684\u7ed3\u679c\u56fe\u3002 \u9879\u76ee\u6848\u4f8b2: \u4ece\u759d\u6c14\u75c5\u75c7\u9884\u6d4b\u75c5\u9a6c\u7684\u6b7b\u4ea1\u7387 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/5.Logistic/logistic.py \u9879\u76ee\u6982\u8ff0 \u4f7f\u7528 Logistic \u56de\u5f52\u6765\u9884\u6d4b\u60a3\u6709\u759d\u75c5\u7684\u9a6c\u7684\u5b58\u6d3b\u95ee\u9898\u3002\u759d\u75c5\u662f\u63cf\u8ff0\u9a6c\u80c3\u80a0\u75db\u7684\u672f\u8bed\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u75c5\u4e0d\u4e00\u5b9a\u6e90\u81ea\u9a6c\u7684\u80c3\u80a0\u95ee\u9898\uff0c\u5176\u4ed6\u95ee\u9898\u4e5f\u53ef\u80fd\u5f15\u53d1\u9a6c\u759d\u75c5\u3002\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e86\u533b\u9662\u68c0\u6d4b\u9a6c\u759d\u75c5\u7684\u4e00\u4e9b\u6307\u6807\uff0c\u6709\u7684\u6307\u6807\u6bd4\u8f83\u4e3b\u89c2\uff0c\u6709\u7684\u6307\u6807\u96be\u4ee5\u6d4b\u91cf\uff0c\u4f8b\u5982\u9a6c\u7684\u75bc\u75db\u7ea7\u522b\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u7ed9\u5b9a\u6570\u636e\u6587\u4ef6 \u51c6\u5907\u6570\u636e: \u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6\u5e76\u586b\u5145\u7f3a\u5931\u503c \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u4f18\u5316\u7b97\u6cd5\uff0c\u627e\u5230\u6700\u4f73\u7684\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4e3a\u4e86\u91cf\u5316\u56de\u5f52\u7684\u6548\u679c\uff0c\u9700\u8981\u89c2\u5bdf\u9519\u8bef\u7387\u3002\u6839\u636e\u9519\u8bef\u7387\u51b3\u5b9a\u662f\u5426\u56de\u9000\u5230\u8bad\u7ec3\u9636\u6bb5\uff0c \u901a\u8fc7\u6539\u53d8\u8fed\u4ee3\u7684\u6b21\u6570\u548c\u6b65\u957f\u7684\u53c2\u6570\u6765\u5f97\u5230\u66f4\u597d\u7684\u56de\u5f52\u7cfb\u6570 \u4f7f\u7528\u7b97\u6cd5: \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6536\u96c6\u9a6c\u7684\u75c7\u72b6\u5e76\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\u5e76\u975e\u96be\u4e8b\uff0c \u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u7559\u7ed9\u5927\u5bb6\u7684\u4e00\u9053\u4e60\u9898 \u6536\u96c6\u6570\u636e: \u7ed9\u5b9a\u6570\u636e\u6587\u4ef6 \u75c5\u9a6c\u7684\u8bad\u7ec3\u6570\u636e\u5df2\u7ecf\u7ed9\u51fa\u6765\u4e86\uff0c\u5982\u4e0b\u5f62\u5f0f\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6\u4e2d: 1.000000 1.000000 39.200000 88.000000 20.000000 0.000000 0.000000 4.000000 1.000000 3.000000 4.000000 2.000000 0.000000 0.000000 0.000000 4.000000 2.000000 50.000000 85.000000 2.000000 2.000000 0.000000 2.000000 1.000000 38.300000 40.000000 24.000000 1.000000 1.000000 3.000000 1.000000 3.000000 3.000000 1.000000 0.000000 0.000000 0.000000 1.000000 1.000000 33.000000 6.700000 0.000000 0.000000 1.000000 \u51c6\u5907\u6570\u636e: \u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6\u5e76\u586b\u5145\u7f3a\u5931\u503c \u5904\u7406\u6570\u636e\u4e2d\u7684\u7f3a\u5931\u503c \u5047\u8bbe\u6709100\u4e2a\u6837\u672c\u548c20\u4e2a\u7279\u5f81\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u673a\u5668\u6536\u96c6\u56de\u6765\u7684\u3002\u82e5\u673a\u5668\u4e0a\u7684\u67d0\u4e2a\u4f20\u611f\u5668\u635f\u574f\u5bfc\u81f4\u4e00\u4e2a\u7279\u5f81\u65e0\u6548\u65f6\u8be5\u600e\u4e48\u529e\uff1f\u6b64\u65f6\u662f\u5426\u8981\u6254\u6389\u6574\u4e2a\u6570\u636e\uff1f\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53e6\u591619\u4e2a\u7279\u5f81\u600e\u4e48\u529e\uff1f \u5b83\u4eec\u662f\u5426\u8fd8\u53ef\u4ee5\u7528\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u56e0\u4e3a\u6709\u65f6\u5019\u6570\u636e\u76f8\u5f53\u6602\u8d35\uff0c\u6254\u6389\u548c\u91cd\u65b0\u83b7\u53d6\u90fd\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u505a\u6cd5\uff1a \u4f7f\u7528\u53ef\u7528\u7279\u5f81\u7684\u5747\u503c\u6765\u586b\u8865\u7f3a\u5931\u503c\uff1b \u4f7f\u7528\u7279\u6b8a\u503c\u6765\u586b\u8865\u7f3a\u5931\u503c\uff0c\u5982 -1\uff1b \u5ffd\u7565\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff1b \u4f7f\u7528\u6709\u76f8\u4f3c\u6837\u672c\u7684\u5747\u503c\u6dfb\u8865\u7f3a\u5931\u503c\uff1b * \u4f7f\u7528\u53e6\u5916\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u7f3a\u5931\u503c\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5bf9\u4e0b\u4e00\u8282\u8981\u7528\u7684\u6570\u636e\u96c6\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4f7f\u5176\u53ef\u4ee5\u987a\u5229\u5730\u4f7f\u7528\u5206\u7c7b\u7b97\u6cd5\u3002\u5728\u9884\u5904\u7406\u9700\u8981\u505a\u4e24\u4ef6\u4e8b: * \u6240\u6709\u7684\u7f3a\u5931\u503c\u5fc5\u987b\u7528\u4e00\u4e2a\u5b9e\u6570\u503c\u6765\u66ff\u6362\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684 NumPy \u6570\u636e\u7c7b\u578b\u4e0d\u5141\u8bb8\u5305\u542b\u7f3a\u5931\u503c\u3002\u6211\u4eec\u8fd9\u91cc\u9009\u62e9\u5b9e\u6570 0 \u6765\u66ff\u6362\u6240\u6709\u7f3a\u5931\u503c\uff0c\u6070\u597d\u80fd\u9002\u7528\u4e8e Logistic \u56de\u5f52\u3002\u8fd9\u6837\u505a\u7684\u76f4\u89c9\u5728\u4e8e\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5728\u66f4\u65b0\u65f6\u4e0d\u4f1a\u5f71\u54cd\u7cfb\u6570\u7684\u503c\u3002\u56de\u5f52\u7cfb\u6570\u7684\u66f4\u65b0\u516c\u5f0f\u5982\u4e0b: weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] \u5982\u679c dataMatrix \u7684\u67d0\u4e2a\u7279\u5f81\u5bf9\u5e94\u503c\u4e3a 0\uff0c\u90a3\u4e48\u8be5\u7279\u5f81\u7684\u7cfb\u6570\u5c06\u4e0d\u505a\u66f4\u65b0\uff0c\u5373: weights = weights \u53e6\u5916\uff0c\u7531\u4e8e Sigmoid(0) = 0.5 \uff0c\u5373\u5b83\u5bf9\u7ed3\u679c\u7684\u9884\u6d4b\u4e0d\u5177\u6709\u4efb\u4f55\u503e\u5411\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u4e0a\u8ff0\u505a\u6cd5\u4e5f\u4e0d\u4f1a\u5bf9\u8bef\u5dee\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002\u57fa\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u5c06\u7f3a\u5931\u503c\u7528 0 \u4ee3\u66ff\u65e2\u53ef\u4ee5\u4fdd\u7559\u73b0\u6709\u6570\u636e\uff0c\u4e5f\u4e0d\u9700\u8981\u5bf9\u4f18\u5316\u7b97\u6cd5\u8fdb\u884c\u4fee\u6539\u3002\u6b64\u5916\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u7279\u5f81\u53d6\u503c\u4e00\u822c\u4e0d\u4e3a 0\uff0c\u56e0\u6b64\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\u5b83\u4e5f\u6ee1\u8db3 \u201c\u7279\u6b8a\u503c\u201d \u8fd9\u4e2a\u8981\u6c42\u3002 \u5982\u679c\u5728\u6d4b\u8bd5\u6570\u636e\u96c6\u4e2d\u53d1\u73b0\u4e86\u4e00\u6761\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\u5df2\u7ecf\u7f3a\u5931\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u7b80\u5355\u505a\u6cd5\u662f\u5c06\u8be5\u6761\u6570\u636e\u4e22\u5f03\u3002\u8fd9\u662f\u56e0\u4e3a\u7c7b\u522b\u6807\u7b7e\u4e0e\u7279\u5f81\u4e0d\u540c\uff0c\u5f88\u96be\u786e\u5b9a\u91c7\u7528\u67d0\u4e2a\u5408\u9002\u7684\u503c\u6765\u66ff\u6362\u3002\u91c7\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b\u65f6\u8fd9\u79cd\u505a\u6cd5\u662f\u5408\u7406\u7684\uff0c\u800c\u5982\u679c\u91c7\u7528\u7c7b\u4f3c kNN \u7684\u65b9\u6cd5\uff0c\u5219\u4fdd\u7559\u8be5\u6761\u6570\u636e\u663e\u5f97\u66f4\u52a0\u5408\u7406\u3002 \u539f\u59cb\u7684\u6570\u636e\u96c6\u7ecf\u8fc7\u9884\u5904\u7406\u540e\uff0c\u4fdd\u5b58\u6210\u4e24\u4e2a\u6587\u4ef6: horseColicTest.txt \u548c horseColicTraining.txt \u3002 \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u5c06\u6570\u636e\u4f7f\u7528 MatPlotlib \u6253\u5370\u51fa\u6765\uff0c\u89c2\u5bdf\u6570\u636e\u662f\u5426\u662f\u6211\u4eec\u60f3\u8981\u7684\u683c\u5f0f \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u4f18\u5316\u7b97\u6cd5\uff0c\u627e\u5230\u6700\u4f73\u7684\u7cfb\u6570 \u4e0b\u9762\u7ed9\u51fa \u539f\u59cb\u7684\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u6539\u8fdb\u7248\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5 \u7684\u4ee3\u7801: # \u6b63\u5e38\u7684\u5904\u7406\u65b9\u6848 # \u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570==> dataMatIn \u662f\u4e00\u4e2a2\u7ef4NumPy\u6570\u7ec4\uff0c\u6bcf\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u4e2a\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u6bcf\u884c\u5219\u4ee3\u8868\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u3002 # \u7b2c\u4e8c\u4e2a\u53c2\u6570==> classLabels \u662f\u7c7b\u522b\u6807\u7b7e\uff0c\u5b83\u662f\u4e00\u4e2a 1*100 \u7684\u884c\u5411\u91cf\u3002\u4e3a\u4e86\u4fbf\u4e8e\u77e9\u9635\u8ba1\u7b97\uff0c\u9700\u8981\u5c06\u8be5\u884c\u5411\u91cf\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\uff0c\u505a\u6cd5\u662f\u5c06\u539f\u5411\u91cf\u8f6c\u7f6e\uff0c\u518d\u5c06\u5b83\u8d4b\u503c\u7ed9labelMat\u3002 def gradAscent(dataMatIn, classLabels): # \u8f6c\u5316\u4e3a\u77e9\u9635[[1,1,2],[1,1,2]....] dataMatrix = mat(dataMatIn) # \u8f6c\u6362\u4e3a NumPy \u77e9\u9635 # \u8f6c\u5316\u4e3a\u77e9\u9635[[0,1,0,1,0,1.....]]\uff0c\u5e76\u8f6c\u5236[[0],[1],[0].....] # transpose() \u884c\u5217\u8f6c\u7f6e\u51fd\u6570 # \u5c06\u884c\u5411\u91cf\u8f6c\u5316\u4e3a\u5217\u5411\u91cf => \u77e9\u9635\u7684\u8f6c\u7f6e labelMat = mat(classLabels).transpose() # \u9996\u5148\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a NumPy \u77e9\u9635\uff0c\u7136\u540e\u518d\u5c06\u884c\u5411\u91cf\u8f6c\u7f6e\u4e3a\u5217\u5411\u91cf # m->\u6570\u636e\u91cf\uff0c\u6837\u672c\u6570 n->\u7279\u5f81\u6570 m,n = shape(dataMatrix) # print m, n, '__'*10, shape(dataMatrix.transpose()), '__'*100 # alpha\u4ee3\u8868\u5411\u76ee\u6807\u79fb\u52a8\u7684\u6b65\u957f alpha = 0.001 # \u8fed\u4ee3\u6b21\u6570 maxCycles = 500 # \u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u6b64\u5904n\u4e3a3 -> [[1],[1],[1]] # weights \u4ee3\u8868\u56de\u5f52\u7cfb\u6570\uff0c \u6b64\u5904\u7684 ones((n,1)) \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u6570\u5168\u90e8\u90fd\u662f 1 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations # m*3 \u7684\u77e9\u9635 * 3*1 \u7684\u5355\u4f4d\u77e9\u9635 \uff1d m*1\u7684\u77e9\u9635 # \u90a3\u4e48\u4e58\u4e0a\u5355\u4f4d\u77e9\u9635\u7684\u610f\u4e49\uff0c\u5c31\u4ee3\u8868\uff1a\u901a\u8fc7\u516c\u5f0f\u5f97\u5230\u7684\u7406\u8bba\u503c # \u53c2\u8003\u5730\u5740\uff1a \u77e9\u9635\u4e58\u6cd5\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f https://www.zhihu.com/question/21351965/answer/31050145 # print 'dataMatrix====', dataMatrix # print 'weights====', weights # n*3 * 3*1 = n*1 h = sigmoid(dataMatrix*weights) # \u77e9\u9635\u4e58\u6cd5 # print 'hhhhhhh====', h # labelMat\u662f\u5b9e\u9645\u503c error = (labelMat - h) # \u5411\u91cf\u76f8\u51cf # 0.001* (3*m)*(m*1) \u8868\u793a\u5728\u6bcf\u4e00\u4e2a\u5217\u4e0a\u7684\u4e00\u4e2a\u8bef\u5dee\u60c5\u51b5\uff0c\u6700\u540e\u5f97\u51fa x1,x2,xn\u7684\u7cfb\u6570\u7684\u504f\u79fb\u91cf weights = weights + alpha * dataMatrix.transpose() * error # \u77e9\u9635\u4e58\u6cd5\uff0c\u6700\u540e\u5f97\u5230\u56de\u5f52\u7cfb\u6570 return array(weights) # \u968f\u673a\u68af\u5ea6\u4e0a\u5347 # \u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u96c6\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u590d\u6742\u90fd\u8f83\u9ad8 # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u4e00\u6b21\u53ea\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570 def stocGradAscent0(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 # n*1\u7684\u77e9\u9635 # \u51fd\u6570ones\u521b\u5efa\u4e00\u4e2a\u51681\u7684\u6570\u7ec4 weights = ones(n) # \u521d\u59cb\u5316\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u5168\u90e8\u4e3a 1 for i in range(m): # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn,\u6b64\u5904\u6c42\u51fa\u7684 h \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635 h = sigmoid(sum(dataMatrix[i]*weights)) # print 'dataMatrix[i]===', dataMatrix[i] # \u8ba1\u7b97\u771f\u5b9e\u7c7b\u522b\u4e0e\u9884\u6d4b\u7c7b\u522b\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u7136\u540e\u6309\u7167\u8be5\u5dee\u503c\u8c03\u6574\u56de\u5f52\u7cfb\u6570 error = classLabels[i] - h # 0.01*(1*1)*(1*n) print weights, \"*\"*10 , dataMatrix[i], \"*\"*10 , error weights = weights + alpha * error * dataMatrix[i] return weights # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff08\u968f\u673a\u5316\uff09 def stocGradAscent1(dataMatrix, classLabels, numIter=150): m,n = shape(dataMatrix) weights = ones(n) # \u521b\u5efa\u4e0e\u5217\u6570\u76f8\u540c\u7684\u77e9\u9635\u7684\u7cfb\u6570\u77e9\u9635\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u662f1 # \u968f\u673a\u68af\u5ea6, \u5faa\u73af150,\u89c2\u5bdf\u662f\u5426\u6536\u655b for j in range(numIter): # [0, 1, 2 .. m-1] dataIndex = range(m) for i in range(m): # i\u548cj\u7684\u4e0d\u65ad\u589e\u5927\uff0c\u5bfc\u81f4alpha\u7684\u503c\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u4e3a0 alpha = 4/(1.0+j+i)+0.0001 # alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u52300\uff0c\u56e0\u4e3a\u540e\u8fb9\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570\u98790.0001 # \u968f\u673a\u4ea7\u751f\u4e00\u4e2a 0\uff5elen()\u4e4b\u95f4\u7684\u4e00\u4e2a\u503c # random.uniform(x, y) \u65b9\u6cd5\u5c06\u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185,x\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\uff0cy\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\u3002 randIndex = int(random.uniform(0,len(dataIndex))) # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn h = sigmoid(sum(dataMatrix[dataIndex[randIndex]]*weights)) error = classLabels[dataIndex[randIndex]] - h # print weights, '__h=%s' % h, '__'*20, alpha, '__'*20, error, '__'*20, dataMatrix[randIndex] weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] del(dataIndex[randIndex]) return weights \u6d4b\u8bd5\u7b97\u6cd5: \u4e3a\u4e86\u91cf\u5316\u56de\u5f52\u7684\u6548\u679c\uff0c\u9700\u8981\u89c2\u5bdf\u9519\u8bef\u7387\u3002\u6839\u636e\u9519\u8bef\u7387\u51b3\u5b9a\u662f\u5426\u56de\u9000\u5230\u8bad\u7ec3\u9636\u6bb5\uff0c\u901a\u8fc7\u6539\u53d8\u8fed\u4ee3\u7684\u6b21\u6570\u548c\u6b65\u957f\u7684\u53c2\u6570\u6765\u5f97\u5230\u66f4\u597d\u7684\u56de\u5f52\u7cfb\u6570 Logistic \u56de\u5f52\u5206\u7c7b\u51fd\u6570 # \u5206\u7c7b\u51fd\u6570\uff0c\u6839\u636e\u56de\u5f52\u7cfb\u6570\u548c\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97 Sigmoid\u7684\u503c def classifyVector(inX, weights): ''' Desc: \u6700\u7ec8\u7684\u5206\u7c7b\u51fd\u6570\uff0c\u6839\u636e\u56de\u5f52\u7cfb\u6570\u548c\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97 Sigmoid \u7684\u503c\uff0c\u5927\u4e8e0.5\u51fd\u6570\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0 Args: inX -- \u7279\u5f81\u5411\u91cf\uff0cfeatures weights -- \u6839\u636e\u68af\u5ea6\u4e0b\u964d/\u968f\u673a\u68af\u5ea6\u4e0b\u964d \u8ba1\u7b97\u5f97\u5230\u7684\u56de\u5f52\u7cfb\u6570 Returns: \u5982\u679c prob \u8ba1\u7b97\u5927\u4e8e 0.5 \u51fd\u6570\u8fd4\u56de 1 \u5426\u5219\u8fd4\u56de 0 ''' prob = sigmoid(sum(inX*weights)) if prob > 0.5: return 1.0 else: return 0.0 # \u6253\u5f00\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6,\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406 def colicTest(): ''' Desc: \u6253\u5f00\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406 Args: None Returns: errorRate -- \u5206\u7c7b\u9519\u8bef\u7387 ''' frTrain = open('db/5.Logistic/horseColicTraining.txt') frTest = open('db/5.Logistic/horseColicTest.txt') trainingSet = [] trainingLabels = [] # \u89e3\u6790\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u7279\u5f81\u548cLabels # trainingSet \u4e2d\u5b58\u50a8\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u7279\u5f81\uff0ctrainingLabels \u5b58\u50a8\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e for line in frTrain.readlines(): currLine = line.strip().split('\\t') lineArr = [] for i in range(21): lineArr.append(float(currLine[i])) trainingSet.append(lineArr) trainingLabels.append(float(currLine[21])) # \u4f7f\u7528 \u6539\u8fdb\u540e\u7684 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5 \u6c42\u5f97\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u7684\u6700\u4f73\u56de\u5f52\u7cfb\u6570 trainWeights trainWeights = stocGradAscent1(array(trainingSet), trainingLabels, 500) errorCount = 0 numTestVec = 0.0 # \u8bfb\u53d6 \u6d4b\u8bd5\u6570\u636e\u96c6 \u8fdb\u884c\u6d4b\u8bd5\uff0c\u8ba1\u7b97\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u6761\u6570\u548c\u6700\u7ec8\u7684\u9519\u8bef\u7387 for line in frTest.readlines(): numTestVec += 1.0 currLine = line.strip().split('\\t') lineArr = [] for i in range(21): lineArr.append(float(currLine[i])) if int(classifyVector(array(lineArr), trainWeights)) != int(currLine[21]): errorCount += 1 errorRate = (float(errorCount) / numTestVec) print \"the error rate of this test is: %f\" % errorRate return errorRate # \u8c03\u7528 colicTest() 10\u6b21\u5e76\u6c42\u7ed3\u679c\u7684\u5e73\u5747\u503c def multiTest(): numTests = 10 errorSum = 0.0 for k in range(numTests): errorSum += colicTest() print \"after %d iterations the average error rate is: %f\" % (numTests, errorSum/float(numTests)) \u4f7f\u7528\u7b97\u6cd5: \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6536\u96c6\u9a6c\u7684\u75c7\u72b6\u5e76\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\u5e76\u975e\u96be\u4e8b\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u7559\u7ed9\u5927\u5bb6\u7684\u4e00\u9053\u4e60\u9898 \u989d\u5916\u5185\u5bb9(\u53ef\u9009\u8bfb) \u5728\u4e0a\u6587\u4e2d\uff0c\u5f53Sigmoid\u51fd\u6570\u5927\u4e8e 0.5 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.5 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002\u5176\u5b9e0.5\u4e5f\u662f\u53ef\u4ee5\u6539\u52a8\u7684\u3002 \u6bd4\u5982\u5927\u4e8e 0.9 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.9 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002 Logistic\u56de\u5f52 \u548c \u6700\u5927\u71b5\u6a21\u578b Logistic\u56de\u5f52\u548c\u6700\u5927\u71b5\u6a21\u578b \u90fd\u5c5e\u4e8e\u5bf9\u6570\u7ebf\u6027\u6a21\u578b \uff08log linear model\uff09\u3002 \u5f53\u7c7b\u6807\u7b7e\uff08class label\uff09\u53ea\u6709\u4e24\u4e2a\u7684\u65f6\u5019\uff0c\u6700\u5927\u71b5\u6a21\u578b\u5c31\u662f logistic \u56de\u5f52\u6a21\u578b\u3002 \u5b66\u4e60\u5b83\u4eec\u7684\u6a21\u578b\u4e00\u822c\u91c7\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6216\u8005\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u3002Logistic \u56de\u5f52\u548c\u6700\u5927\u71b5\u6a21\u578b\u5b66\u4e60\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u65e0\u7ea6\u675f\u6700\u4f18\u5316\u95ee\u9898\u3002\uff08\u5173\u4e8e\u6700\u5927\u71b5\u6a21\u578b\uff0c\u53ef\u4ee5\u9605\u8bfb\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b \u7b2c\u516d\u7ae0\u3002\uff09 \u5176\u4ed6\u7b97\u6cd5 \u9664\u4e86\u68af\u5ea6\u4e0b\u964d\uff0c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff0c\u8fd8\u6709Conjugate Gradient\uff0cBFGS\uff0cL-BFGS\uff0c\u4ed6\u4eec\u4e0d\u9700\u8981\u6307\u5b9aalpha\u503c\uff08\u6b65\u957f\uff09\uff0c\u800c\u4e14\u6bd4\u68af\u5ea6\u4e0b\u964d\u66f4\u5feb\uff0c\u5728\u73b0\u5b9e\u4e2d\u5e94\u7528\u7684\u4e5f\u6bd4\u8f83\u591a\u3002 \u5f53\u7136\u8fd9\u4e9b\u7b97\u6cd5\u76f8\u6bd4\u968f\u673a\u68af\u5ea6\u8981\u590d\u6742\u3002 \u7efc\u4e0a\u8fd9\u4e9b\u7b97\u6cd5\u90fd\u6709\u4e00\u4e2a\u5171\u901a\u7684\u7f3a\u70b9\u5c31\u662f\u4ed6\u4eec\u90fd\u662f\u4e0d\u65ad\u53bb\u903c\u8fd1\u771f\u5b9e\u503c\uff0c\u6c38\u8fdc\u53ea\u662f\u4e00\u4e2a\u771f\u5b9e\u503c\u7684\u8fd1\u4f3c\u503c\u800c\u5df2\u3002 \u591a\u6807\u7b7e\u5206\u7c7b \u903b\u8f91\u56de\u5f52\u4e5f\u53ef\u4ee5\u7528\u4f5c\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u3002 \u601d\u8def\u5982\u4e0b\uff1a \u5047\u8bbe\u6211\u4eec\u6807\u7b7eA\u4e2d\u6709a0,a1,a2....an\u4e2a\u6807\u7b7e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6807\u7b7e ai (ai \u662f\u6807\u7b7eA\u4e4b\u4e00)\uff0c\u6211\u4eec\u8bad\u7ec3\u4e00\u4e2a\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u3002 \u5373\uff0c\u8bad\u7ec3\u8be5\u6807\u7b7e\u7684\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u7684\u65f6\u5019\uff0c\u5c06ai\u770b\u4f5c\u4e00\u7c7b\u6807\u7b7e\uff0c\u975eai\u7684\u6240\u6709\u6807\u7b7e\u770b\u4f5c\u4e00\u7c7b\u6807\u7b7e\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\u6574\u4e2a\u6570\u636e\u96c6\u91cc\u9762\u53ea\u6709\u4e24\u7c7b\u6807\u7b7e\uff1aai \u548c\u5176\u4ed6\u3002 \u5269\u4e0b\u6b65\u9aa4\u5c31\u8ddf\u6211\u4eec\u8bad\u7ec3\u6b63\u5e38\u7684\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u4e00\u6837\u4e86\u3002 \u6d4b\u8bd5\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c06\u67e5\u8be2\u70b9\u5957\u7528\u5728\u6bcf\u4e2a\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u4e2d\u7684Sigmoid \u51fd\u6570\uff0c\u53d6\u503c\u6700\u9ad8\u7684\u5bf9\u5e94\u6807\u7b7e\u4e3a\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u3002 \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c5\u7ae0_\u903b\u8f91\u56de\u5f52"},{"location":"ml/5.Logistic/#5-logistic","text":"","title":"\u7b2c5\u7ae0 Logistic\u56de\u5f52"},{"location":"ml/5.Logistic/#logistic","text":"Logistic \u56de\u5f52 \u6216\u8005\u53eb\u903b\u8f91\u56de\u5f52 \u867d\u7136\u540d\u5b57\u6709\u56de\u5f52\uff0c\u4f46\u662f\u5b83\u662f\u7528\u6765\u505a\u5206\u7c7b\u7684\u3002\u5176\u4e3b\u8981\u601d\u60f3\u662f: \u6839\u636e\u73b0\u6709\u6570\u636e\u5bf9\u5206\u7c7b\u8fb9\u754c\u7ebf(Decision Boundary)\u5efa\u7acb\u56de\u5f52\u516c\u5f0f\uff0c\u4ee5\u6b64\u8fdb\u884c\u5206\u7c7b\u3002","title":"Logistic \u56de\u5f52 \u6982\u8ff0"},{"location":"ml/5.Logistic/#_1","text":"","title":"\u987b\u77e5\u6982\u5ff5"},{"location":"ml/5.Logistic/#sigmoid","text":"","title":"Sigmoid \u51fd\u6570"},{"location":"ml/5.Logistic/#_2","text":"\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e9b\u6570\u636e\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u6761\u76f4\u7ebf\u5bf9\u8fd9\u4e9b\u70b9\u8fdb\u884c\u62df\u5408\uff08\u8fd9\u6761\u76f4\u7ebf\u79f0\u4e3a\u6700\u4f73\u62df\u5408\u76f4\u7ebf\uff09\uff0c\u8fd9\u4e2a\u62df\u5408\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u56de\u5f52\u3002\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230\u5bf9\u8fd9\u4e9b\u70b9\u7684\u62df\u5408\u76f4\u7ebf\u65b9\u7a0b\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u8fd9\u4e2a\u56de\u5f52\u65b9\u7a0b\uff0c\u600e\u4e48\u8fdb\u884c\u5206\u7c7b\u5462\uff1f\u8bf7\u770b\u4e0b\u9762\u3002","title":"\u56de\u5f52 \u6982\u5ff5"},{"location":"ml/5.Logistic/#_3","text":"\u6211\u4eec\u60f3\u8981\u7684\u51fd\u6570\u5e94\u8be5\u662f: \u80fd\u63a5\u53d7\u6240\u6709\u7684\u8f93\u5165\u7136\u540e\u9884\u6d4b\u51fa\u7c7b\u522b\u3002\u4f8b\u5982\uff0c\u5728\u4e24\u4e2a\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0a\u8ff0\u51fd\u6570\u8f93\u51fa 0 \u6216 1.\u6216\u8bb8\u4f60\u4e4b\u524d\u63a5\u89e6\u8fc7\u5177\u6709\u8fd9\u79cd\u6027\u8d28\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u79f0\u4e3a \u6d77\u7ef4\u585e\u5f97\u9636\u8dc3\u51fd\u6570(Heaviside step function) \uff0c\u6216\u8005\u76f4\u63a5\u79f0\u4e3a \u5355\u4f4d\u9636\u8dc3\u51fd\u6570 \u3002\u7136\u800c\uff0c\u6d77\u7ef4\u585e\u5f97\u9636\u8dc3\u51fd\u6570\u7684\u95ee\u9898\u5728\u4e8e: \u8be5\u51fd\u6570\u5728\u8df3\u8dc3\u70b9\u4e0a\u4ece 0 \u77ac\u95f4\u8df3\u8dc3\u5230 1\uff0c\u8fd9\u4e2a\u77ac\u95f4\u8df3\u8dc3\u8fc7\u7a0b\u6709\u65f6\u5f88\u96be\u5904\u7406\u3002\u5e78\u597d\uff0c\u53e6\u4e00\u4e2a\u51fd\u6570\u4e5f\u6709\u7c7b\u4f3c\u7684\u6027\u8d28\uff08\u53ef\u4ee5\u8f93\u51fa 0 \u6216\u8005 1 \u7684\u6027\u8d28\uff09\uff0c\u4e14\u6570\u5b66\u4e0a\u66f4\u6613\u5904\u7406\uff0c\u8fd9\u5c31\u662f Sigmoid \u51fd\u6570\u3002 Sigmoid \u51fd\u6570\u5177\u4f53\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b: \u4e0b\u56fe\u7ed9\u51fa\u4e86 Sigmoid \u51fd\u6570\u5728\u4e0d\u540c\u5750\u6807\u5c3a\u5ea6\u4e0b\u7684\u4e24\u6761\u66f2\u7ebf\u56fe\u3002\u5f53 x \u4e3a 0 \u65f6\uff0cSigmoid \u51fd\u6570\u503c\u4e3a 0.5 \u3002\u968f\u7740 x \u7684\u589e\u5927\uff0c\u5bf9\u5e94\u7684 Sigmoid \u503c\u5c06\u903c\u8fd1\u4e8e 1 ; \u800c\u968f\u7740 x \u7684\u51cf\u5c0f\uff0c Sigmoid \u503c\u5c06\u903c\u8fd1\u4e8e 0 \u3002\u5982\u679c\u6a2a\u5750\u6807\u523b\u5ea6\u8db3\u591f\u5927\uff0c Sigmoid \u51fd\u6570\u770b\u8d77\u6765\u5f88\u50cf\u4e00\u4e2a\u9636\u8dc3\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u5b9e\u73b0 Logistic \u56de\u5f52\u5206\u7c7b\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7279\u5f81\u4e0a\u90fd\u4e58\u4ee5\u4e00\u4e2a\u56de\u5f52\u7cfb\u6570\uff08\u5982\u4e0b\u516c\u5f0f\u6240\u793a\uff09\uff0c\u7136\u540e\u628a\u6240\u6709\u7ed3\u679c\u503c\u76f8\u52a0\uff0c\u5c06\u8fd9\u4e2a\u603b\u548c\u4ee3\u5165 Sigmoid \u51fd\u6570\u4e2d\uff0c\u8fdb\u800c\u5f97\u5230\u4e00\u4e2a\u8303\u56f4\u5728 0~1 \u4e4b\u95f4\u7684\u6570\u503c\u3002\u4efb\u4f55\u5927\u4e8e 0.5 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.5 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002\u6240\u4ee5\uff0cLogistic \u56de\u5f52\u4e5f\u662f\u4e00\u79cd\u6982\u7387\u4f30\u8ba1\uff0c\u6bd4\u5982\u8fd9\u91ccSigmoid \u51fd\u6570\u5f97\u51fa\u7684\u503c\u4e3a0.5\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ed9\u5b9a\u6570\u636e\u548c\u53c2\u6570\uff0c\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\u7684\u6982\u7387\u4e3a0.5\u3002\u60f3\u5bf9Sigmoid \u51fd\u6570\u6709\u66f4\u591a\u4e86\u89e3\uff0c\u53ef\u4ee5\u70b9\u5f00 \u6b64\u94fe\u63a5 \u8ddf\u6b64\u51fd\u6570\u4e92\u52a8\u3002","title":"\u4e8c\u503c\u578b\u8f93\u51fa\u5206\u7c7b\u51fd\u6570"},{"location":"ml/5.Logistic/#_4","text":"Sigmoid \u51fd\u6570\u7684\u8f93\u5165\u8bb0\u4e3a z \uff0c\u7531\u4e0b\u9762\u516c\u5f0f\u5f97\u5230: \u5982\u679c\u91c7\u7528\u5411\u91cf\u7684\u5199\u6cd5\uff0c\u4e0a\u8ff0\u516c\u5f0f\u53ef\u4ee5\u5199\u6210 \uff0c\u5b83\u8868\u793a\u5c06\u8fd9\u4e24\u4e2a\u6570\u503c\u5411\u91cf\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\u7136\u540e\u5168\u90e8\u52a0\u8d77\u6765\u5373\u5f97\u5230 z \u503c\u3002\u5176\u4e2d\u7684\u5411\u91cf x \u662f\u5206\u7c7b\u5668\u7684\u8f93\u5165\u6570\u636e\uff0c\u5411\u91cf w \u4e5f\u5c31\u662f\u6211\u4eec\u8981\u627e\u5230\u7684\u6700\u4f73\u53c2\u6570\uff08\u7cfb\u6570\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5206\u7c7b\u5668\u5c3d\u53ef\u80fd\u5730\u7cbe\u786e\u3002\u4e3a\u4e86\u5bfb\u627e\u8be5\u6700\u4f73\u53c2\u6570\uff0c\u9700\u8981\u7528\u5230\u6700\u4f18\u5316\u7406\u8bba\u7684\u4e00\u4e9b\u77e5\u8bc6\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u2014\u2014\u68af\u5ea6\u4e0a\u5347\u6cd5\uff08Gradient Ascent\uff09\u3002","title":"\u57fa\u4e8e\u6700\u4f18\u5316\u65b9\u6cd5\u7684\u56de\u5f52\u7cfb\u6570\u786e\u5b9a"},{"location":"ml/5.Logistic/#_5","text":"","title":"\u68af\u5ea6\u4e0a\u5347\u6cd5"},{"location":"ml/5.Logistic/#_6","text":"\u9700\u8981\u4e00\u70b9\u70b9\u5411\u91cf\u65b9\u9762\u7684\u6570\u5b66\u77e5\u8bc6 \u5411\u91cf = \u503c + \u65b9\u5411 \u68af\u5ea6 = \u5411\u91cf \u68af\u5ea6 = \u68af\u5ea6\u503c + \u68af\u5ea6\u65b9\u5411","title":"\u68af\u5ea6\u7684\u4ecb\u7ecd"},{"location":"ml/5.Logistic/#_7","text":"\u8981\u627e\u5230\u67d0\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u6cbf\u7740\u8be5\u51fd\u6570\u7684\u68af\u5ea6\u65b9\u5411\u63a2\u5bfb\u3002\u5982\u679c\u68af\u5ea6\u8bb0\u4e3a \u25bd \uff0c\u5219\u51fd\u6570 f(x, y) \u7684\u68af\u5ea6\u7531\u4e0b\u5f0f\u8868\u793a: \u8fd9\u4e2a\u68af\u5ea6\u610f\u5473\u7740\u8981\u6cbf x \u7684\u65b9\u5411\u79fb\u52a8 \uff0c\u6cbf y \u7684\u65b9\u5411\u79fb\u52a8 \u3002\u5176\u4e2d\uff0c\u51fd\u6570f(x, y) \u5fc5\u987b\u8981\u5728\u5f85\u8ba1\u7b97\u7684\u70b9\u4e0a\u6709\u5b9a\u4e49\u5e76\u4e14\u53ef\u5fae\u3002\u4e0b\u56fe\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \u4e0a\u56fe\u5c55\u793a\u7684\uff0c\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5230\u8fbe\u6bcf\u4e2a\u70b9\u540e\u90fd\u4f1a\u91cd\u65b0\u4f30\u8ba1\u79fb\u52a8\u7684\u65b9\u5411\u3002\u4ece P0 \u5f00\u59cb\uff0c\u8ba1\u7b97\u5b8c\u8be5\u70b9\u7684\u68af\u5ea6\uff0c\u51fd\u6570\u5c31\u6839\u636e\u68af\u5ea6\u79fb\u52a8\u5230\u4e0b\u4e00\u70b9 P1\u3002\u5728 P1 \u70b9\uff0c\u68af\u5ea6\u518d\u6b21\u88ab\u91cd\u65b0\u8ba1\u7b97\uff0c\u5e76\u6cbf\u7740\u65b0\u7684\u68af\u5ea6\u65b9\u5411\u79fb\u52a8\u5230 P2 \u3002\u5982\u6b64\u5faa\u73af\u8fed\u4ee3\uff0c\u76f4\u5230\u6ee1\u8db3\u505c\u6b62\u6761\u4ef6\u3002\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u68af\u5ea6\u7b97\u5b50\u603b\u662f\u4fdd\u8bc1\u6211\u4eec\u80fd\u9009\u53d6\u5230\u6700\u4f73\u7684\u79fb\u52a8\u65b9\u5411\u3002 \u4e0a\u56fe\u4e2d\u7684\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u6cbf\u68af\u5ea6\u65b9\u5411\u79fb\u52a8\u4e86\u4e00\u6b65\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u68af\u5ea6\u7b97\u5b50\u603b\u662f\u6307\u5411\u51fd\u6570\u503c\u589e\u957f\u6700\u5feb\u7684\u65b9\u5411\u3002\u8fd9\u91cc\u6240\u8bf4\u7684\u662f\u79fb\u52a8\u65b9\u5411\uff0c\u800c\u672a\u63d0\u5230\u79fb\u52a8\u91cf\u7684\u5927\u5c0f\u3002\u8be5\u91cf\u503c\u79f0\u4e3a\u6b65\u957f\uff0c\u8bb0\u4f5c \u03b1 \u3002\u7528\u5411\u91cf\u6765\u8868\u793a\u7684\u8bdd\uff0c\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u7684\u8fed\u4ee3\u516c\u5f0f\u5982\u4e0b: \u8be5\u516c\u5f0f\u5c06\u4e00\u76f4\u88ab\u8fed\u4ee3\u6267\u884c\uff0c\u76f4\u81f3\u8fbe\u5230\u67d0\u4e2a\u505c\u6b62\u6761\u4ef6\u4e3a\u6b62\uff0c\u6bd4\u5982\u8fed\u4ee3\u6b21\u6570\u8fbe\u5230\u67d0\u4e2a\u6307\u5b9a\u503c\u6216\u8005\u7b97\u6cd5\u8fbe\u5230\u67d0\u4e2a\u53ef\u4ee5\u5141\u8bb8\u7684\u8bef\u5dee\u8303\u56f4\u3002 \u4ecb\u7ecd\u4e00\u4e0b\u51e0\u4e2a\u76f8\u5173\u7684\u6982\u5ff5\uff1a \u4f8b\u5982\uff1ay = w0 + w1x1 + w2x2 + ... + wnxn \u68af\u5ea6\uff1a\u53c2\u8003\u4e0a\u56fe\u7684\u4f8b\u5b50\uff0c\u4e8c\u7ef4\u56fe\u50cf\uff0cx\u65b9\u5411\u4ee3\u8868\u7b2c\u4e00\u4e2a\u7cfb\u6570\uff0c\u4e5f\u5c31\u662f w1\uff0cy\u65b9\u5411\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u7cfb\u6570\u4e5f\u5c31\u662f w2\uff0c\u8fd9\u6837\u7684\u5411\u91cf\u5c31\u662f\u68af\u5ea6\u3002 \u03b1\uff1a\u4e0a\u9762\u7684\u68af\u5ea6\u7b97\u6cd5\u7684\u8fed\u4ee3\u516c\u5f0f\u4e2d\u7684\u963f\u5c14\u6cd5\uff0c\u8fd9\u4e2a\u4ee3\u8868\u7684\u662f\u79fb\u52a8\u6b65\u957f\uff08step length\uff09\u3002\u79fb\u52a8\u6b65\u957f\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u7684\u62df\u5408\u7a0b\u5ea6\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u5c31\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u66f4\u6539\u79fb\u52a8\u6b65\u957f\u3002 \u6b65\u957f\u901a\u4fd7\u7684\u7406\u89e3\uff0c100\u7c73\uff0c\u5982\u679c\u6211\u4e00\u6b65\u8d7010\u7c73\uff0c\u6211\u9700\u8981\u8d7010\u6b65\uff1b\u5982\u679c\u4e00\u6b65\u8d7020\u7c73\uff0c\u6211\u53ea\u9700\u8981\u8d705\u6b65\u3002\u8fd9\u91cc\u7684\u4e00\u6b65\u8d70\u591a\u5c11\u7c73\u5c31\u662f\u6b65\u957f\u7684\u610f\u601d\u3002 \u25bdf(w)\uff1a\u4ee3\u8868\u6cbf\u7740\u68af\u5ea6\u53d8\u5316\u7684\u65b9\u5411\u3002 \u95ee\uff1a\u6709\u4eba\u4f1a\u597d\u5947\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4e66\u7c4d\u4e0a\u8bf4\u7684\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\uff08Gradient Decent\uff09? \u7b54\uff1a \u5176\u5b9e\u8fd9\u4e2a\u4e24\u4e2a\u65b9\u6cd5\u5728\u6b64\u60c5\u51b5\u4e0b\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u3002\u5173\u952e\u5728\u4e8e\u4ee3\u4ef7\u51fd\u6570\uff08cost function\uff09\u6216\u8005\u53eb\u76ee\u6807\u51fd\u6570\uff08objective function\uff09\u3002\u5982\u679c\u76ee\u6807\u51fd\u6570\u662f\u635f\u5931\u51fd\u6570\uff0c\u90a3\u5c31\u662f\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u6765\u6c42\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u7528\u68af\u5ea6\u4e0b\u964d\u3002 \u5982\u679c\u76ee\u6807\u51fd\u6570\u662f\u4f3c\u7136\u51fd\u6570\uff08Likelihood function\uff09\uff0c\u5c31\u662f\u8981\u6700\u5927\u5316\u4f3c\u7136\u51fd\u6570\u6765\u6c42\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u90a3\u5c31\u7528\u68af\u5ea6\u4e0a\u5347\u3002\u5728\u903b\u8f91\u56de\u5f52\u4e2d\uff0c \u635f\u5931\u51fd\u6570\u548c\u4f3c\u7136\u51fd\u6570\u65e0\u975e\u5c31\u662f\u4e92\u4e3a\u6b63\u8d1f\u5173\u7cfb\u3002 \u53ea\u9700\u8981\u5728\u8fed\u4ee3\u516c\u5f0f\u4e2d\u7684\u52a0\u6cd5\u53d8\u6210\u51cf\u6cd5\u3002\u56e0\u6b64\uff0c\u5bf9\u5e94\u7684\u516c\u5f0f\u53ef\u4ee5\u5199\u6210 \u5c40\u90e8\u6700\u4f18\u73b0\u8c61 \uff08Local Optima\uff09 \u4e0a\u56fe\u8868\u793a\u53c2\u6570 \u03b8 \u4e0e\u8bef\u5dee\u51fd\u6570 J(\u03b8) \u7684\u5173\u7cfb\u56fe (\u8fd9\u91cc\u7684\u8bef\u5dee\u51fd\u6570\u662f\u635f\u5931\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570)\uff0c\u7ea2\u8272\u7684\u90e8\u5206\u662f\u8868\u793a J(\u03b8) \u6709\u7740\u6bd4\u8f83\u9ad8\u7684\u53d6\u503c\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\uff0c\u80fd\u591f\u8ba9 J(\u03b8) \u7684\u503c\u5c3d\u91cf\u7684\u4f4e\u3002\u4e5f\u5c31\u662f\u6df1\u84dd\u8272\u7684\u90e8\u5206\u3002\u03b80\uff0c\u03b81 \u8868\u793a \u03b8 \u5411\u91cf\u7684\u4e24\u4e2a\u7ef4\u5ea6\uff08\u6b64\u5904\u7684\u03b80\uff0c\u03b81\u662fx0\u548cx1\u7684\u7cfb\u6570\uff0c\u4e5f\u5bf9\u5e94\u7684\u662f\u4e0a\u6587w0\u548cw1\uff09\u3002 \u53ef\u80fd\u68af\u5ea6\u4e0b\u964d\u7684\u6700\u7ec8\u70b9\u5e76\u975e\u662f\u5168\u5c40\u6700\u5c0f\u70b9\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5c40\u90e8\u6700\u5c0f\u70b9\uff0c\u5982\u6211\u4eec\u4e0a\u56fe\u4e2d\u7684\u53f3\u8fb9\u7684\u68af\u5ea6\u4e0b\u964d\u66f2\u7ebf\uff0c\u63cf\u8ff0\u7684\u662f\u6700\u7ec8\u5230\u8fbe\u4e00\u4e2a\u5c40\u90e8\u6700\u5c0f\u70b9\uff0c\u8fd9\u662f\u6211\u4eec\u91cd\u65b0\u9009\u62e9\u4e86\u4e00\u4e2a\u521d\u59cb\u70b9\u5f97\u5230\u7684\u3002 \u770b\u6765\u6211\u4eec\u8fd9\u4e2a\u7b97\u6cd5\u5c06\u4f1a\u5728\u5f88\u5927\u7684\u7a0b\u5ea6\u4e0a\u88ab\u521d\u59cb\u70b9\u7684\u9009\u62e9\u5f71\u54cd\u800c\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u70b9\u3002","title":"\u68af\u5ea6\u4e0a\u5347\u6cd5\u7684\u601d\u60f3"},{"location":"ml/5.Logistic/#logistic_1","text":"","title":"Logistic \u56de\u5f52 \u539f\u7406"},{"location":"ml/5.Logistic/#logistic_2","text":"\u6bcf\u4e2a\u56de\u5f52\u7cfb\u6570\u521d\u59cb\u5316\u4e3a 1 \u91cd\u590d R \u6b21: \u8ba1\u7b97\u6574\u4e2a\u6570\u636e\u96c6\u7684\u68af\u5ea6 \u4f7f\u7528 \u6b65\u957f x \u68af\u5ea6 \u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u7684\u5411\u91cf \u8fd4\u56de\u56de\u5f52\u7cfb\u6570","title":"Logistic \u56de\u5f52 \u5de5\u4f5c\u539f\u7406"},{"location":"ml/5.Logistic/#logistic_3","text":"\u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73\u3002 \u5206\u6790\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u5927\u90e8\u5206\u65f6\u95f4\u5c06\u7528\u4e8e\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u627e\u5230\u6700\u4f73\u7684\u5206\u7c7b\u56de\u5f52\u7cfb\u6570\u3002 \u6d4b\u8bd5\u7b97\u6cd5: \u4e00\u65e6\u8bad\u7ec3\u6b65\u9aa4\u5b8c\u6210\uff0c\u5206\u7c7b\u5c06\u4f1a\u5f88\u5feb\u3002 \u4f7f\u7528\u7b97\u6cd5: \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165\u4e00\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u7ed3\u6784\u5316\u6570\u503c\uff1b\u63a5\u7740\uff0c\u57fa\u4e8e\u8bad\u7ec3\u597d\u7684\u56de\u5f52\u7cfb\u6570\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u6570\u503c\u8fdb\u884c\u7b80\u5355\u7684\u56de\u5f52\u8ba1\u7b97\uff0c\u5224\u5b9a\u5b83\u4eec\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff1b\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u51fa\u7684\u7c7b\u522b\u4e0a\u505a\u4e00\u4e9b\u5176\u4ed6\u5206\u6790\u5de5\u4f5c\u3002","title":"Logistic \u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/5.Logistic/#logistic_4","text":"\u4f18\u70b9: \u8ba1\u7b97\u4ee3\u4ef7\u4e0d\u9ad8\uff0c\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u3002 \u7f3a\u70b9: \u5bb9\u6613\u6b20\u62df\u5408\uff0c\u5206\u7c7b\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u9ad8\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b: \u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"Logistic \u56de\u5f52 \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/5.Logistic/#_8","text":"","title":"\u9644\u52a0 \u65b9\u5411\u5bfc\u6570\u4e0e\u68af\u5ea6"},{"location":"ml/5.Logistic/#logistic_5","text":"","title":"Logistic \u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/5.Logistic/#1-logistic","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/5.Logistic/logistic.py","title":"\u9879\u76ee\u6848\u4f8b1: \u4f7f\u7528 Logistic \u56de\u5f52\u5728\u7b80\u5355\u6570\u636e\u96c6\u4e0a\u7684\u5206\u7c7b"},{"location":"ml/5.Logistic/#_9","text":"\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u91c7\u7528\u68af\u5ea6\u4e0a\u5347\u6cd5\u627e\u5230 Logistic \u56de\u5f52\u5206\u7c7b\u5668\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u7684\u6700\u4f73\u56de\u5f52\u7cfb\u6570","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/5.Logistic/#_10","text":"\u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73 \u5206\u6790\u6570\u636e: \u753b\u51fa\u51b3\u7b56\u8fb9\u754c \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u627e\u5230\u6700\u4f73\u53c2\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u7b80\u5355\u6570\u636e\u96c6\u4e2d\u6570\u636e\u8fdb\u884c\u5206\u7c7b \u6536\u96c6\u6570\u636e: \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u6cd5 \u6211\u4eec\u91c7\u7528\u5b58\u50a8\u5728 TestSet.txt \u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u5b58\u50a8\u683c\u5f0f\u5982\u4e0b: -0.017612 14.053064 0 -1.395634 4.662541 1 -0.752157 6.538620 0 -1.322371 7.152853 0 0.423363 11.054677 0 \u7ed8\u5236\u5728\u56fe\u4e2d\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u51c6\u5907\u6570\u636e: \u7531\u4e8e\u9700\u8981\u8fdb\u884c\u8ddd\u79bb\u8ba1\u7b97\uff0c\u56e0\u6b64\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e3a\u6570\u503c\u578b\u3002\u53e6\u5916\uff0c\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u5219\u6700\u4f73 # \u89e3\u6790\u6570\u636e def loadDataSet(file_name): ''' Desc: \u52a0\u8f7d\u5e76\u89e3\u6790\u6570\u636e Args: file_name -- \u8981\u89e3\u6790\u7684\u6587\u4ef6\u8def\u5f84 Returns: dataMat -- \u539f\u59cb\u6570\u636e\u7684\u7279\u5f81 labelMat -- \u539f\u59cb\u6570\u636e\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6bcf\u6761\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u3002\u5373\u76ee\u6807\u5411\u91cf ''' # dataMat\u4e3a\u539f\u59cb\u6570\u636e\uff0c labelMat\u4e3a\u539f\u59cb\u6570\u636e\u7684\u6807\u7b7e dataMat = [] labelMat = [] fr = open(file_name) for line in fr.readlines(): lineArr = line.strip().split() # \u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6211\u4eec\u5c06 X0 \u7684\u503c\u8bbe\u4e3a 1.0 \uff0c\u4e5f\u5c31\u662f\u5728\u6bcf\u4e00\u884c\u7684\u5f00\u5934\u6dfb\u52a0\u4e00\u4e2a 1.0 \u4f5c\u4e3a X0 dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])]) labelMat.append(int(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\uff0c\u6b64\u5904\u4e0d\u9700\u8981 \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u68af\u5ea6\u4e0a\u5347\u627e\u5230\u6700\u4f73\u53c2\u6570 \u5b9a\u4e49sigmoid\u9636\u8dc3\u51fd\u6570 # sigmoid\u9636\u8dc3\u51fd\u6570 def sigmoid(inX): # return 1.0 / (1 + exp(-inX)) # Tanh\u662fSigmoid\u7684\u53d8\u5f62\uff0c\u4e0e sigmoid \u4e0d\u540c\u7684\u662f\uff0ctanh \u662f0\u5747\u503c\u7684\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\uff0ctanh \u4f1a\u6bd4 sigmoid \u66f4\u597d\u3002 return 2 * 1.0/(1+exp(-2*inX)) - 1 Logistic \u56de\u5f52\u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5 # \u6b63\u5e38\u7684\u5904\u7406\u65b9\u6848 # \u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570==> dataMatIn \u662f\u4e00\u4e2a2\u7ef4NumPy\u6570\u7ec4\uff0c\u6bcf\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u4e2a\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u6bcf\u884c\u5219\u4ee3\u8868\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u3002 # \u7b2c\u4e8c\u4e2a\u53c2\u6570==> classLabels \u662f\u7c7b\u522b\u6807\u7b7e\uff0c\u5b83\u662f\u4e00\u4e2a 1*100 \u7684\u884c\u5411\u91cf\u3002\u4e3a\u4e86\u4fbf\u4e8e\u77e9\u9635\u8ba1\u7b97\uff0c\u9700\u8981\u5c06\u8be5\u884c\u5411\u91cf\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\uff0c\u505a\u6cd5\u662f\u5c06\u539f\u5411\u91cf\u8f6c\u7f6e\uff0c\u518d\u5c06\u5b83\u8d4b\u503c\u7ed9labelMat\u3002 def gradAscent(dataMatIn, classLabels): # \u8f6c\u5316\u4e3a\u77e9\u9635[[1,1,2],[1,1,2]....] dataMatrix = mat(dataMatIn) # \u8f6c\u6362\u4e3a NumPy \u77e9\u9635 # \u8f6c\u5316\u4e3a\u77e9\u9635[[0,1,0,1,0,1.....]]\uff0c\u5e76\u8f6c\u5236[[0],[1],[0].....] # transpose() \u884c\u5217\u8f6c\u7f6e\u51fd\u6570 # \u5c06\u884c\u5411\u91cf\u8f6c\u5316\u4e3a\u5217\u5411\u91cf => \u77e9\u9635\u7684\u8f6c\u7f6e labelMat = mat(classLabels).transpose() # \u9996\u5148\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a NumPy \u77e9\u9635\uff0c\u7136\u540e\u518d\u5c06\u884c\u5411\u91cf\u8f6c\u7f6e\u4e3a\u5217\u5411\u91cf # m->\u6570\u636e\u91cf\uff0c\u6837\u672c\u6570 n->\u7279\u5f81\u6570 m,n = shape(dataMatrix) # print m, n, '__'*10, shape(dataMatrix.transpose()), '__'*100 # alpha\u4ee3\u8868\u5411\u76ee\u6807\u79fb\u52a8\u7684\u6b65\u957f alpha = 0.001 # \u8fed\u4ee3\u6b21\u6570 maxCycles = 500 # \u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u6b64\u5904n\u4e3a3 -> [[1],[1],[1]] # weights \u4ee3\u8868\u56de\u5f52\u7cfb\u6570\uff0c \u6b64\u5904\u7684 ones((n,1)) \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u6570\u5168\u90e8\u90fd\u662f 1 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations # m*3 \u7684\u77e9\u9635 * 3*1 \u7684\u77e9\u9635 \uff1d m*1\u7684\u77e9\u9635 # \u90a3\u4e48\u4e58\u4e0a\u77e9\u9635\u7684\u610f\u4e49\uff0c\u5c31\u4ee3\u8868\uff1a\u901a\u8fc7\u516c\u5f0f\u5f97\u5230\u7684\u7406\u8bba\u503c # \u53c2\u8003\u5730\u5740\uff1a \u77e9\u9635\u4e58\u6cd5\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f https://www.zhihu.com/question/21351965/answer/31050145 # print 'dataMatrix====', dataMatrix # print 'weights====', weights # n*3 * 3*1 = n*1 h = sigmoid(dataMatrix*weights) # \u77e9\u9635\u4e58\u6cd5 # print 'hhhhhhh====', h # labelMat\u662f\u5b9e\u9645\u503c error = (labelMat - h) # \u5411\u91cf\u76f8\u51cf # 0.001* (3*m)*(m*1) \u8868\u793a\u5728\u6bcf\u4e00\u4e2a\u5217\u4e0a\u7684\u4e00\u4e2a\u8bef\u5dee\u60c5\u51b5\uff0c\u6700\u540e\u5f97\u51fa x1,x2,xn\u7684\u7cfb\u6570\u7684\u504f\u79fb\u91cf weights = weights + alpha * dataMatrix.transpose() * error # \u77e9\u9635\u4e58\u6cd5\uff0c\u6700\u540e\u5f97\u5230\u56de\u5f52\u7cfb\u6570 return array(weights) \u5927\u5bb6\u770b\u5230\u8fd9\u513f\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7591\u60d1\uff0c\u5c31\u662f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u4e2d\u66f4\u65b0\u6211\u4eec\u7684\u56de\u5f52\u7cfb\u6570\uff0c\u540e\u8fb9\u7684\u90e8\u5206\u662f\u600e\u4e48\u8ba1\u7b97\u51fa\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u662f alpha * dataMatrix.transpose() * error ?\u56e0\u4e3a\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u6c42\u7684\u68af\u5ea6\uff0c\u4e5f\u5c31\u662f\u5bf9 f(w) \u5bf9 w \u6c42\u4e00\u9636\u5bfc\u6570\u3002\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b: \u53ef\u53c2\u8003http://blog.csdn.net/achuo/article/details/51160101 \u753b\u51fa\u6570\u636e\u96c6\u548c Logistic \u56de\u5f52\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u7684\u51fd\u6570 def plotBestFit(dataArr, labelMat, weights): ''' Desc: \u5c06\u6211\u4eec\u5f97\u5230\u7684\u6570\u636e\u53ef\u89c6\u5316\u5c55\u793a\u51fa\u6765 Args: dataArr:\u6837\u672c\u6570\u636e\u7684\u7279\u5f81 labelMat:\u6837\u672c\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf weights:\u56de\u5f52\u7cfb\u6570 Returns: None ''' n = shape(dataArr)[0] xcord1 = []; ycord1 = [] xcord2 = []; ycord2 = [] for i in range(n): if int(labelMat[i])== 1: xcord1.append(dataArr[i,1]); ycord1.append(dataArr[i,2]) else: xcord2.append(dataArr[i,1]); ycord2.append(dataArr[i,2]) fig = plt.figure() ax = fig.add_subplot(111) ax.scatter(xcord1, ycord1, s=30, c='red', marker='s') ax.scatter(xcord2, ycord2, s=30, c='green') x = arange(-3.0, 3.0, 0.1) \"\"\" y\u7684\u7531\u6765\uff0c\u5367\u69fd\uff0c\u662f\u4e0d\u662f\u6ca1\u770b\u61c2\uff1f \u9996\u5148\u7406\u8bba\u4e0a\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])]) w0*x0+w1*x1+w2*x2=f(x) x0\u6700\u5f00\u59cb\u5c31\u8bbe\u7f6e\u4e3a1\u53fb\uff0c x2\u5c31\u662f\u6211\u4eec\u753b\u56fe\u7684y\u503c\uff0c\u800cf(x)\u88ab\u6211\u4eec\u78e8\u5408\u8bef\u5dee\u7ed9\u7b97\u5230w0,w1,w2\u8eab\u4e0a\u53bb\u4e86 \u6240\u4ee5\uff1a w0+w1*x+w2*y=0 => y = (-w0-w1*x)/w2 \"\"\" y = (-weights[0]-weights[1]*x)/weights[2] ax.plot(x, y) plt.xlabel('X'); plt.ylabel('Y') plt.show() \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b def testLR(): # 1.\u6536\u96c6\u5e76\u51c6\u5907\u6570\u636e dataMat, labelMat = loadDataSet(\"db/5.Logistic/TestSet.txt\") # print dataMat, '---\\n', labelMat # 2.\u8bad\u7ec3\u6a21\u578b\uff0c f(x)=a1*x1+b2*x2+..+nn*xn\u4e2d (a1,b2, .., nn).T\u7684\u77e9\u9635\u503c # \u56e0\u4e3a\u6570\u7ec4\u6ca1\u6709\u662f\u590d\u5236n\u4efd\uff0c array\u7684\u4e58\u6cd5\u5c31\u662f\u4e58\u6cd5 dataArr = array(dataMat) # print dataArr weights = gradAscent(dataArr, labelMat) # weights = stocGradAscent0(dataArr, labelMat) # weights = stocGradAscent1(dataArr, labelMat) # print '*'*30, weights # \u6570\u636e\u53ef\u89c6\u5316 plotBestFit(dataArr, labelMat, weights) \u4f7f\u7528\u7b97\u6cd5: \u5bf9\u7b80\u5355\u6570\u636e\u96c6\u4e2d\u6570\u636e\u8fdb\u884c\u5206\u7c7b","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/5.Logistic/#_11","text":"\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8be5\u65b9\u6cd5\u5728\u5904\u7406 100 \u4e2a\u5de6\u53f3\u7684\u6570\u636e\u96c6\u65f6\u5c1a\u53ef\uff0c\u4f46\u5982\u679c\u6709\u6570\u5341\u4ebf\u6837\u672c\u548c\u6210\u5343\u4e0a\u4e07\u7684\u7279\u5f81\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5c31\u592a\u9ad8\u4e86\u3002\u4e00\u79cd\u6539\u8fdb\u65b9\u6cd5\u662f\u4e00\u6b21\u4ec5\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\uff0c\u8be5\u65b9\u6cd5\u79f0\u4e3a \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5 \u3002\u7531\u4e8e\u53ef\u4ee5\u5728\u65b0\u6837\u672c\u5230\u6765\u65f6\u5bf9\u5206\u7c7b\u5668\u8fdb\u884c\u589e\u91cf\u5f0f\u66f4\u65b0\uff0c\u56e0\u800c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u662f\u4e00\u4e2a\u5728\u7ebf\u5b66\u4e60(online learning)\u7b97\u6cd5\u3002\u4e0e \u201c\u5728\u7ebf\u5b66\u4e60\u201d \u76f8\u5bf9\u5e94\uff0c\u4e00\u6b21\u5904\u7406\u6240\u6709\u6570\u636e\u88ab\u79f0\u4f5c\u662f \u201c\u6279\u5904\u7406\u201d \uff08batch\uff09 \u3002 \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u7684\u4f2a\u4ee3\u7801: \u6240\u6709\u56de\u5f52\u7cfb\u6570\u521d\u59cb\u5316\u4e3a 1 \u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u6837\u672c \u8ba1\u7b97\u8be5\u6837\u672c\u7684\u68af\u5ea6 \u4f7f\u7528 alpha x gradient \u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u503c \u8fd4\u56de\u56de\u5f52\u7cfb\u6570\u503c \u4ee5\u4e0b\u662f\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u7684\u5b9e\u73b0\u4ee3\u7801: # \u968f\u673a\u68af\u5ea6\u4e0a\u5347 # \u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u96c6\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u590d\u6742\u90fd\u8f83\u9ad8 # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u4e00\u6b21\u53ea\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570 def stocGradAscent0(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 # n*1\u7684\u77e9\u9635 # \u51fd\u6570ones\u521b\u5efa\u4e00\u4e2a\u51681\u7684\u6570\u7ec4 weights = ones(n) # \u521d\u59cb\u5316\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u5168\u90e8\u4e3a 1 for i in range(m): # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn,\u6b64\u5904\u6c42\u51fa\u7684 h \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635 h = sigmoid(sum(dataMatrix[i]*weights)) # print 'dataMatrix[i]===', dataMatrix[i] # \u8ba1\u7b97\u771f\u5b9e\u7c7b\u522b\u4e0e\u9884\u6d4b\u7c7b\u522b\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u7136\u540e\u6309\u7167\u8be5\u5dee\u503c\u8c03\u6574\u56de\u5f52\u7cfb\u6570 error = classLabels[i] - h # 0.01*(1*1)*(1*n) print weights, \"*\"*10 , dataMatrix[i], \"*\"*10 , error weights = weights + alpha * error * dataMatrix[i] return weights \u53ef\u4ee5\u770b\u5230\uff0c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u4e0e\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728\u4ee3\u7801\u4e0a\u5f88\u76f8\u4f3c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u533a\u522b: \u7b2c\u4e00\uff0c\u540e\u8005\u7684\u53d8\u91cf h \u548c\u8bef\u5dee error \u90fd\u662f\u5411\u91cf\uff0c\u800c\u524d\u8005\u5219\u5168\u662f\u6570\u503c\uff1b\u7b2c\u4e8c\uff0c\u524d\u8005\u6ca1\u6709\u77e9\u9635\u7684\u8f6c\u6362\u8fc7\u7a0b\uff0c\u6240\u6709\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u90fd\u662f NumPy \u6570\u7ec4\u3002 \u5224\u65ad\u4f18\u5316\u7b97\u6cd5\u4f18\u52a3\u7684\u53ef\u9760\u65b9\u6cd5\u662f\u770b\u5b83\u662f\u5426\u6536\u655b\uff0c\u4e5f\u5c31\u662f\u8bf4\u53c2\u6570\u662f\u5426\u8fbe\u5230\u4e86\u7a33\u5b9a\u503c\uff0c\u662f\u5426\u8fd8\u4f1a\u4e0d\u65ad\u5730\u53d8\u5316\uff1f\u4e0b\u56fe\u5c55\u793a\u4e86\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\u5728 200 \u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u56de\u5f52\u7cfb\u6570\u7684\u53d8\u5316\u60c5\u51b5\u3002\u5176\u4e2d\u7684\u7cfb\u65702\uff0c\u4e5f\u5c31\u662f X2 \u53ea\u7ecf\u8fc7\u4e86 50 \u6b21\u8fed\u4ee3\u5c31\u8fbe\u5230\u4e86\u7a33\u5b9a\u503c\uff0c\u4f46\u7cfb\u6570 1 \u548c 0 \u5219\u9700\u8981\u66f4\u591a\u6b21\u7684\u8fed\u4ee3\u3002\u5982\u4e0b\u56fe\u6240\u793a: \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6539\u8fdb\u4e86\u4e4b\u524d\u7684\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u5982\u4e0b: # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff08\u968f\u673a\u5316\uff09 def stocGradAscent1(dataMatrix, classLabels, numIter=150): m,n = shape(dataMatrix) weights = ones(n) # \u521b\u5efa\u4e0e\u5217\u6570\u76f8\u540c\u7684\u77e9\u9635\u7684\u7cfb\u6570\u77e9\u9635\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u662f1 # \u968f\u673a\u68af\u5ea6, \u5faa\u73af150,\u89c2\u5bdf\u662f\u5426\u6536\u655b for j in range(numIter): # [0, 1, 2 .. m-1] dataIndex = range(m) for i in range(m): # i\u548cj\u7684\u4e0d\u65ad\u589e\u5927\uff0c\u5bfc\u81f4alpha\u7684\u503c\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u4e3a0 alpha = 4/(1.0+j+i)+0.0001 # alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u52300\uff0c\u56e0\u4e3a\u540e\u8fb9\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570\u98790.0001 # \u968f\u673a\u4ea7\u751f\u4e00\u4e2a 0\uff5elen()\u4e4b\u95f4\u7684\u4e00\u4e2a\u503c # random.uniform(x, y) \u65b9\u6cd5\u5c06\u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185,x\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\uff0cy\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\u3002 randIndex = int(random.uniform(0,len(dataIndex))) # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn h = sigmoid(sum(dataMatrix[dataIndex[randIndex]]*weights)) error = classLabels[dataIndex[randIndex]] - h # print weights, '__h=%s' % h, '__'*20, alpha, '__'*20, error, '__'*20, dataMatrix[randIndex] weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] del(dataIndex[randIndex]) return weights \u4e0a\u9762\u7684\u6539\u8fdb\u7248\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u6211\u4eec\u4fee\u6539\u4e86\u4e24\u5904\u4ee3\u7801\u3002 \u7b2c\u4e00\u5904\u6539\u8fdb\u4e3a alpha \u7684\u503c\u3002alpha \u5728\u6bcf\u6b21\u8fed\u4ee3\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u6574\uff0c\u8fd9\u56de\u7f13\u89e3\u4e0a\u9762\u6ce2\u52a8\u56fe\u7684\u6570\u636e\u6ce2\u52a8\u6216\u8005\u9ad8\u9891\u6ce2\u52a8\u3002\u53e6\u5916\uff0c\u867d\u7136 alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u5230 0\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u516c\u5f0f\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5e38\u6570\u9879\u3002 \u7b2c\u4e8c\u5904\u4fee\u6539\u4e3a randIndex \u66f4\u65b0\uff0c\u8fd9\u91cc\u901a\u8fc7\u968f\u673a\u9009\u53d6\u6837\u672c\u62c9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u51cf\u5c11\u5468\u671f\u6027\u7684\u6ce2\u52a8\u3002\u8fd9\u79cd\u65b9\u6cd5\u6bcf\u6b21\u968f\u673a\u4ece\u5217\u8868\u4e2d\u9009\u51fa\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u4ece\u5217\u8868\u4e2d\u5220\u6389\u8be5\u503c\uff08\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u8fed\u4ee3\uff09\u3002 \u7a0b\u5e8f\u8fd0\u884c\u4e4b\u540e\u80fd\u770b\u5230\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\u7684\u7ed3\u679c\u56fe\u3002","title":"\u6ce8\u610f"},{"location":"ml/5.Logistic/#2","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/5.Logistic/logistic.py","title":"\u9879\u76ee\u6848\u4f8b2: \u4ece\u759d\u6c14\u75c5\u75c7\u9884\u6d4b\u75c5\u9a6c\u7684\u6b7b\u4ea1\u7387"},{"location":"ml/5.Logistic/#_12","text":"\u4f7f\u7528 Logistic \u56de\u5f52\u6765\u9884\u6d4b\u60a3\u6709\u759d\u75c5\u7684\u9a6c\u7684\u5b58\u6d3b\u95ee\u9898\u3002\u759d\u75c5\u662f\u63cf\u8ff0\u9a6c\u80c3\u80a0\u75db\u7684\u672f\u8bed\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u75c5\u4e0d\u4e00\u5b9a\u6e90\u81ea\u9a6c\u7684\u80c3\u80a0\u95ee\u9898\uff0c\u5176\u4ed6\u95ee\u9898\u4e5f\u53ef\u80fd\u5f15\u53d1\u9a6c\u759d\u75c5\u3002\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e86\u533b\u9662\u68c0\u6d4b\u9a6c\u759d\u75c5\u7684\u4e00\u4e9b\u6307\u6807\uff0c\u6709\u7684\u6307\u6807\u6bd4\u8f83\u4e3b\u89c2\uff0c\u6709\u7684\u6307\u6807\u96be\u4ee5\u6d4b\u91cf\uff0c\u4f8b\u5982\u9a6c\u7684\u75bc\u75db\u7ea7\u522b\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/5.Logistic/#_13","text":"\u6536\u96c6\u6570\u636e: \u7ed9\u5b9a\u6570\u636e\u6587\u4ef6 \u51c6\u5907\u6570\u636e: \u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6\u5e76\u586b\u5145\u7f3a\u5931\u503c \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u4f18\u5316\u7b97\u6cd5\uff0c\u627e\u5230\u6700\u4f73\u7684\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4e3a\u4e86\u91cf\u5316\u56de\u5f52\u7684\u6548\u679c\uff0c\u9700\u8981\u89c2\u5bdf\u9519\u8bef\u7387\u3002\u6839\u636e\u9519\u8bef\u7387\u51b3\u5b9a\u662f\u5426\u56de\u9000\u5230\u8bad\u7ec3\u9636\u6bb5\uff0c \u901a\u8fc7\u6539\u53d8\u8fed\u4ee3\u7684\u6b21\u6570\u548c\u6b65\u957f\u7684\u53c2\u6570\u6765\u5f97\u5230\u66f4\u597d\u7684\u56de\u5f52\u7cfb\u6570 \u4f7f\u7528\u7b97\u6cd5: \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6536\u96c6\u9a6c\u7684\u75c7\u72b6\u5e76\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\u5e76\u975e\u96be\u4e8b\uff0c \u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u7559\u7ed9\u5927\u5bb6\u7684\u4e00\u9053\u4e60\u9898 \u6536\u96c6\u6570\u636e: \u7ed9\u5b9a\u6570\u636e\u6587\u4ef6 \u75c5\u9a6c\u7684\u8bad\u7ec3\u6570\u636e\u5df2\u7ecf\u7ed9\u51fa\u6765\u4e86\uff0c\u5982\u4e0b\u5f62\u5f0f\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6\u4e2d: 1.000000 1.000000 39.200000 88.000000 20.000000 0.000000 0.000000 4.000000 1.000000 3.000000 4.000000 2.000000 0.000000 0.000000 0.000000 4.000000 2.000000 50.000000 85.000000 2.000000 2.000000 0.000000 2.000000 1.000000 38.300000 40.000000 24.000000 1.000000 1.000000 3.000000 1.000000 3.000000 3.000000 1.000000 0.000000 0.000000 0.000000 1.000000 1.000000 33.000000 6.700000 0.000000 0.000000 1.000000 \u51c6\u5907\u6570\u636e: \u7528 Python \u89e3\u6790\u6587\u672c\u6587\u4ef6\u5e76\u586b\u5145\u7f3a\u5931\u503c \u5904\u7406\u6570\u636e\u4e2d\u7684\u7f3a\u5931\u503c \u5047\u8bbe\u6709100\u4e2a\u6837\u672c\u548c20\u4e2a\u7279\u5f81\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u673a\u5668\u6536\u96c6\u56de\u6765\u7684\u3002\u82e5\u673a\u5668\u4e0a\u7684\u67d0\u4e2a\u4f20\u611f\u5668\u635f\u574f\u5bfc\u81f4\u4e00\u4e2a\u7279\u5f81\u65e0\u6548\u65f6\u8be5\u600e\u4e48\u529e\uff1f\u6b64\u65f6\u662f\u5426\u8981\u6254\u6389\u6574\u4e2a\u6570\u636e\uff1f\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53e6\u591619\u4e2a\u7279\u5f81\u600e\u4e48\u529e\uff1f \u5b83\u4eec\u662f\u5426\u8fd8\u53ef\u4ee5\u7528\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u56e0\u4e3a\u6709\u65f6\u5019\u6570\u636e\u76f8\u5f53\u6602\u8d35\uff0c\u6254\u6389\u548c\u91cd\u65b0\u83b7\u53d6\u90fd\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u505a\u6cd5\uff1a \u4f7f\u7528\u53ef\u7528\u7279\u5f81\u7684\u5747\u503c\u6765\u586b\u8865\u7f3a\u5931\u503c\uff1b \u4f7f\u7528\u7279\u6b8a\u503c\u6765\u586b\u8865\u7f3a\u5931\u503c\uff0c\u5982 -1\uff1b \u5ffd\u7565\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff1b \u4f7f\u7528\u6709\u76f8\u4f3c\u6837\u672c\u7684\u5747\u503c\u6dfb\u8865\u7f3a\u5931\u503c\uff1b * \u4f7f\u7528\u53e6\u5916\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u7f3a\u5931\u503c\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5bf9\u4e0b\u4e00\u8282\u8981\u7528\u7684\u6570\u636e\u96c6\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4f7f\u5176\u53ef\u4ee5\u987a\u5229\u5730\u4f7f\u7528\u5206\u7c7b\u7b97\u6cd5\u3002\u5728\u9884\u5904\u7406\u9700\u8981\u505a\u4e24\u4ef6\u4e8b: * \u6240\u6709\u7684\u7f3a\u5931\u503c\u5fc5\u987b\u7528\u4e00\u4e2a\u5b9e\u6570\u503c\u6765\u66ff\u6362\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684 NumPy \u6570\u636e\u7c7b\u578b\u4e0d\u5141\u8bb8\u5305\u542b\u7f3a\u5931\u503c\u3002\u6211\u4eec\u8fd9\u91cc\u9009\u62e9\u5b9e\u6570 0 \u6765\u66ff\u6362\u6240\u6709\u7f3a\u5931\u503c\uff0c\u6070\u597d\u80fd\u9002\u7528\u4e8e Logistic \u56de\u5f52\u3002\u8fd9\u6837\u505a\u7684\u76f4\u89c9\u5728\u4e8e\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5728\u66f4\u65b0\u65f6\u4e0d\u4f1a\u5f71\u54cd\u7cfb\u6570\u7684\u503c\u3002\u56de\u5f52\u7cfb\u6570\u7684\u66f4\u65b0\u516c\u5f0f\u5982\u4e0b: weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] \u5982\u679c dataMatrix \u7684\u67d0\u4e2a\u7279\u5f81\u5bf9\u5e94\u503c\u4e3a 0\uff0c\u90a3\u4e48\u8be5\u7279\u5f81\u7684\u7cfb\u6570\u5c06\u4e0d\u505a\u66f4\u65b0\uff0c\u5373: weights = weights \u53e6\u5916\uff0c\u7531\u4e8e Sigmoid(0) = 0.5 \uff0c\u5373\u5b83\u5bf9\u7ed3\u679c\u7684\u9884\u6d4b\u4e0d\u5177\u6709\u4efb\u4f55\u503e\u5411\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u4e0a\u8ff0\u505a\u6cd5\u4e5f\u4e0d\u4f1a\u5bf9\u8bef\u5dee\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002\u57fa\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u5c06\u7f3a\u5931\u503c\u7528 0 \u4ee3\u66ff\u65e2\u53ef\u4ee5\u4fdd\u7559\u73b0\u6709\u6570\u636e\uff0c\u4e5f\u4e0d\u9700\u8981\u5bf9\u4f18\u5316\u7b97\u6cd5\u8fdb\u884c\u4fee\u6539\u3002\u6b64\u5916\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u7279\u5f81\u53d6\u503c\u4e00\u822c\u4e0d\u4e3a 0\uff0c\u56e0\u6b64\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\u5b83\u4e5f\u6ee1\u8db3 \u201c\u7279\u6b8a\u503c\u201d \u8fd9\u4e2a\u8981\u6c42\u3002 \u5982\u679c\u5728\u6d4b\u8bd5\u6570\u636e\u96c6\u4e2d\u53d1\u73b0\u4e86\u4e00\u6761\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\u5df2\u7ecf\u7f3a\u5931\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u7b80\u5355\u505a\u6cd5\u662f\u5c06\u8be5\u6761\u6570\u636e\u4e22\u5f03\u3002\u8fd9\u662f\u56e0\u4e3a\u7c7b\u522b\u6807\u7b7e\u4e0e\u7279\u5f81\u4e0d\u540c\uff0c\u5f88\u96be\u786e\u5b9a\u91c7\u7528\u67d0\u4e2a\u5408\u9002\u7684\u503c\u6765\u66ff\u6362\u3002\u91c7\u7528 Logistic \u56de\u5f52\u8fdb\u884c\u5206\u7c7b\u65f6\u8fd9\u79cd\u505a\u6cd5\u662f\u5408\u7406\u7684\uff0c\u800c\u5982\u679c\u91c7\u7528\u7c7b\u4f3c kNN \u7684\u65b9\u6cd5\uff0c\u5219\u4fdd\u7559\u8be5\u6761\u6570\u636e\u663e\u5f97\u66f4\u52a0\u5408\u7406\u3002 \u539f\u59cb\u7684\u6570\u636e\u96c6\u7ecf\u8fc7\u9884\u5904\u7406\u540e\uff0c\u4fdd\u5b58\u6210\u4e24\u4e2a\u6587\u4ef6: horseColicTest.txt \u548c horseColicTraining.txt \u3002 \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u5c06\u6570\u636e\u4f7f\u7528 MatPlotlib \u6253\u5370\u51fa\u6765\uff0c\u89c2\u5bdf\u6570\u636e\u662f\u5426\u662f\u6211\u4eec\u60f3\u8981\u7684\u683c\u5f0f \u8bad\u7ec3\u7b97\u6cd5: \u4f7f\u7528\u4f18\u5316\u7b97\u6cd5\uff0c\u627e\u5230\u6700\u4f73\u7684\u7cfb\u6570 \u4e0b\u9762\u7ed9\u51fa \u539f\u59cb\u7684\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff0c\u6539\u8fdb\u7248\u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5 \u7684\u4ee3\u7801: # \u6b63\u5e38\u7684\u5904\u7406\u65b9\u6848 # \u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570==> dataMatIn \u662f\u4e00\u4e2a2\u7ef4NumPy\u6570\u7ec4\uff0c\u6bcf\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u4e2a\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u6bcf\u884c\u5219\u4ee3\u8868\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u3002 # \u7b2c\u4e8c\u4e2a\u53c2\u6570==> classLabels \u662f\u7c7b\u522b\u6807\u7b7e\uff0c\u5b83\u662f\u4e00\u4e2a 1*100 \u7684\u884c\u5411\u91cf\u3002\u4e3a\u4e86\u4fbf\u4e8e\u77e9\u9635\u8ba1\u7b97\uff0c\u9700\u8981\u5c06\u8be5\u884c\u5411\u91cf\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\uff0c\u505a\u6cd5\u662f\u5c06\u539f\u5411\u91cf\u8f6c\u7f6e\uff0c\u518d\u5c06\u5b83\u8d4b\u503c\u7ed9labelMat\u3002 def gradAscent(dataMatIn, classLabels): # \u8f6c\u5316\u4e3a\u77e9\u9635[[1,1,2],[1,1,2]....] dataMatrix = mat(dataMatIn) # \u8f6c\u6362\u4e3a NumPy \u77e9\u9635 # \u8f6c\u5316\u4e3a\u77e9\u9635[[0,1,0,1,0,1.....]]\uff0c\u5e76\u8f6c\u5236[[0],[1],[0].....] # transpose() \u884c\u5217\u8f6c\u7f6e\u51fd\u6570 # \u5c06\u884c\u5411\u91cf\u8f6c\u5316\u4e3a\u5217\u5411\u91cf => \u77e9\u9635\u7684\u8f6c\u7f6e labelMat = mat(classLabels).transpose() # \u9996\u5148\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a NumPy \u77e9\u9635\uff0c\u7136\u540e\u518d\u5c06\u884c\u5411\u91cf\u8f6c\u7f6e\u4e3a\u5217\u5411\u91cf # m->\u6570\u636e\u91cf\uff0c\u6837\u672c\u6570 n->\u7279\u5f81\u6570 m,n = shape(dataMatrix) # print m, n, '__'*10, shape(dataMatrix.transpose()), '__'*100 # alpha\u4ee3\u8868\u5411\u76ee\u6807\u79fb\u52a8\u7684\u6b65\u957f alpha = 0.001 # \u8fed\u4ee3\u6b21\u6570 maxCycles = 500 # \u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u6b64\u5904n\u4e3a3 -> [[1],[1],[1]] # weights \u4ee3\u8868\u56de\u5f52\u7cfb\u6570\uff0c \u6b64\u5904\u7684 ones((n,1)) \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u548c\u7279\u5f81\u6570\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u6570\u5168\u90e8\u90fd\u662f 1 weights = ones((n,1)) for k in range(maxCycles): #heavy on matrix operations # m*3 \u7684\u77e9\u9635 * 3*1 \u7684\u5355\u4f4d\u77e9\u9635 \uff1d m*1\u7684\u77e9\u9635 # \u90a3\u4e48\u4e58\u4e0a\u5355\u4f4d\u77e9\u9635\u7684\u610f\u4e49\uff0c\u5c31\u4ee3\u8868\uff1a\u901a\u8fc7\u516c\u5f0f\u5f97\u5230\u7684\u7406\u8bba\u503c # \u53c2\u8003\u5730\u5740\uff1a \u77e9\u9635\u4e58\u6cd5\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f https://www.zhihu.com/question/21351965/answer/31050145 # print 'dataMatrix====', dataMatrix # print 'weights====', weights # n*3 * 3*1 = n*1 h = sigmoid(dataMatrix*weights) # \u77e9\u9635\u4e58\u6cd5 # print 'hhhhhhh====', h # labelMat\u662f\u5b9e\u9645\u503c error = (labelMat - h) # \u5411\u91cf\u76f8\u51cf # 0.001* (3*m)*(m*1) \u8868\u793a\u5728\u6bcf\u4e00\u4e2a\u5217\u4e0a\u7684\u4e00\u4e2a\u8bef\u5dee\u60c5\u51b5\uff0c\u6700\u540e\u5f97\u51fa x1,x2,xn\u7684\u7cfb\u6570\u7684\u504f\u79fb\u91cf weights = weights + alpha * dataMatrix.transpose() * error # \u77e9\u9635\u4e58\u6cd5\uff0c\u6700\u540e\u5f97\u5230\u56de\u5f52\u7cfb\u6570 return array(weights) # \u968f\u673a\u68af\u5ea6\u4e0a\u5347 # \u68af\u5ea6\u4e0a\u5347\u4f18\u5316\u7b97\u6cd5\u5728\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u96c6\u65f6\u90fd\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u590d\u6742\u90fd\u8f83\u9ad8 # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u4e00\u6b21\u53ea\u7528\u4e00\u4e2a\u6837\u672c\u70b9\u6765\u66f4\u65b0\u56de\u5f52\u7cfb\u6570 def stocGradAscent0(dataMatrix, classLabels): m,n = shape(dataMatrix) alpha = 0.01 # n*1\u7684\u77e9\u9635 # \u51fd\u6570ones\u521b\u5efa\u4e00\u4e2a\u51681\u7684\u6570\u7ec4 weights = ones(n) # \u521d\u59cb\u5316\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u5168\u90e8\u4e3a 1 for i in range(m): # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn,\u6b64\u5904\u6c42\u51fa\u7684 h \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635 h = sigmoid(sum(dataMatrix[i]*weights)) # print 'dataMatrix[i]===', dataMatrix[i] # \u8ba1\u7b97\u771f\u5b9e\u7c7b\u522b\u4e0e\u9884\u6d4b\u7c7b\u522b\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u7136\u540e\u6309\u7167\u8be5\u5dee\u503c\u8c03\u6574\u56de\u5f52\u7cfb\u6570 error = classLabels[i] - h # 0.01*(1*1)*(1*n) print weights, \"*\"*10 , dataMatrix[i], \"*\"*10 , error weights = weights + alpha * error * dataMatrix[i] return weights # \u968f\u673a\u68af\u5ea6\u4e0a\u5347\u7b97\u6cd5\uff08\u968f\u673a\u5316\uff09 def stocGradAscent1(dataMatrix, classLabels, numIter=150): m,n = shape(dataMatrix) weights = ones(n) # \u521b\u5efa\u4e0e\u5217\u6570\u76f8\u540c\u7684\u77e9\u9635\u7684\u7cfb\u6570\u77e9\u9635\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u662f1 # \u968f\u673a\u68af\u5ea6, \u5faa\u73af150,\u89c2\u5bdf\u662f\u5426\u6536\u655b for j in range(numIter): # [0, 1, 2 .. m-1] dataIndex = range(m) for i in range(m): # i\u548cj\u7684\u4e0d\u65ad\u589e\u5927\uff0c\u5bfc\u81f4alpha\u7684\u503c\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u4e3a0 alpha = 4/(1.0+j+i)+0.0001 # alpha \u4f1a\u968f\u7740\u8fed\u4ee3\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5c0f\u52300\uff0c\u56e0\u4e3a\u540e\u8fb9\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570\u98790.0001 # \u968f\u673a\u4ea7\u751f\u4e00\u4e2a 0\uff5elen()\u4e4b\u95f4\u7684\u4e00\u4e2a\u503c # random.uniform(x, y) \u65b9\u6cd5\u5c06\u968f\u673a\u751f\u6210\u4e0b\u4e00\u4e2a\u5b9e\u6570\uff0c\u5b83\u5728[x,y]\u8303\u56f4\u5185,x\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\uff0cy\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\u3002 randIndex = int(random.uniform(0,len(dataIndex))) # sum(dataMatrix[i]*weights)\u4e3a\u4e86\u6c42 f(x)\u7684\u503c\uff0c f(x)=a1*x1+b2*x2+..+nn*xn h = sigmoid(sum(dataMatrix[dataIndex[randIndex]]*weights)) error = classLabels[dataIndex[randIndex]] - h # print weights, '__h=%s' % h, '__'*20, alpha, '__'*20, error, '__'*20, dataMatrix[randIndex] weights = weights + alpha * error * dataMatrix[dataIndex[randIndex]] del(dataIndex[randIndex]) return weights \u6d4b\u8bd5\u7b97\u6cd5: \u4e3a\u4e86\u91cf\u5316\u56de\u5f52\u7684\u6548\u679c\uff0c\u9700\u8981\u89c2\u5bdf\u9519\u8bef\u7387\u3002\u6839\u636e\u9519\u8bef\u7387\u51b3\u5b9a\u662f\u5426\u56de\u9000\u5230\u8bad\u7ec3\u9636\u6bb5\uff0c\u901a\u8fc7\u6539\u53d8\u8fed\u4ee3\u7684\u6b21\u6570\u548c\u6b65\u957f\u7684\u53c2\u6570\u6765\u5f97\u5230\u66f4\u597d\u7684\u56de\u5f52\u7cfb\u6570 Logistic \u56de\u5f52\u5206\u7c7b\u51fd\u6570 # \u5206\u7c7b\u51fd\u6570\uff0c\u6839\u636e\u56de\u5f52\u7cfb\u6570\u548c\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97 Sigmoid\u7684\u503c def classifyVector(inX, weights): ''' Desc: \u6700\u7ec8\u7684\u5206\u7c7b\u51fd\u6570\uff0c\u6839\u636e\u56de\u5f52\u7cfb\u6570\u548c\u7279\u5f81\u5411\u91cf\u6765\u8ba1\u7b97 Sigmoid \u7684\u503c\uff0c\u5927\u4e8e0.5\u51fd\u6570\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0 Args: inX -- \u7279\u5f81\u5411\u91cf\uff0cfeatures weights -- \u6839\u636e\u68af\u5ea6\u4e0b\u964d/\u968f\u673a\u68af\u5ea6\u4e0b\u964d \u8ba1\u7b97\u5f97\u5230\u7684\u56de\u5f52\u7cfb\u6570 Returns: \u5982\u679c prob \u8ba1\u7b97\u5927\u4e8e 0.5 \u51fd\u6570\u8fd4\u56de 1 \u5426\u5219\u8fd4\u56de 0 ''' prob = sigmoid(sum(inX*weights)) if prob > 0.5: return 1.0 else: return 0.0 # \u6253\u5f00\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6,\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406 def colicTest(): ''' Desc: \u6253\u5f00\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406 Args: None Returns: errorRate -- \u5206\u7c7b\u9519\u8bef\u7387 ''' frTrain = open('db/5.Logistic/horseColicTraining.txt') frTest = open('db/5.Logistic/horseColicTest.txt') trainingSet = [] trainingLabels = [] # \u89e3\u6790\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u7279\u5f81\u548cLabels # trainingSet \u4e2d\u5b58\u50a8\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u7279\u5f81\uff0ctrainingLabels \u5b58\u50a8\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e for line in frTrain.readlines(): currLine = line.strip().split('\\t') lineArr = [] for i in range(21): lineArr.append(float(currLine[i])) trainingSet.append(lineArr) trainingLabels.append(float(currLine[21])) # \u4f7f\u7528 \u6539\u8fdb\u540e\u7684 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5 \u6c42\u5f97\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u7684\u6700\u4f73\u56de\u5f52\u7cfb\u6570 trainWeights trainWeights = stocGradAscent1(array(trainingSet), trainingLabels, 500) errorCount = 0 numTestVec = 0.0 # \u8bfb\u53d6 \u6d4b\u8bd5\u6570\u636e\u96c6 \u8fdb\u884c\u6d4b\u8bd5\uff0c\u8ba1\u7b97\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u6761\u6570\u548c\u6700\u7ec8\u7684\u9519\u8bef\u7387 for line in frTest.readlines(): numTestVec += 1.0 currLine = line.strip().split('\\t') lineArr = [] for i in range(21): lineArr.append(float(currLine[i])) if int(classifyVector(array(lineArr), trainWeights)) != int(currLine[21]): errorCount += 1 errorRate = (float(errorCount) / numTestVec) print \"the error rate of this test is: %f\" % errorRate return errorRate # \u8c03\u7528 colicTest() 10\u6b21\u5e76\u6c42\u7ed3\u679c\u7684\u5e73\u5747\u503c def multiTest(): numTests = 10 errorSum = 0.0 for k in range(numTests): errorSum += colicTest() print \"after %d iterations the average error rate is: %f\" % (numTests, errorSum/float(numTests)) \u4f7f\u7528\u7b97\u6cd5: \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6536\u96c6\u9a6c\u7684\u75c7\u72b6\u5e76\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\u5e76\u975e\u96be\u4e8b\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u7559\u7ed9\u5927\u5bb6\u7684\u4e00\u9053\u4e60\u9898","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/5.Logistic/#_14","text":"\u5728\u4e0a\u6587\u4e2d\uff0c\u5f53Sigmoid\u51fd\u6570\u5927\u4e8e 0.5 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.5 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002\u5176\u5b9e0.5\u4e5f\u662f\u53ef\u4ee5\u6539\u52a8\u7684\u3002 \u6bd4\u5982\u5927\u4e8e 0.9 \u7684\u6570\u636e\u88ab\u5206\u5165 1 \u7c7b\uff0c\u5c0f\u4e8e 0.9 \u5373\u88ab\u5f52\u5165 0 \u7c7b\u3002","title":"\u989d\u5916\u5185\u5bb9(\u53ef\u9009\u8bfb)"},{"location":"ml/5.Logistic/#logistic_6","text":"Logistic\u56de\u5f52\u548c\u6700\u5927\u71b5\u6a21\u578b \u90fd\u5c5e\u4e8e\u5bf9\u6570\u7ebf\u6027\u6a21\u578b \uff08log linear model\uff09\u3002 \u5f53\u7c7b\u6807\u7b7e\uff08class label\uff09\u53ea\u6709\u4e24\u4e2a\u7684\u65f6\u5019\uff0c\u6700\u5927\u71b5\u6a21\u578b\u5c31\u662f logistic \u56de\u5f52\u6a21\u578b\u3002 \u5b66\u4e60\u5b83\u4eec\u7684\u6a21\u578b\u4e00\u822c\u91c7\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6216\u8005\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u3002Logistic \u56de\u5f52\u548c\u6700\u5927\u71b5\u6a21\u578b\u5b66\u4e60\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u65e0\u7ea6\u675f\u6700\u4f18\u5316\u95ee\u9898\u3002\uff08\u5173\u4e8e\u6700\u5927\u71b5\u6a21\u578b\uff0c\u53ef\u4ee5\u9605\u8bfb\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b \u7b2c\u516d\u7ae0\u3002\uff09","title":"Logistic\u56de\u5f52 \u548c \u6700\u5927\u71b5\u6a21\u578b"},{"location":"ml/5.Logistic/#_15","text":"\u9664\u4e86\u68af\u5ea6\u4e0b\u964d\uff0c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff0c\u8fd8\u6709Conjugate Gradient\uff0cBFGS\uff0cL-BFGS\uff0c\u4ed6\u4eec\u4e0d\u9700\u8981\u6307\u5b9aalpha\u503c\uff08\u6b65\u957f\uff09\uff0c\u800c\u4e14\u6bd4\u68af\u5ea6\u4e0b\u964d\u66f4\u5feb\uff0c\u5728\u73b0\u5b9e\u4e2d\u5e94\u7528\u7684\u4e5f\u6bd4\u8f83\u591a\u3002 \u5f53\u7136\u8fd9\u4e9b\u7b97\u6cd5\u76f8\u6bd4\u968f\u673a\u68af\u5ea6\u8981\u590d\u6742\u3002 \u7efc\u4e0a\u8fd9\u4e9b\u7b97\u6cd5\u90fd\u6709\u4e00\u4e2a\u5171\u901a\u7684\u7f3a\u70b9\u5c31\u662f\u4ed6\u4eec\u90fd\u662f\u4e0d\u65ad\u53bb\u903c\u8fd1\u771f\u5b9e\u503c\uff0c\u6c38\u8fdc\u53ea\u662f\u4e00\u4e2a\u771f\u5b9e\u503c\u7684\u8fd1\u4f3c\u503c\u800c\u5df2\u3002","title":"\u5176\u4ed6\u7b97\u6cd5"},{"location":"ml/5.Logistic/#_16","text":"\u903b\u8f91\u56de\u5f52\u4e5f\u53ef\u4ee5\u7528\u4f5c\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u3002 \u601d\u8def\u5982\u4e0b\uff1a \u5047\u8bbe\u6211\u4eec\u6807\u7b7eA\u4e2d\u6709a0,a1,a2....an\u4e2a\u6807\u7b7e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6807\u7b7e ai (ai \u662f\u6807\u7b7eA\u4e4b\u4e00)\uff0c\u6211\u4eec\u8bad\u7ec3\u4e00\u4e2a\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u3002 \u5373\uff0c\u8bad\u7ec3\u8be5\u6807\u7b7e\u7684\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u7684\u65f6\u5019\uff0c\u5c06ai\u770b\u4f5c\u4e00\u7c7b\u6807\u7b7e\uff0c\u975eai\u7684\u6240\u6709\u6807\u7b7e\u770b\u4f5c\u4e00\u7c7b\u6807\u7b7e\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\u6574\u4e2a\u6570\u636e\u96c6\u91cc\u9762\u53ea\u6709\u4e24\u7c7b\u6807\u7b7e\uff1aai \u548c\u5176\u4ed6\u3002 \u5269\u4e0b\u6b65\u9aa4\u5c31\u8ddf\u6211\u4eec\u8bad\u7ec3\u6b63\u5e38\u7684\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u4e00\u6837\u4e86\u3002 \u6d4b\u8bd5\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c06\u67e5\u8be2\u70b9\u5957\u7528\u5728\u6bcf\u4e2a\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u4e2d\u7684Sigmoid \u51fd\u6570\uff0c\u53d6\u503c\u6700\u9ad8\u7684\u5bf9\u5e94\u6807\u7b7e\u4e3a\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u3002 \u4f5c\u8005\uff1a \u7f8a\u4e09 \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u591a\u6807\u7b7e\u5206\u7c7b"},{"location":"ml/6.SVM/","text":"\u7b2c6\u7ae0 \u652f\u6301\u5411\u91cf\u673a \u652f\u6301\u5411\u91cf\u673a \u6982\u8ff0 \u652f\u6301\u5411\u91cf\u673a(Support Vector Machines, SVM)\uff1a\u662f\u4e00\u79cd\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3002 \u652f\u6301\u5411\u91cf(Support Vector)\u5c31\u662f\u79bb\u5206\u9694\u8d85\u5e73\u9762\u6700\u8fd1\u7684\u90a3\u4e9b\u70b9\u3002 \u673a(Machine)\u5c31\u662f\u8868\u793a\u4e00\u79cd\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u8868\u793a\u673a\u5668\u3002 \u652f\u6301\u5411\u91cf\u673a \u573a\u666f \u8981\u7ed9\u5de6\u53f3\u4e24\u8fb9\u7684\u70b9\u8fdb\u884c\u5206\u7c7b \u660e\u663e\u53d1\u73b0\uff1a\u9009\u62e9D\u4f1a\u6bd4B\u3001C\u5206\u9694\u7684\u6548\u679c\u8981\u597d\u5f88\u591a\u3002 \u652f\u6301\u5411\u91cf\u673a \u539f\u7406 SVM \u5de5\u4f5c\u539f\u7406 \u5bf9\u4e8e\u4e0a\u8ff0\u7684\u82f9\u679c\u548c\u9999\u8549\uff0c\u6211\u4eec\u60f3\u8c61\u4e3a2\u79cd\u6c34\u679c\u7c7b\u578b\u7684\u70b8\u5f39\u3002\uff08\u4fdd\u8bc1\u8ddd\u79bb\u6700\u8fd1\u7684\u70b8\u5f39\uff0c\u8ddd\u79bb\u5b83\u4eec\u6700\u8fdc\uff09 \u5bfb\u627e\u6700\u5927\u5206\u7c7b\u95f4\u8ddd \u8f6c\u800c\u901a\u8fc7\u62c9\u683c\u6717\u65e5\u51fd\u6570\u6c42\u4f18\u5316\u7684\u95ee\u9898 \u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u753b\u4e00\u6761\u76f4\u7ebf\u5c31\u53ef\u4ee5\u5c06\u5b83\u4eec\u5b8c\u5168\u5206\u5f00\uff0c\u8fd9\u7ec4\u6570\u636e\u53eb \u7ebf\u6027\u53ef\u5206(linearly separable) \u6570\u636e\uff0c\u800c\u8fd9\u6761\u5206\u9694\u76f4\u7ebf\u79f0\u4e3a \u5206\u9694\u8d85\u5e73\u9762(separating hyperplane) \u3002 \u5982\u679c\u6570\u636e\u96c6\u4e0a\u5347\u52301024\u7ef4\u5462\uff1f\u90a3\u4e48\u9700\u89811023\u7ef4\u6765\u5206\u9694\u6570\u636e\u96c6\uff0c\u4e5f\u5c31\u8bf4\u9700\u8981N-1\u7ef4\u7684\u5bf9\u8c61\u6765\u5206\u9694\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u53eb\u505a \u8d85\u5e73\u9762(hyperlane) \uff0c\u4e5f\u5c31\u662f\u5206\u7c7b\u7684\u51b3\u7b56\u8fb9\u754c\u3002 \u5bfb\u627e\u6700\u5927\u95f4\u9694 \u4e3a\u4ec0\u4e48\u5bfb\u627e\u6700\u5927\u95f4\u9694 \u6458\u5f55\u5730\u5740\uff1ahttp://slideplayer.com/slide/8610144 (\u7b2c12\u6761\u4fe1\u606f) Support Vector Machines: Slide 12 Copyright \u00a9 2001, 2003, Andrew W. Moore Why Maximum Margin? 1.Intuitively this feels safest. 2.If we\u2019ve made a small error in the location of the boundary (it\u2019s been jolted in its perpendicular direction) this gives us least chance of causing a misclassification. 3.CV is easy since the model is immune to removal of any non-support-vector datapoints. 4.There\u2019s some theory that this is a good thing. 5.Empirically it works very very well. * * * 1. \u76f4\u89c9\u4e0a\u662f\u6700\u5b89\u5168\u7684 2. \u5982\u679c\u6211\u4eec\u5728\u8fb9\u754c\u7684\u4f4d\u7f6e\u53d1\u751f\u4e86\u4e00\u4e2a\u5c0f\u9519\u8bef\uff08\u5b83\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u88ab\u98a0\u5012\uff09\uff0c\u8fd9\u7ed9\u6211\u4eec\u6700\u5c0f\u7684\u53ef\u80fd\u5bfc\u81f4\u9519\u8bef\u5206\u7c7b\u3002 3. CV\uff08cross validation \u4ea4\u53c9\u9a8c\u8bc1\uff09\u5f88\u5bb9\u6613\uff0c\u56e0\u4e3a\u8be5\u6a21\u578b\u5bf9\u4efb\u4f55\u975e\u652f\u6301\u5411\u91cf\u6570\u636e\u70b9\u7684\u53bb\u9664\u662f\u514d\u75ab\u7684\u3002 4. \u6709\u4e00\u4e9b\u7406\u8bba\u8868\u660e\u8fd9\u662f\u4e00\u4ef6\u597d\u4e1c\u897f\u3002 5. \u4ece\u7ecf\u9a8c\u89d2\u5ea6\u4e0a\u8bf4\u5b83\u7684\u6548\u679c\u975e\u5e38\u975e\u5e38\u597d\u3002 \u600e\u4e48\u5bfb\u627e\u6700\u5927\u95f4\u9694 \u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb \u5206\u9694\u8d85\u5e73\u9762 \u51fd\u6570\u95f4\u8ddd : \\(y(x)=w^Tx+b\\) \u5206\u7c7b\u7684\u7ed3\u679c\uff1a \\(f(x)=sign(w^Tx+b)\\) (sign\u8868\u793a>0\u4e3a1\uff0c<0\u4e3a-1\uff0c=0\u4e3a0) \u70b9\u5230\u8d85\u5e73\u9762\u7684 \u51e0\u4f55\u95f4\u8ddd : \\(d(x)=(w^Tx+b)/||w||\\) \uff08||w||\u8868\u793aw\u77e9\u9635\u7684\u4e8c\u8303\u6570=> \\(\\sqrt{w^T*w}\\), \u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb\u4e5f\u662f\u7c7b\u4f3c\u7684\uff09 \u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5 \u7c7b\u522b\u6807\u7b7e\u7528-1\u30011\uff0c\u662f\u4e3a\u4e86\u540e\u671f\u65b9\u4fbf \\(label (w^Tx+b)\\) \u7684\u6807\u8bc6\u548c\u8ddd\u79bb\u8ba1\u7b97\uff1b\u5982\u679c \\(label (w^Tx+b)>0\\) \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0c\u5426\u5219\u9884\u6d4b\u9519\u8bef\u3002 \u73b0\u5728\u76ee\u6807\u5f88\u660e\u786e\uff0c\u5c31\u662f\u8981\u627e\u5230 w \u548c b \uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8981\u627e\u5230\u6700\u5c0f\u95f4\u9694\u7684\u6570\u636e\u70b9\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u6240\u8bf4\u7684 \u652f\u6301\u5411\u91cf \u3002 \u4e5f\u5c31\u8bf4\uff0c\u8ba9\u6700\u5c0f\u7684\u8ddd\u79bb\u53d6\u6700\u5927.(\u6700\u5c0f\u7684\u8ddd\u79bb\uff1a\u5c31\u662f\u6700\u5c0f\u95f4\u9694\u7684\u6570\u636e\u70b9\uff1b\u6700\u5927\uff1a\u5c31\u662f\u6700\u5927\u95f4\u8ddd\uff0c\u4e3a\u4e86\u627e\u51fa\u6700\u4f18\u8d85\u5e73\u9762--\u6700\u7ec8\u5c31\u662f\u652f\u6301\u5411\u91cf) \u76ee\u6807\u51fd\u6570\uff1a\\(arg: max_{\u5173\u4e8ew, b} \\left( min[label (w^Tx+b)] \\frac{1}{||w||} \\right) \\) \u5982\u679c \\(label*(w^Tx+b)>0\\) \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0c\u4e5f\u79f0 \u51fd\u6570\u95f4\u9694 \uff0c\\(||w||\\) \u53ef\u4ee5\u7406\u89e3\u4e3a\u5f52\u4e00\u5316\uff0c\u4e5f\u79f0 \u51e0\u4f55\u95f4\u9694 \u3002 \u4ee4 \\(label (w^Tx+b)>=1\\)\uff0c \u56e0\u4e3a0\uff5e1\u4e4b\u95f4\uff0c\u5f97\u5230\u7684\u70b9\u662f\u5b58\u5728\u8bef\u5224\u7684\u53ef\u80fd\u6027\uff0c\u6240\u4ee5\u8981\u4fdd\u969c \\(min[label (w^Tx+b)]=1\\)\uff0c\u624d\u80fd\u66f4\u597d\u964d\u4f4e\u566a\u97f3\u6570\u636e\u5f71\u54cd\u3002 \u6240\u4ee5\u672c\u8d28\u4e0a\u662f\u6c42 \\(arg: max_{\u5173\u4e8ew, b} \\frac{1}{||w||} \\)\uff1b\u4e5f\u5c31\u8bf4\uff0c\u6211\u4eec\u7ea6\u675f(\u524d\u63d0)\u6761\u4ef6\u662f: \\(label*(w^Tx+b)=1\\) \u65b0\u7684\u76ee\u6807\u51fd\u6570\u6c42\u89e3\uff1a \\(arg: max_{\u5173\u4e8ew, b} \\frac{1}{||w||} \\) => \u5c31\u662f\u6c42: \\(arg: min_{\u5173\u4e8ew, b} ||w|| \\) (\u6c42\u77e9\u9635\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5982\u679cx\u53ea\u662f \\(\\frac{1}{2}*x^2\\) \u7684\u504f\u5bfc\u6570\uff0c\u90a3\u4e48\u3002\u3002\u540c\u6837\u662f\u6c42\u6700\u5c0f\u503c) => \u5c31\u662f\u6c42: \\(arg: min_{\u5173\u4e8ew, b} (\\frac{1}{2}*||w||^2)\\) (\u4e8c\u6b21\u51fd\u6570\u6c42\u5bfc\uff0c\u6c42\u6781\u503c\uff0c\u5e73\u65b9\u4e5f\u65b9\u4fbf\u8ba1\u7b97) \u672c\u8d28\u4e0a\u5c31\u662f\u6c42\u7ebf\u6027\u4e0d\u7b49\u5f0f\u7684\u4e8c\u6b21\u4f18\u5316\u95ee\u9898(\u6c42\u5206\u9694\u8d85\u5e73\u9762\uff0c\u7b49\u4ef7\u4e8e\u6c42\u89e3\u76f8\u5e94\u7684\u51f8\u4e8c\u6b21\u89c4\u5212\u95ee\u9898) \u901a\u8fc7\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\uff0c\u6c42\u4e8c\u6b21\u4f18\u5316\u95ee\u9898 \u5047\u8bbe\u9700\u8981\u6c42\u6781\u503c\u7684\u76ee\u6807\u51fd\u6570 (objective function) \u4e3a f(x,y)\uff0c\u9650\u5236\u6761\u4ef6\u4e3a \u03c6(x,y)=M # M=1 \u8bbeg(x,y)=M-\u03c6(x,y) # \u4e34\u65f6\u03c6(x,y)\u8868\u793a\u4e0b\u6587\u4e2d \\(label*(w^Tx+b)\\) \u5b9a\u4e49\u4e00\u4e2a\u65b0\u51fd\u6570: F(x,y,\u03bb)=f(x,y)+\u03bbg(x,y) a\u4e3a\u03bb\uff08a>=0\uff09\uff0c\u4ee3\u8868\u8981\u5f15\u5165\u7684\u62c9\u683c\u6717\u65e5\u4e58\u5b50(Lagrange multiplier) \u90a3\u4e48\uff1a \\(L(w,b,\\alpha)=\\frac{1}{2} * ||w||^2 + \\sum_{i=1}^{n} \\alpha_i * [1 - label * (w^Tx+b)]\\) \u56e0\u4e3a\uff1a\\(label (w^Tx+b)>=1, \\alpha>=0\\) , \u6240\u4ee5 \\(\\alpha [1-label (w^Tx+b)]<=0\\) , \\(\\sum_{i=1}^{n} \\alpha_i * [1-label (w^Tx+b)]<=0\\) \u5f53 \\(label*(w^Tx+b)>1\\) \u5219 \\(\\alpha=0\\) \uff0c\u8868\u793a\u8be5\u70b9\u4e3a \u975e\u652f\u6301\u5411\u91cf \u76f8\u5f53\u4e8e\u6c42\u89e3\uff1a \\(max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha) = \\frac{1}{2} *||w||^2\\) \u5982\u679c\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} \\frac{1}{2} *||w||^2\\) , \u4e5f\u5c31\u662f\u8981\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} \\left( max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha)\\right)\\) \u73b0\u5728\u8f6c\u5316\u5230\u5bf9\u5076\u95ee\u9898\u7684\u6c42\u89e3 \\(min_{\u5173\u4e8ew, b} \\left(max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha) \\right) \\) >= \\(max_{\u5173\u4e8e\\alpha} \\left(min_{\u5173\u4e8ew, b}\\ L(w,b,\\alpha) \\right) \\) \u73b0\u5728\u52062\u6b65 \u5148\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} L(w,b,\\alpha)=\\frac{1}{2} * ||w||^2 + \\sum_{i=1}^{n} \\alpha_i * [1 - label * (w^Tx+b)]\\) \u5c31\u662f\u6c42 L(w,b,a) \u5173\u4e8e[w, b]\u7684\u504f\u5bfc\u6570, \u5f97\u5230 w\u548cb\u7684\u503c \uff0c\u5e76\u5316\u7b80\u4e3a\uff1a L\u548ca\u7684\u65b9\u7a0b \u3002 \u53c2\u8003\uff1a \u5982\u679c\u516c\u5f0f\u63a8\u5bfc\u8fd8\u662f\u4e0d\u61c2\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b\u674e\u822a-P103<\u5b66\u4e60\u7684\u5bf9\u5076\u7b97\u6cd5> \u7ec8\u4e8e\u5f97\u5230\u8bfe\u672c\u4e0a\u7684\u516c\u5f0f\uff1a \\(max_{\u5173\u4e8e\\alpha} \\left( \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2} \\sum_{i, j=1}^{m} label_i\u00b7label_j\u00b7\\alpha_i\u00b7\\alpha_j\u00b7 \\right) \\) \u7ea6\u675f\u6761\u4ef6\uff1a \\(a>=0\\) \u5e76\u4e14 \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\) \u677e\u5f1b\u53d8\u91cf(slack variable) \u53c2\u8003\u5730\u5740\uff1ahttp://blog.csdn.net/wusecaiyun/article/details/49659183 \u6211\u4eec\u77e5\u9053\u51e0\u4e4e\u6240\u6709\u7684\u6570\u636e\u90fd\u4e0d\u90a3\u4e48\u5e72\u51c0, \u901a\u8fc7\u5f15\u5165\u677e\u5f1b\u53d8\u91cf\u6765 \u5141\u8bb8\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u9519\u8bef\u7684\u4e00\u4fa7 \u3002 \u7ea6\u675f\u6761\u4ef6\uff1a \\(C>=a>=0\\) \u5e76\u4e14 \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\) \u603b\u7684\u6765\u8bf4\uff1a \u8868\u793a \u677e\u5f1b\u53d8\u91cf \u5e38\u91cfC\u662f \u60e9\u7f5a\u56e0\u5b50 , \u8868\u793a\u79bb\u7fa4\u70b9\u7684\u6743\u91cd\uff08\u7528\u4e8e\u63a7\u5236\u201c\u6700\u5927\u5316\u95f4\u9694\u201d\u548c\u201c\u4fdd\u8bc1\u5927\u90e8\u5206\u70b9\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u201d \uff09 \\(label*(w^Tx+b) > 1\\) and alpha = 0 (\u5728\u8fb9\u754c\u5916\uff0c\u5c31\u662f\u975e\u652f\u6301\u5411\u91cf) \\(label*(w^Tx+b) = 1\\) and 0< alpha < C (\u5728\u5206\u5272\u8d85\u5e73\u9762\u4e0a\uff0c\u5c31\u652f\u6301\u5411\u91cf) \\(label*(w^Tx+b) < 1\\) and alpha = C (\u5728\u5206\u5272\u8d85\u5e73\u9762\u5185\uff0c\u662f\u8bef\u5dee\u70b9 -> C\u8868\u793a\u5b83\u8be5\u53d7\u5230\u7684\u60e9\u7f5a\u56e0\u5b50\u7a0b\u5ea6) \u53c2\u8003\u5730\u5740\uff1ahttps://www.zhihu.com/question/48351234/answer/110486455 C\u503c\u8d8a\u5927\uff0c\u8868\u793a\u79bb\u7fa4\u70b9\u5f71\u54cd\u8d8a\u5927\uff0c\u5c31\u8d8a\u5bb9\u6613\u8fc7\u5ea6\u62df\u5408\uff1b\u53cd\u4e4b\u6709\u53ef\u80fd\u6b20\u62df\u5408\u3002 \u6211\u4eec\u770b\u5230\uff0c\u76ee\u6807\u51fd\u6570\u63a7\u5236\u4e86\u79bb\u7fa4\u70b9\u7684\u6570\u76ee\u548c\u7a0b\u5ea6\uff0c\u4f7f\u5927\u90e8\u5206\u6837\u672c\u70b9\u4ecd\u7136\u9075\u5b88\u9650\u5236\u6761\u4ef6\u3002 \u4f8b\u5982\uff1a\u6b63\u7c7b\u670910000\u4e2a\u6837\u672c\uff0c\u800c\u8d1f\u7c7b\u53ea\u7ed9\u4e86100\u4e2a\uff08C\u8d8a\u5927\u8868\u793a100\u4e2a\u8d1f\u6837\u672c\u7684\u5f71\u54cd\u8d8a\u5927\uff0c\u5c31\u4f1a\u51fa\u73b0\u8fc7\u5ea6\u62df\u5408\uff0c\u6240\u4ee5C\u51b3\u5b9a\u4e86\u8d1f\u6837\u672c\u5bf9\u6a21\u578b\u62df\u5408\u7a0b\u5ea6\u7684\u5f71\u54cd\uff01\uff0cC\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u4f18\u5316\u70b9\uff01\uff09 \u8fd9\u4e00\u7ed3\u8bba\u5341\u5206\u76f4\u63a5\uff0cSVM\u4e2d\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u8981\u6c42\u89e3 alpha. SMO \u9ad8\u6548\u4f18\u5316\u7b97\u6cd5 SVM\u6709\u5f88\u591a\u79cd\u5b9e\u73b0\uff0c\u6700\u6d41\u884c\u7684\u4e00\u79cd\u5b9e\u73b0\u662f\uff1a \u5e8f\u5217\u6700\u5c0f\u4f18\u5316(Sequential Minimal Optimization, SMO)\u7b97\u6cd5 \u3002 \u4e0b\u9762\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u79cd\u79f0\u4e3a \u6838\u51fd\u6570(kernel) \u7684\u65b9\u5f0f\u5c06SVM\u6269\u5c55\u5230\u66f4\u591a\u6570\u636e\u96c6\u4e0a\u3002 \u6ce8\u610f\uff1a SVM\u51e0\u4f55\u542b\u4e49\u6bd4\u8f83\u76f4\u89c2\uff0c\u4f46\u5176\u7b97\u6cd5\u5b9e\u73b0\u8f83\u590d\u6742\uff0c\u7275\u626f\u5927\u91cf\u6570\u5b66\u516c\u5f0f\u7684\u63a8\u5bfc\u3002 \u5e8f\u5217\u6700\u5c0f\u4f18\u5316(Sequential Minimal Optimization, SMO) \u521b\u5efa\u4f5c\u8005\uff1aJohn Platt \u521b\u5efa\u65f6\u95f4\uff1a1996\u5e74 SMO\u7528\u9014\uff1a\u7528\u4e8e\u8bad\u7ec3 SVM SMO\u76ee\u6807\uff1a\u6c42\u51fa\u4e00\u7cfb\u5217 alpha \u548c b,\u4e00\u65e6\u6c42\u51fa alpha\uff0c\u5c31\u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u6743\u91cd\u5411\u91cf w \u5e76\u5f97\u5230\u5206\u9694\u8d85\u5e73\u9762\u3002 SMO\u601d\u60f3\uff1a\u662f\u5c06\u5927\u4f18\u5316\u95ee\u9898\u5206\u89e3\u4e3a\u591a\u4e2a\u5c0f\u4f18\u5316\u95ee\u9898\u6765\u6c42\u89e3\u7684\u3002 SMO\u539f\u7406\uff1a\u6bcf\u6b21\u5faa\u73af\u9009\u62e9\u4e24\u4e2a alpha \u8fdb\u884c\u4f18\u5316\u5904\u7406\uff0c\u4e00\u65e6\u627e\u51fa\u4e00\u5bf9\u5408\u9002\u7684 alpha\uff0c\u90a3\u4e48\u5c31\u589e\u5927\u4e00\u4e2a\u540c\u65f6\u51cf\u5c11\u4e00\u4e2a\u3002 \u8fd9\u91cc\u6307\u7684\u5408\u9002\u5fc5\u987b\u8981\u7b26\u5408\u4e00\u5b9a\u7684\u6761\u4ef6 \u8fd9\u4e24\u4e2a alpha \u5fc5\u987b\u8981\u5728\u95f4\u9694\u8fb9\u754c\u4e4b\u5916 \u8fd9\u4e24\u4e2a alpha \u8fd8\u6ca1\u6709\u8fdb\u884c\u8fc7\u533a\u95f4\u5316\u5904\u7406\u6216\u8005\u4e0d\u5728\u8fb9\u754c\u4e0a\u3002 \u4e4b\u6240\u4ee5\u8981\u540c\u65f6\u6539\u53d82\u4e2a alpha\uff1b\u539f\u56e0\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff1a \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\)\uff1b\u5982\u679c\u53ea\u662f\u4fee\u6539\u4e00\u4e2a alpha\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u7ea6\u675f\u6761\u4ef6\u5931\u6548\u3002 SMO \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a \u521b\u5efa\u4e00\u4e2a alpha \u5411\u91cf\u5e76\u5c06\u5176\u521d\u59cb\u5316\u4e3a0\u5411\u91cf \u5f53\u8fed\u4ee3\u6b21\u6570\u5c0f\u4e8e\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u65f6(\u5916\u5faa\u73af) \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5411\u91cf(\u5185\u5faa\u73af)\uff1a \u5982\u679c\u8be5\u6570\u636e\u5411\u91cf\u53ef\u4ee5\u88ab\u4f18\u5316 \u968f\u673a\u9009\u62e9\u53e6\u5916\u4e00\u4e2a\u6570\u636e\u5411\u91cf \u540c\u65f6\u4f18\u5316\u8fd9\u4e24\u4e2a\u5411\u91cf \u5982\u679c\u4e24\u4e2a\u5411\u91cf\u90fd\u4e0d\u80fd\u88ab\u4f18\u5316\uff0c\u9000\u51fa\u5185\u5faa\u73af \u5982\u679c\u6240\u6709\u5411\u91cf\u90fd\u6ca1\u88ab\u4f18\u5316\uff0c\u589e\u52a0\u8fed\u4ee3\u6570\u76ee\uff0c\u7ee7\u7eed\u4e0b\u4e00\u6b21\u5faa\u73af SVM \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\u3002 \u5206\u6790\u6570\u636e\uff1a\u6709\u52a9\u4e8e\u53ef\u89c6\u5316\u5206\u9694\u8d85\u5e73\u9762\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1aSVM\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u6e90\u81ea\u8bad\u7ec3\uff0c\u8be5\u8fc7\u7a0b\u4e3b\u8981\u5b9e\u73b0\u4e24\u4e2a\u53c2\u6570\u7684\u8c03\u4f18\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5341\u5206\u7b80\u5355\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u51e0\u4e4e\u6240\u6709\u5206\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u4f7f\u7528SVM\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cSVM\u672c\u8eab\u662f\u4e00\u4e2a\u4e8c\u7c7b\u5206\u7c7b\u5668\uff0c\u5bf9\u591a\u7c7b\u95ee\u9898\u5e94\u7528SVM\u9700\u8981\u5bf9\u4ee3\u7801\u505a\u4e00\u4e9b\u4fee\u6539\u3002 SVM \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u6cdb\u5316\uff08\u7531\u5177\u4f53\u7684\u3001\u4e2a\u522b\u7684\u6269\u5927\u4e3a\u4e00\u822c\u7684\uff0c\u5c31\u662f\u8bf4\uff1a\u6a21\u578b\u8bad\u7ec3\u5b8c\u540e\u7684\u65b0\u6837\u672c\uff09\u9519\u8bef\u7387\u4f4e\uff0c\u8ba1\u7b97\u5f00\u9500\u4e0d\u5927\uff0c\u7ed3\u679c\u6613\u7406\u89e3\u3002 \u7f3a\u70b9\uff1a\u5bf9\u53c2\u6570\u8c03\u8282\u548c\u6838\u51fd\u6570\u7684\u9009\u62e9\u654f\u611f\uff0c\u539f\u59cb\u5206\u7c7b\u5668\u4e0d\u52a0\u4fee\u6539\u4ec5\u9002\u5408\u4e8e\u5904\u7406\u4e8c\u5206\u7c7b\u95ee\u9898\u3002 \u4f7f\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 \u8bfe\u672c\u6848\u4f8b\uff08\u65e0\u6838\u51fd\u6570\uff09 \u9879\u76ee\u6982\u8ff0 \u5bf9\u5c0f\u89c4\u6a21\u6570\u636e\u70b9\u8fdb\u884c\u5206\u7c7b \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e \u6587\u672c\u6587\u4ef6\u683c\u5f0f\uff1a 3.542485 1.977398 -1 3.018896 2.556416 -1 7.551510 -1.580030 1 2.114999 -0.004466 -1 8.127113 1.274372 1 \u51c6\u5907\u6570\u636e def loadDataSet(fileName): \"\"\" \u5bf9\u6587\u4ef6\u8fdb\u884c\u9010\u884c\u89e3\u6790\uff0c\u4ece\u800c\u5f97\u5230\u7b2c\u884c\u7684\u7c7b\u6807\u7b7e\u548c\u6574\u4e2a\u7279\u5f81\u77e9\u9635 Args: fileName \u6587\u4ef6\u540d Returns: dataMat \u7279\u5f81\u77e9\u9635 labelMat \u7c7b\u6807\u7b7e \"\"\" dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): lineArr = line.strip().split('\\t') dataMat.append([float(lineArr[0]), float(lineArr[1])]) labelMat.append(float(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u65e0 \u8bad\u7ec3\u7b97\u6cd5 def smoSimple(dataMatIn, classLabels, C, toler, maxIter): \"\"\"smoSimple Args: dataMatIn \u7279\u5f81\u96c6\u5408 classLabels \u7c7b\u522b\u6807\u7b7e C \u677e\u5f1b\u53d8\u91cf(\u5e38\u91cf\u503c)\uff0c\u5141\u8bb8\u6709\u4e9b\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u7684\u9519\u8bef\u4e00\u4fa7\u3002 \u63a7\u5236\u6700\u5927\u5316\u95f4\u9694\u548c\u4fdd\u8bc1\u5927\u90e8\u5206\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u8fd9\u4e24\u4e2a\u76ee\u6807\u7684\u6743\u91cd\u3002 \u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u8be5\u53c2\u6570\u8fbe\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002 toler \u5bb9\u9519\u7387\uff08\u662f\u6307\u5728\u67d0\u4e2a\u4f53\u7cfb\u4e2d\u80fd\u51cf\u5c0f\u4e00\u4e9b\u56e0\u7d20\u6216\u9009\u62e9\u5bf9\u67d0\u4e2a\u7cfb\u7edf\u4ea7\u751f\u4e0d\u7a33\u5b9a\u7684\u6982\u7387\u3002\uff09 maxIter \u9000\u51fa\u524d\u6700\u5927\u7684\u5faa\u73af\u6b21\u6570 Returns: b \u6a21\u578b\u7684\u5e38\u91cf\u503c alphas \u62c9\u683c\u6717\u65e5\u4e58\u5b50 \"\"\" dataMatrix = mat(dataMatIn) # \u77e9\u9635\u8f6c\u7f6e \u548c .T \u4e00\u6837\u7684\u529f\u80fd labelMat = mat(classLabels).transpose() m, n = shape(dataMatrix) # \u521d\u59cb\u5316 b\u548calphas(alpha\u6709\u70b9\u7c7b\u4f3c\u6743\u91cd\u503c\u3002) b = 0 alphas = mat(zeros((m, 1))) # \u6ca1\u6709\u4efb\u4f55alpha\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u904d\u5386\u6570\u636e\u7684\u6b21\u6570 iter = 0 while (iter < maxIter): # w = calcWs(alphas, dataMatIn, classLabels) # print(\"w:\", w) # \u8bb0\u5f55alpha\u662f\u5426\u5df2\u7ecf\u8fdb\u884c\u4f18\u5316\uff0c\u6bcf\u6b21\u5faa\u73af\u65f6\u8bbe\u4e3a0\uff0c\u7136\u540e\u518d\u5bf9\u6574\u4e2a\u96c6\u5408\u987a\u5e8f\u904d\u5386 alphaPairsChanged = 0 for i in range(m): # print 'alphas=', alphas # print 'labelMat=', labelMat # print 'multiply(alphas, labelMat)=', multiply(alphas, labelMat) # \u6211\u4eec\u9884\u6d4b\u7684\u7c7b\u522b y[i] = w^Tx[i]+b; \u5176\u4e2d\u56e0\u4e3a w = \u03a3(1~n) a[n]*label[n]*x[n] fXi = float(multiply(alphas, labelMat).T*(dataMatrix*dataMatrix[i, :].T)) + b # \u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u6bd4\u5bf9\uff0c\u8ba1\u7b97\u8bef\u5deeEi Ei = fXi - float(labelMat[i]) # \u7ea6\u675f\u6761\u4ef6 (KKT\u6761\u4ef6\u662f\u89e3\u51b3\u6700\u4f18\u5316\u95ee\u9898\u7684\u65f6\u7528\u5230\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u6211\u4eec\u8fd9\u91cc\u63d0\u5230\u7684\u6700\u4f18\u5316\u95ee\u9898\u901a\u5e38\u662f\u6307\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67d0\u4e00\u51fd\u6570\uff0c\u6c42\u5176\u5728\u6307\u5b9a\u4f5c\u7528\u57df\u4e0a\u7684\u5168\u5c40\u6700\u5c0f\u503c) # 0<=alphas[i]<=C\uff0c\u4f46\u7531\u4e8e0\u548cC\u662f\u8fb9\u754c\u503c\uff0c\u6211\u4eec\u65e0\u6cd5\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u9700\u8981\u589e\u52a0\u4e00\u4e2aalphas\u548c\u964d\u4f4e\u4e00\u4e2aalphas\u3002 # \u8868\u793a\u53d1\u751f\u9519\u8bef\u7684\u6982\u7387\uff1alabelMat[i]*Ei \u5982\u679c\u8d85\u51fa\u4e86 toler\uff0c \u624d\u9700\u8981\u4f18\u5316\u3002\u81f3\u4e8e\u6b63\u8d1f\u53f7\uff0c\u6211\u4eec\u8003\u8651\u7edd\u5bf9\u503c\u5c31\u5bf9\u4e86\u3002 ''' # \u68c0\u9a8c\u8bad\u7ec3\u6837\u672c(xi, yi)\u662f\u5426\u6ee1\u8db3KKT\u6761\u4ef6 yi*f(i) >= 1 and alpha = 0 (outside the boundary) yi*f(i) == 1 and 0<alpha< C (on the boundary) yi*f(i) <= 1 and alpha = C (between the boundary) ''' if ((labelMat[i]*Ei < -toler) and (alphas[i] < C)) or ((labelMat[i]*Ei > toler) and (alphas[i] > 0)): # \u5982\u679c\u6ee1\u8db3\u4f18\u5316\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u968f\u673a\u9009\u53d6\u975ei\u7684\u4e00\u4e2a\u70b9\uff0c\u8fdb\u884c\u4f18\u5316\u6bd4\u8f83 j = selectJrand(i, m) # \u9884\u6d4bj\u7684\u7ed3\u679c fXj = float(multiply(alphas, labelMat).T*(dataMatrix*dataMatrix[j, :].T)) + b Ej = fXj - float(labelMat[j]) alphaIold = alphas[i].copy() alphaJold = alphas[j].copy() # L\u548cH\u7528\u4e8e\u5c06alphas[j]\u8c03\u6574\u52300-C\u4e4b\u95f4\u3002\u5982\u679cL==H\uff0c\u5c31\u4e0d\u505a\u4efb\u4f55\u6539\u53d8\uff0c\u76f4\u63a5\u6267\u884ccontinue\u8bed\u53e5 # labelMat[i] != labelMat[j] \u8868\u793a\u5f02\u4fa7\uff0c\u5c31\u76f8\u51cf\uff0c\u5426\u5219\u662f\u540c\u4fa7\uff0c\u5c31\u76f8\u52a0\u3002 if (labelMat[i] != labelMat[j]): L = max(0, alphas[j] - alphas[i]) H = min(C, C + alphas[j] - alphas[i]) else: L = max(0, alphas[j] + alphas[i] - C) H = min(C, alphas[j] + alphas[i]) # \u5982\u679c\u76f8\u540c\uff0c\u5c31\u6ca1\u6cd5\u4f18\u5316\u4e86 if L == H: print(\"L==H\") continue # eta\u662falphas[j]\u7684\u6700\u4f18\u4fee\u6539\u91cf\uff0c\u5982\u679ceta==0\uff0c\u9700\u8981\u9000\u51fafor\u5faa\u73af\u7684\u5f53\u524d\u8fed\u4ee3\u8fc7\u7a0b # \u53c2\u8003\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b\u674e\u822a-P125~P128<\u5e8f\u5217\u6700\u5c0f\u6700\u4f18\u5316\u7b97\u6cd5> eta = 2.0 * dataMatrix[i, :]*dataMatrix[j, :].T - dataMatrix[i, :]*dataMatrix[i, :].T - dataMatrix[j, :]*dataMatrix[j, :].T if eta >= 0: print(\"eta>=0\") continue # \u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b0\u7684alphas[j]\u503c alphas[j] -= labelMat[j]*(Ei - Ej)/eta # \u5e76\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\uff0c\u4ee5\u53caL\u548cH\u5bf9\u5176\u8fdb\u884c\u8c03\u6574 alphas[j] = clipAlpha(alphas[j], H, L) # \u68c0\u67e5alpha[j]\u662f\u5426\u53ea\u662f\u8f7b\u5fae\u7684\u6539\u53d8\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fafor\u5faa\u73af\u3002 if (abs(alphas[j] - alphaJold) < 0.00001): print(\"j not moving enough\") continue # \u7136\u540ealphas[i]\u548calphas[j]\u540c\u6837\u8fdb\u884c\u6539\u53d8\uff0c\u867d\u7136\u6539\u53d8\u7684\u5927\u5c0f\u4e00\u6837\uff0c\u4f46\u662f\u6539\u53d8\u7684\u65b9\u5411\u6b63\u597d\u76f8\u53cd alphas[i] += labelMat[j]*labelMat[i]*(alphaJold - alphas[j]) # \u5728\u5bf9alpha[i], alpha[j] \u8fdb\u884c\u4f18\u5316\u4e4b\u540e\uff0c\u7ed9\u8fd9\u4e24\u4e2aalpha\u503c\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u6570b\u3002 # w= \u03a3[1~n] ai*yi*xi => b = yj- \u03a3[1~n] ai*yi(xi*xj) # \u6240\u4ee5\uff1a b1 - b = (y1-y) - \u03a3[1~n] yi*(a1-a)*(xi*x1) # \u4e3a\u4ec0\u4e48\u51cf2\u904d\uff1f \u56e0\u4e3a\u662f \u51cf\u53bb\u03a3[1~n]\uff0c\u6b63\u597d2\u4e2a\u53d8\u91cfi\u548cj\uff0c\u6240\u4ee5\u51cf2\u904d b1 = b - Ei- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i, :]*dataMatrix[i, :].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[i, :]*dataMatrix[j, :].T b2 = b - Ej- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i, :]*dataMatrix[j, :].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[j, :]*dataMatrix[j, :].T if (0 < alphas[i]) and (C > alphas[i]): b = b1 elif (0 < alphas[j]) and (C > alphas[j]): b = b2 else: b = (b1 + b2)/2.0 alphaPairsChanged += 1 print(\"iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) # \u5728for\u5faa\u73af\u5916\uff0c\u68c0\u67e5alpha\u503c\u662f\u5426\u505a\u4e86\u66f4\u65b0\uff0c\u5982\u679c\u66f4\u65b0\u5219\u5c06iter\u8bbe\u4e3a0\u540e\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f # \u76f4\u5230\u66f4\u65b0\u5b8c\u6bd5\u540e\uff0citer\u6b21\u5faa\u73af\u65e0\u53d8\u5316\uff0c\u624d\u9000\u51fa\u5faa\u73af\u3002 if (alphaPairsChanged == 0): iter += 1 else: iter = 0 print(\"iteration number: %d\" % iter) return b, alphas \u5b8c\u6574\u4ee3\u7801\u5730\u5740\uff1aSVM\u7b80\u5316\u7248\uff0c\u5e94\u7528\u7b80\u5316\u7248SMO\u7b97\u6cd5\u5904\u7406\u5c0f\u89c4\u6a21\u6570\u636e\u96c6 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-simple.py \u5b8c\u6574\u4ee3\u7801\u5730\u5740\uff1aSVM\u5b8c\u6574\u7248\uff0c\u4f7f\u7528\u5b8c\u6574 Platt SMO\u7b97\u6cd5\u52a0\u901f\u4f18\u5316\uff0c\u4f18\u5316\u70b9\uff1a\u9009\u62e9alpha\u7684\u65b9\u5f0f\u4e0d\u540c : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-complete_Non-Kernel.py \u6838\u51fd\u6570(kernel) \u4f7f\u7528 \u5bf9\u4e8e\u7ebf\u6027\u53ef\u5206\u7684\u60c5\u51b5\uff0c\u6548\u679c\u660e\u663e \u5bf9\u4e8e\u975e\u7ebf\u6027\u7684\u60c5\u51b5\u4e5f\u4e00\u6837\uff0c\u6b64\u65f6\u9700\u8981\u7528\u5230\u4e00\u79cd\u53eb \u6838\u51fd\u6570(kernel) \u7684\u5de5\u5177\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u5206\u7c7b\u5668\u6613\u4e8e\u7406\u89e3\u7684\u5f62\u5f0f\u3002 \u5229\u7528\u6838\u51fd\u6570\u5c06\u6570\u636e\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4 \u4f7f\u7528\u6838\u51fd\u6570\uff1a\u53ef\u4ee5\u5c06\u6570\u636e\u4ece\u67d0\u4e2a\u7279\u5f81\u7a7a\u95f4\u5230\u53e6\u4e00\u4e2a\u7279\u5f81\u7a7a\u95f4\u7684\u6620\u5c04\u3002\uff08\u901a\u5e38\u60c5\u51b5\u4e0b\uff1a\u8fd9\u79cd\u6620\u5c04\u4f1a\u5c06\u4f4e\u7ef4\u7279\u5f81\u7a7a\u95f4\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4\u3002\uff09 \u5982\u679c\u89c9\u5f97\u7279\u5f81\u7a7a\u95f4\u5f88\u88c5\u903c\u3001\u5f88\u96be\u7406\u89e3\u3002 \u53ef\u4ee5\u628a\u6838\u51fd\u6570\u60f3\u8c61\u6210\u4e00\u4e2a\u5305\u88c5\u5668(wrapper)\u6216\u8005\u662f\u63a5\u53e3(interface)\uff0c\u5b83\u80fd\u5c06\u6570\u636e\u4ece\u67d0\u4e2a\u5f88\u96be\u5904\u7406\u7684\u5f62\u5f0f\u8f6c\u6362\u6210\u4e3a\u53e6\u4e00\u4e2a\u8f83\u5bb9\u6613\u5904\u7406\u7684\u5f62\u5f0f\u3002 \u7ecf\u8fc7\u7a7a\u95f4\u8f6c\u6362\u540e\uff1a\u4f4e\u7ef4\u9700\u8981\u89e3\u51b3\u7684\u975e\u7ebf\u6027\u95ee\u9898\uff0c\u5c31\u53d8\u6210\u4e86\u9ad8\u7ef4\u9700\u8981\u89e3\u51b3\u7684\u7ebf\u6027\u95ee\u9898\u3002 SVM \u4f18\u5316\u7279\u522b\u597d\u7684\u5730\u65b9\uff0c\u5728\u4e8e\u6240\u6709\u7684\u8fd0\u7b97\u90fd\u53ef\u4ee5\u5199\u6210\u5185\u79ef(inner product: \u662f\u63072\u4e2a\u5411\u91cf\u76f8\u4e58\uff0c\u5f97\u5230\u5355\u4e2a\u6807\u91cf \u6216\u8005 \u6570\u503c)\uff1b\u5185\u79ef\u66ff\u6362\u6210\u6838\u51fd\u6570\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a \u6838\u6280\u5de7(kernel trick) \u6216\u8005 \u6838\"\u53d8\u7535\"(kernel substation) \u6838\u51fd\u6570\u5e76\u4e0d\u4ec5\u4ec5\u5e94\u7528\u4e8e\u652f\u6301\u5411\u91cf\u673a\uff0c\u5f88\u591a\u5176\u4ed6\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e5f\u90fd\u7528\u5230\u6838\u51fd\u6570\u3002\u6700\u6d41\u884c\u7684\u6838\u51fd\u6570\uff1a\u5f84\u5411\u57fa\u51fd\u6570(radial basis function) \u5f84\u5411\u57fa\u51fd\u6570\u7684\u9ad8\u65af\u7248\u672c\uff0c\u5176\u5177\u4f53\u7684\u516c\u5f0f\u4e3a\uff1a \u9879\u76ee\u6848\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b\u7684\u4f18\u5316\uff08\u6709\u6838\u51fd\u6570\uff09 \u9879\u76ee\u6982\u8ff0 \u4f60\u7684\u8001\u677f\u8981\u6c42\uff1a\u4f60\u5199\u7684\u90a3\u4e2a\u624b\u5199\u8bc6\u522b\u7a0b\u5e8f\u975e\u5e38\u597d\uff0c\u4f46\u662f\u5b83\u5360\u7528\u5185\u5b58\u592a\u5927\u3002\u987e\u5ba2\u65e0\u6cd5\u901a\u8fc7\u65e0\u7ebf\u7684\u65b9\u5f0f\u4e0b\u8f7d\u6211\u4eec\u7684\u5e94\u7528\u3002 \u6240\u4ee5\uff1a\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\uff0c\u4fdd\u7559\u652f\u6301\u5411\u91cf\u5c31\u884c\uff08knn\u9700\u8981\u4fdd\u7559\u6240\u6709\u7684\u5411\u91cf\uff09\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u975e\u5e38\u597d\u7684\u6548\u679c\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4efu51c6\u5907\u6570\u636e\uff1a\u57fa\u4e8e\u4e8c\u503c\u56fe\u50cf\u6784\u9020\u5411\u91cf \u5c06 32*32\u7684\u6587\u672c\u8f6c\u5316\u4e3a 1*1024\u7684\u77e9\u9635 def img2vector(filename): returnVect = zeros((1, 1024)) fr = open(filename) for i in range(32): lineStr = fr.readline() for j in range(32): returnVect[0, 32 * i + j] = int(lineStr[j]) return returnVect def loadImages(dirName): from os import listdir hwLabels = [] print(dirName) trainingFileList = listdir(dirName) # load the training set m = len(trainingFileList) trainingMat = zeros((m, 1024)) for i in range(m): fileNameStr = trainingFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) if classNumStr == 9: hwLabels.append(-1) else: hwLabels.append(1) trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr)) return trainingMat, hwLabels \u5206\u6790\u6570\u636e\uff1a\u5bf9\u56fe\u50cf\u5411\u91cf\u8fdb\u884c\u76ee\u6d4b \u8bad\u7ec3\u7b97\u6cd5\uff1a\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u6838\u51fd\u6570\uff0c\u5e76\u5bf9\u5f84\u5411\u57fa\u6838\u51fd\u6570\u91c7\u7528\u4e0d\u540c\u7684\u8bbe\u7f6e\u6765\u8fd0\u884cSMO\u7b97\u6cd5 def kernelTrans(X, A, kTup): # calc the kernel or transform data to a higher dimensional space \"\"\" \u6838\u8f6c\u6362\u51fd\u6570 Args: X dataMatIn\u6570\u636e\u96c6 A dataMatIn\u6570\u636e\u96c6\u7684\u7b2ci\u884c\u7684\u6570\u636e kTup \u6838\u51fd\u6570\u7684\u4fe1\u606f Returns: \"\"\" m, n = shape(X) K = mat(zeros((m, 1))) if kTup[0] == 'lin': # linear kernel: m*n * n*1 = m*1 K = X * A.T elif kTup[0] == 'rbf': for j in range(m): deltaRow = X[j, :] - A K[j] = deltaRow * deltaRow.T # \u5f84\u5411\u57fa\u51fd\u6570\u7684\u9ad8\u65af\u7248\u672c K = exp(K / (-1 * kTup[1] ** 2)) # divide in NumPy is element-wise not matrix like Matlab else: raise NameError('Houston We Have a Problem -- That Kernel is not recognized') return K def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)): \"\"\" \u5b8c\u6574SMO\u7b97\u6cd5\u5916\u5faa\u73af\uff0c\u4e0esmoSimple\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u8fd9\u91cc\u7684\u5faa\u73af\u9000\u51fa\u6761\u4ef6\u66f4\u591a\u4e00\u4e9b Args: dataMatIn \u6570\u636e\u96c6 classLabels \u7c7b\u522b\u6807\u7b7e C \u677e\u5f1b\u53d8\u91cf(\u5e38\u91cf\u503c)\uff0c\u5141\u8bb8\u6709\u4e9b\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u7684\u9519\u8bef\u4e00\u4fa7\u3002 \u63a7\u5236\u6700\u5927\u5316\u95f4\u9694\u548c\u4fdd\u8bc1\u5927\u90e8\u5206\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u8fd9\u4e24\u4e2a\u76ee\u6807\u7684\u6743\u91cd\u3002 \u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u8be5\u53c2\u6570\u8fbe\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002 toler \u5bb9\u9519\u7387 maxIter \u9000\u51fa\u524d\u6700\u5927\u7684\u5faa\u73af\u6b21\u6570 kTup \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4 Returns: b \u6a21\u578b\u7684\u5e38\u91cf\u503c alphas \u62c9\u683c\u6717\u65e5\u4e58\u5b50 \"\"\" # \u521b\u5efa\u4e00\u4e2a optStruct \u5bf9\u8c61 oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(), C, toler, kTup) iter = 0 entireSet = True alphaPairsChanged = 0 # \u5faa\u73af\u904d\u5386\uff1a\u5faa\u73afmaxIter\u6b21 \u5e76\u4e14 \uff08alphaPairsChanged\u5b58\u5728\u53ef\u4ee5\u6539\u53d8 or \u6240\u6709\u884c\u904d\u5386\u4e00\u904d\uff09 while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)): alphaPairsChanged = 0 # \u5f53entireSet=true or \u975e\u8fb9\u754calpha\u5bf9\u6ca1\u6709\u4e86\uff1b\u5c31\u5f00\u59cb\u5bfb\u627e alpha\u5bf9\uff0c\u7136\u540e\u51b3\u5b9a\u662f\u5426\u8981\u8fdb\u884celse\u3002 if entireSet: # \u5728\u6570\u636e\u96c6\u4e0a\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684alpha for i in range(oS.m): # \u662f\u5426\u5b58\u5728alpha\u5bf9\uff0c\u5b58\u5728\u5c31+1 alphaPairsChanged += innerL(i, oS) # print(\"fullSet, iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) iter += 1 # \u5bf9\u5df2\u5b58\u5728 alpha\u5bf9\uff0c\u9009\u51fa\u975e\u8fb9\u754c\u7684alpha\u503c\uff0c\u8fdb\u884c\u4f18\u5316\u3002 else: # \u904d\u5386\u6240\u6709\u7684\u975e\u8fb9\u754calpha\u503c\uff0c\u4e5f\u5c31\u662f\u4e0d\u5728\u8fb9\u754c0\u6216C\u4e0a\u7684\u503c\u3002 nonBoundIs = nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0] for i in nonBoundIs: alphaPairsChanged += innerL(i, oS) # print(\"non-bound, iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) iter += 1 # \u5982\u679c\u627e\u5230alpha\u5bf9\uff0c\u5c31\u4f18\u5316\u975e\u8fb9\u754calpha\u503c\uff0c\u5426\u5219\uff0c\u5c31\u91cd\u65b0\u8fdb\u884c\u5bfb\u627e\uff0c\u5982\u679c\u5bfb\u627e\u4e00\u904d \u904d\u5386\u6240\u6709\u7684\u884c\u8fd8\u662f\u6ca1\u627e\u5230\uff0c\u5c31\u9000\u51fa\u5faa\u73af\u3002 if entireSet: entireSet = False # toggle entire set loop elif (alphaPairsChanged == 0): entireSet = True print(\"iteration number: %d\" % iter) return oS.b, oS.alphas \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4fbf\u643a\u4e00\u4e2a\u51fd\u6570\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u548c\u51fd\u6570\u5e76\u8ba1\u7b97\u9519\u8bef\u7387 def testDigits(kTup=('rbf', 10)): # 1. \u5bfc\u5165\u8bad\u7ec3\u6570\u636e dataArr, labelArr = loadImages('db/6.SVM/trainingDigits') b, alphas = smoP(dataArr, labelArr, 200, 0.0001, 10000, kTup) datMat = mat(dataArr) labelMat = mat(labelArr).transpose() svInd = nonzero(alphas.A > 0)[0] sVs = datMat[svInd] labelSV = labelMat[svInd] # print(\"there are %d Support Vectors\" % shape(sVs)[0]) m, n = shape(datMat) errorCount = 0 for i in range(m): kernelEval = kernelTrans(sVs, datMat[i, :], kTup) # 1*m * m*1 = 1*1 \u5355\u4e2a\u9884\u6d4b\u7ed3\u679c predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b if sign(predict) != sign(labelArr[i]): errorCount += 1 print(\"the training error rate is: %f\" % (float(errorCount) / m)) # 2. \u5bfc\u5165\u6d4b\u8bd5\u6570\u636e dataArr, labelArr = loadImages('db/6.SVM/testDigits') errorCount = 0 datMat = mat(dataArr) labelMat = mat(labelArr).transpose() m, n = shape(datMat) for i in range(m): kernelEval = kernelTrans(sVs, datMat[i, :], kTup) # 1*m * m*1 = 1*1 \u5355\u4e2a\u9884\u6d4b\u7ed3\u679c predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b if sign(predict) != sign(labelArr[i]): errorCount += 1 print(\"the test error rate is: %f\" % (float(errorCount) / m)) \u4f7f\u7528\u7b97\u6cd5\uff1a\u4e00\u4e2a\u56fe\u50cf\u8bc6\u522b\u7684\u5b8c\u6574\u5e94\u7528\u8fd8\u9700\u8981\u4e00\u4e9b\u56fe\u50cf\u5904\u7406\u7684\u77e5\u8bc6\uff0c\u8fd9\u91cc\u5e76\u4e0d\u6253\u7b97\u6df1\u5165\u4ecb\u7ecd \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-complete.py \u4f5c\u8005\uff1a \u7247\u523b geekidentity GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c6\u7ae0_\u652f\u6301\u5411\u91cf\u673a"},{"location":"ml/6.SVM/#6","text":"","title":"\u7b2c6\u7ae0 \u652f\u6301\u5411\u91cf\u673a"},{"location":"ml/6.SVM/#_1","text":"\u652f\u6301\u5411\u91cf\u673a(Support Vector Machines, SVM)\uff1a\u662f\u4e00\u79cd\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u3002 \u652f\u6301\u5411\u91cf(Support Vector)\u5c31\u662f\u79bb\u5206\u9694\u8d85\u5e73\u9762\u6700\u8fd1\u7684\u90a3\u4e9b\u70b9\u3002 \u673a(Machine)\u5c31\u662f\u8868\u793a\u4e00\u79cd\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u8868\u793a\u673a\u5668\u3002","title":"\u652f\u6301\u5411\u91cf\u673a \u6982\u8ff0"},{"location":"ml/6.SVM/#_2","text":"\u8981\u7ed9\u5de6\u53f3\u4e24\u8fb9\u7684\u70b9\u8fdb\u884c\u5206\u7c7b \u660e\u663e\u53d1\u73b0\uff1a\u9009\u62e9D\u4f1a\u6bd4B\u3001C\u5206\u9694\u7684\u6548\u679c\u8981\u597d\u5f88\u591a\u3002","title":"\u652f\u6301\u5411\u91cf\u673a \u573a\u666f"},{"location":"ml/6.SVM/#_3","text":"","title":"\u652f\u6301\u5411\u91cf\u673a \u539f\u7406"},{"location":"ml/6.SVM/#svm","text":"\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u82f9\u679c\u548c\u9999\u8549\uff0c\u6211\u4eec\u60f3\u8c61\u4e3a2\u79cd\u6c34\u679c\u7c7b\u578b\u7684\u70b8\u5f39\u3002\uff08\u4fdd\u8bc1\u8ddd\u79bb\u6700\u8fd1\u7684\u70b8\u5f39\uff0c\u8ddd\u79bb\u5b83\u4eec\u6700\u8fdc\uff09 \u5bfb\u627e\u6700\u5927\u5206\u7c7b\u95f4\u8ddd \u8f6c\u800c\u901a\u8fc7\u62c9\u683c\u6717\u65e5\u51fd\u6570\u6c42\u4f18\u5316\u7684\u95ee\u9898 \u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u753b\u4e00\u6761\u76f4\u7ebf\u5c31\u53ef\u4ee5\u5c06\u5b83\u4eec\u5b8c\u5168\u5206\u5f00\uff0c\u8fd9\u7ec4\u6570\u636e\u53eb \u7ebf\u6027\u53ef\u5206(linearly separable) \u6570\u636e\uff0c\u800c\u8fd9\u6761\u5206\u9694\u76f4\u7ebf\u79f0\u4e3a \u5206\u9694\u8d85\u5e73\u9762(separating hyperplane) \u3002 \u5982\u679c\u6570\u636e\u96c6\u4e0a\u5347\u52301024\u7ef4\u5462\uff1f\u90a3\u4e48\u9700\u89811023\u7ef4\u6765\u5206\u9694\u6570\u636e\u96c6\uff0c\u4e5f\u5c31\u8bf4\u9700\u8981N-1\u7ef4\u7684\u5bf9\u8c61\u6765\u5206\u9694\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u53eb\u505a \u8d85\u5e73\u9762(hyperlane) \uff0c\u4e5f\u5c31\u662f\u5206\u7c7b\u7684\u51b3\u7b56\u8fb9\u754c\u3002","title":"SVM \u5de5\u4f5c\u539f\u7406"},{"location":"ml/6.SVM/#_4","text":"","title":"\u5bfb\u627e\u6700\u5927\u95f4\u9694"},{"location":"ml/6.SVM/#_5","text":"\u6458\u5f55\u5730\u5740\uff1ahttp://slideplayer.com/slide/8610144 (\u7b2c12\u6761\u4fe1\u606f) Support Vector Machines: Slide 12 Copyright \u00a9 2001, 2003, Andrew W. Moore Why Maximum Margin? 1.Intuitively this feels safest. 2.If we\u2019ve made a small error in the location of the boundary (it\u2019s been jolted in its perpendicular direction) this gives us least chance of causing a misclassification. 3.CV is easy since the model is immune to removal of any non-support-vector datapoints. 4.There\u2019s some theory that this is a good thing. 5.Empirically it works very very well. * * * 1. \u76f4\u89c9\u4e0a\u662f\u6700\u5b89\u5168\u7684 2. \u5982\u679c\u6211\u4eec\u5728\u8fb9\u754c\u7684\u4f4d\u7f6e\u53d1\u751f\u4e86\u4e00\u4e2a\u5c0f\u9519\u8bef\uff08\u5b83\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u88ab\u98a0\u5012\uff09\uff0c\u8fd9\u7ed9\u6211\u4eec\u6700\u5c0f\u7684\u53ef\u80fd\u5bfc\u81f4\u9519\u8bef\u5206\u7c7b\u3002 3. CV\uff08cross validation \u4ea4\u53c9\u9a8c\u8bc1\uff09\u5f88\u5bb9\u6613\uff0c\u56e0\u4e3a\u8be5\u6a21\u578b\u5bf9\u4efb\u4f55\u975e\u652f\u6301\u5411\u91cf\u6570\u636e\u70b9\u7684\u53bb\u9664\u662f\u514d\u75ab\u7684\u3002 4. \u6709\u4e00\u4e9b\u7406\u8bba\u8868\u660e\u8fd9\u662f\u4e00\u4ef6\u597d\u4e1c\u897f\u3002 5. \u4ece\u7ecf\u9a8c\u89d2\u5ea6\u4e0a\u8bf4\u5b83\u7684\u6548\u679c\u975e\u5e38\u975e\u5e38\u597d\u3002","title":"\u4e3a\u4ec0\u4e48\u5bfb\u627e\u6700\u5927\u95f4\u9694"},{"location":"ml/6.SVM/#_6","text":"\u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb \u5206\u9694\u8d85\u5e73\u9762 \u51fd\u6570\u95f4\u8ddd : \\(y(x)=w^Tx+b\\) \u5206\u7c7b\u7684\u7ed3\u679c\uff1a \\(f(x)=sign(w^Tx+b)\\) (sign\u8868\u793a>0\u4e3a1\uff0c<0\u4e3a-1\uff0c=0\u4e3a0) \u70b9\u5230\u8d85\u5e73\u9762\u7684 \u51e0\u4f55\u95f4\u8ddd : \\(d(x)=(w^Tx+b)/||w||\\) \uff08||w||\u8868\u793aw\u77e9\u9635\u7684\u4e8c\u8303\u6570=> \\(\\sqrt{w^T*w}\\), \u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb\u4e5f\u662f\u7c7b\u4f3c\u7684\uff09 \u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5 \u7c7b\u522b\u6807\u7b7e\u7528-1\u30011\uff0c\u662f\u4e3a\u4e86\u540e\u671f\u65b9\u4fbf \\(label (w^Tx+b)\\) \u7684\u6807\u8bc6\u548c\u8ddd\u79bb\u8ba1\u7b97\uff1b\u5982\u679c \\(label (w^Tx+b)>0\\) \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0c\u5426\u5219\u9884\u6d4b\u9519\u8bef\u3002 \u73b0\u5728\u76ee\u6807\u5f88\u660e\u786e\uff0c\u5c31\u662f\u8981\u627e\u5230 w \u548c b \uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8981\u627e\u5230\u6700\u5c0f\u95f4\u9694\u7684\u6570\u636e\u70b9\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u6240\u8bf4\u7684 \u652f\u6301\u5411\u91cf \u3002 \u4e5f\u5c31\u8bf4\uff0c\u8ba9\u6700\u5c0f\u7684\u8ddd\u79bb\u53d6\u6700\u5927.(\u6700\u5c0f\u7684\u8ddd\u79bb\uff1a\u5c31\u662f\u6700\u5c0f\u95f4\u9694\u7684\u6570\u636e\u70b9\uff1b\u6700\u5927\uff1a\u5c31\u662f\u6700\u5927\u95f4\u8ddd\uff0c\u4e3a\u4e86\u627e\u51fa\u6700\u4f18\u8d85\u5e73\u9762--\u6700\u7ec8\u5c31\u662f\u652f\u6301\u5411\u91cf) \u76ee\u6807\u51fd\u6570\uff1a\\(arg: max_{\u5173\u4e8ew, b} \\left( min[label (w^Tx+b)] \\frac{1}{||w||} \\right) \\) \u5982\u679c \\(label*(w^Tx+b)>0\\) \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0c\u4e5f\u79f0 \u51fd\u6570\u95f4\u9694 \uff0c\\(||w||\\) \u53ef\u4ee5\u7406\u89e3\u4e3a\u5f52\u4e00\u5316\uff0c\u4e5f\u79f0 \u51e0\u4f55\u95f4\u9694 \u3002 \u4ee4 \\(label (w^Tx+b)>=1\\)\uff0c \u56e0\u4e3a0\uff5e1\u4e4b\u95f4\uff0c\u5f97\u5230\u7684\u70b9\u662f\u5b58\u5728\u8bef\u5224\u7684\u53ef\u80fd\u6027\uff0c\u6240\u4ee5\u8981\u4fdd\u969c \\(min[label (w^Tx+b)]=1\\)\uff0c\u624d\u80fd\u66f4\u597d\u964d\u4f4e\u566a\u97f3\u6570\u636e\u5f71\u54cd\u3002 \u6240\u4ee5\u672c\u8d28\u4e0a\u662f\u6c42 \\(arg: max_{\u5173\u4e8ew, b} \\frac{1}{||w||} \\)\uff1b\u4e5f\u5c31\u8bf4\uff0c\u6211\u4eec\u7ea6\u675f(\u524d\u63d0)\u6761\u4ef6\u662f: \\(label*(w^Tx+b)=1\\) \u65b0\u7684\u76ee\u6807\u51fd\u6570\u6c42\u89e3\uff1a \\(arg: max_{\u5173\u4e8ew, b} \\frac{1}{||w||} \\) => \u5c31\u662f\u6c42: \\(arg: min_{\u5173\u4e8ew, b} ||w|| \\) (\u6c42\u77e9\u9635\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5982\u679cx\u53ea\u662f \\(\\frac{1}{2}*x^2\\) \u7684\u504f\u5bfc\u6570\uff0c\u90a3\u4e48\u3002\u3002\u540c\u6837\u662f\u6c42\u6700\u5c0f\u503c) => \u5c31\u662f\u6c42: \\(arg: min_{\u5173\u4e8ew, b} (\\frac{1}{2}*||w||^2)\\) (\u4e8c\u6b21\u51fd\u6570\u6c42\u5bfc\uff0c\u6c42\u6781\u503c\uff0c\u5e73\u65b9\u4e5f\u65b9\u4fbf\u8ba1\u7b97) \u672c\u8d28\u4e0a\u5c31\u662f\u6c42\u7ebf\u6027\u4e0d\u7b49\u5f0f\u7684\u4e8c\u6b21\u4f18\u5316\u95ee\u9898(\u6c42\u5206\u9694\u8d85\u5e73\u9762\uff0c\u7b49\u4ef7\u4e8e\u6c42\u89e3\u76f8\u5e94\u7684\u51f8\u4e8c\u6b21\u89c4\u5212\u95ee\u9898) \u901a\u8fc7\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\uff0c\u6c42\u4e8c\u6b21\u4f18\u5316\u95ee\u9898 \u5047\u8bbe\u9700\u8981\u6c42\u6781\u503c\u7684\u76ee\u6807\u51fd\u6570 (objective function) \u4e3a f(x,y)\uff0c\u9650\u5236\u6761\u4ef6\u4e3a \u03c6(x,y)=M # M=1 \u8bbeg(x,y)=M-\u03c6(x,y) # \u4e34\u65f6\u03c6(x,y)\u8868\u793a\u4e0b\u6587\u4e2d \\(label*(w^Tx+b)\\) \u5b9a\u4e49\u4e00\u4e2a\u65b0\u51fd\u6570: F(x,y,\u03bb)=f(x,y)+\u03bbg(x,y) a\u4e3a\u03bb\uff08a>=0\uff09\uff0c\u4ee3\u8868\u8981\u5f15\u5165\u7684\u62c9\u683c\u6717\u65e5\u4e58\u5b50(Lagrange multiplier) \u90a3\u4e48\uff1a \\(L(w,b,\\alpha)=\\frac{1}{2} * ||w||^2 + \\sum_{i=1}^{n} \\alpha_i * [1 - label * (w^Tx+b)]\\) \u56e0\u4e3a\uff1a\\(label (w^Tx+b)>=1, \\alpha>=0\\) , \u6240\u4ee5 \\(\\alpha [1-label (w^Tx+b)]<=0\\) , \\(\\sum_{i=1}^{n} \\alpha_i * [1-label (w^Tx+b)]<=0\\) \u5f53 \\(label*(w^Tx+b)>1\\) \u5219 \\(\\alpha=0\\) \uff0c\u8868\u793a\u8be5\u70b9\u4e3a \u975e\u652f\u6301\u5411\u91cf \u76f8\u5f53\u4e8e\u6c42\u89e3\uff1a \\(max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha) = \\frac{1}{2} *||w||^2\\) \u5982\u679c\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} \\frac{1}{2} *||w||^2\\) , \u4e5f\u5c31\u662f\u8981\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} \\left( max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha)\\right)\\) \u73b0\u5728\u8f6c\u5316\u5230\u5bf9\u5076\u95ee\u9898\u7684\u6c42\u89e3 \\(min_{\u5173\u4e8ew, b} \\left(max_{\u5173\u4e8e\\alpha} L(w,b,\\alpha) \\right) \\) >= \\(max_{\u5173\u4e8e\\alpha} \\left(min_{\u5173\u4e8ew, b}\\ L(w,b,\\alpha) \\right) \\) \u73b0\u5728\u52062\u6b65 \u5148\u6c42\uff1a \\(min_{\u5173\u4e8ew, b} L(w,b,\\alpha)=\\frac{1}{2} * ||w||^2 + \\sum_{i=1}^{n} \\alpha_i * [1 - label * (w^Tx+b)]\\) \u5c31\u662f\u6c42 L(w,b,a) \u5173\u4e8e[w, b]\u7684\u504f\u5bfc\u6570, \u5f97\u5230 w\u548cb\u7684\u503c \uff0c\u5e76\u5316\u7b80\u4e3a\uff1a L\u548ca\u7684\u65b9\u7a0b \u3002 \u53c2\u8003\uff1a \u5982\u679c\u516c\u5f0f\u63a8\u5bfc\u8fd8\u662f\u4e0d\u61c2\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b\u674e\u822a-P103<\u5b66\u4e60\u7684\u5bf9\u5076\u7b97\u6cd5> \u7ec8\u4e8e\u5f97\u5230\u8bfe\u672c\u4e0a\u7684\u516c\u5f0f\uff1a \\(max_{\u5173\u4e8e\\alpha} \\left( \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2} \\sum_{i, j=1}^{m} label_i\u00b7label_j\u00b7\\alpha_i\u00b7\\alpha_j\u00b7 \\right) \\) \u7ea6\u675f\u6761\u4ef6\uff1a \\(a>=0\\) \u5e76\u4e14 \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\) \u677e\u5f1b\u53d8\u91cf(slack variable) \u53c2\u8003\u5730\u5740\uff1ahttp://blog.csdn.net/wusecaiyun/article/details/49659183 \u6211\u4eec\u77e5\u9053\u51e0\u4e4e\u6240\u6709\u7684\u6570\u636e\u90fd\u4e0d\u90a3\u4e48\u5e72\u51c0, \u901a\u8fc7\u5f15\u5165\u677e\u5f1b\u53d8\u91cf\u6765 \u5141\u8bb8\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u9519\u8bef\u7684\u4e00\u4fa7 \u3002 \u7ea6\u675f\u6761\u4ef6\uff1a \\(C>=a>=0\\) \u5e76\u4e14 \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\) \u603b\u7684\u6765\u8bf4\uff1a \u8868\u793a \u677e\u5f1b\u53d8\u91cf \u5e38\u91cfC\u662f \u60e9\u7f5a\u56e0\u5b50 , \u8868\u793a\u79bb\u7fa4\u70b9\u7684\u6743\u91cd\uff08\u7528\u4e8e\u63a7\u5236\u201c\u6700\u5927\u5316\u95f4\u9694\u201d\u548c\u201c\u4fdd\u8bc1\u5927\u90e8\u5206\u70b9\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u201d \uff09 \\(label*(w^Tx+b) > 1\\) and alpha = 0 (\u5728\u8fb9\u754c\u5916\uff0c\u5c31\u662f\u975e\u652f\u6301\u5411\u91cf) \\(label*(w^Tx+b) = 1\\) and 0< alpha < C (\u5728\u5206\u5272\u8d85\u5e73\u9762\u4e0a\uff0c\u5c31\u652f\u6301\u5411\u91cf) \\(label*(w^Tx+b) < 1\\) and alpha = C (\u5728\u5206\u5272\u8d85\u5e73\u9762\u5185\uff0c\u662f\u8bef\u5dee\u70b9 -> C\u8868\u793a\u5b83\u8be5\u53d7\u5230\u7684\u60e9\u7f5a\u56e0\u5b50\u7a0b\u5ea6) \u53c2\u8003\u5730\u5740\uff1ahttps://www.zhihu.com/question/48351234/answer/110486455 C\u503c\u8d8a\u5927\uff0c\u8868\u793a\u79bb\u7fa4\u70b9\u5f71\u54cd\u8d8a\u5927\uff0c\u5c31\u8d8a\u5bb9\u6613\u8fc7\u5ea6\u62df\u5408\uff1b\u53cd\u4e4b\u6709\u53ef\u80fd\u6b20\u62df\u5408\u3002 \u6211\u4eec\u770b\u5230\uff0c\u76ee\u6807\u51fd\u6570\u63a7\u5236\u4e86\u79bb\u7fa4\u70b9\u7684\u6570\u76ee\u548c\u7a0b\u5ea6\uff0c\u4f7f\u5927\u90e8\u5206\u6837\u672c\u70b9\u4ecd\u7136\u9075\u5b88\u9650\u5236\u6761\u4ef6\u3002 \u4f8b\u5982\uff1a\u6b63\u7c7b\u670910000\u4e2a\u6837\u672c\uff0c\u800c\u8d1f\u7c7b\u53ea\u7ed9\u4e86100\u4e2a\uff08C\u8d8a\u5927\u8868\u793a100\u4e2a\u8d1f\u6837\u672c\u7684\u5f71\u54cd\u8d8a\u5927\uff0c\u5c31\u4f1a\u51fa\u73b0\u8fc7\u5ea6\u62df\u5408\uff0c\u6240\u4ee5C\u51b3\u5b9a\u4e86\u8d1f\u6837\u672c\u5bf9\u6a21\u578b\u62df\u5408\u7a0b\u5ea6\u7684\u5f71\u54cd\uff01\uff0cC\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u4f18\u5316\u70b9\uff01\uff09 \u8fd9\u4e00\u7ed3\u8bba\u5341\u5206\u76f4\u63a5\uff0cSVM\u4e2d\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u8981\u6c42\u89e3 alpha.","title":"\u600e\u4e48\u5bfb\u627e\u6700\u5927\u95f4\u9694"},{"location":"ml/6.SVM/#smo","text":"SVM\u6709\u5f88\u591a\u79cd\u5b9e\u73b0\uff0c\u6700\u6d41\u884c\u7684\u4e00\u79cd\u5b9e\u73b0\u662f\uff1a \u5e8f\u5217\u6700\u5c0f\u4f18\u5316(Sequential Minimal Optimization, SMO)\u7b97\u6cd5 \u3002 \u4e0b\u9762\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u79cd\u79f0\u4e3a \u6838\u51fd\u6570(kernel) \u7684\u65b9\u5f0f\u5c06SVM\u6269\u5c55\u5230\u66f4\u591a\u6570\u636e\u96c6\u4e0a\u3002 \u6ce8\u610f\uff1a SVM\u51e0\u4f55\u542b\u4e49\u6bd4\u8f83\u76f4\u89c2\uff0c\u4f46\u5176\u7b97\u6cd5\u5b9e\u73b0\u8f83\u590d\u6742\uff0c\u7275\u626f\u5927\u91cf\u6570\u5b66\u516c\u5f0f\u7684\u63a8\u5bfc\u3002 \u5e8f\u5217\u6700\u5c0f\u4f18\u5316(Sequential Minimal Optimization, SMO) \u521b\u5efa\u4f5c\u8005\uff1aJohn Platt \u521b\u5efa\u65f6\u95f4\uff1a1996\u5e74 SMO\u7528\u9014\uff1a\u7528\u4e8e\u8bad\u7ec3 SVM SMO\u76ee\u6807\uff1a\u6c42\u51fa\u4e00\u7cfb\u5217 alpha \u548c b,\u4e00\u65e6\u6c42\u51fa alpha\uff0c\u5c31\u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u6743\u91cd\u5411\u91cf w \u5e76\u5f97\u5230\u5206\u9694\u8d85\u5e73\u9762\u3002 SMO\u601d\u60f3\uff1a\u662f\u5c06\u5927\u4f18\u5316\u95ee\u9898\u5206\u89e3\u4e3a\u591a\u4e2a\u5c0f\u4f18\u5316\u95ee\u9898\u6765\u6c42\u89e3\u7684\u3002 SMO\u539f\u7406\uff1a\u6bcf\u6b21\u5faa\u73af\u9009\u62e9\u4e24\u4e2a alpha \u8fdb\u884c\u4f18\u5316\u5904\u7406\uff0c\u4e00\u65e6\u627e\u51fa\u4e00\u5bf9\u5408\u9002\u7684 alpha\uff0c\u90a3\u4e48\u5c31\u589e\u5927\u4e00\u4e2a\u540c\u65f6\u51cf\u5c11\u4e00\u4e2a\u3002 \u8fd9\u91cc\u6307\u7684\u5408\u9002\u5fc5\u987b\u8981\u7b26\u5408\u4e00\u5b9a\u7684\u6761\u4ef6 \u8fd9\u4e24\u4e2a alpha \u5fc5\u987b\u8981\u5728\u95f4\u9694\u8fb9\u754c\u4e4b\u5916 \u8fd9\u4e24\u4e2a alpha \u8fd8\u6ca1\u6709\u8fdb\u884c\u8fc7\u533a\u95f4\u5316\u5904\u7406\u6216\u8005\u4e0d\u5728\u8fb9\u754c\u4e0a\u3002 \u4e4b\u6240\u4ee5\u8981\u540c\u65f6\u6539\u53d82\u4e2a alpha\uff1b\u539f\u56e0\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff1a \\(\\sum_{i=1}^{m} a_i\u00b7label_i=0\\)\uff1b\u5982\u679c\u53ea\u662f\u4fee\u6539\u4e00\u4e2a alpha\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u7ea6\u675f\u6761\u4ef6\u5931\u6548\u3002 SMO \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a \u521b\u5efa\u4e00\u4e2a alpha \u5411\u91cf\u5e76\u5c06\u5176\u521d\u59cb\u5316\u4e3a0\u5411\u91cf \u5f53\u8fed\u4ee3\u6b21\u6570\u5c0f\u4e8e\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u65f6(\u5916\u5faa\u73af) \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5411\u91cf(\u5185\u5faa\u73af)\uff1a \u5982\u679c\u8be5\u6570\u636e\u5411\u91cf\u53ef\u4ee5\u88ab\u4f18\u5316 \u968f\u673a\u9009\u62e9\u53e6\u5916\u4e00\u4e2a\u6570\u636e\u5411\u91cf \u540c\u65f6\u4f18\u5316\u8fd9\u4e24\u4e2a\u5411\u91cf \u5982\u679c\u4e24\u4e2a\u5411\u91cf\u90fd\u4e0d\u80fd\u88ab\u4f18\u5316\uff0c\u9000\u51fa\u5185\u5faa\u73af \u5982\u679c\u6240\u6709\u5411\u91cf\u90fd\u6ca1\u88ab\u4f18\u5316\uff0c\u589e\u52a0\u8fed\u4ee3\u6570\u76ee\uff0c\u7ee7\u7eed\u4e0b\u4e00\u6b21\u5faa\u73af","title":"SMO \u9ad8\u6548\u4f18\u5316\u7b97\u6cd5"},{"location":"ml/6.SVM/#svm_1","text":"\u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\u3002 \u5206\u6790\u6570\u636e\uff1a\u6709\u52a9\u4e8e\u53ef\u89c6\u5316\u5206\u9694\u8d85\u5e73\u9762\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1aSVM\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u6e90\u81ea\u8bad\u7ec3\uff0c\u8be5\u8fc7\u7a0b\u4e3b\u8981\u5b9e\u73b0\u4e24\u4e2a\u53c2\u6570\u7684\u8c03\u4f18\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5341\u5206\u7b80\u5355\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u51e0\u4e4e\u6240\u6709\u5206\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u4f7f\u7528SVM\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cSVM\u672c\u8eab\u662f\u4e00\u4e2a\u4e8c\u7c7b\u5206\u7c7b\u5668\uff0c\u5bf9\u591a\u7c7b\u95ee\u9898\u5e94\u7528SVM\u9700\u8981\u5bf9\u4ee3\u7801\u505a\u4e00\u4e9b\u4fee\u6539\u3002","title":"SVM \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/6.SVM/#svm_2","text":"\u4f18\u70b9\uff1a\u6cdb\u5316\uff08\u7531\u5177\u4f53\u7684\u3001\u4e2a\u522b\u7684\u6269\u5927\u4e3a\u4e00\u822c\u7684\uff0c\u5c31\u662f\u8bf4\uff1a\u6a21\u578b\u8bad\u7ec3\u5b8c\u540e\u7684\u65b0\u6837\u672c\uff09\u9519\u8bef\u7387\u4f4e\uff0c\u8ba1\u7b97\u5f00\u9500\u4e0d\u5927\uff0c\u7ed3\u679c\u6613\u7406\u89e3\u3002 \u7f3a\u70b9\uff1a\u5bf9\u53c2\u6570\u8c03\u8282\u548c\u6838\u51fd\u6570\u7684\u9009\u62e9\u654f\u611f\uff0c\u539f\u59cb\u5206\u7c7b\u5668\u4e0d\u52a0\u4fee\u6539\u4ec5\u9002\u5408\u4e8e\u5904\u7406\u4e8c\u5206\u7c7b\u95ee\u9898\u3002 \u4f7f\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"SVM \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/6.SVM/#_7","text":"","title":"\u8bfe\u672c\u6848\u4f8b\uff08\u65e0\u6838\u51fd\u6570\uff09"},{"location":"ml/6.SVM/#_8","text":"\u5bf9\u5c0f\u89c4\u6a21\u6570\u636e\u70b9\u8fdb\u884c\u5206\u7c7b","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/6.SVM/#_9","text":"\u6536\u96c6\u6570\u636e \u6587\u672c\u6587\u4ef6\u683c\u5f0f\uff1a 3.542485 1.977398 -1 3.018896 2.556416 -1 7.551510 -1.580030 1 2.114999 -0.004466 -1 8.127113 1.274372 1 \u51c6\u5907\u6570\u636e def loadDataSet(fileName): \"\"\" \u5bf9\u6587\u4ef6\u8fdb\u884c\u9010\u884c\u89e3\u6790\uff0c\u4ece\u800c\u5f97\u5230\u7b2c\u884c\u7684\u7c7b\u6807\u7b7e\u548c\u6574\u4e2a\u7279\u5f81\u77e9\u9635 Args: fileName \u6587\u4ef6\u540d Returns: dataMat \u7279\u5f81\u77e9\u9635 labelMat \u7c7b\u6807\u7b7e \"\"\" dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): lineArr = line.strip().split('\\t') dataMat.append([float(lineArr[0]), float(lineArr[1])]) labelMat.append(float(lineArr[2])) return dataMat, labelMat \u5206\u6790\u6570\u636e: \u65e0 \u8bad\u7ec3\u7b97\u6cd5 def smoSimple(dataMatIn, classLabels, C, toler, maxIter): \"\"\"smoSimple Args: dataMatIn \u7279\u5f81\u96c6\u5408 classLabels \u7c7b\u522b\u6807\u7b7e C \u677e\u5f1b\u53d8\u91cf(\u5e38\u91cf\u503c)\uff0c\u5141\u8bb8\u6709\u4e9b\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u7684\u9519\u8bef\u4e00\u4fa7\u3002 \u63a7\u5236\u6700\u5927\u5316\u95f4\u9694\u548c\u4fdd\u8bc1\u5927\u90e8\u5206\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u8fd9\u4e24\u4e2a\u76ee\u6807\u7684\u6743\u91cd\u3002 \u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u8be5\u53c2\u6570\u8fbe\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002 toler \u5bb9\u9519\u7387\uff08\u662f\u6307\u5728\u67d0\u4e2a\u4f53\u7cfb\u4e2d\u80fd\u51cf\u5c0f\u4e00\u4e9b\u56e0\u7d20\u6216\u9009\u62e9\u5bf9\u67d0\u4e2a\u7cfb\u7edf\u4ea7\u751f\u4e0d\u7a33\u5b9a\u7684\u6982\u7387\u3002\uff09 maxIter \u9000\u51fa\u524d\u6700\u5927\u7684\u5faa\u73af\u6b21\u6570 Returns: b \u6a21\u578b\u7684\u5e38\u91cf\u503c alphas \u62c9\u683c\u6717\u65e5\u4e58\u5b50 \"\"\" dataMatrix = mat(dataMatIn) # \u77e9\u9635\u8f6c\u7f6e \u548c .T \u4e00\u6837\u7684\u529f\u80fd labelMat = mat(classLabels).transpose() m, n = shape(dataMatrix) # \u521d\u59cb\u5316 b\u548calphas(alpha\u6709\u70b9\u7c7b\u4f3c\u6743\u91cd\u503c\u3002) b = 0 alphas = mat(zeros((m, 1))) # \u6ca1\u6709\u4efb\u4f55alpha\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u904d\u5386\u6570\u636e\u7684\u6b21\u6570 iter = 0 while (iter < maxIter): # w = calcWs(alphas, dataMatIn, classLabels) # print(\"w:\", w) # \u8bb0\u5f55alpha\u662f\u5426\u5df2\u7ecf\u8fdb\u884c\u4f18\u5316\uff0c\u6bcf\u6b21\u5faa\u73af\u65f6\u8bbe\u4e3a0\uff0c\u7136\u540e\u518d\u5bf9\u6574\u4e2a\u96c6\u5408\u987a\u5e8f\u904d\u5386 alphaPairsChanged = 0 for i in range(m): # print 'alphas=', alphas # print 'labelMat=', labelMat # print 'multiply(alphas, labelMat)=', multiply(alphas, labelMat) # \u6211\u4eec\u9884\u6d4b\u7684\u7c7b\u522b y[i] = w^Tx[i]+b; \u5176\u4e2d\u56e0\u4e3a w = \u03a3(1~n) a[n]*label[n]*x[n] fXi = float(multiply(alphas, labelMat).T*(dataMatrix*dataMatrix[i, :].T)) + b # \u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u6bd4\u5bf9\uff0c\u8ba1\u7b97\u8bef\u5deeEi Ei = fXi - float(labelMat[i]) # \u7ea6\u675f\u6761\u4ef6 (KKT\u6761\u4ef6\u662f\u89e3\u51b3\u6700\u4f18\u5316\u95ee\u9898\u7684\u65f6\u7528\u5230\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u6211\u4eec\u8fd9\u91cc\u63d0\u5230\u7684\u6700\u4f18\u5316\u95ee\u9898\u901a\u5e38\u662f\u6307\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67d0\u4e00\u51fd\u6570\uff0c\u6c42\u5176\u5728\u6307\u5b9a\u4f5c\u7528\u57df\u4e0a\u7684\u5168\u5c40\u6700\u5c0f\u503c) # 0<=alphas[i]<=C\uff0c\u4f46\u7531\u4e8e0\u548cC\u662f\u8fb9\u754c\u503c\uff0c\u6211\u4eec\u65e0\u6cd5\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u9700\u8981\u589e\u52a0\u4e00\u4e2aalphas\u548c\u964d\u4f4e\u4e00\u4e2aalphas\u3002 # \u8868\u793a\u53d1\u751f\u9519\u8bef\u7684\u6982\u7387\uff1alabelMat[i]*Ei \u5982\u679c\u8d85\u51fa\u4e86 toler\uff0c \u624d\u9700\u8981\u4f18\u5316\u3002\u81f3\u4e8e\u6b63\u8d1f\u53f7\uff0c\u6211\u4eec\u8003\u8651\u7edd\u5bf9\u503c\u5c31\u5bf9\u4e86\u3002 ''' # \u68c0\u9a8c\u8bad\u7ec3\u6837\u672c(xi, yi)\u662f\u5426\u6ee1\u8db3KKT\u6761\u4ef6 yi*f(i) >= 1 and alpha = 0 (outside the boundary) yi*f(i) == 1 and 0<alpha< C (on the boundary) yi*f(i) <= 1 and alpha = C (between the boundary) ''' if ((labelMat[i]*Ei < -toler) and (alphas[i] < C)) or ((labelMat[i]*Ei > toler) and (alphas[i] > 0)): # \u5982\u679c\u6ee1\u8db3\u4f18\u5316\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u968f\u673a\u9009\u53d6\u975ei\u7684\u4e00\u4e2a\u70b9\uff0c\u8fdb\u884c\u4f18\u5316\u6bd4\u8f83 j = selectJrand(i, m) # \u9884\u6d4bj\u7684\u7ed3\u679c fXj = float(multiply(alphas, labelMat).T*(dataMatrix*dataMatrix[j, :].T)) + b Ej = fXj - float(labelMat[j]) alphaIold = alphas[i].copy() alphaJold = alphas[j].copy() # L\u548cH\u7528\u4e8e\u5c06alphas[j]\u8c03\u6574\u52300-C\u4e4b\u95f4\u3002\u5982\u679cL==H\uff0c\u5c31\u4e0d\u505a\u4efb\u4f55\u6539\u53d8\uff0c\u76f4\u63a5\u6267\u884ccontinue\u8bed\u53e5 # labelMat[i] != labelMat[j] \u8868\u793a\u5f02\u4fa7\uff0c\u5c31\u76f8\u51cf\uff0c\u5426\u5219\u662f\u540c\u4fa7\uff0c\u5c31\u76f8\u52a0\u3002 if (labelMat[i] != labelMat[j]): L = max(0, alphas[j] - alphas[i]) H = min(C, C + alphas[j] - alphas[i]) else: L = max(0, alphas[j] + alphas[i] - C) H = min(C, alphas[j] + alphas[i]) # \u5982\u679c\u76f8\u540c\uff0c\u5c31\u6ca1\u6cd5\u4f18\u5316\u4e86 if L == H: print(\"L==H\") continue # eta\u662falphas[j]\u7684\u6700\u4f18\u4fee\u6539\u91cf\uff0c\u5982\u679ceta==0\uff0c\u9700\u8981\u9000\u51fafor\u5faa\u73af\u7684\u5f53\u524d\u8fed\u4ee3\u8fc7\u7a0b # \u53c2\u8003\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b\u674e\u822a-P125~P128<\u5e8f\u5217\u6700\u5c0f\u6700\u4f18\u5316\u7b97\u6cd5> eta = 2.0 * dataMatrix[i, :]*dataMatrix[j, :].T - dataMatrix[i, :]*dataMatrix[i, :].T - dataMatrix[j, :]*dataMatrix[j, :].T if eta >= 0: print(\"eta>=0\") continue # \u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b0\u7684alphas[j]\u503c alphas[j] -= labelMat[j]*(Ei - Ej)/eta # \u5e76\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\uff0c\u4ee5\u53caL\u548cH\u5bf9\u5176\u8fdb\u884c\u8c03\u6574 alphas[j] = clipAlpha(alphas[j], H, L) # \u68c0\u67e5alpha[j]\u662f\u5426\u53ea\u662f\u8f7b\u5fae\u7684\u6539\u53d8\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fafor\u5faa\u73af\u3002 if (abs(alphas[j] - alphaJold) < 0.00001): print(\"j not moving enough\") continue # \u7136\u540ealphas[i]\u548calphas[j]\u540c\u6837\u8fdb\u884c\u6539\u53d8\uff0c\u867d\u7136\u6539\u53d8\u7684\u5927\u5c0f\u4e00\u6837\uff0c\u4f46\u662f\u6539\u53d8\u7684\u65b9\u5411\u6b63\u597d\u76f8\u53cd alphas[i] += labelMat[j]*labelMat[i]*(alphaJold - alphas[j]) # \u5728\u5bf9alpha[i], alpha[j] \u8fdb\u884c\u4f18\u5316\u4e4b\u540e\uff0c\u7ed9\u8fd9\u4e24\u4e2aalpha\u503c\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u6570b\u3002 # w= \u03a3[1~n] ai*yi*xi => b = yj- \u03a3[1~n] ai*yi(xi*xj) # \u6240\u4ee5\uff1a b1 - b = (y1-y) - \u03a3[1~n] yi*(a1-a)*(xi*x1) # \u4e3a\u4ec0\u4e48\u51cf2\u904d\uff1f \u56e0\u4e3a\u662f \u51cf\u53bb\u03a3[1~n]\uff0c\u6b63\u597d2\u4e2a\u53d8\u91cfi\u548cj\uff0c\u6240\u4ee5\u51cf2\u904d b1 = b - Ei- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i, :]*dataMatrix[i, :].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[i, :]*dataMatrix[j, :].T b2 = b - Ej- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i, :]*dataMatrix[j, :].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[j, :]*dataMatrix[j, :].T if (0 < alphas[i]) and (C > alphas[i]): b = b1 elif (0 < alphas[j]) and (C > alphas[j]): b = b2 else: b = (b1 + b2)/2.0 alphaPairsChanged += 1 print(\"iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) # \u5728for\u5faa\u73af\u5916\uff0c\u68c0\u67e5alpha\u503c\u662f\u5426\u505a\u4e86\u66f4\u65b0\uff0c\u5982\u679c\u66f4\u65b0\u5219\u5c06iter\u8bbe\u4e3a0\u540e\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f # \u76f4\u5230\u66f4\u65b0\u5b8c\u6bd5\u540e\uff0citer\u6b21\u5faa\u73af\u65e0\u53d8\u5316\uff0c\u624d\u9000\u51fa\u5faa\u73af\u3002 if (alphaPairsChanged == 0): iter += 1 else: iter = 0 print(\"iteration number: %d\" % iter) return b, alphas \u5b8c\u6574\u4ee3\u7801\u5730\u5740\uff1aSVM\u7b80\u5316\u7248\uff0c\u5e94\u7528\u7b80\u5316\u7248SMO\u7b97\u6cd5\u5904\u7406\u5c0f\u89c4\u6a21\u6570\u636e\u96c6 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-simple.py \u5b8c\u6574\u4ee3\u7801\u5730\u5740\uff1aSVM\u5b8c\u6574\u7248\uff0c\u4f7f\u7528\u5b8c\u6574 Platt SMO\u7b97\u6cd5\u52a0\u901f\u4f18\u5316\uff0c\u4f18\u5316\u70b9\uff1a\u9009\u62e9alpha\u7684\u65b9\u5f0f\u4e0d\u540c : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-complete_Non-Kernel.py","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/6.SVM/#kernel","text":"\u5bf9\u4e8e\u7ebf\u6027\u53ef\u5206\u7684\u60c5\u51b5\uff0c\u6548\u679c\u660e\u663e \u5bf9\u4e8e\u975e\u7ebf\u6027\u7684\u60c5\u51b5\u4e5f\u4e00\u6837\uff0c\u6b64\u65f6\u9700\u8981\u7528\u5230\u4e00\u79cd\u53eb \u6838\u51fd\u6570(kernel) \u7684\u5de5\u5177\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u5206\u7c7b\u5668\u6613\u4e8e\u7406\u89e3\u7684\u5f62\u5f0f\u3002 \u5229\u7528\u6838\u51fd\u6570\u5c06\u6570\u636e\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4 \u4f7f\u7528\u6838\u51fd\u6570\uff1a\u53ef\u4ee5\u5c06\u6570\u636e\u4ece\u67d0\u4e2a\u7279\u5f81\u7a7a\u95f4\u5230\u53e6\u4e00\u4e2a\u7279\u5f81\u7a7a\u95f4\u7684\u6620\u5c04\u3002\uff08\u901a\u5e38\u60c5\u51b5\u4e0b\uff1a\u8fd9\u79cd\u6620\u5c04\u4f1a\u5c06\u4f4e\u7ef4\u7279\u5f81\u7a7a\u95f4\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4\u3002\uff09 \u5982\u679c\u89c9\u5f97\u7279\u5f81\u7a7a\u95f4\u5f88\u88c5\u903c\u3001\u5f88\u96be\u7406\u89e3\u3002 \u53ef\u4ee5\u628a\u6838\u51fd\u6570\u60f3\u8c61\u6210\u4e00\u4e2a\u5305\u88c5\u5668(wrapper)\u6216\u8005\u662f\u63a5\u53e3(interface)\uff0c\u5b83\u80fd\u5c06\u6570\u636e\u4ece\u67d0\u4e2a\u5f88\u96be\u5904\u7406\u7684\u5f62\u5f0f\u8f6c\u6362\u6210\u4e3a\u53e6\u4e00\u4e2a\u8f83\u5bb9\u6613\u5904\u7406\u7684\u5f62\u5f0f\u3002 \u7ecf\u8fc7\u7a7a\u95f4\u8f6c\u6362\u540e\uff1a\u4f4e\u7ef4\u9700\u8981\u89e3\u51b3\u7684\u975e\u7ebf\u6027\u95ee\u9898\uff0c\u5c31\u53d8\u6210\u4e86\u9ad8\u7ef4\u9700\u8981\u89e3\u51b3\u7684\u7ebf\u6027\u95ee\u9898\u3002 SVM \u4f18\u5316\u7279\u522b\u597d\u7684\u5730\u65b9\uff0c\u5728\u4e8e\u6240\u6709\u7684\u8fd0\u7b97\u90fd\u53ef\u4ee5\u5199\u6210\u5185\u79ef(inner product: \u662f\u63072\u4e2a\u5411\u91cf\u76f8\u4e58\uff0c\u5f97\u5230\u5355\u4e2a\u6807\u91cf \u6216\u8005 \u6570\u503c)\uff1b\u5185\u79ef\u66ff\u6362\u6210\u6838\u51fd\u6570\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a \u6838\u6280\u5de7(kernel trick) \u6216\u8005 \u6838\"\u53d8\u7535\"(kernel substation) \u6838\u51fd\u6570\u5e76\u4e0d\u4ec5\u4ec5\u5e94\u7528\u4e8e\u652f\u6301\u5411\u91cf\u673a\uff0c\u5f88\u591a\u5176\u4ed6\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e5f\u90fd\u7528\u5230\u6838\u51fd\u6570\u3002\u6700\u6d41\u884c\u7684\u6838\u51fd\u6570\uff1a\u5f84\u5411\u57fa\u51fd\u6570(radial basis function) \u5f84\u5411\u57fa\u51fd\u6570\u7684\u9ad8\u65af\u7248\u672c\uff0c\u5176\u5177\u4f53\u7684\u516c\u5f0f\u4e3a\uff1a","title":"\u6838\u51fd\u6570(kernel) \u4f7f\u7528"},{"location":"ml/6.SVM/#_10","text":"","title":"\u9879\u76ee\u6848\u4f8b: \u624b\u5199\u6570\u5b57\u8bc6\u522b\u7684\u4f18\u5316\uff08\u6709\u6838\u51fd\u6570\uff09"},{"location":"ml/6.SVM/#_11","text":"\u4f60\u7684\u8001\u677f\u8981\u6c42\uff1a\u4f60\u5199\u7684\u90a3\u4e2a\u624b\u5199\u8bc6\u522b\u7a0b\u5e8f\u975e\u5e38\u597d\uff0c\u4f46\u662f\u5b83\u5360\u7528\u5185\u5b58\u592a\u5927\u3002\u987e\u5ba2\u65e0\u6cd5\u901a\u8fc7\u65e0\u7ebf\u7684\u65b9\u5f0f\u4e0b\u8f7d\u6211\u4eec\u7684\u5e94\u7528\u3002 \u6240\u4ee5\uff1a\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u652f\u6301\u5411\u91cf\u673a\uff0c\u4fdd\u7559\u652f\u6301\u5411\u91cf\u5c31\u884c\uff08knn\u9700\u8981\u4fdd\u7559\u6240\u6709\u7684\u5411\u91cf\uff09\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u975e\u5e38\u597d\u7684\u6548\u679c\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/6.SVM/#_12","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4efu51c6\u5907\u6570\u636e\uff1a\u57fa\u4e8e\u4e8c\u503c\u56fe\u50cf\u6784\u9020\u5411\u91cf \u5c06 32*32\u7684\u6587\u672c\u8f6c\u5316\u4e3a 1*1024\u7684\u77e9\u9635 def img2vector(filename): returnVect = zeros((1, 1024)) fr = open(filename) for i in range(32): lineStr = fr.readline() for j in range(32): returnVect[0, 32 * i + j] = int(lineStr[j]) return returnVect def loadImages(dirName): from os import listdir hwLabels = [] print(dirName) trainingFileList = listdir(dirName) # load the training set m = len(trainingFileList) trainingMat = zeros((m, 1024)) for i in range(m): fileNameStr = trainingFileList[i] fileStr = fileNameStr.split('.')[0] # take off .txt classNumStr = int(fileStr.split('_')[0]) if classNumStr == 9: hwLabels.append(-1) else: hwLabels.append(1) trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr)) return trainingMat, hwLabels \u5206\u6790\u6570\u636e\uff1a\u5bf9\u56fe\u50cf\u5411\u91cf\u8fdb\u884c\u76ee\u6d4b \u8bad\u7ec3\u7b97\u6cd5\uff1a\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u6838\u51fd\u6570\uff0c\u5e76\u5bf9\u5f84\u5411\u57fa\u6838\u51fd\u6570\u91c7\u7528\u4e0d\u540c\u7684\u8bbe\u7f6e\u6765\u8fd0\u884cSMO\u7b97\u6cd5 def kernelTrans(X, A, kTup): # calc the kernel or transform data to a higher dimensional space \"\"\" \u6838\u8f6c\u6362\u51fd\u6570 Args: X dataMatIn\u6570\u636e\u96c6 A dataMatIn\u6570\u636e\u96c6\u7684\u7b2ci\u884c\u7684\u6570\u636e kTup \u6838\u51fd\u6570\u7684\u4fe1\u606f Returns: \"\"\" m, n = shape(X) K = mat(zeros((m, 1))) if kTup[0] == 'lin': # linear kernel: m*n * n*1 = m*1 K = X * A.T elif kTup[0] == 'rbf': for j in range(m): deltaRow = X[j, :] - A K[j] = deltaRow * deltaRow.T # \u5f84\u5411\u57fa\u51fd\u6570\u7684\u9ad8\u65af\u7248\u672c K = exp(K / (-1 * kTup[1] ** 2)) # divide in NumPy is element-wise not matrix like Matlab else: raise NameError('Houston We Have a Problem -- That Kernel is not recognized') return K def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)): \"\"\" \u5b8c\u6574SMO\u7b97\u6cd5\u5916\u5faa\u73af\uff0c\u4e0esmoSimple\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u8fd9\u91cc\u7684\u5faa\u73af\u9000\u51fa\u6761\u4ef6\u66f4\u591a\u4e00\u4e9b Args: dataMatIn \u6570\u636e\u96c6 classLabels \u7c7b\u522b\u6807\u7b7e C \u677e\u5f1b\u53d8\u91cf(\u5e38\u91cf\u503c)\uff0c\u5141\u8bb8\u6709\u4e9b\u6570\u636e\u70b9\u53ef\u4ee5\u5904\u4e8e\u5206\u9694\u9762\u7684\u9519\u8bef\u4e00\u4fa7\u3002 \u63a7\u5236\u6700\u5927\u5316\u95f4\u9694\u548c\u4fdd\u8bc1\u5927\u90e8\u5206\u7684\u51fd\u6570\u95f4\u9694\u5c0f\u4e8e1.0\u8fd9\u4e24\u4e2a\u76ee\u6807\u7684\u6743\u91cd\u3002 \u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u8be5\u53c2\u6570\u8fbe\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002 toler \u5bb9\u9519\u7387 maxIter \u9000\u51fa\u524d\u6700\u5927\u7684\u5faa\u73af\u6b21\u6570 kTup \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4 Returns: b \u6a21\u578b\u7684\u5e38\u91cf\u503c alphas \u62c9\u683c\u6717\u65e5\u4e58\u5b50 \"\"\" # \u521b\u5efa\u4e00\u4e2a optStruct \u5bf9\u8c61 oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(), C, toler, kTup) iter = 0 entireSet = True alphaPairsChanged = 0 # \u5faa\u73af\u904d\u5386\uff1a\u5faa\u73afmaxIter\u6b21 \u5e76\u4e14 \uff08alphaPairsChanged\u5b58\u5728\u53ef\u4ee5\u6539\u53d8 or \u6240\u6709\u884c\u904d\u5386\u4e00\u904d\uff09 while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)): alphaPairsChanged = 0 # \u5f53entireSet=true or \u975e\u8fb9\u754calpha\u5bf9\u6ca1\u6709\u4e86\uff1b\u5c31\u5f00\u59cb\u5bfb\u627e alpha\u5bf9\uff0c\u7136\u540e\u51b3\u5b9a\u662f\u5426\u8981\u8fdb\u884celse\u3002 if entireSet: # \u5728\u6570\u636e\u96c6\u4e0a\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684alpha for i in range(oS.m): # \u662f\u5426\u5b58\u5728alpha\u5bf9\uff0c\u5b58\u5728\u5c31+1 alphaPairsChanged += innerL(i, oS) # print(\"fullSet, iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) iter += 1 # \u5bf9\u5df2\u5b58\u5728 alpha\u5bf9\uff0c\u9009\u51fa\u975e\u8fb9\u754c\u7684alpha\u503c\uff0c\u8fdb\u884c\u4f18\u5316\u3002 else: # \u904d\u5386\u6240\u6709\u7684\u975e\u8fb9\u754calpha\u503c\uff0c\u4e5f\u5c31\u662f\u4e0d\u5728\u8fb9\u754c0\u6216C\u4e0a\u7684\u503c\u3002 nonBoundIs = nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0] for i in nonBoundIs: alphaPairsChanged += innerL(i, oS) # print(\"non-bound, iter: %d i:%d, pairs changed %d\" % (iter, i, alphaPairsChanged)) iter += 1 # \u5982\u679c\u627e\u5230alpha\u5bf9\uff0c\u5c31\u4f18\u5316\u975e\u8fb9\u754calpha\u503c\uff0c\u5426\u5219\uff0c\u5c31\u91cd\u65b0\u8fdb\u884c\u5bfb\u627e\uff0c\u5982\u679c\u5bfb\u627e\u4e00\u904d \u904d\u5386\u6240\u6709\u7684\u884c\u8fd8\u662f\u6ca1\u627e\u5230\uff0c\u5c31\u9000\u51fa\u5faa\u73af\u3002 if entireSet: entireSet = False # toggle entire set loop elif (alphaPairsChanged == 0): entireSet = True print(\"iteration number: %d\" % iter) return oS.b, oS.alphas \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4fbf\u643a\u4e00\u4e2a\u51fd\u6570\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u548c\u51fd\u6570\u5e76\u8ba1\u7b97\u9519\u8bef\u7387 def testDigits(kTup=('rbf', 10)): # 1. \u5bfc\u5165\u8bad\u7ec3\u6570\u636e dataArr, labelArr = loadImages('db/6.SVM/trainingDigits') b, alphas = smoP(dataArr, labelArr, 200, 0.0001, 10000, kTup) datMat = mat(dataArr) labelMat = mat(labelArr).transpose() svInd = nonzero(alphas.A > 0)[0] sVs = datMat[svInd] labelSV = labelMat[svInd] # print(\"there are %d Support Vectors\" % shape(sVs)[0]) m, n = shape(datMat) errorCount = 0 for i in range(m): kernelEval = kernelTrans(sVs, datMat[i, :], kTup) # 1*m * m*1 = 1*1 \u5355\u4e2a\u9884\u6d4b\u7ed3\u679c predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b if sign(predict) != sign(labelArr[i]): errorCount += 1 print(\"the training error rate is: %f\" % (float(errorCount) / m)) # 2. \u5bfc\u5165\u6d4b\u8bd5\u6570\u636e dataArr, labelArr = loadImages('db/6.SVM/testDigits') errorCount = 0 datMat = mat(dataArr) labelMat = mat(labelArr).transpose() m, n = shape(datMat) for i in range(m): kernelEval = kernelTrans(sVs, datMat[i, :], kTup) # 1*m * m*1 = 1*1 \u5355\u4e2a\u9884\u6d4b\u7ed3\u679c predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b if sign(predict) != sign(labelArr[i]): errorCount += 1 print(\"the test error rate is: %f\" % (float(errorCount) / m)) \u4f7f\u7528\u7b97\u6cd5\uff1a\u4e00\u4e2a\u56fe\u50cf\u8bc6\u522b\u7684\u5b8c\u6574\u5e94\u7528\u8fd8\u9700\u8981\u4e00\u4e9b\u56fe\u50cf\u5904\u7406\u7684\u77e5\u8bc6\uff0c\u8fd9\u91cc\u5e76\u4e0d\u6253\u7b97\u6df1\u5165\u4ecb\u7ecd \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-complete.py \u4f5c\u8005\uff1a \u7247\u523b geekidentity GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/7.Ensemble/","text":"\u7b2c7\u7ae0 \u96c6\u6210\u65b9\u6cd5 ensemble method \u96c6\u6210\u65b9\u6cd5: ensemble method\uff08\u5143\u7b97\u6cd5: meta algorithm\uff09 \u6982\u8ff0 \u6982\u5ff5\uff1a\u662f\u5bf9\u5176\u4ed6\u7b97\u6cd5\u8fdb\u884c\u7ec4\u5408\u7684\u4e00\u79cd\u5f62\u5f0f\u3002 \u901a\u4fd7\u6765\u8bf4\uff1a \u5f53\u505a\u91cd\u8981\u51b3\u5b9a\u65f6\uff0c\u5927\u5bb6\u53ef\u80fd\u90fd\u4f1a\u8003\u8651\u5438\u53d6\u591a\u4e2a\u4e13\u5bb6\u800c\u4e0d\u53ea\u662f\u4e00\u4e2a\u4eba\u7684\u610f\u89c1\u3002 \u673a\u5668\u5b66\u4e60\u5904\u7406\u95ee\u9898\u65f6\u53c8\u4f55\u5c1d\u4e0d\u662f\u5982\u6b64\uff1f \u8fd9\u5c31\u662f\u96c6\u6210\u65b9\u6cd5\u80cc\u540e\u7684\u601d\u60f3\u3002 \u96c6\u6210\u65b9\u6cd5\uff1a \u6295\u7968\u9009\u4e3e(bagging: \u81ea\u4e3e\u6c47\u805a\u6cd5 bootstrap aggregating): \u662f\u57fa\u4e8e\u6570\u636e\u968f\u673a\u91cd\u62bd\u6837\u5206\u7c7b\u5668\u6784\u9020\u7684\u65b9\u6cd5 \u518d\u5b66\u4e60(boosting): \u662f\u57fa\u4e8e\u6240\u6709\u5206\u7c7b\u5668\u7684\u52a0\u6743\u6c42\u548c\u7684\u65b9\u6cd5 \u96c6\u6210\u65b9\u6cd5 \u573a\u666f \u76ee\u524d bagging \u65b9\u6cd5\u6700\u6d41\u884c\u7684\u7248\u672c\u662f: \u968f\u673a\u68ee\u6797(random forest) \u9009\u7537\u53cb\uff1a\u7f8e\u5973\u9009\u62e9\u62e9\u5076\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u95ee\u51e0\u4e2a\u95fa\u871c\u7684\u5efa\u8bae\uff0c\u6700\u540e\u9009\u62e9\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\u6700\u9ad8\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7537\u670b\u53cb \u76ee\u524d boosting \u65b9\u6cd5\u6700\u6d41\u884c\u7684\u7248\u672c\u662f: AdaBoost \u8ffd\u5973\u53cb\uff1a3\u4e2a\u5e05\u54e5\u8ffd\u540c\u4e00\u4e2a\u7f8e\u5973\uff0c\u7b2c1\u4e2a\u5e05\u54e5\u5931\u8d25->(\u4f20\u6388\u7ecf\u9a8c\uff1a\u59d3\u540d\u3001\u5bb6\u5ead\u60c5\u51b5) \u7b2c2\u4e2a\u5e05\u54e5\u5931\u8d25->(\u4f20\u6388\u7ecf\u9a8c\uff1a\u5174\u8da3\u7231\u597d\u3001\u6027\u683c\u7279\u70b9) \u7b2c3\u4e2a\u5e05\u54e5\u6210\u529f bagging \u548c boosting \u533a\u522b\u662f\u4ec0\u4e48\uff1f bagging \u662f\u4e00\u79cd\u4e0e boosting \u5f88\u7c7b\u4f3c\u7684\u6280\u672f, \u6240\u4f7f\u7528\u7684\u591a\u4e2a\u5206\u7c7b\u5668\u7684\u7c7b\u578b\uff08\u6570\u636e\u91cf\u548c\u7279\u5f81\u91cf\uff09\u90fd\u662f\u4e00\u81f4\u7684\u3002 bagging \u662f\u7531\u4e0d\u540c\u7684\u5206\u7c7b\u5668\uff081.\u6570\u636e\u968f\u673a\u5316 2.\u7279\u5f81\u968f\u673a\u5316\uff09\u7ecf\u8fc7\u8bad\u7ec3\uff0c\u7efc\u5408\u5f97\u51fa\u7684\u51fa\u73b0\u6700\u591a\u5206\u7c7b\u7ed3\u679c\uff1bboosting \u662f\u901a\u8fc7\u8c03\u6574\u5df2\u6709\u5206\u7c7b\u5668\u9519\u5206\u7684\u90a3\u4e9b\u6570\u636e\u6765\u83b7\u5f97\u65b0\u7684\u5206\u7c7b\u5668\uff0c\u5f97\u51fa\u76ee\u524d\u6700\u4f18\u7684\u7ed3\u679c\u3002 bagging \u4e2d\u7684\u5206\u7c7b\u5668\u6743\u91cd\u662f\u76f8\u7b49\u7684\uff1b\u800c boosting \u4e2d\u7684\u5206\u7c7b\u5668\u52a0\u6743\u6c42\u548c\uff0c\u6240\u4ee5\u6743\u91cd\u5e76\u4e0d\u76f8\u7b49\uff0c\u6bcf\u4e2a\u6743\u91cd\u4ee3\u8868\u7684\u662f\u5176\u5bf9\u5e94\u5206\u7c7b\u5668\u5728\u4e0a\u4e00\u8f6e\u8fed\u4ee3\u4e2d\u7684\u6210\u529f\u5ea6\u3002 \u968f\u673a\u68ee\u6797 \u968f\u673a\u68ee\u6797 \u6982\u8ff0 \u968f\u673a\u68ee\u6797\u6307\u7684\u662f\u5229\u7528\u591a\u68f5\u6811\u5bf9\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\u5e76\u9884\u6d4b\u7684\u4e00\u79cd\u5206\u7c7b\u5668\u3002 \u51b3\u7b56\u6811\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5927\u5e08\uff0c\u901a\u8fc7\u81ea\u5df1\u5728\u6570\u636e\u96c6\u4e2d\u5b66\u5230\u7684\u77e5\u8bc6\u7528\u4e8e\u65b0\u6570\u636e\u7684\u5206\u7c7b\u3002\u4f46\u662f\u4fd7\u8bdd\u8bf4\u5f97\u597d\uff0c\u4e00\u4e2a\u8bf8\u845b\u4eae\uff0c\u73a9\u4e0d\u8fc7\u4e09\u4e2a\u81ed\u76ae\u5320\u3002\u968f\u673a\u68ee\u6797\u5c31\u662f\u5e0c\u671b\u6784\u5efa\u591a\u4e2a\u81ed\u76ae\u5320\uff0c\u5e0c\u671b\u6700\u7ec8\u7684\u5206\u7c7b\u6548\u679c\u80fd\u591f\u8d85\u8fc7\u5355\u4e2a\u5927\u5e08\u7684\u4e00\u79cd\u7b97\u6cd5\u3002 \u968f\u673a\u68ee\u6797 \u539f\u7406 \u90a3\u968f\u673a\u68ee\u6797\u5177\u4f53\u5982\u4f55\u6784\u5efa\u5462\uff1f \u6709\u4e24\u4e2a\u65b9\u9762\uff1a 1. \u6570\u636e\u7684\u968f\u673a\u6027\u5316 2. \u5f85\u9009\u7279\u5f81\u7684\u968f\u673a\u5316 \u4f7f\u5f97\u968f\u673a\u68ee\u6797\u4e2d\u7684\u51b3\u7b56\u6811\u90fd\u80fd\u591f\u5f7c\u6b64\u4e0d\u540c\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u591a\u6837\u6027\uff0c\u4ece\u800c\u63d0\u5347\u5206\u7c7b\u6027\u80fd\u3002 \u6570\u636e\u7684\u968f\u673a\u5316\uff1a\u4f7f\u5f97\u968f\u673a\u68ee\u6797\u4e2d\u7684\u51b3\u7b56\u6811\u66f4\u666e\u904d\u5316\u4e00\u70b9\uff0c\u9002\u5408\u66f4\u591a\u7684\u573a\u666f\u3002 \uff08\u6709\u653e\u56de\u7684\u51c6\u786e\u7387\u5728\uff1a70% \u4ee5\u4e0a\uff0c \u65e0\u653e\u56de\u7684\u51c6\u786e\u7387\u5728\uff1a60% \u4ee5\u4e0a\uff09 1. \u91c7\u53d6\u6709\u653e\u56de\u7684\u62bd\u6837\u65b9\u5f0f \u6784\u9020\u5b50\u6570\u636e\u96c6\uff0c\u4fdd\u8bc1\u4e0d\u540c\u5b50\u96c6\u4e4b\u95f4\u7684\u6570\u91cf\u7ea7\u4e00\u6837\uff08\u4e0d\u540c\u5b50\u96c6\uff0f\u540c\u4e00\u5b50\u96c6 \u4e4b\u95f4\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff09 2. \u5229\u7528\u5b50\u6570\u636e\u96c6\u6765\u6784\u5efa\u5b50\u51b3\u7b56\u6811\uff0c\u5c06\u8fd9\u4e2a\u6570\u636e\u653e\u5230\u6bcf\u4e2a\u5b50\u51b3\u7b56\u6811\u4e2d\uff0c\u6bcf\u4e2a\u5b50\u51b3\u7b56\u6811\u8f93\u51fa\u4e00\u4e2a\u7ed3\u679c\u3002 3. \u7136\u540e\u7edf\u8ba1\u5b50\u51b3\u7b56\u6811\u7684\u6295\u7968\u7ed3\u679c\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u5206\u7c7b \u5c31\u662f \u968f\u673a\u68ee\u6797\u7684\u8f93\u51fa\u7ed3\u679c\u3002 4. \u5982\u4e0b\u56fe\uff0c\u5047\u8bbe\u968f\u673a\u68ee\u6797\u4e2d\u67093\u68f5\u5b50\u51b3\u7b56\u6811\uff0c2\u68f5\u5b50\u6811\u7684\u5206\u7c7b\u7ed3\u679c\u662fA\u7c7b\uff0c1\u68f5\u5b50\u6811\u7684\u5206\u7c7b\u7ed3\u679c\u662fB\u7c7b\uff0c\u90a3\u4e48\u968f\u673a\u68ee\u6797\u7684\u5206\u7c7b\u7ed3\u679c\u5c31\u662fA\u7c7b\u3002 \u5f85\u9009\u7279\u5f81\u7684\u968f\u673a\u5316 \u5b50\u6811\u4ece\u6240\u6709\u7684\u5f85\u9009\u7279\u5f81\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u5b9a\u7684\u7279\u5f81\u3002 \u5728\u9009\u53d6\u7684\u7279\u5f81\u4e2d\u9009\u53d6\u6700\u4f18\u7684\u7279\u5f81\u3002 \u4e0b\u56fe\u4e2d\uff0c\u84dd\u8272\u7684\u65b9\u5757\u4ee3\u8868\u6240\u6709\u53ef\u4ee5\u88ab\u9009\u62e9\u7684\u7279\u5f81\uff0c\u4e5f\u5c31\u662f\u76ee\u524d\u7684\u5f85\u9009\u7279\u5f81\uff1b\u9ec4\u8272\u7684\u65b9\u5757\u662f\u5206\u88c2\u7279\u5f81\u3002 \u5de6\u8fb9\u662f\u4e00\u68f5\u51b3\u7b56\u6811\u7684\u7279\u5f81\u9009\u53d6\u8fc7\u7a0b\uff0c\u901a\u8fc7\u5728\u5f85\u9009\u7279\u5f81\u4e2d\u9009\u53d6\u6700\u4f18\u7684\u5206\u88c2\u7279\u5f81\uff08\u522b\u5fd8\u4e86\u524d\u6587\u63d0\u5230\u7684ID3\u7b97\u6cd5\uff0cC4.5\u7b97\u6cd5\uff0cCART\u7b97\u6cd5\u7b49\u7b49\uff09\uff0c\u5b8c\u6210\u5206\u88c2\u3002 \u53f3\u8fb9\u662f\u4e00\u4e2a\u968f\u673a\u68ee\u6797\u4e2d\u7684\u5b50\u6811\u7684\u7279\u5f81\u9009\u53d6\u8fc7\u7a0b\u3002 \u968f\u673a\u68ee\u6797 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 \u5206\u6790\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u901a\u8fc7\u6570\u636e\u968f\u673a\u5316\u548c\u7279\u5f81\u968f\u673a\u5316\uff0c\u8fdb\u884c\u591a\u5b9e\u4f8b\u7684\u5206\u7c7b\u8bc4\u4f30 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u9519\u8bef\u7387 \u4f7f\u7528\u7b97\u6cd5\uff1a\u8f93\u5165\u6837\u672c\u6570\u636e\uff0c\u7136\u540e\u8fd0\u884c \u968f\u673a\u68ee\u6797 \u7b97\u6cd5\u5224\u65ad\u8f93\u5165\u6570\u636e\u5206\u7c7b\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7c7b\uff0c\u6700\u540e\u5bf9\u8ba1\u7b97\u51fa\u7684\u5206\u7c7b\u6267\u884c\u540e\u7eed\u5904\u7406 \u968f\u673a\u68ee\u6797 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u51e0\u4e4e\u4e0d\u9700\u8981\u8f93\u5165\u51c6\u5907\u3001\u53ef\u5b9e\u73b0\u9690\u5f0f\u7279\u5f81\u9009\u62e9\u3001\u8bad\u7ec3\u901f\u5ea6\u975e\u5e38\u5feb\u3001\u5176\u4ed6\u6a21\u578b\u5f88\u96be\u8d85\u8d8a\u3001\u5f88\u96be\u5efa\u7acb\u4e00\u4e2a\u7cdf\u7cd5\u7684\u968f\u673a\u68ee\u6797\u6a21\u578b\u3001\u5927\u91cf\u4f18\u79c0\u3001\u514d\u8d39\u4ee5\u53ca\u5f00\u6e90\u7684\u5b9e\u73b0\u3002 \u7f3a\u70b9\uff1a\u52a3\u52bf\u5728\u4e8e\u6a21\u578b\u5927\u5c0f\u3001\u662f\u4e2a\u5f88\u96be\u53bb\u89e3\u91ca\u7684\u9ed1\u76d2\u5b50\u3002 \u9002\u7528\u6570\u636e\u8303\u56f4\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b \u9879\u76ee\u6848\u4f8b: \u58f0\u7eb3\u4fe1\u53f7\u5206\u7c7b \u9879\u76ee\u6982\u8ff0 \u8fd9\u662f Gorman \u548c Sejnowski \u5728\u7814\u7a76\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u58f0\u7eb3\u4fe1\u53f7\u5206\u7c7b\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u4efb\u52a1\u662f\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u6765\u533a\u5206\u58f0\u7eb3\u4fe1\u53f7\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 \u5206\u6790\u6570\u636e\uff1a\u624b\u5de5\u68c0\u67e5\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 random_forest() \u51fd\u6570\u8fdb\u884c\u4f18\u5316\u8bc4\u4f30\uff0c\u8fd4\u56de\u6a21\u578b\u7684\u7efc\u5408\u5206\u7c7b\u7ed3\u679c \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u91c7\u7528\u81ea\u5b9a\u4e49 n_folds \u4efd\u968f\u673a\u91cd\u62bd\u6837 \u8fdb\u884c\u6d4b\u8bd5\u8bc4\u4f30\uff0c\u5f97\u51fa\u7efc\u5408\u7684\u9884\u6d4b\u8bc4\u5206 \u4f7f\u7528\u7b97\u6cd5\uff1a\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u6848\u4f8b\u8fdb\u884c\u5c01\u88c5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u6837\u672c\u6570\u636e\uff1asonar-all-data.txt 0.02,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.066,0.2273,0.31,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.555,0.6711,0.6415,0.7104,0.808,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.051,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.018,0.0084,0.009,0.0032,R 0.0453,0.0523,0.0843,0.0689,0.1183,0.2583,0.2156,0.3481,0.3337,0.2872,0.4918,0.6552,0.6919,0.7797,0.7464,0.9444,1,0.8874,0.8024,0.7818,0.5212,0.4052,0.3957,0.3914,0.325,0.32,0.3271,0.2767,0.4423,0.2028,0.3788,0.2947,0.1984,0.2341,0.1306,0.4182,0.3835,0.1057,0.184,0.197,0.1674,0.0583,0.1401,0.1628,0.0621,0.0203,0.053,0.0742,0.0409,0.0061,0.0125,0.0084,0.0089,0.0048,0.0094,0.0191,0.014,0.0049,0.0052,0.0044,R 0.0262,0.0582,0.1099,0.1083,0.0974,0.228,0.2431,0.3771,0.5598,0.6194,0.6333,0.706,0.5544,0.532,0.6479,0.6931,0.6759,0.7551,0.8929,0.8619,0.7974,0.6737,0.4293,0.3648,0.5331,0.2413,0.507,0.8533,0.6036,0.8514,0.8512,0.5045,0.1862,0.2709,0.4232,0.3043,0.6116,0.6756,0.5375,0.4719,0.4647,0.2587,0.2129,0.2222,0.2111,0.0176,0.1348,0.0744,0.013,0.0106,0.0033,0.0232,0.0166,0.0095,0.018,0.0244,0.0316,0.0164,0.0095,0.0078,R \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 # \u5bfc\u5165csv\u6587\u4ef6 def loadDataSet(filename): dataset = [] with open(filename, 'r') as fr: for line in fr.readlines(): if not line: continue lineArr = [] for featrue in line.split(','): # strip()\u8fd4\u56de\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26\u751f\u6210\u7684\u65b0\u5b57\u7b26\u4e32 str_f = featrue.strip() if str_f.isdigit(): # \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57 # \u5c06\u6570\u636e\u96c6\u7684\u7b2ccolumn\u5217\u8f6c\u6362\u6210float\u5f62\u5f0f lineArr.append(float(str_f)) else: # \u6dfb\u52a0\u5206\u7c7b\u6807\u7b7e lineArr.append(str_f) dataset.append(lineArr) return dataset \u5206\u6790\u6570\u636e\uff1a\u624b\u5de5\u68c0\u67e5\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 random_forest() \u51fd\u6570\u8fdb\u884c\u4f18\u5316\u8bc4\u4f30\uff0c\u8fd4\u56de\u6a21\u578b\u7684\u7efc\u5408\u5206\u7c7b\u7ed3\u679c \u6837\u672c\u6570\u636e\u968f\u673a\u65e0\u653e\u56de\u62bd\u6837-\u7528\u4e8e\u4ea4\u53c9\u9a8c\u8bc1 def cross_validation_split(dataset, n_folds): \"\"\"cross_validation_split(\u5c06\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u91cd\u62bd\u6837 n_folds \u4efd\uff0c\u6570\u636e\u53ef\u4ee5\u91cd\u590d\u62bd\u53d6) Args: dataset \u539f\u59cb\u6570\u636e\u96c6 n_folds \u6570\u636e\u96c6dataset\u5206\u6210n_flods\u4efd Returns: dataset_split list\u96c6\u5408\uff0c\u5b58\u653e\u7684\u662f\uff1a\u5c06\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u91cd\u62bd\u6837 n_folds \u4efd\uff0c\u6570\u636e\u53ef\u4ee5\u91cd\u590d\u62bd\u53d6 \"\"\" dataset_split = list() dataset_copy = list(dataset) # \u590d\u5236\u4e00\u4efd dataset,\u9632\u6b62 dataset \u7684\u5185\u5bb9\u6539\u53d8 fold_size = len(dataset) / n_folds for i in range(n_folds): fold = list() # \u6bcf\u6b21\u5faa\u73af fold \u6e05\u96f6\uff0c\u9632\u6b62\u91cd\u590d\u5bfc\u5165 dataset_split while len(fold) < fold_size: # \u8fd9\u91cc\u4e0d\u80fd\u7528 if\uff0cif \u53ea\u662f\u5728\u7b2c\u4e00\u6b21\u5224\u65ad\u65f6\u8d77\u4f5c\u7528\uff0cwhile \u6267\u884c\u5faa\u73af\uff0c\u76f4\u5230\u6761\u4ef6\u4e0d\u6210\u7acb # \u6709\u653e\u56de\u7684\u968f\u673a\u91c7\u6837\uff0c\u6709\u4e00\u4e9b\u6837\u672c\u88ab\u91cd\u590d\u91c7\u6837\uff0c\u4ece\u800c\u5728\u8bad\u7ec3\u96c6\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u6709\u7684\u5219\u4ece\u672a\u5728\u8bad\u7ec3\u96c6\u4e2d\u51fa\u73b0\uff0c\u6b64\u4e3a\u81ea\u52a9\u91c7\u6837\u6cd5\u3002\u4ece\u800c\u4fdd\u8bc1\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 index = randrange(len(dataset_copy)) # \u5c06\u5bf9\u5e94\u7d22\u5f15 index \u7684\u5185\u5bb9\u4ece dataset_copy \u4e2d\u5bfc\u51fa\uff0c\u5e76\u5c06\u8be5\u5185\u5bb9\u4ece dataset_copy \u4e2d\u5220\u9664\u3002 # pop() \u51fd\u6570\u7528\u4e8e\u79fb\u9664\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff08\u9ed8\u8ba4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5e76\u4e14\u8fd4\u56de\u8be5\u5143\u7d20\u7684\u503c\u3002 fold.append(dataset_copy.pop(index)) # \u65e0\u653e\u56de\u7684\u65b9\u5f0f # fold.append(dataset_copy[index]) # \u6709\u653e\u56de\u7684\u65b9\u5f0f dataset_split.append(fold) # \u7531dataset\u5206\u5272\u51fa\u7684n_folds\u4e2a\u6570\u636e\u6784\u6210\u7684\u5217\u8868\uff0c\u4e3a\u4e86\u7528\u4e8e\u4ea4\u53c9\u9a8c\u8bc1 return dataset_split \u8bad\u7ec3\u6570\u636e\u96c6\u968f\u673a\u5316 # Create a random subsample from the dataset with replacement def subsample(dataset, ratio): # \u521b\u5efa\u6570\u636e\u96c6\u7684\u968f\u673a\u5b50\u6837\u672c \"\"\"random_forest(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: dataset \u8bad\u7ec3\u6570\u636e\u96c6 ratio \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u6bd4\u4f8b Returns: sample \u968f\u673a\u62bd\u6837\u7684\u8bad\u7ec3\u6837\u672c \"\"\" sample = list() # \u8bad\u7ec3\u6837\u672c\u7684\u6309\u6bd4\u4f8b\u62bd\u6837\u3002 # round() \u65b9\u6cd5\u8fd4\u56de\u6d6e\u70b9\u6570x\u7684\u56db\u820d\u4e94\u5165\u503c\u3002 n_sample = round(len(dataset) * ratio) while len(sample) < n_sample: # \u6709\u653e\u56de\u7684\u968f\u673a\u91c7\u6837\uff0c\u6709\u4e00\u4e9b\u6837\u672c\u88ab\u91cd\u590d\u91c7\u6837\uff0c\u4ece\u800c\u5728\u8bad\u7ec3\u96c6\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u6709\u7684\u5219\u4ece\u672a\u5728\u8bad\u7ec3\u96c6\u4e2d\u51fa\u73b0\uff0c\u6b64\u4e3a\u81ea\u52a9\u91c7\u6837\u6cd5\u3002\u4ece\u800c\u4fdd\u8bc1\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 index = randrange(len(dataset)) sample.append(dataset[index]) return sample \u7279\u5f81\u968f\u673a\u5316 # \u627e\u51fa\u5206\u5272\u6570\u636e\u96c6\u7684\u6700\u4f18\u7279\u5f81\uff0c\u5f97\u5230\u6700\u4f18\u7684\u7279\u5f81 index\uff0c\u7279\u5f81\u503c row[index]\uff0c\u4ee5\u53ca\u5206\u5272\u5b8c\u7684\u6570\u636e groups\uff08left, right\uff09 def get_split(dataset, n_features): class_values = list(set(row[-1] for row in dataset)) # class_values =[0, 1] b_index, b_value, b_score, b_groups = 999, 999, 999, None features = list() while len(features) < n_features: index = randrange(len(dataset[0])-1) # \u5f80 features \u6dfb\u52a0 n_features \u4e2a\u7279\u5f81\uff08 n_feature \u7b49\u4e8e\u7279\u5f81\u6570\u7684\u4e2a\u6570\uff09\uff0c\u7279\u5f81\u7d22\u5f15\u4ece dataset \u4e2d\u968f\u673a\u53d6 if index not in features: features.append(index) for index in features: # \u5728 n_features \u4e2a\u7279\u5f81\u4e2d\u9009\u51fa\u6700\u4f18\u7684\u7279\u5f81\u7d22\u5f15\uff0c\u5e76\u6ca1\u6709\u904d\u5386\u6240\u6709\u7279\u5f81\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u6bcf\u8bfe\u51b3\u7b56\u6811\u7684\u5dee\u5f02\u6027 for row in dataset: groups = test_split(index, row[index], dataset) # groups=(left, right), row[index] \u904d\u5386\u6bcf\u4e00\u884c index \u7d22\u5f15\u4e0b\u7684\u7279\u5f81\u503c\u4f5c\u4e3a\u5206\u7c7b\u503c value, \u627e\u51fa\u6700\u4f18\u7684\u5206\u7c7b\u7279\u5f81\u548c\u7279\u5f81\u503c gini = gini_index(groups, class_values) # \u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u91cf\u8d8a\u4e00\u6837\uff0c\u8bf4\u660e\u6570\u636e\u533a\u5206\u5ea6\u4e0d\u9ad8\uff0cgini\u7cfb\u6570\u8d8a\u5927 if gini < b_score: b_index, b_value, b_score, b_groups = index, row[index], gini, groups # \u6700\u540e\u5f97\u5230\u6700\u4f18\u7684\u5206\u7c7b\u7279\u5f81 b_index,\u5206\u7c7b\u7279\u5f81\u503c b_value,\u5206\u7c7b\u7ed3\u679c b_groups\u3002b_value \u4e3a\u5206\u9519\u7684\u4ee3\u4ef7\u6210\u672c # print b_score return {'index': b_index, 'value': b_value, 'groups': b_groups} \u968f\u673a\u68ee\u6797 # Random Forest Algorithm def random_forest(train, test, max_depth, min_size, sample_size, n_trees, n_features): \"\"\"random_forest(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: train \u8bad\u7ec3\u6570\u636e\u96c6 test \u6d4b\u8bd5\u6570\u636e\u96c6 max_depth \u51b3\u7b56\u6811\u6df1\u5ea6\u4e0d\u80fd\u592a\u6df1\uff0c\u4e0d\u7136\u5bb9\u6613\u5bfc\u81f4\u8fc7\u62df\u5408 min_size \u53f6\u5b50\u8282\u70b9\u7684\u5927\u5c0f sample_size \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u6bd4\u4f8b n_trees \u51b3\u7b56\u6811\u7684\u4e2a\u6570 n_features \u9009\u53d6\u7684\u7279\u5f81\u7684\u4e2a\u6570 Returns: predictions \u6bcf\u4e00\u884c\u7684\u9884\u6d4b\u7ed3\u679c\uff0cbagging \u9884\u6d4b\u6700\u540e\u7684\u5206\u7c7b\u7ed3\u679c \"\"\" trees = list() # n_trees \u8868\u793a\u51b3\u7b56\u6811\u7684\u6570\u91cf for i in range(n_trees): # \u968f\u673a\u62bd\u6837\u7684\u8bad\u7ec3\u6837\u672c\uff0c \u968f\u673a\u91c7\u6837\u4fdd\u8bc1\u4e86\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 sample = subsample(train, sample_size) # \u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811 tree = build_tree(sample, max_depth, min_size, n_features) trees.append(tree) # \u6bcf\u4e00\u884c\u7684\u9884\u6d4b\u7ed3\u679c\uff0cbagging \u9884\u6d4b\u6700\u540e\u7684\u5206\u7c7b\u7ed3\u679c predictions = [bagging_predict(trees, row) for row in test] return predictions \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u91c7\u7528\u81ea\u5b9a\u4e49 n_folds \u4efd\u968f\u673a\u91cd\u62bd\u6837 \u8fdb\u884c\u6d4b\u8bd5\u8bc4\u4f30\uff0c\u5f97\u51fa\u7efc\u5408\u7684\u9884\u6d4b\u8bc4\u5206\u3002 \u8ba1\u7b97\u968f\u673a\u68ee\u6797\u7684\u9884\u6d4b\u7ed3\u679c\u7684\u6b63\u786e\u7387 # \u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206 def evaluate_algorithm(dataset, algorithm, n_folds, *args): \"\"\"evaluate_algorithm(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: dataset \u539f\u59cb\u6570\u636e\u96c6 algorithm \u4f7f\u7528\u7684\u7b97\u6cd5 n_folds \u6570\u636e\u7684\u4efd\u6570 *args \u5176\u4ed6\u7684\u53c2\u6570 Returns: scores \u6a21\u578b\u5f97\u5206 \"\"\" # \u5c06\u6570\u636e\u96c6\u8fdb\u884c\u968f\u673a\u62bd\u6837\uff0c\u5206\u6210 n_folds \u4efd\uff0c\u6570\u636e\u65e0\u91cd\u590d\u7684\u62bd\u53d6 folds = cross_validation_split(dataset, n_folds) scores = list() # \u6bcf\u6b21\u5faa\u73af\u4ece folds \u4ece\u53d6\u51fa\u4e00\u4e2a fold \u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u5176\u4f59\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u904d\u5386\u6574\u4e2a folds \uff0c\u5b9e\u73b0\u4ea4\u53c9\u9a8c\u8bc1 for fold in folds: train_set = list(folds) train_set.remove(fold) # \u5c06\u591a\u4e2a fold \u5217\u8868\u7ec4\u5408\u6210\u4e00\u4e2a train_set \u5217\u8868, \u7c7b\u4f3c union all \"\"\" In [20]: l1=[[1, 2, 'a'], [11, 22, 'b']] In [21]: l2=[[3, 4, 'c'], [33, 44, 'd']] In [22]: l=[] In [23]: l.append(l1) In [24]: l.append(l2) In [25]: l Out[25]: [[[1, 2, 'a'], [11, 22, 'b']], [[3, 4, 'c'], [33, 44, 'd']]] In [26]: sum(l, []) Out[26]: [[1, 2, 'a'], [11, 22, 'b'], [3, 4, 'c'], [33, 44, 'd']] \"\"\" train_set = sum(train_set, []) test_set = list() # fold \u8868\u793a\u4ece\u539f\u59cb\u6570\u636e\u96c6 dataset \u63d0\u53d6\u51fa\u6765\u7684\u6d4b\u8bd5\u96c6 for row in fold: row_copy = list(row) row_copy[-1] = None test_set.append(row_copy) predicted = algorithm(train_set, test_set, *args) actual = [row[-1] for row in fold] # \u8ba1\u7b97\u968f\u673a\u68ee\u6797\u7684\u9884\u6d4b\u7ed3\u679c\u7684\u6b63\u786e\u7387 accuracy = accuracy_metric(actual, predicted) scores.append(accuracy) return scores \u4f7f\u7528\u7b97\u6cd5\uff1a\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u6848\u4f8b\u8fdb\u884c\u5c01\u88c5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.RandomForest/randomForest.py AdaBoost AdaBoost (adaptive boosting: \u81ea\u9002\u5e94 boosting) \u6982\u8ff0 \u80fd\u5426\u4f7f\u7528\u5f31\u5206\u7c7b\u5668\u548c\u591a\u4e2a\u5b9e\u4f8b\u6765\u6784\u5efa\u4e00\u4e2a\u5f3a\u5206\u7c7b\u5668\uff1f \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u7406\u8bba\u95ee\u9898\u3002 AdaBoost \u539f\u7406 AdaBoost \u5de5\u4f5c\u539f\u7406 AdaBoost \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u4f9d\u8d56\u4e8e\u6240\u4f7f\u7528\u7684\u5f31\u5206\u7c7b\u5668\u7c7b\u578b\uff0c\u672c\u7ae0\u4f7f\u7528\u7684\u662f\u5355\u5c42\u51b3\u7b56\u6811\uff0c\u8fd9\u79cd\u5206\u7c7b\u5668\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5206\u7c7b\u5668\u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u7b2c2\u7ae0\u5230\u7b2c6\u7ae0\u4e2d\u7684\u4efb\u4e00\u5206\u7c7b\u5668\u90fd\u53ef\u4ee5\u5145\u5f53\u5f31\u5206\u7c7b\u5668\u3002 \u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u7b80\u5355\u5206\u7c7b\u5668\u7684\u6548\u679c\u66f4\u597d\u3002 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1aAdaBoost \u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u7528\u5728\u8bad\u7ec3\u4e0a\uff0c\u5206\u7c7b\u5668\u5c06\u591a\u6b21\u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f31\u5206\u7c7b\u5668\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u5206\u7c7b\u7684\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u901aSVM\u4e00\u6837\uff0cAdaBoost \u9884\u6d4b\u4e24\u4e2a\u7c7b\u522b\u4e2d\u7684\u4e00\u4e2a\u3002\u5982\u679c\u60f3\u628a\u5b83\u5e94\u7528\u5230\u591a\u4e2a\u7c7b\u522b\u7684\u573a\u666f\uff0c\u90a3\u4e48\u5c31\u8981\u50cf\u591a\u7c7b SVM \u4e2d\u7684\u505a\u6cd5\u4e00\u6837\u5bf9 AdaBoost \u8fdb\u884c\u4fee\u6539\u3002 AdaBoost \u7b97\u6cd5\u7279\u70b9 * \u4f18\u70b9\uff1a\u6cdb\u5316\uff08\u7531\u5177\u4f53\u7684\u3001\u4e2a\u522b\u7684\u6269\u5927\u4e3a\u4e00\u822c\u7684\uff09\u9519\u8bef\u7387\u4f4e\uff0c\u6613\u7f16\u7801\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5927\u90e8\u5206\u5206\u7c7b\u5668\u4e0a\uff0c\u65e0\u53c2\u6570\u8c03\u8282\u3002 * \u7f3a\u70b9\uff1a\u5bf9\u79bb\u7fa4\u70b9\u654f\u611f\u3002 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 \u9879\u76ee\u6848\u4f8b: \u9a6c\u759d\u75c5\u7684\u9884\u6d4b \u9879\u76ee\u6d41\u7a0b\u56fe \u57fa\u4e8e\u5355\u5c42\u51b3\u7b56\u6811\u6784\u5efa\u5f31\u5206\u7c7b\u5668 * \u5355\u5c42\u51b3\u7b56\u6811(decision stump, \u4e5f\u79f0\u51b3\u7b56\u6811\u6869)\u662f\u4e00\u79cd\u7b80\u5355\u7684\u51b3\u7b56\u6811\u3002 \u9879\u76ee\u6982\u8ff0 \u9884\u6d4b\u60a3\u6709\u759d\u6c14\u75c5\u7684\u9a6c\u7684\u5b58\u6d3b\u95ee\u9898\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u5305\u62ec368\u4e2a\u6837\u672c\u548c28\u4e2a\u7279\u5f81\uff0c\u759d\u6c14\u75c5\u662f\u63cf\u8ff0\u9a6c\u80c3\u80a0\u75db\u7684\u672f\u8bed\uff0c\u7136\u800c\uff0c\u8fd9\u79cd\u75c5\u5e76\u4e0d\u4e00\u5b9a\u6e90\u81ea\u9a6c\u7684\u80c3\u80a0\u95ee\u9898\uff0c\u5176\u4ed6\u95ee\u9898\u4e5f\u53ef\u80fd\u5f15\u53d1\u759d\u6c14\u75c5\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e86\u533b\u9662\u68c0\u6d4b\u9a6c\u759d\u6c14\u75c5\u7684\u4e00\u4e9b\u6307\u6807\uff0c\u6709\u7684\u6307\u6807\u6bd4\u8f83\u4e3b\u89c2\uff0c\u6709\u7684\u6307\u6807\u96be\u4ee5\u6d4b\u91cf\uff0c\u4f8b\u5982\u9a6c\u7684\u75bc\u75db\u7ea7\u522b\u3002\u53e6\u5916\uff0c\u9664\u4e86\u90e8\u5206\u6307\u6807\u4e3b\u89c2\u548c\u96be\u4ee5\u6d4b\u91cf\u4e4b\u5916\uff0c\u8be5\u6570\u636e\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u6570\u636e\u96c6\u4e2d\u670930%\u7684\u503c\u662f\u7f3a\u5931\u7684\u3002 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u786e\u4fdd\u7c7b\u522b\u6807\u7b7e\u662f+1\u548c-1\uff0c\u800c\u975e1\u548c0 \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 adaBoostTrainDS() \u51fd\u6570\u8bad\u7ec3\u51fa\u4e00\u7cfb\u5217\u7684\u5206\u7c7b\u5668 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u6211\u4eec\u62e5\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002\u5728\u4e0d\u91c7\u7528\u968f\u673a\u62bd\u6837\u7684\u65b9\u6cd5\u4e0b\uff0c\u6211\u4eec\u5c31\u4f1a\u5bf9 AdaBoost \u548c Logistic \u56de\u5f52\u7684\u7ed3\u679c\u8fdb\u884c\u5b8c\u5168\u5bf9\u7b49\u7684\u6bd4\u8f83 \u4f7f\u7528\u7b97\u6cd5\uff1a\u89c2\u5bdf\u8be5\u4f8b\u5b50\u4e0a\u7684\u9519\u8bef\u7387\u3002\u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a Web \u7f51\u7ad9\uff0c\u8ba9\u9a6f\u9a6c\u5e08\u8f93\u5165\u9a6c\u7684\u75c7\u72b6\u7136\u540e\u9884\u6d4b\u9a6c\u662f\u5426\u4f1a\u6b7b\u53bb \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u8bad\u7ec3\u6570\u636e\uff1ahorseColicTraining.txt \u6d4b\u8bd5\u6570\u636e\uff1ahorseColicTest.txt 2.000000 1.000000 38.500000 66.000000 28.000000 3.000000 3.000000 0.000000 2.000000 5.000000 4.000000 4.000000 0.000000 0.000000 0.000000 3.000000 5.000000 45.000000 8.400000 0.000000 0.000000 -1.000000 1.000000 1.000000 39.200000 88.000000 20.000000 0.000000 0.000000 4.000000 1.000000 3.000000 4.000000 2.000000 0.000000 0.000000 0.000000 4.000000 2.000000 50.000000 85.000000 2.000000 2.000000 -1.000000 2.000000 1.000000 38.300000 40.000000 24.000000 1.000000 1.000000 3.000000 1.000000 3.000000 3.000000 1.000000 0.000000 0.000000 0.000000 1.000000 1.000000 33.000000 6.700000 0.000000 0.000000 1.000000 \u51c6\u5907\u6570\u636e\uff1a\u786e\u4fdd\u7c7b\u522b\u6807\u7b7e\u662f+1\u548c-1\uff0c\u800c\u975e1\u548c0 def loadDataSet(fileName): # \u83b7\u53d6 feature \u7684\u6570\u91cf, \u4fbf\u4e8e\u83b7\u53d6 numFeat = len(open(fileName).readline().split('\\t')) dataArr = [] labelArr = [] fr = open(fileName) for line in fr.readlines(): lineArr = [] curLine = line.strip().split('\\t') for i in range(numFeat-1): lineArr.append(float(curLine[i])) dataArr.append(lineArr) labelArr.append(float(curLine[-1])) return dataArr, labelArr \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 \u8fc7\u62df\u5408(overfitting, \u4e5f\u79f0\u4e3a\u8fc7\u5b66\u4e60) * \u53d1\u73b0\u6d4b\u8bd5\u9519\u8bef\u7387\u5728\u8fbe\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\u4e4b\u540e\u6709\u5f00\u59cb\u4e0a\u5347\uff0c\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u8fc7\u62df\u5408\u3002 \u901a\u4fd7\u6765\u8bf4\uff1a\u5c31\u662f\u628a\u4e00\u4e9b\u566a\u97f3\u6570\u636e\u4e5f\u62df\u5408\u8fdb\u53bb\u7684\uff0c\u5982\u4e0b\u56fe\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 adaBoostTrainDS() \u51fd\u6570\u8bad\u7ec3\u51fa\u4e00\u7cfb\u5217\u7684\u5206\u7c7b\u5668 def adaBoostTrainDS(dataArr, labelArr, numIt=40): \"\"\"adaBoostTrainDS(adaBoost\u8bad\u7ec3\u8fc7\u7a0b\u653e\u5927) Args: dataArr \u7279\u5f81\u6807\u7b7e\u96c6\u5408 labelArr \u5206\u7c7b\u6807\u7b7e\u96c6\u5408 numIt \u5b9e\u4f8b\u6570 Returns: weakClassArr \u5f31\u5206\u7c7b\u5668\u7684\u96c6\u5408 aggClassEst \u9884\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c\u503c \"\"\" weakClassArr = [] m = shape(dataArr)[0] # \u521d\u59cb\u5316 D\uff0c\u8bbe\u7f6e\u6bcf\u4e2a\u6837\u672c\u7684\u6743\u91cd\u503c\uff0c\u5e73\u5747\u5206\u4e3am\u4efd D = mat(ones((m, 1))/m) aggClassEst = mat(zeros((m, 1))) for i in range(numIt): # \u5f97\u5230\u51b3\u7b56\u6811\u7684\u6a21\u578b bestStump, error, classEst = buildStump(dataArr, labelArr, D) # alpha\u76ee\u7684\u4e3b\u8981\u662f\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5668\u5b9e\u4f8b\u7684\u6743\u91cd(\u7ec4\u5408\u5c31\u662f\u5206\u7c7b\u7ed3\u679c) # \u8ba1\u7b97\u6bcf\u4e2a\u5206\u7c7b\u5668\u7684alpha\u6743\u91cd\u503c alpha = float(0.5*log((1.0-error)/max(error, 1e-16))) bestStump['alpha'] = alpha # store Stump Params in Array weakClassArr.append(bestStump) print \"alpha=%s, classEst=%s, bestStump=%s, error=%s \" % (alpha, classEst.T, bestStump, error) # \u5206\u7c7b\u6b63\u786e\uff1a\u4e58\u79ef\u4e3a1\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff0c-1\u4e3b\u8981\u662f\u4e0b\u9762\u6c42e\u7684-alpha\u6b21\u65b9 # \u5206\u7c7b\u9519\u8bef\uff1a\u4e58\u79ef\u4e3a -1\uff0c\u7ed3\u679c\u4f1a\u53d7\u5f71\u54cd\uff0c\u6240\u4ee5\u4e5f\u4e58\u4ee5 -1 expon = multiply(-1*alpha*mat(labelArr).T, classEst) print '(-1\u53d6\u53cd)\u9884\u6d4b\u503cexpon=', expon.T # \u8ba1\u7b97e\u7684expon\u6b21\u65b9\uff0c\u7136\u540e\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u7efc\u5408\u7684\u6982\u7387\u7684\u503c # \u7ed3\u679c\u53d1\u73b0\uff1a \u5224\u65ad\u9519\u8bef\u7684\u6837\u672c\uff0cD\u4e2d\u76f8\u5bf9\u5e94\u7684\u6837\u672c\u6743\u91cd\u503c\u4f1a\u53d8\u5927\u3002 D = multiply(D, exp(expon)) D = D/D.sum() # \u9884\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c\u503c\uff0c\u5728\u4e0a\u4e00\u8f6e\u7ed3\u679c\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u52a0\u548c\u64cd\u4f5c print '\u5f53\u524d\u7684\u5206\u7c7b\u7ed3\u679c\uff1a', alpha*classEst.T aggClassEst += alpha*classEst print \"\u53e0\u52a0\u540e\u7684\u5206\u7c7b\u7ed3\u679caggClassEst: \", aggClassEst.T # sign \u5224\u65ad\u6b63\u4e3a1\uff0c 0\u4e3a0\uff0c \u8d1f\u4e3a-1\uff0c\u901a\u8fc7\u6700\u7ec8\u52a0\u548c\u7684\u6743\u91cd\u503c\uff0c\u5224\u65ad\u7b26\u53f7\u3002 # \u7ed3\u679c\u4e3a\uff1a\u9519\u8bef\u7684\u6837\u672c\u6807\u7b7e\u96c6\u5408\uff0c\u56e0\u4e3a\u662f !=,\u90a3\u4e48\u7ed3\u679c\u5c31\u662f0 \u6b63, 1 \u8d1f aggErrors = multiply(sign(aggClassEst) != mat(labelArr).T, ones((m, 1))) errorRate = aggErrors.sum()/m # print \"total error=%s \" % (errorRate) if errorRate == 0.0: break return weakClassArr, aggClassEst \u53d1\u73b0\uff1a alpha \uff08\u6a21\u578b\u6743\u91cd\uff09\u76ee\u7684\u4e3b\u8981\u662f\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5668\u5b9e\u4f8b\u7684\u6743\u91cd(\u52a0\u548c\u5c31\u662f\u5206\u7c7b\u7ed3\u679c) \u5206\u7c7b\u7684\u6743\u91cd\u503c\uff1a\u6700\u5927\u7684\u503c= alpha \u7684\u52a0\u548c\uff0c\u6700\u5c0f\u503c=-\u6700\u5927\u503c D \uff08\u6837\u672c\u6743\u91cd\uff09\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8ba1\u7b97\u9519\u8bef\u6982\u7387\uff1a weightedError = D.T*errArr\uff0c\u6c42\u6700\u4f73\u5206\u7c7b\u5668 \u6837\u672c\u7684\u6743\u91cd\u503c\uff1a\u5982\u679c\u4e00\u4e2a\u503c\u8bef\u5224\u7684\u51e0\u7387\u8d8a\u5c0f\uff0c\u90a3\u4e48 D \u7684\u6837\u672c\u6743\u91cd\u8d8a\u5c0f \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u6211\u4eec\u62e5\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002\u5728\u4e0d\u91c7\u7528\u968f\u673a\u62bd\u6837\u7684\u65b9\u6cd5\u4e0b\uff0c\u6211\u4eec\u5c31\u4f1a\u5bf9 AdaBoost \u548c Logistic \u56de\u5f52\u7684\u7ed3\u679c\u8fdb\u884c\u5b8c\u5168\u5bf9\u7b49\u7684\u6bd4\u8f83\u3002 def adaClassify(datToClass, classifierArr): \"\"\"adaClassify(ada\u5206\u7c7b\u6d4b\u8bd5) Args: datToClass \u591a\u4e2a\u5f85\u5206\u7c7b\u7684\u6837\u4f8b classifierArr \u5f31\u5206\u7c7b\u5668\u7684\u96c6\u5408 Returns: sign(aggClassEst) \u5206\u7c7b\u7ed3\u679c \"\"\" # do stuff similar to last aggClassEst in adaBoostTrainDS dataMat = mat(datToClass) m = shape(dataMat)[0] aggClassEst = mat(zeros((m, 1))) # \u5faa\u73af \u591a\u4e2a\u5206\u7c7b\u5668 for i in range(len(classifierArr)): # \u524d\u63d0\uff1a \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6700\u4f73\u7684\u5206\u7c7b\u5668\u7684\u5b9e\u4f8b # \u901a\u8fc7\u5206\u7c7b\u5668\u6765\u6838\u7b97\u6bcf\u4e00\u6b21\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\u7136\u540e\u901a\u8fc7alpha*\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c \u5f97\u5230\u6700\u540e\u7684\u6743\u91cd\u52a0\u548c\u7684\u503c\u3002 classEst = stumpClassify(dataMat, classifierArr[i]['dim'], classifierArr[i]['thresh'], classifierArr[i]['ineq']) aggClassEst += classifierArr[i]['alpha']*classEst return sign(aggClassEst) \u4f7f\u7528\u7b97\u6cd5\uff1a\u89c2\u5bdf\u8be5\u4f8b\u5b50\u4e0a\u7684\u9519\u8bef\u7387\u3002\u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a Web \u7f51\u7ad9\uff0c\u8ba9\u9a6f\u9a6c\u5e08\u8f93\u5165\u9a6c\u7684\u75c7\u72b6\u7136\u540e\u9884\u6d4b\u9a6c\u662f\u5426\u4f1a\u6b7b\u53bb\u3002 # \u9a6c\u759d\u75c5\u6570\u636e\u96c6 # \u8bad\u7ec3\u96c6\u5408 dataArr, labelArr = loadDataSet(\"db/7.AdaBoost/horseColicTraining2.txt\") weakClassArr, aggClassEst = adaBoostTrainDS(dataArr, labelArr, 40) print weakClassArr, '\\n-----\\n', aggClassEst.T # \u8ba1\u7b97ROC\u4e0b\u9762\u7684AUC\u7684\u9762\u79ef\u5927\u5c0f plotROC(aggClassEst.T, labelArr) # \u6d4b\u8bd5\u96c6\u5408 dataArrTest, labelArrTest = loadDataSet(\"db/7.AdaBoost/horseColicTest2.txt\") m = shape(dataArrTest)[0] predicting10 = adaClassify(dataArrTest, weakClassArr) errArr = mat(ones((m, 1))) # \u6d4b\u8bd5\uff1a\u8ba1\u7b97\u603b\u6837\u672c\u6570\uff0c\u9519\u8bef\u6837\u672c\u6570\uff0c\u9519\u8bef\u7387 print m, errArr[predicting10 != mat(labelArrTest).T].sum(), errArr[predicting10 != mat(labelArrTest).T].sum()/m \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.AdaBoost/adaboost.py \u8981\u70b9\u8865\u5145 \u975e\u5747\u8861\u73b0\u8c61\uff1a \u5728\u5206\u7c7b\u5668\u8bad\u7ec3\u65f6\uff0c\u6b63\u4f8b\u6570\u76ee\u548c\u53cd\u4f8b\u6570\u76ee\u4e0d\u76f8\u7b49\uff08\u76f8\u5dee\u5f88\u5927\uff09\u3002\u6216\u8005\u53d1\u751f\u5728\u6b63\u8d1f\u4f8b\u5206\u7c7b\u9519\u8bef\u7684\u6210\u672c\u4e0d\u540c\u7684\u65f6\u5019\u3002 \u5224\u65ad\u9a6c\u662f\u5426\u80fd\u7ee7\u7eed\u751f\u5b58(\u4e0d\u53ef\u8bef\u6740) \u8fc7\u6ee4\u5783\u573e\u90ae\u4ef6(\u4e0d\u53ef\u6f0f\u5224) \u4e0d\u80fd\u653e\u8fc7\u4f20\u67d3\u75c5\u7684\u4eba \u4e0d\u80fd\u968f\u4fbf\u8ba4\u4e3a\u522b\u4eba\u72af\u7f6a \u6211\u4eec\u6709\u591a\u79cd\u65b9\u6cd5\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a \u5177\u4f53\u53ef\u53c2\u8003 \u6b64\u94fe\u63a5 \u518d\u7ed3\u5408\u4e66\u4e2d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f52\u4e3a\u516b\u5927\u7c7b\uff1a 1.\u80fd\u5426\u6536\u96c6\u5230\u66f4\u591a\u7684\u6570\u636e\uff1f \u8fd9\u4e2a\u63aa\u65bd\u5f80\u5f80\u88ab\u4eba\u4eec\u6240\u5ffd\u7565\uff0c\u88ab\u8ba4\u4e3a\u5f88\u8822\u3002\u4f46\u662f\u66f4\u5927\u7684\u6570\u636e\u96c6\u66f4\u80fd\u4f53\u73b0\u6837\u672c\u7684\u5206\u5e03\uff0c\u591a\u6837\u6027\u3002 2.\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u8bc4\u4ef7\u6307\u6807 Accuracy \u6216\u8005error rate \u4e0d\u80fd\u7528\u4e8e\u975e\u5747\u8861\u7684\u6570\u636e\u96c6\u3002\u8fd9\u4f1a\u8bef\u5bfc\u4eba\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u5c1d\u8bd5\u5176\u4ed6\u7684\u8bc4\u4ef7\u6307\u6807\u3002 Confusion Matrix \u6df7\u6dc6\u77e9\u9635\uff1a\u4f7f\u7528\u4e00\u4e2a\u8868\u683c\u5bf9\u5206\u7c7b\u5668\u6240\u9884\u6d4b\u7684\u7c7b\u522b\u4e0e\u5176\u771f\u5b9e\u7684\u7c7b\u522b\u7684\u6837\u672c\u7edf\u8ba1\uff0c\u5206\u522b\u4e3a\uff1aTP\u3001FN\u3001FP\u4e0eTN\u3002 Precision\uff1a\u7cbe\u786e\u5ea6 Recall\uff1a \u53ec\u56de\u7387 F1 Score (or F-Score)\uff1a \u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u7387\u7684\u52a0\u6743\u5e73\u5747 \u6216\u8005\u4f7f\u7528 Kappa (Cohen's kappa) ROC Curves ROC \u8bc4\u4f30\u65b9\u6cd5 ROC \u66f2\u7ebf: \u6700\u4f73\u7684\u5206\u7c7b\u5668\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u5904\u4e8e\u5de6\u4e0a\u89d2 \u5bf9\u4e0d\u540c\u7684 ROC \u66f2\u7ebf\u8fdb\u884c\u6bd4\u8f83\u7684\u4e00\u4e2a\u6307\u6807\u662f\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef(Area Unser the Curve, AUC). AUC \u7ed9\u51fa\u7684\u662f\u5206\u7c7b\u5668\u7684\u5e73\u5747\u6027\u80fd\u503c\uff0c\u5f53\u7136\u5b83\u5e76\u4e0d\u80fd\u5b8c\u5168\u4ee3\u66ff\u5bf9\u6574\u6761\u66f2\u7ebf\u7684\u89c2\u5bdf\u3002 \u4e00\u4e2a\u5b8c\u7f8e\u5206\u7c7b\u5668\u7684 AUC \u4e3a1\uff0c\u800c\u968f\u673a\u731c\u6d4b\u7684 AUC \u5219\u4e3a0.5\u3002 3.\u5c1d\u8bd5\u5bf9\u6837\u672c\u91cd\u62bd\u6837 \u6b20\u62bd\u6837(undersampling)\u6216\u8005\u8fc7\u62bd\u6837(oversampling) - \u6b20\u62bd\u6837: \u610f\u5473\u7740\u5220\u9664\u6837\u4f8b - \u8fc7\u62bd\u6837: \u610f\u5473\u7740\u590d\u5236\u6837\u4f8b(\u91cd\u590d\u4f7f\u7528) \u5bf9\u5927\u7c7b\u8fdb\u884c\u6b20\u62bd\u6837 \u5bf9\u5c0f\u7c7b\u8fdb\u884c\u8fc7\u62bd\u6837 \u6216\u8005\u7ed3\u5408\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\u8fdb\u884c\u62bd\u6837 \u4e00\u4e9b\u7ecf\u9a8c\u6cd5\u5219\uff1a \u8003\u8651\u6837\u672c\uff08\u8d85\u8fc71\u4e07\u3001\u5341\u4e07\u751a\u81f3\u66f4\u591a\uff09\u8fdb\u884c\u6b20\u91c7\u6837\uff0c\u5373\u5220\u9664\u90e8\u5206\u6837\u672c\uff1b \u8003\u8651\u6837\u672c\uff08\u4e0d\u8db31\u4e3a\u751a\u81f3\u66f4\u5c11\uff09\u8fdb\u884c\u8fc7\u91c7\u6837\uff0c\u5373\u6dfb\u52a0\u90e8\u5206\u6837\u672c\u7684\u526f\u672c\uff1b \u8003\u8651\u5c1d\u8bd5\u968f\u673a\u91c7\u6837\u4e0e\u975e\u968f\u673a\u91c7\u6837\u4e24\u79cd\u91c7\u6837\u65b9\u6cd5\uff1b \u8003\u8651\u5bf9\u5404\u7c7b\u522b\u5c1d\u8bd5\u4e0d\u540c\u7684\u91c7\u6837\u6bd4\u4f8b\uff0c\u4e0d\u4e00\u5b9a\u662f1:1 \u8003\u8651\u540c\u65f6\u4f7f\u7528\u8fc7\u91c7\u6837\u4e0e\u6b20\u91c7\u6837 4.\u5c1d\u8bd5\u4ea7\u751f\u4eba\u5de5\u751f\u6210\u7684\u6837\u672c \u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u968f\u673a\u62bd\u6837\u5c0f\u7c7b\u6837\u672c\u7684\u5c5e\u6027\uff08\u7279\u5f81\uff09\u6765\u7ec4\u6210\u65b0\u7684\u6837\u672c\u5373\u5c5e\u6027\u503c\u968f\u673a\u91c7\u6837\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u7ecf\u9a8c\u8fdb\u884c\u62bd\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u6bd4\u5982\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u5047\u8bbe\u5404\u5c5e\u6027\u4e4b\u95f4\u4e92\u76f8\u72ec\u7acb\u8fdb\u884c\u91c7\u6837\uff0c\u8fd9\u6837\u4fbf\u53ef\u5f97\u5230\u66f4\u591a\u7684\u6570\u636e\uff0c\u4f46\u662f\u65e0\u6cd5\u4fdd\u8bc1\u5c5e\u6027\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002 \u5f53\u7136\u4e5f\u6709\u7cfb\u7edf\u6027\u7684\u7b97\u6cd5\u3002\u6700\u5e38\u7528\u7684SMOTE(Synthetic Minority Over-Sampling Technique)\u3002 \u987e\u540d\u601d\u4e49\uff0c\u8fd9\u662f\u4e00\u79cdover sampling\uff08\u8fc7\u62bd\u6837\uff09\u7684\u65b9\u5f0f\u3002\u5b83\u662f\u4ea7\u751f\u4eba\u4e3a\u7684\u6837\u672c\u800c\u4e0d\u662f\u5236\u9020\u6837\u672c\u526f\u672c\u3002\u8fd9\u4e2a\u7b97\u6cd5\u662f\u9009\u53d62\u4e2a\u6216\u80052\u4e2a\u4ee5\u4e0a\u76f8\u4f3c\u7684\u6837\u672c\uff08\u6839\u636e\u8ddd\u79bb\u5ea6\u91cf distance measure\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u6837\u672c\uff0c\u5e76\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u7684\u90bb\u5c45\u6837\u672c\u5bf9\u9009\u62e9\u7684\u90a3\u4e2a\u6837\u672c\u7684\u4e00\u4e2a\u5c5e\u6027\u589e\u52a0\u566a\u58f0(\u6bcf\u6b21\u53ea\u5904\u7406\u4e00\u4e2a\u5c5e\u6027)\u3002\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u66f4\u591a\u7684\u65b0\u751f\u6570\u636e\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 \u539f\u59cb\u8bba\u6587 \u3002 python\u5b9e\u73b0\u53ef\u4ee5\u67e5\u9605 UnbalancedDataset 5.\u5c1d\u8bd5\u4e0d\u540c\u7684\u7b97\u6cd5 \u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u6bcf\u4e2a\u95ee\u9898\u4e0a\u4f7f\u7528\u4f60\u6700\u559c\u6b22\u7684\u7b97\u6cd5\u3002\u867d\u7136\u8fd9\u4e2a\u7b97\u6cd5\u5e26\u6765\u8f83\u597d\u7684\u6548\u679c\uff0c\u4f46\u662f\u5b83\u4e5f\u4f1a\u8499\u853d\u4f60\u89c2\u5bdf\u6570\u636e\u5185\u8574\u542b\u7684\u5176\u4ed6\u7684\u4fe1\u606f\u3002\u81f3\u5c11\u4f60\u5f97\u5728\u540c\u4e00\u4e2a\u95ee\u9898\u4e0a\u8bd5\u8bd5\u5404\u79cd\u7b97\u6cd5\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 Why you should be Spot-Checking Algorithms on your Machine Learning Problems \u6bd4\u5982\u8bf4\uff0c\u51b3\u7b56\u6811\u7ecf\u5e38\u5728\u975e\u5747\u8861\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u826f\u597d\u3002\u521b\u5efa\u5206\u7c7b\u6811\u65f6\u5019\u4f7f\u7528\u57fa\u4e8e\u7c7b\u53d8\u91cf\u7684\u5212\u5206\u89c4\u5219\u5f3a\u5236\u4f7f\u7c7b\u522b\u8868\u8fbe\u51fa\u6765\u3002\u5982\u679c\u6709\u7591\u60d1\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u6d41\u884c\u7684\u51b3\u7b56\u6811\uff0c\u6bd4\u5982, C4.5, C5.0, CART \u548c Random Forrest\u3002 6.\u5c1d\u8bd5\u4f7f\u7528\u60e9\u7f5a\u7684\u6a21\u578b \u4f60\u53ef\u4ee5\u4f7f\u7528\u540c\u79cd\u7b97\u6cd5\u4f46\u662f\u4ee5\u4e0d\u540c\u7684\u89d2\u5ea6\u5bf9\u5f85\u8fd9\u4e2a\u95ee\u9898\u3002 \u60e9\u7f5a\u7684\u6a21\u578b\u5c31\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5206\u7c7b\u9519\u8bef\u7ed9\u4e88\u4e0d\u540c\u7684\u4ee3\u4ef7\uff08\u60e9\u7f5a\uff09\u3002\u6bd4\u5982\u5bf9\u4e8e\u9519\u5206\u7684\u5c0f\u7c7b\u7ed9\u4e88\u66f4\u9ad8\u7684\u4ee3\u4ef7\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u4f7f\u6a21\u578b\u504f\u5dee\uff0c\u66f4\u52a0\u5173\u6ce8\u5c0f\u7c7b\u3002 \u901a\u5e38\u6765\u8bf4\u8fd9\u79cd\u4ee3\u4ef7/\u60e9\u7f5a\u6216\u8005\u6bd4\u91cd\u5728\u5b66\u4e60\u4e2d\u7b97\u6cd5\u662f\u7279\u5b9a\u7684\u3002\u6bd4\u5982\u4f7f\u7528\u4ee3\u4ef7\u51fd\u6570\u6765\u5b9e\u73b0\uff1a \u4ee3\u4ef7\u51fd\u6570 \u57fa\u4e8e\u4ee3\u4ef7\u51fd\u6570\u7684\u5206\u7c7b\u5668\u51b3\u7b56\u63a7\u5236\uff1a TP*(-5)+FN*1+FP*50+TN*0 \u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a cost sensitive learning\uff0cWeka \u4e2d\u76f8\u5e94\u7684\u6846\u67b6\u53ef\u4ee5\u5b9e\u73b0\u53eb CostSensitiveClassifier \u5982\u679c\u5f53\u4f60\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7b97\u6cd5\u800c\u4e14\u65e0\u6cd5\u91cd\u62bd\u6837\uff0c\u6216\u8005\u6a21\u578b\u6548\u679c\u4e0d\u884c\uff0c\u8fd9\u65f6\u5019\u4f7f\u7528\u60e9\u7f5a\uff08penalization\uff09\u662f\u53ef\u884c\u7684\u65b9\u6cd5\u3002\u8fd9\u63d0\u4f9b\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u6765\u201c\u5e73\u8861\u201d\u7c7b\u522b\u3002\u4f46\u662f\u8bbe\u5b9a\u60e9\u7f5a\u51fd\u6570/\u4ee3\u4ef7\u51fd\u6570\u662f\u6bd4\u8f83\u590d\u6742\u7684\u3002\u6700\u597d\u8fd8\u662f\u5c1d\u8bd5\u4e0d\u540c\u7684\u4ee3\u4ef7\u51fd\u6570\u7ec4\u5408\u6765\u5f97\u5230\u6700\u4f18\u6548\u679c\u3002 7.\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540c\u7684\u89d2\u5ea6 \u5176\u5b9e\u6709\u5f88\u591a\u7814\u7a76\u5173\u4e8e\u975e\u5747\u8861\u6570\u636e\u3002\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u7b97\u6cd5\uff0c\u5ea6\u91cf\uff0c\u672f\u8bed\u3002 \u4ece\u5b83\u4eec\u7684\u89d2\u5ea6\u770b\u770b\u4f60\u7684\u95ee\u9898\uff0c\u601d\u8003\u4f60\u7684\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u4f1a\u6709\u65b0\u7684\u60f3\u6cd5\u3002 \u4e24\u4e2a\u9886\u57df\u60a8\u53ef\u4ee5\u8003\u8651\uff1a anomaly detection(\u5f02\u5e38\u503c\u68c0\u6d4b) \u548c change detection\uff08\u53d8\u5316\u8d8b\u52bf\u68c0\u6d4b\uff09\u3002 Anomaly dectection \u5c31\u662f\u68c0\u6d4b\u7a00\u6709\u4e8b\u4ef6\u3002 \u6bd4\u5982\u901a\u8fc7\u673a\u5668\u9707\u52a8\u6765\u8bc6\u522b\u673a\u5668\u8c37\u4e2d\u6216\u8005\u6839\u636e\u4e00\u7cfb\u5217\u7cfb\u7edf\u7684\u8c03\u7528\u6765\u68c0\u6d4b\u6076\u610f\u64cd\u4f5c\u3002\u4e0e\u5e38\u89c4\u64cd\u4f5c\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u662f\u7f55\u89c1\u7684\u3002 \u628a\u5c0f\u7c7b\u60f3\u6210\u5f02\u5e38\u7c7b\u8fd9\u79cd\u8f6c\u53d8\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60\u60f3\u5230\u65b0\u529e\u6cd5\u6765\u5206\u7c7b\u6570\u636e\u6837\u672c\u3002 change detection \u53d8\u5316\u8d8b\u52bf\u68c0\u6d4b\u7c7b\u4f3c\u4e8e\u5f02\u5e38\u503c\u68c0\u6d4b\u3002\u4f46\u662f\u4ed6\u4e0d\u662f\u5bfb\u627e\u5f02\u5e38\u503c\u800c\u662f\u5bfb\u627e\u53d8\u5316\u6216\u533a\u522b\u3002\u6bd4\u5982\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u6216\u8005\u94f6\u884c\u4ea4\u6613\u8bb0\u5f55\u6765\u89c2\u5bdf\u7528\u6237\u884c\u4e3a\u8f6c\u53d8\u3002 \u8fd9\u4e9b\u4e24\u79cd\u8f6c\u53d8\u53ef\u80fd\u4f1a\u7ed9\u4f60\u65b0\u7684\u65b9\u5f0f\u53bb\u601d\u8003\u4f60\u7684\u95ee\u9898\u548c\u65b0\u7684\u6280\u672f\u53bb\u5c1d\u8bd5\u3002 8.\u5c1d\u8bd5\u53bb\u521b\u65b0 \u4ed4\u7ec6\u601d\u8003\u4f60\u7684\u95ee\u9898\u7136\u540e\u60f3\u60f3\u770b\u5982\u4f55\u5c06\u8fd9\u95ee\u9898\u7ec6\u5206\u4e3a\u51e0\u4e2a\u66f4\u5207\u5b9e\u9645\u7684\u5c0f\u95ee\u9898\u3002 \u6bd4\u5982\uff1a \u5c06\u4f60\u7684\u5927\u7c7b\u5206\u89e3\u6210\u591a\u4e2a\u8f83\u5c0f\u7684\u7c7b\uff1b \u4f7f\u7528One Class\u5206\u7c7b\u5668\uff08\u770b\u5f85\u6210\u5f02\u5e38\u70b9\u68c0\u6d4b\uff09\uff1b \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u6837\u6210\u591a\u4e2a\u6570\u636e\u96c6\uff0c\u4f7f\u7528\u96c6\u6210\u65b9\u5f0f\uff0c\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u7136\u540e\u8054\u5408\u8fd9\u4e9b\u5206\u7c7b\u5668\u8fdb\u884c\u5206\u7c7b\uff1b \u8fd9\u53ea\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u66f4\u591a\u7684\u53ef\u4ee5\u53c2\u9605 In classification, how do you handle an unbalanced training set? \u548c Classification when 80% of my training set is of one class \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c7\u7ae0_\u96c6\u6210\u65b9\u6cd5"},{"location":"ml/7.Ensemble/#7-ensemble-method","text":"","title":"\u7b2c7\u7ae0 \u96c6\u6210\u65b9\u6cd5 ensemble method"},{"location":"ml/7.Ensemble/#ensemble-method-meta-algorithm","text":"\u6982\u5ff5\uff1a\u662f\u5bf9\u5176\u4ed6\u7b97\u6cd5\u8fdb\u884c\u7ec4\u5408\u7684\u4e00\u79cd\u5f62\u5f0f\u3002 \u901a\u4fd7\u6765\u8bf4\uff1a \u5f53\u505a\u91cd\u8981\u51b3\u5b9a\u65f6\uff0c\u5927\u5bb6\u53ef\u80fd\u90fd\u4f1a\u8003\u8651\u5438\u53d6\u591a\u4e2a\u4e13\u5bb6\u800c\u4e0d\u53ea\u662f\u4e00\u4e2a\u4eba\u7684\u610f\u89c1\u3002 \u673a\u5668\u5b66\u4e60\u5904\u7406\u95ee\u9898\u65f6\u53c8\u4f55\u5c1d\u4e0d\u662f\u5982\u6b64\uff1f \u8fd9\u5c31\u662f\u96c6\u6210\u65b9\u6cd5\u80cc\u540e\u7684\u601d\u60f3\u3002 \u96c6\u6210\u65b9\u6cd5\uff1a \u6295\u7968\u9009\u4e3e(bagging: \u81ea\u4e3e\u6c47\u805a\u6cd5 bootstrap aggregating): \u662f\u57fa\u4e8e\u6570\u636e\u968f\u673a\u91cd\u62bd\u6837\u5206\u7c7b\u5668\u6784\u9020\u7684\u65b9\u6cd5 \u518d\u5b66\u4e60(boosting): \u662f\u57fa\u4e8e\u6240\u6709\u5206\u7c7b\u5668\u7684\u52a0\u6743\u6c42\u548c\u7684\u65b9\u6cd5","title":"\u96c6\u6210\u65b9\u6cd5: ensemble method\uff08\u5143\u7b97\u6cd5: meta algorithm\uff09 \u6982\u8ff0"},{"location":"ml/7.Ensemble/#_1","text":"\u76ee\u524d bagging \u65b9\u6cd5\u6700\u6d41\u884c\u7684\u7248\u672c\u662f: \u968f\u673a\u68ee\u6797(random forest) \u9009\u7537\u53cb\uff1a\u7f8e\u5973\u9009\u62e9\u62e9\u5076\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4f1a\u95ee\u51e0\u4e2a\u95fa\u871c\u7684\u5efa\u8bae\uff0c\u6700\u540e\u9009\u62e9\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\u6700\u9ad8\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7537\u670b\u53cb \u76ee\u524d boosting \u65b9\u6cd5\u6700\u6d41\u884c\u7684\u7248\u672c\u662f: AdaBoost \u8ffd\u5973\u53cb\uff1a3\u4e2a\u5e05\u54e5\u8ffd\u540c\u4e00\u4e2a\u7f8e\u5973\uff0c\u7b2c1\u4e2a\u5e05\u54e5\u5931\u8d25->(\u4f20\u6388\u7ecf\u9a8c\uff1a\u59d3\u540d\u3001\u5bb6\u5ead\u60c5\u51b5) \u7b2c2\u4e2a\u5e05\u54e5\u5931\u8d25->(\u4f20\u6388\u7ecf\u9a8c\uff1a\u5174\u8da3\u7231\u597d\u3001\u6027\u683c\u7279\u70b9) \u7b2c3\u4e2a\u5e05\u54e5\u6210\u529f bagging \u548c boosting \u533a\u522b\u662f\u4ec0\u4e48\uff1f bagging \u662f\u4e00\u79cd\u4e0e boosting \u5f88\u7c7b\u4f3c\u7684\u6280\u672f, \u6240\u4f7f\u7528\u7684\u591a\u4e2a\u5206\u7c7b\u5668\u7684\u7c7b\u578b\uff08\u6570\u636e\u91cf\u548c\u7279\u5f81\u91cf\uff09\u90fd\u662f\u4e00\u81f4\u7684\u3002 bagging \u662f\u7531\u4e0d\u540c\u7684\u5206\u7c7b\u5668\uff081.\u6570\u636e\u968f\u673a\u5316 2.\u7279\u5f81\u968f\u673a\u5316\uff09\u7ecf\u8fc7\u8bad\u7ec3\uff0c\u7efc\u5408\u5f97\u51fa\u7684\u51fa\u73b0\u6700\u591a\u5206\u7c7b\u7ed3\u679c\uff1bboosting \u662f\u901a\u8fc7\u8c03\u6574\u5df2\u6709\u5206\u7c7b\u5668\u9519\u5206\u7684\u90a3\u4e9b\u6570\u636e\u6765\u83b7\u5f97\u65b0\u7684\u5206\u7c7b\u5668\uff0c\u5f97\u51fa\u76ee\u524d\u6700\u4f18\u7684\u7ed3\u679c\u3002 bagging \u4e2d\u7684\u5206\u7c7b\u5668\u6743\u91cd\u662f\u76f8\u7b49\u7684\uff1b\u800c boosting \u4e2d\u7684\u5206\u7c7b\u5668\u52a0\u6743\u6c42\u548c\uff0c\u6240\u4ee5\u6743\u91cd\u5e76\u4e0d\u76f8\u7b49\uff0c\u6bcf\u4e2a\u6743\u91cd\u4ee3\u8868\u7684\u662f\u5176\u5bf9\u5e94\u5206\u7c7b\u5668\u5728\u4e0a\u4e00\u8f6e\u8fed\u4ee3\u4e2d\u7684\u6210\u529f\u5ea6\u3002","title":"\u96c6\u6210\u65b9\u6cd5 \u573a\u666f"},{"location":"ml/7.Ensemble/#_2","text":"","title":"\u968f\u673a\u68ee\u6797"},{"location":"ml/7.Ensemble/#_3","text":"\u968f\u673a\u68ee\u6797\u6307\u7684\u662f\u5229\u7528\u591a\u68f5\u6811\u5bf9\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\u5e76\u9884\u6d4b\u7684\u4e00\u79cd\u5206\u7c7b\u5668\u3002 \u51b3\u7b56\u6811\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5927\u5e08\uff0c\u901a\u8fc7\u81ea\u5df1\u5728\u6570\u636e\u96c6\u4e2d\u5b66\u5230\u7684\u77e5\u8bc6\u7528\u4e8e\u65b0\u6570\u636e\u7684\u5206\u7c7b\u3002\u4f46\u662f\u4fd7\u8bdd\u8bf4\u5f97\u597d\uff0c\u4e00\u4e2a\u8bf8\u845b\u4eae\uff0c\u73a9\u4e0d\u8fc7\u4e09\u4e2a\u81ed\u76ae\u5320\u3002\u968f\u673a\u68ee\u6797\u5c31\u662f\u5e0c\u671b\u6784\u5efa\u591a\u4e2a\u81ed\u76ae\u5320\uff0c\u5e0c\u671b\u6700\u7ec8\u7684\u5206\u7c7b\u6548\u679c\u80fd\u591f\u8d85\u8fc7\u5355\u4e2a\u5927\u5e08\u7684\u4e00\u79cd\u7b97\u6cd5\u3002","title":"\u968f\u673a\u68ee\u6797 \u6982\u8ff0"},{"location":"ml/7.Ensemble/#_4","text":"\u90a3\u968f\u673a\u68ee\u6797\u5177\u4f53\u5982\u4f55\u6784\u5efa\u5462\uff1f \u6709\u4e24\u4e2a\u65b9\u9762\uff1a 1. \u6570\u636e\u7684\u968f\u673a\u6027\u5316 2. \u5f85\u9009\u7279\u5f81\u7684\u968f\u673a\u5316 \u4f7f\u5f97\u968f\u673a\u68ee\u6797\u4e2d\u7684\u51b3\u7b56\u6811\u90fd\u80fd\u591f\u5f7c\u6b64\u4e0d\u540c\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u591a\u6837\u6027\uff0c\u4ece\u800c\u63d0\u5347\u5206\u7c7b\u6027\u80fd\u3002 \u6570\u636e\u7684\u968f\u673a\u5316\uff1a\u4f7f\u5f97\u968f\u673a\u68ee\u6797\u4e2d\u7684\u51b3\u7b56\u6811\u66f4\u666e\u904d\u5316\u4e00\u70b9\uff0c\u9002\u5408\u66f4\u591a\u7684\u573a\u666f\u3002 \uff08\u6709\u653e\u56de\u7684\u51c6\u786e\u7387\u5728\uff1a70% \u4ee5\u4e0a\uff0c \u65e0\u653e\u56de\u7684\u51c6\u786e\u7387\u5728\uff1a60% \u4ee5\u4e0a\uff09 1. \u91c7\u53d6\u6709\u653e\u56de\u7684\u62bd\u6837\u65b9\u5f0f \u6784\u9020\u5b50\u6570\u636e\u96c6\uff0c\u4fdd\u8bc1\u4e0d\u540c\u5b50\u96c6\u4e4b\u95f4\u7684\u6570\u91cf\u7ea7\u4e00\u6837\uff08\u4e0d\u540c\u5b50\u96c6\uff0f\u540c\u4e00\u5b50\u96c6 \u4e4b\u95f4\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff09 2. \u5229\u7528\u5b50\u6570\u636e\u96c6\u6765\u6784\u5efa\u5b50\u51b3\u7b56\u6811\uff0c\u5c06\u8fd9\u4e2a\u6570\u636e\u653e\u5230\u6bcf\u4e2a\u5b50\u51b3\u7b56\u6811\u4e2d\uff0c\u6bcf\u4e2a\u5b50\u51b3\u7b56\u6811\u8f93\u51fa\u4e00\u4e2a\u7ed3\u679c\u3002 3. \u7136\u540e\u7edf\u8ba1\u5b50\u51b3\u7b56\u6811\u7684\u6295\u7968\u7ed3\u679c\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u5206\u7c7b \u5c31\u662f \u968f\u673a\u68ee\u6797\u7684\u8f93\u51fa\u7ed3\u679c\u3002 4. \u5982\u4e0b\u56fe\uff0c\u5047\u8bbe\u968f\u673a\u68ee\u6797\u4e2d\u67093\u68f5\u5b50\u51b3\u7b56\u6811\uff0c2\u68f5\u5b50\u6811\u7684\u5206\u7c7b\u7ed3\u679c\u662fA\u7c7b\uff0c1\u68f5\u5b50\u6811\u7684\u5206\u7c7b\u7ed3\u679c\u662fB\u7c7b\uff0c\u90a3\u4e48\u968f\u673a\u68ee\u6797\u7684\u5206\u7c7b\u7ed3\u679c\u5c31\u662fA\u7c7b\u3002 \u5f85\u9009\u7279\u5f81\u7684\u968f\u673a\u5316 \u5b50\u6811\u4ece\u6240\u6709\u7684\u5f85\u9009\u7279\u5f81\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u5b9a\u7684\u7279\u5f81\u3002 \u5728\u9009\u53d6\u7684\u7279\u5f81\u4e2d\u9009\u53d6\u6700\u4f18\u7684\u7279\u5f81\u3002 \u4e0b\u56fe\u4e2d\uff0c\u84dd\u8272\u7684\u65b9\u5757\u4ee3\u8868\u6240\u6709\u53ef\u4ee5\u88ab\u9009\u62e9\u7684\u7279\u5f81\uff0c\u4e5f\u5c31\u662f\u76ee\u524d\u7684\u5f85\u9009\u7279\u5f81\uff1b\u9ec4\u8272\u7684\u65b9\u5757\u662f\u5206\u88c2\u7279\u5f81\u3002 \u5de6\u8fb9\u662f\u4e00\u68f5\u51b3\u7b56\u6811\u7684\u7279\u5f81\u9009\u53d6\u8fc7\u7a0b\uff0c\u901a\u8fc7\u5728\u5f85\u9009\u7279\u5f81\u4e2d\u9009\u53d6\u6700\u4f18\u7684\u5206\u88c2\u7279\u5f81\uff08\u522b\u5fd8\u4e86\u524d\u6587\u63d0\u5230\u7684ID3\u7b97\u6cd5\uff0cC4.5\u7b97\u6cd5\uff0cCART\u7b97\u6cd5\u7b49\u7b49\uff09\uff0c\u5b8c\u6210\u5206\u88c2\u3002 \u53f3\u8fb9\u662f\u4e00\u4e2a\u968f\u673a\u68ee\u6797\u4e2d\u7684\u5b50\u6811\u7684\u7279\u5f81\u9009\u53d6\u8fc7\u7a0b\u3002 \u968f\u673a\u68ee\u6797 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 \u5206\u6790\u6570\u636e\uff1a\u4efb\u4f55\u65b9\u6cd5 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u901a\u8fc7\u6570\u636e\u968f\u673a\u5316\u548c\u7279\u5f81\u968f\u673a\u5316\uff0c\u8fdb\u884c\u591a\u5b9e\u4f8b\u7684\u5206\u7c7b\u8bc4\u4f30 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u9519\u8bef\u7387 \u4f7f\u7528\u7b97\u6cd5\uff1a\u8f93\u5165\u6837\u672c\u6570\u636e\uff0c\u7136\u540e\u8fd0\u884c \u968f\u673a\u68ee\u6797 \u7b97\u6cd5\u5224\u65ad\u8f93\u5165\u6570\u636e\u5206\u7c7b\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7c7b\uff0c\u6700\u540e\u5bf9\u8ba1\u7b97\u51fa\u7684\u5206\u7c7b\u6267\u884c\u540e\u7eed\u5904\u7406 \u968f\u673a\u68ee\u6797 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u51e0\u4e4e\u4e0d\u9700\u8981\u8f93\u5165\u51c6\u5907\u3001\u53ef\u5b9e\u73b0\u9690\u5f0f\u7279\u5f81\u9009\u62e9\u3001\u8bad\u7ec3\u901f\u5ea6\u975e\u5e38\u5feb\u3001\u5176\u4ed6\u6a21\u578b\u5f88\u96be\u8d85\u8d8a\u3001\u5f88\u96be\u5efa\u7acb\u4e00\u4e2a\u7cdf\u7cd5\u7684\u968f\u673a\u68ee\u6797\u6a21\u578b\u3001\u5927\u91cf\u4f18\u79c0\u3001\u514d\u8d39\u4ee5\u53ca\u5f00\u6e90\u7684\u5b9e\u73b0\u3002 \u7f3a\u70b9\uff1a\u52a3\u52bf\u5728\u4e8e\u6a21\u578b\u5927\u5c0f\u3001\u662f\u4e2a\u5f88\u96be\u53bb\u89e3\u91ca\u7684\u9ed1\u76d2\u5b50\u3002 \u9002\u7528\u6570\u636e\u8303\u56f4\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b","title":"\u968f\u673a\u68ee\u6797 \u539f\u7406"},{"location":"ml/7.Ensemble/#_5","text":"","title":"\u9879\u76ee\u6848\u4f8b: \u58f0\u7eb3\u4fe1\u53f7\u5206\u7c7b"},{"location":"ml/7.Ensemble/#_6","text":"\u8fd9\u662f Gorman \u548c Sejnowski \u5728\u7814\u7a76\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u58f0\u7eb3\u4fe1\u53f7\u5206\u7c7b\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u4efb\u52a1\u662f\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u6765\u533a\u5206\u58f0\u7eb3\u4fe1\u53f7\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/7.Ensemble/#_7","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 \u5206\u6790\u6570\u636e\uff1a\u624b\u5de5\u68c0\u67e5\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 random_forest() \u51fd\u6570\u8fdb\u884c\u4f18\u5316\u8bc4\u4f30\uff0c\u8fd4\u56de\u6a21\u578b\u7684\u7efc\u5408\u5206\u7c7b\u7ed3\u679c \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u91c7\u7528\u81ea\u5b9a\u4e49 n_folds \u4efd\u968f\u673a\u91cd\u62bd\u6837 \u8fdb\u884c\u6d4b\u8bd5\u8bc4\u4f30\uff0c\u5f97\u51fa\u7efc\u5408\u7684\u9884\u6d4b\u8bc4\u5206 \u4f7f\u7528\u7b97\u6cd5\uff1a\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u6848\u4f8b\u8fdb\u884c\u5c01\u88c5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u6837\u672c\u6570\u636e\uff1asonar-all-data.txt 0.02,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.066,0.2273,0.31,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.555,0.6711,0.6415,0.7104,0.808,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.051,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.018,0.0084,0.009,0.0032,R 0.0453,0.0523,0.0843,0.0689,0.1183,0.2583,0.2156,0.3481,0.3337,0.2872,0.4918,0.6552,0.6919,0.7797,0.7464,0.9444,1,0.8874,0.8024,0.7818,0.5212,0.4052,0.3957,0.3914,0.325,0.32,0.3271,0.2767,0.4423,0.2028,0.3788,0.2947,0.1984,0.2341,0.1306,0.4182,0.3835,0.1057,0.184,0.197,0.1674,0.0583,0.1401,0.1628,0.0621,0.0203,0.053,0.0742,0.0409,0.0061,0.0125,0.0084,0.0089,0.0048,0.0094,0.0191,0.014,0.0049,0.0052,0.0044,R 0.0262,0.0582,0.1099,0.1083,0.0974,0.228,0.2431,0.3771,0.5598,0.6194,0.6333,0.706,0.5544,0.532,0.6479,0.6931,0.6759,0.7551,0.8929,0.8619,0.7974,0.6737,0.4293,0.3648,0.5331,0.2413,0.507,0.8533,0.6036,0.8514,0.8512,0.5045,0.1862,0.2709,0.4232,0.3043,0.6116,0.6756,0.5375,0.4719,0.4647,0.2587,0.2129,0.2222,0.2111,0.0176,0.1348,0.0744,0.013,0.0106,0.0033,0.0232,0.0166,0.0095,0.018,0.0244,0.0316,0.0164,0.0095,0.0078,R \u51c6\u5907\u6570\u636e\uff1a\u8f6c\u6362\u6837\u672c\u96c6 # \u5bfc\u5165csv\u6587\u4ef6 def loadDataSet(filename): dataset = [] with open(filename, 'r') as fr: for line in fr.readlines(): if not line: continue lineArr = [] for featrue in line.split(','): # strip()\u8fd4\u56de\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26\u751f\u6210\u7684\u65b0\u5b57\u7b26\u4e32 str_f = featrue.strip() if str_f.isdigit(): # \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57 # \u5c06\u6570\u636e\u96c6\u7684\u7b2ccolumn\u5217\u8f6c\u6362\u6210float\u5f62\u5f0f lineArr.append(float(str_f)) else: # \u6dfb\u52a0\u5206\u7c7b\u6807\u7b7e lineArr.append(str_f) dataset.append(lineArr) return dataset \u5206\u6790\u6570\u636e\uff1a\u624b\u5de5\u68c0\u67e5\u6570\u636e \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 random_forest() \u51fd\u6570\u8fdb\u884c\u4f18\u5316\u8bc4\u4f30\uff0c\u8fd4\u56de\u6a21\u578b\u7684\u7efc\u5408\u5206\u7c7b\u7ed3\u679c \u6837\u672c\u6570\u636e\u968f\u673a\u65e0\u653e\u56de\u62bd\u6837-\u7528\u4e8e\u4ea4\u53c9\u9a8c\u8bc1 def cross_validation_split(dataset, n_folds): \"\"\"cross_validation_split(\u5c06\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u91cd\u62bd\u6837 n_folds \u4efd\uff0c\u6570\u636e\u53ef\u4ee5\u91cd\u590d\u62bd\u53d6) Args: dataset \u539f\u59cb\u6570\u636e\u96c6 n_folds \u6570\u636e\u96c6dataset\u5206\u6210n_flods\u4efd Returns: dataset_split list\u96c6\u5408\uff0c\u5b58\u653e\u7684\u662f\uff1a\u5c06\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u91cd\u62bd\u6837 n_folds \u4efd\uff0c\u6570\u636e\u53ef\u4ee5\u91cd\u590d\u62bd\u53d6 \"\"\" dataset_split = list() dataset_copy = list(dataset) # \u590d\u5236\u4e00\u4efd dataset,\u9632\u6b62 dataset \u7684\u5185\u5bb9\u6539\u53d8 fold_size = len(dataset) / n_folds for i in range(n_folds): fold = list() # \u6bcf\u6b21\u5faa\u73af fold \u6e05\u96f6\uff0c\u9632\u6b62\u91cd\u590d\u5bfc\u5165 dataset_split while len(fold) < fold_size: # \u8fd9\u91cc\u4e0d\u80fd\u7528 if\uff0cif \u53ea\u662f\u5728\u7b2c\u4e00\u6b21\u5224\u65ad\u65f6\u8d77\u4f5c\u7528\uff0cwhile \u6267\u884c\u5faa\u73af\uff0c\u76f4\u5230\u6761\u4ef6\u4e0d\u6210\u7acb # \u6709\u653e\u56de\u7684\u968f\u673a\u91c7\u6837\uff0c\u6709\u4e00\u4e9b\u6837\u672c\u88ab\u91cd\u590d\u91c7\u6837\uff0c\u4ece\u800c\u5728\u8bad\u7ec3\u96c6\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u6709\u7684\u5219\u4ece\u672a\u5728\u8bad\u7ec3\u96c6\u4e2d\u51fa\u73b0\uff0c\u6b64\u4e3a\u81ea\u52a9\u91c7\u6837\u6cd5\u3002\u4ece\u800c\u4fdd\u8bc1\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 index = randrange(len(dataset_copy)) # \u5c06\u5bf9\u5e94\u7d22\u5f15 index \u7684\u5185\u5bb9\u4ece dataset_copy \u4e2d\u5bfc\u51fa\uff0c\u5e76\u5c06\u8be5\u5185\u5bb9\u4ece dataset_copy \u4e2d\u5220\u9664\u3002 # pop() \u51fd\u6570\u7528\u4e8e\u79fb\u9664\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff08\u9ed8\u8ba4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5e76\u4e14\u8fd4\u56de\u8be5\u5143\u7d20\u7684\u503c\u3002 fold.append(dataset_copy.pop(index)) # \u65e0\u653e\u56de\u7684\u65b9\u5f0f # fold.append(dataset_copy[index]) # \u6709\u653e\u56de\u7684\u65b9\u5f0f dataset_split.append(fold) # \u7531dataset\u5206\u5272\u51fa\u7684n_folds\u4e2a\u6570\u636e\u6784\u6210\u7684\u5217\u8868\uff0c\u4e3a\u4e86\u7528\u4e8e\u4ea4\u53c9\u9a8c\u8bc1 return dataset_split \u8bad\u7ec3\u6570\u636e\u96c6\u968f\u673a\u5316 # Create a random subsample from the dataset with replacement def subsample(dataset, ratio): # \u521b\u5efa\u6570\u636e\u96c6\u7684\u968f\u673a\u5b50\u6837\u672c \"\"\"random_forest(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: dataset \u8bad\u7ec3\u6570\u636e\u96c6 ratio \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u6bd4\u4f8b Returns: sample \u968f\u673a\u62bd\u6837\u7684\u8bad\u7ec3\u6837\u672c \"\"\" sample = list() # \u8bad\u7ec3\u6837\u672c\u7684\u6309\u6bd4\u4f8b\u62bd\u6837\u3002 # round() \u65b9\u6cd5\u8fd4\u56de\u6d6e\u70b9\u6570x\u7684\u56db\u820d\u4e94\u5165\u503c\u3002 n_sample = round(len(dataset) * ratio) while len(sample) < n_sample: # \u6709\u653e\u56de\u7684\u968f\u673a\u91c7\u6837\uff0c\u6709\u4e00\u4e9b\u6837\u672c\u88ab\u91cd\u590d\u91c7\u6837\uff0c\u4ece\u800c\u5728\u8bad\u7ec3\u96c6\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u6709\u7684\u5219\u4ece\u672a\u5728\u8bad\u7ec3\u96c6\u4e2d\u51fa\u73b0\uff0c\u6b64\u4e3a\u81ea\u52a9\u91c7\u6837\u6cd5\u3002\u4ece\u800c\u4fdd\u8bc1\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 index = randrange(len(dataset)) sample.append(dataset[index]) return sample \u7279\u5f81\u968f\u673a\u5316 # \u627e\u51fa\u5206\u5272\u6570\u636e\u96c6\u7684\u6700\u4f18\u7279\u5f81\uff0c\u5f97\u5230\u6700\u4f18\u7684\u7279\u5f81 index\uff0c\u7279\u5f81\u503c row[index]\uff0c\u4ee5\u53ca\u5206\u5272\u5b8c\u7684\u6570\u636e groups\uff08left, right\uff09 def get_split(dataset, n_features): class_values = list(set(row[-1] for row in dataset)) # class_values =[0, 1] b_index, b_value, b_score, b_groups = 999, 999, 999, None features = list() while len(features) < n_features: index = randrange(len(dataset[0])-1) # \u5f80 features \u6dfb\u52a0 n_features \u4e2a\u7279\u5f81\uff08 n_feature \u7b49\u4e8e\u7279\u5f81\u6570\u7684\u4e2a\u6570\uff09\uff0c\u7279\u5f81\u7d22\u5f15\u4ece dataset \u4e2d\u968f\u673a\u53d6 if index not in features: features.append(index) for index in features: # \u5728 n_features \u4e2a\u7279\u5f81\u4e2d\u9009\u51fa\u6700\u4f18\u7684\u7279\u5f81\u7d22\u5f15\uff0c\u5e76\u6ca1\u6709\u904d\u5386\u6240\u6709\u7279\u5f81\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u6bcf\u8bfe\u51b3\u7b56\u6811\u7684\u5dee\u5f02\u6027 for row in dataset: groups = test_split(index, row[index], dataset) # groups=(left, right), row[index] \u904d\u5386\u6bcf\u4e00\u884c index \u7d22\u5f15\u4e0b\u7684\u7279\u5f81\u503c\u4f5c\u4e3a\u5206\u7c7b\u503c value, \u627e\u51fa\u6700\u4f18\u7684\u5206\u7c7b\u7279\u5f81\u548c\u7279\u5f81\u503c gini = gini_index(groups, class_values) # \u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u91cf\u8d8a\u4e00\u6837\uff0c\u8bf4\u660e\u6570\u636e\u533a\u5206\u5ea6\u4e0d\u9ad8\uff0cgini\u7cfb\u6570\u8d8a\u5927 if gini < b_score: b_index, b_value, b_score, b_groups = index, row[index], gini, groups # \u6700\u540e\u5f97\u5230\u6700\u4f18\u7684\u5206\u7c7b\u7279\u5f81 b_index,\u5206\u7c7b\u7279\u5f81\u503c b_value,\u5206\u7c7b\u7ed3\u679c b_groups\u3002b_value \u4e3a\u5206\u9519\u7684\u4ee3\u4ef7\u6210\u672c # print b_score return {'index': b_index, 'value': b_value, 'groups': b_groups} \u968f\u673a\u68ee\u6797 # Random Forest Algorithm def random_forest(train, test, max_depth, min_size, sample_size, n_trees, n_features): \"\"\"random_forest(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: train \u8bad\u7ec3\u6570\u636e\u96c6 test \u6d4b\u8bd5\u6570\u636e\u96c6 max_depth \u51b3\u7b56\u6811\u6df1\u5ea6\u4e0d\u80fd\u592a\u6df1\uff0c\u4e0d\u7136\u5bb9\u6613\u5bfc\u81f4\u8fc7\u62df\u5408 min_size \u53f6\u5b50\u8282\u70b9\u7684\u5927\u5c0f sample_size \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\u6bd4\u4f8b n_trees \u51b3\u7b56\u6811\u7684\u4e2a\u6570 n_features \u9009\u53d6\u7684\u7279\u5f81\u7684\u4e2a\u6570 Returns: predictions \u6bcf\u4e00\u884c\u7684\u9884\u6d4b\u7ed3\u679c\uff0cbagging \u9884\u6d4b\u6700\u540e\u7684\u5206\u7c7b\u7ed3\u679c \"\"\" trees = list() # n_trees \u8868\u793a\u51b3\u7b56\u6811\u7684\u6570\u91cf for i in range(n_trees): # \u968f\u673a\u62bd\u6837\u7684\u8bad\u7ec3\u6837\u672c\uff0c \u968f\u673a\u91c7\u6837\u4fdd\u8bc1\u4e86\u6bcf\u68f5\u51b3\u7b56\u6811\u8bad\u7ec3\u96c6\u7684\u5dee\u5f02\u6027 sample = subsample(train, sample_size) # \u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811 tree = build_tree(sample, max_depth, min_size, n_features) trees.append(tree) # \u6bcf\u4e00\u884c\u7684\u9884\u6d4b\u7ed3\u679c\uff0cbagging \u9884\u6d4b\u6700\u540e\u7684\u5206\u7c7b\u7ed3\u679c predictions = [bagging_predict(trees, row) for row in test] return predictions \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u5728\u91c7\u7528\u81ea\u5b9a\u4e49 n_folds \u4efd\u968f\u673a\u91cd\u62bd\u6837 \u8fdb\u884c\u6d4b\u8bd5\u8bc4\u4f30\uff0c\u5f97\u51fa\u7efc\u5408\u7684\u9884\u6d4b\u8bc4\u5206\u3002 \u8ba1\u7b97\u968f\u673a\u68ee\u6797\u7684\u9884\u6d4b\u7ed3\u679c\u7684\u6b63\u786e\u7387 # \u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206 def evaluate_algorithm(dataset, algorithm, n_folds, *args): \"\"\"evaluate_algorithm(\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\uff0c\u8fd4\u56de\u6a21\u578b\u5f97\u5206) Args: dataset \u539f\u59cb\u6570\u636e\u96c6 algorithm \u4f7f\u7528\u7684\u7b97\u6cd5 n_folds \u6570\u636e\u7684\u4efd\u6570 *args \u5176\u4ed6\u7684\u53c2\u6570 Returns: scores \u6a21\u578b\u5f97\u5206 \"\"\" # \u5c06\u6570\u636e\u96c6\u8fdb\u884c\u968f\u673a\u62bd\u6837\uff0c\u5206\u6210 n_folds \u4efd\uff0c\u6570\u636e\u65e0\u91cd\u590d\u7684\u62bd\u53d6 folds = cross_validation_split(dataset, n_folds) scores = list() # \u6bcf\u6b21\u5faa\u73af\u4ece folds \u4ece\u53d6\u51fa\u4e00\u4e2a fold \u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u5176\u4f59\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u904d\u5386\u6574\u4e2a folds \uff0c\u5b9e\u73b0\u4ea4\u53c9\u9a8c\u8bc1 for fold in folds: train_set = list(folds) train_set.remove(fold) # \u5c06\u591a\u4e2a fold \u5217\u8868\u7ec4\u5408\u6210\u4e00\u4e2a train_set \u5217\u8868, \u7c7b\u4f3c union all \"\"\" In [20]: l1=[[1, 2, 'a'], [11, 22, 'b']] In [21]: l2=[[3, 4, 'c'], [33, 44, 'd']] In [22]: l=[] In [23]: l.append(l1) In [24]: l.append(l2) In [25]: l Out[25]: [[[1, 2, 'a'], [11, 22, 'b']], [[3, 4, 'c'], [33, 44, 'd']]] In [26]: sum(l, []) Out[26]: [[1, 2, 'a'], [11, 22, 'b'], [3, 4, 'c'], [33, 44, 'd']] \"\"\" train_set = sum(train_set, []) test_set = list() # fold \u8868\u793a\u4ece\u539f\u59cb\u6570\u636e\u96c6 dataset \u63d0\u53d6\u51fa\u6765\u7684\u6d4b\u8bd5\u96c6 for row in fold: row_copy = list(row) row_copy[-1] = None test_set.append(row_copy) predicted = algorithm(train_set, test_set, *args) actual = [row[-1] for row in fold] # \u8ba1\u7b97\u968f\u673a\u68ee\u6797\u7684\u9884\u6d4b\u7ed3\u679c\u7684\u6b63\u786e\u7387 accuracy = accuracy_metric(actual, predicted) scores.append(accuracy) return scores \u4f7f\u7528\u7b97\u6cd5\uff1a\u82e5\u4f60\u611f\u5174\u8da3\u53ef\u4ee5\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u6848\u4f8b\u8fdb\u884c\u5c01\u88c5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u7684\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.RandomForest/randomForest.py","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/7.Ensemble/#adaboost","text":"","title":"AdaBoost"},{"location":"ml/7.Ensemble/#adaboost-adaptive-boosting-boosting","text":"\u80fd\u5426\u4f7f\u7528\u5f31\u5206\u7c7b\u5668\u548c\u591a\u4e2a\u5b9e\u4f8b\u6765\u6784\u5efa\u4e00\u4e2a\u5f3a\u5206\u7c7b\u5668\uff1f \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u7406\u8bba\u95ee\u9898\u3002","title":"AdaBoost (adaptive boosting: \u81ea\u9002\u5e94 boosting) \u6982\u8ff0"},{"location":"ml/7.Ensemble/#adaboost_1","text":"AdaBoost \u5de5\u4f5c\u539f\u7406 AdaBoost \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5 \u51c6\u5907\u6570\u636e\uff1a\u4f9d\u8d56\u4e8e\u6240\u4f7f\u7528\u7684\u5f31\u5206\u7c7b\u5668\u7c7b\u578b\uff0c\u672c\u7ae0\u4f7f\u7528\u7684\u662f\u5355\u5c42\u51b3\u7b56\u6811\uff0c\u8fd9\u79cd\u5206\u7c7b\u5668\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5206\u7c7b\u5668\u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u7b2c2\u7ae0\u5230\u7b2c6\u7ae0\u4e2d\u7684\u4efb\u4e00\u5206\u7c7b\u5668\u90fd\u53ef\u4ee5\u5145\u5f53\u5f31\u5206\u7c7b\u5668\u3002 \u4f5c\u4e3a\u5f31\u5206\u7c7b\u5668\uff0c\u7b80\u5355\u5206\u7c7b\u5668\u7684\u6548\u679c\u66f4\u597d\u3002 \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u65b9\u6cd5\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1aAdaBoost \u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u7528\u5728\u8bad\u7ec3\u4e0a\uff0c\u5206\u7c7b\u5668\u5c06\u591a\u6b21\u5728\u540c\u4e00\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f31\u5206\u7c7b\u5668\u3002 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u5206\u7c7b\u7684\u9519\u8bef\u7387\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u901aSVM\u4e00\u6837\uff0cAdaBoost \u9884\u6d4b\u4e24\u4e2a\u7c7b\u522b\u4e2d\u7684\u4e00\u4e2a\u3002\u5982\u679c\u60f3\u628a\u5b83\u5e94\u7528\u5230\u591a\u4e2a\u7c7b\u522b\u7684\u573a\u666f\uff0c\u90a3\u4e48\u5c31\u8981\u50cf\u591a\u7c7b SVM \u4e2d\u7684\u505a\u6cd5\u4e00\u6837\u5bf9 AdaBoost \u8fdb\u884c\u4fee\u6539\u3002 AdaBoost \u7b97\u6cd5\u7279\u70b9 * \u4f18\u70b9\uff1a\u6cdb\u5316\uff08\u7531\u5177\u4f53\u7684\u3001\u4e2a\u522b\u7684\u6269\u5927\u4e3a\u4e00\u822c\u7684\uff09\u9519\u8bef\u7387\u4f4e\uff0c\u6613\u7f16\u7801\uff0c\u53ef\u4ee5\u5e94\u7528\u5728\u5927\u90e8\u5206\u5206\u7c7b\u5668\u4e0a\uff0c\u65e0\u53c2\u6570\u8c03\u8282\u3002 * \u7f3a\u70b9\uff1a\u5bf9\u79bb\u7fa4\u70b9\u654f\u611f\u3002 * \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"AdaBoost \u539f\u7406"},{"location":"ml/7.Ensemble/#_8","text":"\u9879\u76ee\u6d41\u7a0b\u56fe \u57fa\u4e8e\u5355\u5c42\u51b3\u7b56\u6811\u6784\u5efa\u5f31\u5206\u7c7b\u5668 * \u5355\u5c42\u51b3\u7b56\u6811(decision stump, \u4e5f\u79f0\u51b3\u7b56\u6811\u6869)\u662f\u4e00\u79cd\u7b80\u5355\u7684\u51b3\u7b56\u6811\u3002","title":"\u9879\u76ee\u6848\u4f8b: \u9a6c\u759d\u75c5\u7684\u9884\u6d4b"},{"location":"ml/7.Ensemble/#_9","text":"\u9884\u6d4b\u60a3\u6709\u759d\u6c14\u75c5\u7684\u9a6c\u7684\u5b58\u6d3b\u95ee\u9898\uff0c\u8fd9\u91cc\u7684\u6570\u636e\u5305\u62ec368\u4e2a\u6837\u672c\u548c28\u4e2a\u7279\u5f81\uff0c\u759d\u6c14\u75c5\u662f\u63cf\u8ff0\u9a6c\u80c3\u80a0\u75db\u7684\u672f\u8bed\uff0c\u7136\u800c\uff0c\u8fd9\u79cd\u75c5\u5e76\u4e0d\u4e00\u5b9a\u6e90\u81ea\u9a6c\u7684\u80c3\u80a0\u95ee\u9898\uff0c\u5176\u4ed6\u95ee\u9898\u4e5f\u53ef\u80fd\u5f15\u53d1\u759d\u6c14\u75c5\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e86\u533b\u9662\u68c0\u6d4b\u9a6c\u759d\u6c14\u75c5\u7684\u4e00\u4e9b\u6307\u6807\uff0c\u6709\u7684\u6307\u6807\u6bd4\u8f83\u4e3b\u89c2\uff0c\u6709\u7684\u6307\u6807\u96be\u4ee5\u6d4b\u91cf\uff0c\u4f8b\u5982\u9a6c\u7684\u75bc\u75db\u7ea7\u522b\u3002\u53e6\u5916\uff0c\u9664\u4e86\u90e8\u5206\u6307\u6807\u4e3b\u89c2\u548c\u96be\u4ee5\u6d4b\u91cf\u4e4b\u5916\uff0c\u8be5\u6570\u636e\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u6570\u636e\u96c6\u4e2d\u670930%\u7684\u503c\u662f\u7f3a\u5931\u7684\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/7.Ensemble/#_10","text":"\u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u51c6\u5907\u6570\u636e\uff1a\u786e\u4fdd\u7c7b\u522b\u6807\u7b7e\u662f+1\u548c-1\uff0c\u800c\u975e1\u548c0 \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 adaBoostTrainDS() \u51fd\u6570\u8bad\u7ec3\u51fa\u4e00\u7cfb\u5217\u7684\u5206\u7c7b\u5668 \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u6211\u4eec\u62e5\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002\u5728\u4e0d\u91c7\u7528\u968f\u673a\u62bd\u6837\u7684\u65b9\u6cd5\u4e0b\uff0c\u6211\u4eec\u5c31\u4f1a\u5bf9 AdaBoost \u548c Logistic \u56de\u5f52\u7684\u7ed3\u679c\u8fdb\u884c\u5b8c\u5168\u5bf9\u7b49\u7684\u6bd4\u8f83 \u4f7f\u7528\u7b97\u6cd5\uff1a\u89c2\u5bdf\u8be5\u4f8b\u5b50\u4e0a\u7684\u9519\u8bef\u7387\u3002\u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a Web \u7f51\u7ad9\uff0c\u8ba9\u9a6f\u9a6c\u5e08\u8f93\u5165\u9a6c\u7684\u75c7\u72b6\u7136\u540e\u9884\u6d4b\u9a6c\u662f\u5426\u4f1a\u6b7b\u53bb \u6536\u96c6\u6570\u636e\uff1a\u63d0\u4f9b\u7684\u6587\u672c\u6587\u4ef6 \u8bad\u7ec3\u6570\u636e\uff1ahorseColicTraining.txt \u6d4b\u8bd5\u6570\u636e\uff1ahorseColicTest.txt 2.000000 1.000000 38.500000 66.000000 28.000000 3.000000 3.000000 0.000000 2.000000 5.000000 4.000000 4.000000 0.000000 0.000000 0.000000 3.000000 5.000000 45.000000 8.400000 0.000000 0.000000 -1.000000 1.000000 1.000000 39.200000 88.000000 20.000000 0.000000 0.000000 4.000000 1.000000 3.000000 4.000000 2.000000 0.000000 0.000000 0.000000 4.000000 2.000000 50.000000 85.000000 2.000000 2.000000 -1.000000 2.000000 1.000000 38.300000 40.000000 24.000000 1.000000 1.000000 3.000000 1.000000 3.000000 3.000000 1.000000 0.000000 0.000000 0.000000 1.000000 1.000000 33.000000 6.700000 0.000000 0.000000 1.000000 \u51c6\u5907\u6570\u636e\uff1a\u786e\u4fdd\u7c7b\u522b\u6807\u7b7e\u662f+1\u548c-1\uff0c\u800c\u975e1\u548c0 def loadDataSet(fileName): # \u83b7\u53d6 feature \u7684\u6570\u91cf, \u4fbf\u4e8e\u83b7\u53d6 numFeat = len(open(fileName).readline().split('\\t')) dataArr = [] labelArr = [] fr = open(fileName) for line in fr.readlines(): lineArr = [] curLine = line.strip().split('\\t') for i in range(numFeat-1): lineArr.append(float(curLine[i])) dataArr.append(lineArr) labelArr.append(float(curLine[-1])) return dataArr, labelArr \u5206\u6790\u6570\u636e\uff1a\u7edf\u8ba1\u5206\u6790 \u8fc7\u62df\u5408(overfitting, \u4e5f\u79f0\u4e3a\u8fc7\u5b66\u4e60) * \u53d1\u73b0\u6d4b\u8bd5\u9519\u8bef\u7387\u5728\u8fbe\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\u4e4b\u540e\u6709\u5f00\u59cb\u4e0a\u5347\uff0c\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u8fc7\u62df\u5408\u3002 \u901a\u4fd7\u6765\u8bf4\uff1a\u5c31\u662f\u628a\u4e00\u4e9b\u566a\u97f3\u6570\u636e\u4e5f\u62df\u5408\u8fdb\u53bb\u7684\uff0c\u5982\u4e0b\u56fe\u3002 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5728\u6570\u636e\u4e0a\uff0c\u5229\u7528 adaBoostTrainDS() \u51fd\u6570\u8bad\u7ec3\u51fa\u4e00\u7cfb\u5217\u7684\u5206\u7c7b\u5668 def adaBoostTrainDS(dataArr, labelArr, numIt=40): \"\"\"adaBoostTrainDS(adaBoost\u8bad\u7ec3\u8fc7\u7a0b\u653e\u5927) Args: dataArr \u7279\u5f81\u6807\u7b7e\u96c6\u5408 labelArr \u5206\u7c7b\u6807\u7b7e\u96c6\u5408 numIt \u5b9e\u4f8b\u6570 Returns: weakClassArr \u5f31\u5206\u7c7b\u5668\u7684\u96c6\u5408 aggClassEst \u9884\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c\u503c \"\"\" weakClassArr = [] m = shape(dataArr)[0] # \u521d\u59cb\u5316 D\uff0c\u8bbe\u7f6e\u6bcf\u4e2a\u6837\u672c\u7684\u6743\u91cd\u503c\uff0c\u5e73\u5747\u5206\u4e3am\u4efd D = mat(ones((m, 1))/m) aggClassEst = mat(zeros((m, 1))) for i in range(numIt): # \u5f97\u5230\u51b3\u7b56\u6811\u7684\u6a21\u578b bestStump, error, classEst = buildStump(dataArr, labelArr, D) # alpha\u76ee\u7684\u4e3b\u8981\u662f\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5668\u5b9e\u4f8b\u7684\u6743\u91cd(\u7ec4\u5408\u5c31\u662f\u5206\u7c7b\u7ed3\u679c) # \u8ba1\u7b97\u6bcf\u4e2a\u5206\u7c7b\u5668\u7684alpha\u6743\u91cd\u503c alpha = float(0.5*log((1.0-error)/max(error, 1e-16))) bestStump['alpha'] = alpha # store Stump Params in Array weakClassArr.append(bestStump) print \"alpha=%s, classEst=%s, bestStump=%s, error=%s \" % (alpha, classEst.T, bestStump, error) # \u5206\u7c7b\u6b63\u786e\uff1a\u4e58\u79ef\u4e3a1\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff0c-1\u4e3b\u8981\u662f\u4e0b\u9762\u6c42e\u7684-alpha\u6b21\u65b9 # \u5206\u7c7b\u9519\u8bef\uff1a\u4e58\u79ef\u4e3a -1\uff0c\u7ed3\u679c\u4f1a\u53d7\u5f71\u54cd\uff0c\u6240\u4ee5\u4e5f\u4e58\u4ee5 -1 expon = multiply(-1*alpha*mat(labelArr).T, classEst) print '(-1\u53d6\u53cd)\u9884\u6d4b\u503cexpon=', expon.T # \u8ba1\u7b97e\u7684expon\u6b21\u65b9\uff0c\u7136\u540e\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u7efc\u5408\u7684\u6982\u7387\u7684\u503c # \u7ed3\u679c\u53d1\u73b0\uff1a \u5224\u65ad\u9519\u8bef\u7684\u6837\u672c\uff0cD\u4e2d\u76f8\u5bf9\u5e94\u7684\u6837\u672c\u6743\u91cd\u503c\u4f1a\u53d8\u5927\u3002 D = multiply(D, exp(expon)) D = D/D.sum() # \u9884\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c\u503c\uff0c\u5728\u4e0a\u4e00\u8f6e\u7ed3\u679c\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u52a0\u548c\u64cd\u4f5c print '\u5f53\u524d\u7684\u5206\u7c7b\u7ed3\u679c\uff1a', alpha*classEst.T aggClassEst += alpha*classEst print \"\u53e0\u52a0\u540e\u7684\u5206\u7c7b\u7ed3\u679caggClassEst: \", aggClassEst.T # sign \u5224\u65ad\u6b63\u4e3a1\uff0c 0\u4e3a0\uff0c \u8d1f\u4e3a-1\uff0c\u901a\u8fc7\u6700\u7ec8\u52a0\u548c\u7684\u6743\u91cd\u503c\uff0c\u5224\u65ad\u7b26\u53f7\u3002 # \u7ed3\u679c\u4e3a\uff1a\u9519\u8bef\u7684\u6837\u672c\u6807\u7b7e\u96c6\u5408\uff0c\u56e0\u4e3a\u662f !=,\u90a3\u4e48\u7ed3\u679c\u5c31\u662f0 \u6b63, 1 \u8d1f aggErrors = multiply(sign(aggClassEst) != mat(labelArr).T, ones((m, 1))) errorRate = aggErrors.sum()/m # print \"total error=%s \" % (errorRate) if errorRate == 0.0: break return weakClassArr, aggClassEst \u53d1\u73b0\uff1a alpha \uff08\u6a21\u578b\u6743\u91cd\uff09\u76ee\u7684\u4e3b\u8981\u662f\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5668\u5b9e\u4f8b\u7684\u6743\u91cd(\u52a0\u548c\u5c31\u662f\u5206\u7c7b\u7ed3\u679c) \u5206\u7c7b\u7684\u6743\u91cd\u503c\uff1a\u6700\u5927\u7684\u503c= alpha \u7684\u52a0\u548c\uff0c\u6700\u5c0f\u503c=-\u6700\u5927\u503c D \uff08\u6837\u672c\u6743\u91cd\uff09\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8ba1\u7b97\u9519\u8bef\u6982\u7387\uff1a weightedError = D.T*errArr\uff0c\u6c42\u6700\u4f73\u5206\u7c7b\u5668 \u6837\u672c\u7684\u6743\u91cd\u503c\uff1a\u5982\u679c\u4e00\u4e2a\u503c\u8bef\u5224\u7684\u51e0\u7387\u8d8a\u5c0f\uff0c\u90a3\u4e48 D \u7684\u6837\u672c\u6743\u91cd\u8d8a\u5c0f \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u6211\u4eec\u62e5\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002\u5728\u4e0d\u91c7\u7528\u968f\u673a\u62bd\u6837\u7684\u65b9\u6cd5\u4e0b\uff0c\u6211\u4eec\u5c31\u4f1a\u5bf9 AdaBoost \u548c Logistic \u56de\u5f52\u7684\u7ed3\u679c\u8fdb\u884c\u5b8c\u5168\u5bf9\u7b49\u7684\u6bd4\u8f83\u3002 def adaClassify(datToClass, classifierArr): \"\"\"adaClassify(ada\u5206\u7c7b\u6d4b\u8bd5) Args: datToClass \u591a\u4e2a\u5f85\u5206\u7c7b\u7684\u6837\u4f8b classifierArr \u5f31\u5206\u7c7b\u5668\u7684\u96c6\u5408 Returns: sign(aggClassEst) \u5206\u7c7b\u7ed3\u679c \"\"\" # do stuff similar to last aggClassEst in adaBoostTrainDS dataMat = mat(datToClass) m = shape(dataMat)[0] aggClassEst = mat(zeros((m, 1))) # \u5faa\u73af \u591a\u4e2a\u5206\u7c7b\u5668 for i in range(len(classifierArr)): # \u524d\u63d0\uff1a \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6700\u4f73\u7684\u5206\u7c7b\u5668\u7684\u5b9e\u4f8b # \u901a\u8fc7\u5206\u7c7b\u5668\u6765\u6838\u7b97\u6bcf\u4e00\u6b21\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\u7136\u540e\u901a\u8fc7alpha*\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c \u5f97\u5230\u6700\u540e\u7684\u6743\u91cd\u52a0\u548c\u7684\u503c\u3002 classEst = stumpClassify(dataMat, classifierArr[i]['dim'], classifierArr[i]['thresh'], classifierArr[i]['ineq']) aggClassEst += classifierArr[i]['alpha']*classEst return sign(aggClassEst) \u4f7f\u7528\u7b97\u6cd5\uff1a\u89c2\u5bdf\u8be5\u4f8b\u5b50\u4e0a\u7684\u9519\u8bef\u7387\u3002\u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a Web \u7f51\u7ad9\uff0c\u8ba9\u9a6f\u9a6c\u5e08\u8f93\u5165\u9a6c\u7684\u75c7\u72b6\u7136\u540e\u9884\u6d4b\u9a6c\u662f\u5426\u4f1a\u6b7b\u53bb\u3002 # \u9a6c\u759d\u75c5\u6570\u636e\u96c6 # \u8bad\u7ec3\u96c6\u5408 dataArr, labelArr = loadDataSet(\"db/7.AdaBoost/horseColicTraining2.txt\") weakClassArr, aggClassEst = adaBoostTrainDS(dataArr, labelArr, 40) print weakClassArr, '\\n-----\\n', aggClassEst.T # \u8ba1\u7b97ROC\u4e0b\u9762\u7684AUC\u7684\u9762\u79ef\u5927\u5c0f plotROC(aggClassEst.T, labelArr) # \u6d4b\u8bd5\u96c6\u5408 dataArrTest, labelArrTest = loadDataSet(\"db/7.AdaBoost/horseColicTest2.txt\") m = shape(dataArrTest)[0] predicting10 = adaClassify(dataArrTest, weakClassArr) errArr = mat(ones((m, 1))) # \u6d4b\u8bd5\uff1a\u8ba1\u7b97\u603b\u6837\u672c\u6570\uff0c\u9519\u8bef\u6837\u672c\u6570\uff0c\u9519\u8bef\u7387 print m, errArr[predicting10 != mat(labelArrTest).T].sum(), errArr[predicting10 != mat(labelArrTest).T].sum()/m \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.AdaBoost/adaboost.py","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/7.Ensemble/#_11","text":"\u975e\u5747\u8861\u73b0\u8c61\uff1a \u5728\u5206\u7c7b\u5668\u8bad\u7ec3\u65f6\uff0c\u6b63\u4f8b\u6570\u76ee\u548c\u53cd\u4f8b\u6570\u76ee\u4e0d\u76f8\u7b49\uff08\u76f8\u5dee\u5f88\u5927\uff09\u3002\u6216\u8005\u53d1\u751f\u5728\u6b63\u8d1f\u4f8b\u5206\u7c7b\u9519\u8bef\u7684\u6210\u672c\u4e0d\u540c\u7684\u65f6\u5019\u3002 \u5224\u65ad\u9a6c\u662f\u5426\u80fd\u7ee7\u7eed\u751f\u5b58(\u4e0d\u53ef\u8bef\u6740) \u8fc7\u6ee4\u5783\u573e\u90ae\u4ef6(\u4e0d\u53ef\u6f0f\u5224) \u4e0d\u80fd\u653e\u8fc7\u4f20\u67d3\u75c5\u7684\u4eba \u4e0d\u80fd\u968f\u4fbf\u8ba4\u4e3a\u522b\u4eba\u72af\u7f6a \u6211\u4eec\u6709\u591a\u79cd\u65b9\u6cd5\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a \u5177\u4f53\u53ef\u53c2\u8003 \u6b64\u94fe\u63a5 \u518d\u7ed3\u5408\u4e66\u4e2d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f52\u4e3a\u516b\u5927\u7c7b\uff1a","title":"\u8981\u70b9\u8865\u5145"},{"location":"ml/7.Ensemble/#1","text":"\u8fd9\u4e2a\u63aa\u65bd\u5f80\u5f80\u88ab\u4eba\u4eec\u6240\u5ffd\u7565\uff0c\u88ab\u8ba4\u4e3a\u5f88\u8822\u3002\u4f46\u662f\u66f4\u5927\u7684\u6570\u636e\u96c6\u66f4\u80fd\u4f53\u73b0\u6837\u672c\u7684\u5206\u5e03\uff0c\u591a\u6837\u6027\u3002","title":"1.\u80fd\u5426\u6536\u96c6\u5230\u66f4\u591a\u7684\u6570\u636e\uff1f"},{"location":"ml/7.Ensemble/#2","text":"Accuracy \u6216\u8005error rate \u4e0d\u80fd\u7528\u4e8e\u975e\u5747\u8861\u7684\u6570\u636e\u96c6\u3002\u8fd9\u4f1a\u8bef\u5bfc\u4eba\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u5c1d\u8bd5\u5176\u4ed6\u7684\u8bc4\u4ef7\u6307\u6807\u3002 Confusion Matrix \u6df7\u6dc6\u77e9\u9635\uff1a\u4f7f\u7528\u4e00\u4e2a\u8868\u683c\u5bf9\u5206\u7c7b\u5668\u6240\u9884\u6d4b\u7684\u7c7b\u522b\u4e0e\u5176\u771f\u5b9e\u7684\u7c7b\u522b\u7684\u6837\u672c\u7edf\u8ba1\uff0c\u5206\u522b\u4e3a\uff1aTP\u3001FN\u3001FP\u4e0eTN\u3002 Precision\uff1a\u7cbe\u786e\u5ea6 Recall\uff1a \u53ec\u56de\u7387 F1 Score (or F-Score)\uff1a \u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u7387\u7684\u52a0\u6743\u5e73\u5747 \u6216\u8005\u4f7f\u7528 Kappa (Cohen's kappa) ROC Curves ROC \u8bc4\u4f30\u65b9\u6cd5 ROC \u66f2\u7ebf: \u6700\u4f73\u7684\u5206\u7c7b\u5668\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u5904\u4e8e\u5de6\u4e0a\u89d2 \u5bf9\u4e0d\u540c\u7684 ROC \u66f2\u7ebf\u8fdb\u884c\u6bd4\u8f83\u7684\u4e00\u4e2a\u6307\u6807\u662f\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef(Area Unser the Curve, AUC). AUC \u7ed9\u51fa\u7684\u662f\u5206\u7c7b\u5668\u7684\u5e73\u5747\u6027\u80fd\u503c\uff0c\u5f53\u7136\u5b83\u5e76\u4e0d\u80fd\u5b8c\u5168\u4ee3\u66ff\u5bf9\u6574\u6761\u66f2\u7ebf\u7684\u89c2\u5bdf\u3002 \u4e00\u4e2a\u5b8c\u7f8e\u5206\u7c7b\u5668\u7684 AUC \u4e3a1\uff0c\u800c\u968f\u673a\u731c\u6d4b\u7684 AUC \u5219\u4e3a0.5\u3002","title":"2.\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u7684\u8bc4\u4ef7\u6307\u6807"},{"location":"ml/7.Ensemble/#3","text":"\u6b20\u62bd\u6837(undersampling)\u6216\u8005\u8fc7\u62bd\u6837(oversampling) - \u6b20\u62bd\u6837: \u610f\u5473\u7740\u5220\u9664\u6837\u4f8b - \u8fc7\u62bd\u6837: \u610f\u5473\u7740\u590d\u5236\u6837\u4f8b(\u91cd\u590d\u4f7f\u7528) \u5bf9\u5927\u7c7b\u8fdb\u884c\u6b20\u62bd\u6837 \u5bf9\u5c0f\u7c7b\u8fdb\u884c\u8fc7\u62bd\u6837 \u6216\u8005\u7ed3\u5408\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\u8fdb\u884c\u62bd\u6837 \u4e00\u4e9b\u7ecf\u9a8c\u6cd5\u5219\uff1a \u8003\u8651\u6837\u672c\uff08\u8d85\u8fc71\u4e07\u3001\u5341\u4e07\u751a\u81f3\u66f4\u591a\uff09\u8fdb\u884c\u6b20\u91c7\u6837\uff0c\u5373\u5220\u9664\u90e8\u5206\u6837\u672c\uff1b \u8003\u8651\u6837\u672c\uff08\u4e0d\u8db31\u4e3a\u751a\u81f3\u66f4\u5c11\uff09\u8fdb\u884c\u8fc7\u91c7\u6837\uff0c\u5373\u6dfb\u52a0\u90e8\u5206\u6837\u672c\u7684\u526f\u672c\uff1b \u8003\u8651\u5c1d\u8bd5\u968f\u673a\u91c7\u6837\u4e0e\u975e\u968f\u673a\u91c7\u6837\u4e24\u79cd\u91c7\u6837\u65b9\u6cd5\uff1b \u8003\u8651\u5bf9\u5404\u7c7b\u522b\u5c1d\u8bd5\u4e0d\u540c\u7684\u91c7\u6837\u6bd4\u4f8b\uff0c\u4e0d\u4e00\u5b9a\u662f1:1 \u8003\u8651\u540c\u65f6\u4f7f\u7528\u8fc7\u91c7\u6837\u4e0e\u6b20\u91c7\u6837","title":"3.\u5c1d\u8bd5\u5bf9\u6837\u672c\u91cd\u62bd\u6837"},{"location":"ml/7.Ensemble/#4","text":"\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u968f\u673a\u62bd\u6837\u5c0f\u7c7b\u6837\u672c\u7684\u5c5e\u6027\uff08\u7279\u5f81\uff09\u6765\u7ec4\u6210\u65b0\u7684\u6837\u672c\u5373\u5c5e\u6027\u503c\u968f\u673a\u91c7\u6837\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u7ecf\u9a8c\u8fdb\u884c\u62bd\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u6bd4\u5982\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u5047\u8bbe\u5404\u5c5e\u6027\u4e4b\u95f4\u4e92\u76f8\u72ec\u7acb\u8fdb\u884c\u91c7\u6837\uff0c\u8fd9\u6837\u4fbf\u53ef\u5f97\u5230\u66f4\u591a\u7684\u6570\u636e\uff0c\u4f46\u662f\u65e0\u6cd5\u4fdd\u8bc1\u5c5e\u6027\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002 \u5f53\u7136\u4e5f\u6709\u7cfb\u7edf\u6027\u7684\u7b97\u6cd5\u3002\u6700\u5e38\u7528\u7684SMOTE(Synthetic Minority Over-Sampling Technique)\u3002 \u987e\u540d\u601d\u4e49\uff0c\u8fd9\u662f\u4e00\u79cdover sampling\uff08\u8fc7\u62bd\u6837\uff09\u7684\u65b9\u5f0f\u3002\u5b83\u662f\u4ea7\u751f\u4eba\u4e3a\u7684\u6837\u672c\u800c\u4e0d\u662f\u5236\u9020\u6837\u672c\u526f\u672c\u3002\u8fd9\u4e2a\u7b97\u6cd5\u662f\u9009\u53d62\u4e2a\u6216\u80052\u4e2a\u4ee5\u4e0a\u76f8\u4f3c\u7684\u6837\u672c\uff08\u6839\u636e\u8ddd\u79bb\u5ea6\u91cf distance measure\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u6837\u672c\uff0c\u5e76\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u7684\u90bb\u5c45\u6837\u672c\u5bf9\u9009\u62e9\u7684\u90a3\u4e2a\u6837\u672c\u7684\u4e00\u4e2a\u5c5e\u6027\u589e\u52a0\u566a\u58f0(\u6bcf\u6b21\u53ea\u5904\u7406\u4e00\u4e2a\u5c5e\u6027)\u3002\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u66f4\u591a\u7684\u65b0\u751f\u6570\u636e\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 \u539f\u59cb\u8bba\u6587 \u3002 python\u5b9e\u73b0\u53ef\u4ee5\u67e5\u9605 UnbalancedDataset","title":"4.\u5c1d\u8bd5\u4ea7\u751f\u4eba\u5de5\u751f\u6210\u7684\u6837\u672c"},{"location":"ml/7.Ensemble/#5","text":"\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u6bcf\u4e2a\u95ee\u9898\u4e0a\u4f7f\u7528\u4f60\u6700\u559c\u6b22\u7684\u7b97\u6cd5\u3002\u867d\u7136\u8fd9\u4e2a\u7b97\u6cd5\u5e26\u6765\u8f83\u597d\u7684\u6548\u679c\uff0c\u4f46\u662f\u5b83\u4e5f\u4f1a\u8499\u853d\u4f60\u89c2\u5bdf\u6570\u636e\u5185\u8574\u542b\u7684\u5176\u4ed6\u7684\u4fe1\u606f\u3002\u81f3\u5c11\u4f60\u5f97\u5728\u540c\u4e00\u4e2a\u95ee\u9898\u4e0a\u8bd5\u8bd5\u5404\u79cd\u7b97\u6cd5\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 Why you should be Spot-Checking Algorithms on your Machine Learning Problems \u6bd4\u5982\u8bf4\uff0c\u51b3\u7b56\u6811\u7ecf\u5e38\u5728\u975e\u5747\u8861\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u826f\u597d\u3002\u521b\u5efa\u5206\u7c7b\u6811\u65f6\u5019\u4f7f\u7528\u57fa\u4e8e\u7c7b\u53d8\u91cf\u7684\u5212\u5206\u89c4\u5219\u5f3a\u5236\u4f7f\u7c7b\u522b\u8868\u8fbe\u51fa\u6765\u3002\u5982\u679c\u6709\u7591\u60d1\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u6d41\u884c\u7684\u51b3\u7b56\u6811\uff0c\u6bd4\u5982, C4.5, C5.0, CART \u548c Random Forrest\u3002","title":"5.\u5c1d\u8bd5\u4e0d\u540c\u7684\u7b97\u6cd5"},{"location":"ml/7.Ensemble/#6","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u540c\u79cd\u7b97\u6cd5\u4f46\u662f\u4ee5\u4e0d\u540c\u7684\u89d2\u5ea6\u5bf9\u5f85\u8fd9\u4e2a\u95ee\u9898\u3002 \u60e9\u7f5a\u7684\u6a21\u578b\u5c31\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5206\u7c7b\u9519\u8bef\u7ed9\u4e88\u4e0d\u540c\u7684\u4ee3\u4ef7\uff08\u60e9\u7f5a\uff09\u3002\u6bd4\u5982\u5bf9\u4e8e\u9519\u5206\u7684\u5c0f\u7c7b\u7ed9\u4e88\u66f4\u9ad8\u7684\u4ee3\u4ef7\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u4f7f\u6a21\u578b\u504f\u5dee\uff0c\u66f4\u52a0\u5173\u6ce8\u5c0f\u7c7b\u3002 \u901a\u5e38\u6765\u8bf4\u8fd9\u79cd\u4ee3\u4ef7/\u60e9\u7f5a\u6216\u8005\u6bd4\u91cd\u5728\u5b66\u4e60\u4e2d\u7b97\u6cd5\u662f\u7279\u5b9a\u7684\u3002\u6bd4\u5982\u4f7f\u7528\u4ee3\u4ef7\u51fd\u6570\u6765\u5b9e\u73b0\uff1a \u4ee3\u4ef7\u51fd\u6570 \u57fa\u4e8e\u4ee3\u4ef7\u51fd\u6570\u7684\u5206\u7c7b\u5668\u51b3\u7b56\u63a7\u5236\uff1a TP*(-5)+FN*1+FP*50+TN*0 \u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a cost sensitive learning\uff0cWeka \u4e2d\u76f8\u5e94\u7684\u6846\u67b6\u53ef\u4ee5\u5b9e\u73b0\u53eb CostSensitiveClassifier \u5982\u679c\u5f53\u4f60\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7b97\u6cd5\u800c\u4e14\u65e0\u6cd5\u91cd\u62bd\u6837\uff0c\u6216\u8005\u6a21\u578b\u6548\u679c\u4e0d\u884c\uff0c\u8fd9\u65f6\u5019\u4f7f\u7528\u60e9\u7f5a\uff08penalization\uff09\u662f\u53ef\u884c\u7684\u65b9\u6cd5\u3002\u8fd9\u63d0\u4f9b\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u6765\u201c\u5e73\u8861\u201d\u7c7b\u522b\u3002\u4f46\u662f\u8bbe\u5b9a\u60e9\u7f5a\u51fd\u6570/\u4ee3\u4ef7\u51fd\u6570\u662f\u6bd4\u8f83\u590d\u6742\u7684\u3002\u6700\u597d\u8fd8\u662f\u5c1d\u8bd5\u4e0d\u540c\u7684\u4ee3\u4ef7\u51fd\u6570\u7ec4\u5408\u6765\u5f97\u5230\u6700\u4f18\u6548\u679c\u3002","title":"6.\u5c1d\u8bd5\u4f7f\u7528\u60e9\u7f5a\u7684\u6a21\u578b"},{"location":"ml/7.Ensemble/#7","text":"\u5176\u5b9e\u6709\u5f88\u591a\u7814\u7a76\u5173\u4e8e\u975e\u5747\u8861\u6570\u636e\u3002\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u7b97\u6cd5\uff0c\u5ea6\u91cf\uff0c\u672f\u8bed\u3002 \u4ece\u5b83\u4eec\u7684\u89d2\u5ea6\u770b\u770b\u4f60\u7684\u95ee\u9898\uff0c\u601d\u8003\u4f60\u7684\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u4f1a\u6709\u65b0\u7684\u60f3\u6cd5\u3002 \u4e24\u4e2a\u9886\u57df\u60a8\u53ef\u4ee5\u8003\u8651\uff1a anomaly detection(\u5f02\u5e38\u503c\u68c0\u6d4b) \u548c change detection\uff08\u53d8\u5316\u8d8b\u52bf\u68c0\u6d4b\uff09\u3002 Anomaly dectection \u5c31\u662f\u68c0\u6d4b\u7a00\u6709\u4e8b\u4ef6\u3002 \u6bd4\u5982\u901a\u8fc7\u673a\u5668\u9707\u52a8\u6765\u8bc6\u522b\u673a\u5668\u8c37\u4e2d\u6216\u8005\u6839\u636e\u4e00\u7cfb\u5217\u7cfb\u7edf\u7684\u8c03\u7528\u6765\u68c0\u6d4b\u6076\u610f\u64cd\u4f5c\u3002\u4e0e\u5e38\u89c4\u64cd\u4f5c\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u662f\u7f55\u89c1\u7684\u3002 \u628a\u5c0f\u7c7b\u60f3\u6210\u5f02\u5e38\u7c7b\u8fd9\u79cd\u8f6c\u53d8\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60\u60f3\u5230\u65b0\u529e\u6cd5\u6765\u5206\u7c7b\u6570\u636e\u6837\u672c\u3002 change detection \u53d8\u5316\u8d8b\u52bf\u68c0\u6d4b\u7c7b\u4f3c\u4e8e\u5f02\u5e38\u503c\u68c0\u6d4b\u3002\u4f46\u662f\u4ed6\u4e0d\u662f\u5bfb\u627e\u5f02\u5e38\u503c\u800c\u662f\u5bfb\u627e\u53d8\u5316\u6216\u533a\u522b\u3002\u6bd4\u5982\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u6216\u8005\u94f6\u884c\u4ea4\u6613\u8bb0\u5f55\u6765\u89c2\u5bdf\u7528\u6237\u884c\u4e3a\u8f6c\u53d8\u3002 \u8fd9\u4e9b\u4e24\u79cd\u8f6c\u53d8\u53ef\u80fd\u4f1a\u7ed9\u4f60\u65b0\u7684\u65b9\u5f0f\u53bb\u601d\u8003\u4f60\u7684\u95ee\u9898\u548c\u65b0\u7684\u6280\u672f\u53bb\u5c1d\u8bd5\u3002","title":"7.\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540c\u7684\u89d2\u5ea6"},{"location":"ml/7.Ensemble/#8","text":"\u4ed4\u7ec6\u601d\u8003\u4f60\u7684\u95ee\u9898\u7136\u540e\u60f3\u60f3\u770b\u5982\u4f55\u5c06\u8fd9\u95ee\u9898\u7ec6\u5206\u4e3a\u51e0\u4e2a\u66f4\u5207\u5b9e\u9645\u7684\u5c0f\u95ee\u9898\u3002 \u6bd4\u5982\uff1a \u5c06\u4f60\u7684\u5927\u7c7b\u5206\u89e3\u6210\u591a\u4e2a\u8f83\u5c0f\u7684\u7c7b\uff1b \u4f7f\u7528One Class\u5206\u7c7b\u5668\uff08\u770b\u5f85\u6210\u5f02\u5e38\u70b9\u68c0\u6d4b\uff09\uff1b \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u62bd\u6837\u6210\u591a\u4e2a\u6570\u636e\u96c6\uff0c\u4f7f\u7528\u96c6\u6210\u65b9\u5f0f\uff0c\u8bad\u7ec3\u591a\u4e2a\u5206\u7c7b\u5668\uff0c\u7136\u540e\u8054\u5408\u8fd9\u4e9b\u5206\u7c7b\u5668\u8fdb\u884c\u5206\u7c7b\uff1b \u8fd9\u53ea\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u66f4\u591a\u7684\u53ef\u4ee5\u53c2\u9605 In classification, how do you handle an unbalanced training set? \u548c Classification when 80% of my training set is of one class \u4f5c\u8005\uff1a \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"8.\u5c1d\u8bd5\u53bb\u521b\u65b0"},{"location":"ml/8.Regression/","text":"\u7b2c8\u7ae0 \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52 \u56de\u5f52\uff08Regression\uff09 \u6982\u8ff0 \u6211\u4eec\u524d\u8fb9\u63d0\u5230\u7684\u5206\u7c7b\u7684\u76ee\u6807\u53d8\u91cf\u662f\u6807\u79f0\u578b\u6570\u636e\uff0c\u800c\u56de\u5f52\u5219\u662f\u5bf9\u8fde\u7eed\u578b\u7684\u6570\u636e\u505a\u51fa\u5904\u7406\uff0c\u56de\u5f52\u7684\u76ee\u7684\u662f\u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\u7684\u76ee\u6807\u503c\u3002 \u56de\u5f52 \u573a\u666f \u56de\u5f52\u7684\u76ee\u7684\u662f\u9884\u6d4b\u6570\u503c\u578b\u7684\u76ee\u6807\u503c\u3002\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u662f\u4f9d\u636e\u8f93\u5165\u5199\u51fa\u4e00\u4e2a\u76ee\u6807\u503c\u7684\u8ba1\u7b97\u516c\u5f0f\u3002 \u5047\u5982\u4f60\u60f3\u8981\u9884\u6d4b\u5170\u535a\u57fa\u5c3c\u8dd1\u8f66\u7684\u529f\u7387\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u8fd9\u6837\u8ba1\u7b97: HorsePower = 0.0015 * annualSalary - 0.99 * hoursListeningToPublicRadio \u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u56de\u5f52\u65b9\u7a0b(regression equation) \uff0c\u5176\u4e2d\u7684 0.0015 \u548c -0.99 \u79f0\u4f5c \u56de\u5f52\u7cfb\u6570\uff08regression weights\uff09 \uff0c\u6c42\u8fd9\u4e9b\u56de\u5f52\u7cfb\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u56de\u5f52\u3002\u4e00\u65e6\u6709\u4e86\u8fd9\u4e9b\u56de\u5f52\u7cfb\u6570\uff0c\u518d\u7ed9\u5b9a\u8f93\u5165\uff0c\u505a\u9884\u6d4b\u5c31\u975e\u5e38\u5bb9\u6613\u4e86\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\u7528\u56de\u5f52\u7cfb\u6570\u4e58\u4ee5\u8f93\u5165\u503c\uff0c\u518d\u5c06\u7ed3\u679c\u5168\u90e8\u52a0\u5728\u4e00\u8d77\uff0c\u5c31\u5f97\u5230\u4e86\u9884\u6d4b\u503c\u3002\u6211\u4eec\u8fd9\u91cc\u6240\u8bf4\u7684\uff0c\u56de\u5f52\u7cfb\u6570\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u8f93\u5165\u4e5f\u662f\u5411\u91cf\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u4e5f\u5c31\u662f\u6c42\u51fa\u4e8c\u8005\u7684\u5185\u79ef\u3002 \u8bf4\u5230\u56de\u5f52\uff0c\u4e00\u822c\u90fd\u662f\u6307 \u7ebf\u6027\u56de\u5f52(linear regression) \u3002\u7ebf\u6027\u56de\u5f52\u610f\u5473\u7740\u53ef\u4ee5\u5c06\u8f93\u5165\u9879\u5206\u522b\u4e58\u4ee5\u4e00\u4e9b\u5e38\u91cf\uff0c\u518d\u5c06\u7ed3\u679c\u52a0\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u3002 \u8865\u5145\uff1a \u7ebf\u6027\u56de\u5f52\u5047\u8bbe\u7279\u5f81\u548c\u7ed3\u679c\u6ee1\u8db3\u7ebf\u6027\u5173\u7cfb\u3002\u5176\u5b9e\u7ebf\u6027\u5173\u7cfb\u7684\u8868\u8fbe\u80fd\u529b\u975e\u5e38\u5f3a\u5927\uff0c\u6bcf\u4e2a\u7279\u5f81\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u5f3a\u5f31\u53ef\u4ee5\u7531\u524d\u9762\u7684\u53c2\u6570\u4f53\u73b0\uff0c\u800c\u4e14\u6bcf\u4e2a\u7279\u5f81\u53d8\u91cf\u53ef\u4ee5\u9996\u5148\u6620\u5c04\u5230\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u518d\u53c2\u4e0e\u7ebf\u6027\u8ba1\u7b97\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8868\u8fbe\u7279\u5f81\u4e0e\u7ed3\u679c\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002 \u56de\u5f52 \u539f\u7406 1\u3001\u7ebf\u6027\u56de\u5f52 \u6211\u4eec\u5e94\u8be5\u600e\u6837\u4ece\u4e00\u5927\u5806\u6570\u636e\u91cc\u6c42\u51fa\u56de\u5f52\u65b9\u7a0b\u5462\uff1f \u5047\u5b9a\u8f93\u5165\u6570\u636e\u5b58\u653e\u5728\u77e9\u9635 x \u4e2d\uff0c\u800c\u56de\u5f52\u7cfb\u6570\u5b58\u653e\u5728\u5411\u91cf w \u4e2d\u3002\u90a3\u4e48\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e X1\uff0c\u9884\u6d4b\u7ed3\u679c\u5c06\u4f1a\u901a\u8fc7 Y = X1^T w \u7ed9\u51fa\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u624b\u91cc\u6709\u4e00\u4e9b X \u548c\u5bf9\u5e94\u7684 y\uff0c\u600e\u6837\u624d\u80fd\u627e\u5230 w \u5462\uff1f\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u627e\u51fa\u4f7f\u8bef\u5dee\u6700\u5c0f\u7684 w \u3002\u8fd9\u91cc\u7684\u8bef\u5dee\u662f\u6307\u9884\u6d4b y \u503c\u548c\u771f\u5b9e y \u503c\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f7f\u7528\u8be5\u8bef\u5dee\u7684\u7b80\u5355\u7d2f\u52a0\u5c06\u4f7f\u5f97\u6b63\u5dee\u503c\u548c\u8d1f\u5dee\u503c\u76f8\u4e92\u62b5\u6d88\uff0c\u6240\u4ee5\u6211\u4eec\u91c7\u7528\u5e73\u65b9\u8bef\u5dee\uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\uff09\u3002 \u5e73\u65b9\u8bef\u5dee\u53ef\u4ee5\u5199\u505a\uff08\u5176\u5b9e\u6211\u4eec\u662f\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u4f5c\u4e3a loss function\uff09: \u7528\u77e9\u9635\u8868\u793a\u8fd8\u53ef\u4ee5\u5199\u505a \u3002\u5982\u679c\u5bf9 w \u6c42\u5bfc\uff0c\u5f97\u5230 \uff0c\u4ee4\u5176\u7b49\u4e8e\u96f6\uff0c\u89e3\u51fa w \u5982\u4e0b\uff08\u5177\u4f53\u6c42\u5bfc\u8fc7\u7a0b\u4e3a: http://blog.csdn.net/nomadlx53/article/details/50849941 \uff09: 1.1\u3001\u7ebf\u6027\u56de\u5f52 \u987b\u77e5\u6982\u5ff5 1.1.1\u3001\u77e9\u9635\u6c42\u9006 \u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u56de\u5f52\u65b9\u7a0b\u7684\u56de\u5f52\u7cfb\u6570\u65f6\uff0c\u7528\u5230\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b: \u9700\u8981\u5bf9\u77e9\u9635\u6c42\u9006\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65b9\u7a0b\u53ea\u5728\u9006\u77e9\u9635\u5b58\u5728\u7684\u65f6\u5019\u9002\u7528\uff0c\u6211\u4eec\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u5bf9\u6b64\u4f5c\u51fa\u5224\u65ad\u3002 \u5224\u65ad\u77e9\u9635\u662f\u5426\u53ef\u9006\u7684\u4e00\u4e2a\u53ef\u9009\u65b9\u6848\u662f: \u5224\u65ad\u77e9\u9635\u7684\u884c\u5217\u5f0f\u662f\u5426\u4e3a 0\uff0c\u82e5\u4e3a 0 \uff0c\u77e9\u9635\u5c31\u4e0d\u5b58\u5728\u9006\u77e9\u9635\uff0c\u4e0d\u4e3a 0 \u7684\u8bdd\uff0c\u77e9\u9635\u624d\u5b58\u5728\u9006\u77e9\u9635\u3002 1.1.2\u3001\u6700\u5c0f\u4e8c\u4e58\u6cd5 \u6700\u5c0f\u4e8c\u4e58\u6cd5\uff08\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5\uff09\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f\u3002\u5b83\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002 1.2\u3001\u7ebf\u6027\u56de\u5f52 \u5de5\u4f5c\u539f\u7406 \u8bfb\u5165\u6570\u636e\uff0c\u5c06\u6570\u636e\u7279\u5f81x\u3001\u7279\u5f81\u6807\u7b7ey\u5b58\u50a8\u5728\u77e9\u9635x\u3001y\u4e2d \u9a8c\u8bc1 x^Tx \u77e9\u9635\u662f\u5426\u53ef\u9006 \u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u5f97 \u56de\u5f52\u7cfb\u6570 w \u7684\u6700\u4f73\u4f30\u8ba1 1.3\u3001\u7ebf\u6027\u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 R^2 \u6216\u8005\u9884\u6d4b\u503c\u548c\u6570\u636e\u7684\u62df\u5408\u5ea6\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e 1.4\u3001\u7ebf\u6027\u56de\u5f52 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u7ed3\u679c\u6613\u4e8e\u7406\u89e3\uff0c\u8ba1\u7b97\u4e0a\u4e0d\u590d\u6742\u3002 \u7f3a\u70b9\uff1a\u5bf9\u975e\u7ebf\u6027\u7684\u6570\u636e\u62df\u5408\u4e0d\u597d\u3002 \u9002\u7528\u4e8e\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 1.5\u3001\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py 1.5.1\u3001\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6982\u8ff0 \u6839\u636e\u4e0b\u56fe\u4e2d\u7684\u70b9\uff0c\u627e\u51fa\u8be5\u6570\u636e\u7684\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u3002 \u6570\u636e\u683c\u5f0f\u4e3a: x0 x1 y 1.000000 0.067732 3.176513 1.000000 0.427810 3.816464 1.000000 0.995731 4.550095 1.000000 0.738336 4.256571 1.5.2\u3001\u7ebf\u6027\u56de\u5f52 \u7f16\u5199\u4ee3\u7801 def loadDataSet(fileName): \"\"\" \u52a0\u8f7d\u6570\u636e \u89e3\u6790\u4ee5tab\u952e\u5206\u9694\u7684\u6587\u4ef6\u4e2d\u7684\u6d6e\u70b9\u6570 Returns\uff1a dataMat \uff1a feature \u5bf9\u5e94\u7684\u6570\u636e\u96c6 labelMat \uff1a feature \u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\uff0c\u5373\u7c7b\u522b\u6807\u7b7e \"\"\" # \u83b7\u53d6\u6837\u672c\u7279\u5f81\u7684\u603b\u6570\uff0c\u4e0d\u7b97\u6700\u540e\u7684\u76ee\u6807\u53d8\u91cf numFeat = len(open(fileName).readline().split('\\t')) - 1 dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): # \u8bfb\u53d6\u6bcf\u4e00\u884c lineArr =[] # \u5220\u9664\u4e00\u884c\u4e2d\u4ee5tab\u5206\u9694\u7684\u6570\u636e\u524d\u540e\u7684\u7a7a\u767d\u7b26\u53f7 curLine = line.strip().split('\\t') # i \u4ece0\u52302\uff0c\u4e0d\u5305\u62ec2 for i in range(numFeat): # \u5c06\u6570\u636e\u6dfb\u52a0\u5230lineArr List\u4e2d\uff0c\u6bcf\u4e00\u884c\u6570\u636e\u6d4b\u8bd5\u6570\u636e\u7ec4\u6210\u4e00\u4e2a\u884c\u5411\u91cf lineArr.append(float(curLine[i])) # \u5c06\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u5165\u6570\u636e\u90e8\u5206\u5b58\u50a8\u5230dataMat \u7684List\u4e2d dataMat.append(lineArr) # \u5c06\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\uff0c\u5373\u7c7b\u522b\uff0c\u6216\u8005\u53eb\u76ee\u6807\u53d8\u91cf\u5b58\u50a8\u5230labelMat List\u4e2d labelMat.append(float(curLine[-1])) return dataMat,labelMat def standRegres(xArr,yArr): ''' Description\uff1a \u7ebf\u6027\u56de\u5f52 Args: xArr \uff1a\u8f93\u5165\u7684\u6837\u672c\u6570\u636e\uff0c\u5305\u542b\u6bcf\u4e2a\u6837\u672c\u6570\u636e\u7684 feature yArr \uff1a\u5bf9\u5e94\u4e8e\u8f93\u5165\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u76ee\u6807\u53d8\u91cf Returns: ws\uff1a\u56de\u5f52\u7cfb\u6570 ''' # mat()\u51fd\u6570\u5c06xArr\uff0cyArr\u8f6c\u6362\u4e3a\u77e9\u9635 mat().T \u4ee3\u8868\u7684\u662f\u5bf9\u77e9\u9635\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c xMat = mat(xArr) yMat = mat(yArr).T # \u77e9\u9635\u4e58\u6cd5\u7684\u6761\u4ef6\u662f\u5de6\u77e9\u9635\u7684\u5217\u6570\u7b49\u4e8e\u53f3\u77e9\u9635\u7684\u884c\u6570 xTx = xMat.T*xMat # \u56e0\u4e3a\u8981\u7528\u5230xTx\u7684\u9006\u77e9\u9635\uff0c\u6240\u4ee5\u4e8b\u5148\u9700\u8981\u786e\u5b9a\u8ba1\u7b97\u5f97\u5230\u7684xTx\u662f\u5426\u53ef\u9006\uff0c\u6761\u4ef6\u662f\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e0d\u4e3a0 # linalg.det() \u51fd\u6570\u662f\u7528\u6765\u6c42\u5f97\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\uff0c\u5982\u679c\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e3a0\uff0c\u5219\u8fd9\u4e2a\u77e9\u9635\u662f\u4e0d\u53ef\u9006\u7684\uff0c\u5c31\u65e0\u6cd5\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u8fd0\u7b97 if linalg.det(xTx) == 0.0: print \"This matrix is singular, cannot do inverse\" return # \u6700\u5c0f\u4e8c\u4e58\u6cd5 # http://cwiki.apachecn.org/pages/viewpage.action?pageId=5505133 # \u4e66\u4e2d\u7684\u516c\u5f0f\uff0c\u6c42\u5f97w\u7684\u6700\u4f18\u89e3 ws = xTx.I * (xMat.T*yMat) return ws def regression1(): xArr, yArr = loadDataSet(\"db/8.Regression/data.txt\") xMat = mat(xArr) yMat = mat(yArr) ws = standRegres(xArr, yArr) fig = plt.figure() ax = fig.add_subplot(111) #add_subplot(349)\u51fd\u6570\u7684\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5c06\u753b\u5e03\u5206\u62103\u884c4\u5217\u56fe\u50cf\u753b\u5728\u4ece\u5de6\u5230\u53f3\u4ece\u4e0a\u5230\u4e0b\u7b2c9\u5757 ax.scatter(xMat[:, 1].flatten(), yMat.T[:, 0].flatten().A[0]) #scatter \u7684x\u662fxMat\u4e2d\u7684\u7b2c\u4e8c\u5217\uff0cy\u662fyMat\u7684\u7b2c\u4e00\u5217 xCopy = xMat.copy() xCopy.sort(0) yHat = xCopy * ws ax.plot(xCopy[:, 1], yHat) plt.show() 1.5.3\u3001\u7ebf\u6027\u56de\u5f52 \u62df\u5408\u6548\u679c 2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u7ebf\u6027\u56de\u5f52\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u6b20\u62df\u5408\u73b0\u8c61\uff0c\u56e0\u4e3a\u5b83\u6c42\u7684\u662f\u5177\u6709\u6700\u5c0f\u5747\u65b9\u5dee\u7684\u65e0\u504f\u4f30\u8ba1\u3002\u663e\u800c\u6613\u89c1\uff0c\u5982\u679c\u6a21\u578b\u6b20\u62df\u5408\u5c06\u4e0d\u80fd\u53d6\u5f97\u6700\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002\u6240\u4ee5\u6709\u4e9b\u65b9\u6cd5\u5141\u8bb8\u5728\u4f30\u8ba1\u4e2d\u5f15\u5165\u4e00\u4e9b\u504f\u5dee\uff0c\u4ece\u800c\u964d\u4f4e\u9884\u6d4b\u7684\u5747\u65b9\u8bef\u5dee\u3002 \u4e00\u4e2a\u65b9\u6cd5\u662f\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff08Locally Weighted Linear Regression\uff0cLWLR\uff09\u3002\u5728\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u7ed9\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u4e00\u5b9a\u7684\u6743\u91cd\uff0c\u7136\u540e\u4e0e \u7ebf\u6027\u56de\u5f52 \u7c7b\u4f3c\uff0c\u5728\u8fd9\u4e2a\u5b50\u96c6\u4e0a\u57fa\u4e8e\u6700\u5c0f\u5747\u65b9\u8bef\u5dee\u6765\u8fdb\u884c\u666e\u901a\u7684\u56de\u5f52\u3002\u6211\u4eec\u9700\u8981\u6700\u5c0f\u5316\u7684\u76ee\u6807\u51fd\u6570\u5927\u81f4\u4e3a: \u76ee\u6807\u51fd\u6570\u4e2d w \u4e3a\u6743\u91cd\uff0c\u4e0d\u662f\u56de\u5f52\u7cfb\u6570\u3002\u4e0e kNN \u4e00\u6837\uff0c\u8fd9\u79cd\u7b97\u6cd5\u6bcf\u6b21\u9884\u6d4b\u5747\u9700\u8981\u4e8b\u5148\u9009\u53d6\u51fa\u5bf9\u5e94\u7684\u6570\u636e\u5b50\u96c6\u3002\u8be5\u7b97\u6cd5\u89e3\u51fa\u56de\u5f52\u7cfb\u6570 w \u7684\u5f62\u5f0f\u5982\u4e0b: \u5176\u4e2d W \u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u7528\u6765\u7ed9\u6bcf\u4e2a\u6570\u636e\u70b9\u8d4b\u4e88\u6743\u91cd\u3002$\\hat{w}$ \u5219\u4e3a\u56de\u5f52\u7cfb\u6570\u3002 \u8fd9\u4e24\u4e2a\u662f\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u8bf7\u52ff\u6df7\u7528\u3002 LWLR \u4f7f\u7528 \u201c\u6838\u201d\uff08\u4e0e\u652f\u6301\u5411\u91cf\u673a\u4e2d\u7684\u6838\u7c7b\u4f3c\uff09\u6765\u5bf9\u9644\u8fd1\u7684\u70b9\u8d4b\u4e88\u66f4\u9ad8\u7684\u6743\u91cd\u3002\u6838\u7684\u7c7b\u578b\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\uff0c\u6700\u5e38\u7528\u7684\u6838\u5c31\u662f\u9ad8\u65af\u6838\uff0c\u9ad8\u65af\u6838\u5bf9\u5e94\u7684\u6743\u91cd\u5982\u4e0b: \u8fd9\u6837\u5c31\u6784\u5efa\u4e86\u4e00\u4e2a\u53ea\u542b\u5bf9\u89d2\u5143\u7d20\u7684\u6743\u91cd\u77e9\u9635 w \uff0c\u5e76\u4e14\u70b9 x \u4e0e x(i) \u8d8a\u8fd1\uff0cw(i) \u5c06\u4f1a\u8d8a\u5927\u3002\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u5305\u542b\u4e00\u4e2a\u9700\u8981\u7528\u6237\u6307\u5b9a\u7684\u53c2\u6570 k \uff0c\u5b83\u51b3\u5b9a\u4e86\u5bf9\u9644\u8fd1\u7684\u70b9\u8d4b\u4e88\u591a\u5927\u7684\u6743\u91cd\uff0c\u8fd9\u4e5f\u662f\u4f7f\u7528 LWLR \u65f6\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u53c2\u6570\uff0c\u4e0b\u9762\u7684\u56fe\u7ed9\u51fa\u4e86\u53c2\u6570 k \u4e0e\u6743\u91cd\u7684\u5173\u7cfb\u3002 \u4e0a\u9762\u7684\u56fe\u662f \u6bcf\u4e2a\u70b9\u7684\u6743\u91cd\u56fe\uff08\u5047\u5b9a\u6211\u4eec\u6b63\u9884\u6d4b\u7684\u70b9\u662f x = 0.5\uff09\uff0c\u6700\u4e0a\u9762\u7684\u56fe\u662f\u539f\u59cb\u6570\u636e\u96c6\uff0c\u7b2c\u4e8c\u4e2a\u56fe\u663e\u793a\u4e86\u5f53 k = 0.5 \u65f6\uff0c\u5927\u90e8\u5206\u7684\u6570\u636e\u90fd\u7528\u4e8e\u8bad\u7ec3\u56de\u5f52\u6a21\u578b\uff1b\u800c\u6700\u4e0b\u9762\u7684\u56fe\u663e\u793a\u5f53 k=0.01 \u65f6\uff0c\u4ec5\u6709\u5f88\u5c11\u7684\u5c40\u90e8\u70b9\u88ab\u7528\u4e8e\u8bad\u7ec3\u56de\u5f52\u6a21\u578b\u3002 2.1\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u5de5\u4f5c\u539f\u7406 \u8bfb\u5165\u6570\u636e\uff0c\u5c06\u6570\u636e\u7279\u5f81x\u3001\u7279\u5f81\u6807\u7b7ey\u5b58\u50a8\u5728\u77e9\u9635x\u3001y\u4e2d \u5229\u7528\u9ad8\u65af\u6838\u6784\u9020\u4e00\u4e2a\u6743\u91cd\u77e9\u9635 W\uff0c\u5bf9\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u70b9\u65bd\u52a0\u6743\u91cd \u9a8c\u8bc1 X^TWX \u77e9\u9635\u662f\u5426\u53ef\u9006 \u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u5f97 \u56de\u5f52\u7cfb\u6570 w \u7684\u6700\u4f73\u4f30\u8ba1 2.2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py 2.2.1\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6982\u8ff0 \u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4e0a\u9762 \u7ebf\u6027\u56de\u5f52 \u7684\u6570\u636e\u96c6\uff0c\u5bf9\u8fd9\u4e9b\u70b9\u8fdb\u884c\u4e00\u4e2a \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u7684\u62df\u5408\u3002 \u6570\u636e\u683c\u5f0f\u4e3a: 1.000000 0.067732 3.176513 1.000000 0.427810 3.816464 1.000000 0.995731 4.550095 1.000000 0.738336 4.256571 2.2.2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u7f16\u5199\u4ee3\u7801 # \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 def lwlr(testPoint,xArr,yArr,k=1.0): ''' Description\uff1a \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5728\u5f85\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u4e00\u5b9a\u7684\u6743\u91cd\uff0c\u5728\u5b50\u96c6\u4e0a\u57fa\u4e8e\u6700\u5c0f\u5747\u65b9\u5dee\u6765\u8fdb\u884c\u666e\u901a\u7684\u56de\u5f52\u3002 Args\uff1a testPoint\uff1a\u6837\u672c\u70b9 xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf k:\u5173\u4e8e\u8d4b\u4e88\u6743\u91cd\u77e9\u9635\u7684\u6838\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u4e0e\u6743\u91cd\u7684\u8870\u51cf\u901f\u7387\u6709\u5173 Returns: testPoint * ws\uff1a\u6570\u636e\u70b9\u4e0e\u5177\u6709\u6743\u91cd\u7684\u7cfb\u6570\u76f8\u4e58\u5f97\u5230\u7684\u9884\u6d4b\u70b9 Notes: \u8fd9\u5176\u4e2d\u4f1a\u7528\u5230\u8ba1\u7b97\u6743\u91cd\u7684\u516c\u5f0f\uff0cw = e^((x^((i))-x) / -2k^2) \u7406\u89e3\uff1ax\u4e3a\u67d0\u4e2a\u9884\u6d4b\u70b9\uff0cx^((i))\u4e3a\u6837\u672c\u70b9\uff0c\u6837\u672c\u70b9\u8ddd\u79bb\u9884\u6d4b\u70b9\u8d8a\u8fd1\uff0c\u8d21\u732e\u7684\u8bef\u5dee\u8d8a\u5927\uff08\u6743\u503c\u8d8a\u5927\uff09\uff0c\u8d8a\u8fdc\u5219\u8d21\u732e\u7684\u8bef\u5dee\u8d8a\u5c0f\uff08\u6743\u503c\u8d8a\u5c0f\uff09\u3002 \u5173\u4e8e\u9884\u6d4b\u70b9\u7684\u9009\u53d6\uff0c\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u53d6\u7684\u662f\u6837\u672c\u70b9\u3002\u5176\u4e2dk\u662f\u5e26\u5bbd\u53c2\u6570\uff0c\u63a7\u5236w\uff08\u949f\u5f62\u51fd\u6570\uff09\u7684\u5bbd\u7a84\u7a0b\u5ea6\uff0c\u7c7b\u4f3c\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u6807\u51c6\u5dee\u3002 \u7b97\u6cd5\u601d\u8def\uff1a\u5047\u8bbe\u9884\u6d4b\u70b9\u53d6\u6837\u672c\u70b9\u4e2d\u7684\u7b2ci\u4e2a\u6837\u672c\u70b9\uff08\u5171m\u4e2a\u6837\u672c\u70b9\uff09\uff0c\u904d\u53861\u5230m\u4e2a\u6837\u672c\u70b9\uff08\u542b\u7b2ci\u4e2a\uff09\uff0c\u7b97\u51fa\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u4e0e\u9884\u6d4b\u70b9\u7684\u8ddd\u79bb\uff0c \u4e5f\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u6837\u672c\u8d21\u732e\u8bef\u5dee\u7684\u6743\u503c\uff0c\u53ef\u4ee5\u770b\u51faw\u662f\u4e00\u4e2a\u6709m\u4e2a\u5143\u7d20\u7684\u5411\u91cf\uff08\u5199\u6210\u5bf9\u89d2\u9635\u5f62\u5f0f\uff09\u3002 ''' # mat() \u51fd\u6570\u662f\u5c06array\u8f6c\u6362\u4e3a\u77e9\u9635\u7684\u51fd\u6570\uff0c mat().T \u662f\u8f6c\u6362\u4e3a\u77e9\u9635\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c xMat = mat(xArr) yMat = mat(yArr).T # \u83b7\u5f97xMat\u77e9\u9635\u7684\u884c\u6570 m = shape(xMat)[0] # eye()\u8fd4\u56de\u4e00\u4e2a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4ed6\u5143\u7d20\u4e3a0\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u521b\u5efa\u6743\u91cd\u77e9\u9635weights\uff0c\u8be5\u77e9\u9635\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u6743\u91cd weights = mat(eye((m))) for j in range(m): # testPoint \u7684\u5f62\u5f0f\u662f \u4e00\u4e2a\u884c\u5411\u91cf\u7684\u5f62\u5f0f # \u8ba1\u7b97 testPoint \u4e0e\u8f93\u5165\u6837\u672c\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u4e0b\u9762\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u6837\u672c\u8d21\u732e\u8bef\u5dee\u7684\u6743\u503c diffMat = testPoint - xMat[j,:] # k\u63a7\u5236\u8870\u51cf\u7684\u901f\u5ea6 weights[j,j] = exp(diffMat*diffMat.T/(-2.0*k**2)) # \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97 xTx \uff0c\u5176\u4e2d\u7684 weights \u77e9\u9635\u662f\u6837\u672c\u70b9\u5bf9\u5e94\u7684\u6743\u91cd\u77e9\u9635 xTx = xMat.T * (weights * xMat) if linalg.det(xTx) == 0.0: print (\"This matrix is singular, cannot do inverse\") return # \u8ba1\u7b97\u51fa\u56de\u5f52\u7cfb\u6570\u7684\u4e00\u4e2a\u4f30\u8ba1 ws = xTx.I * (xMat.T * (weights * yMat)) return testPoint * ws def lwlrTest(testArr,xArr,yArr,k=1.0): ''' Description\uff1a \u6d4b\u8bd5\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u70b9\u8c03\u7528 lwlr() \u51fd\u6570 Args\uff1a testArr\uff1a\u6d4b\u8bd5\u6240\u7528\u7684\u6240\u6709\u6837\u672c\u70b9 xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf k\uff1a\u63a7\u5236\u6838\u51fd\u6570\u7684\u8870\u51cf\u901f\u7387 Returns\uff1a yHat\uff1a\u9884\u6d4b\u70b9\u7684\u4f30\u8ba1\u503c ''' # \u5f97\u5230\u6837\u672c\u70b9\u7684\u603b\u6570 m = shape(testArr)[0] # \u6784\u5efa\u4e00\u4e2a\u5168\u90e8\u90fd\u662f 0 \u7684 1 * m \u7684\u77e9\u9635 yHat = zeros(m) # \u5faa\u73af\u6240\u6709\u7684\u6570\u636e\u70b9\uff0c\u5e76\u5c06lwlr\u8fd0\u7528\u4e8e\u6240\u6709\u7684\u6570\u636e\u70b9 for i in range(m): yHat[i] = lwlr(testArr[i],xArr,yArr,k) # \u8fd4\u56de\u4f30\u8ba1\u503c return yHat def lwlrTestPlot(xArr,yArr,k=1.0): ''' Description: \u9996\u5148\u5c06 X \u6392\u5e8f\uff0c\u5176\u4f59\u7684\u90fd\u4e0elwlrTest\u76f8\u540c\uff0c\u8fd9\u6837\u66f4\u5bb9\u6613\u7ed8\u56fe Args\uff1a xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf\uff0c\u5b9e\u9645\u503c k\uff1a\u63a7\u5236\u6838\u51fd\u6570\u7684\u8870\u51cf\u901f\u7387\u7684\u6709\u5173\u53c2\u6570\uff0c\u8fd9\u91cc\u8bbe\u5b9a\u7684\u662f\u5e38\u91cf\u503c 1 Return\uff1a yHat\uff1a\u6837\u672c\u70b9\u7684\u4f30\u8ba1\u503c xCopy\uff1axArr\u7684\u590d\u5236 ''' # \u751f\u6210\u4e00\u4e2a\u4e0e\u76ee\u6807\u53d8\u91cf\u6570\u76ee\u76f8\u540c\u7684 0 \u5411\u91cf yHat = zeros(shape(yArr)) # \u5c06 xArr \u8f6c\u6362\u4e3a \u77e9\u9635\u5f62\u5f0f xCopy = mat(xArr) # \u6392\u5e8f xCopy.sort(0) # \u5f00\u59cb\u5faa\u73af\uff0c\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u8fdb\u884c\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u76ee\u6807\u53d8\u91cf\u4f30\u8ba1\u503c for i in range(shape(xArr)[0]): yHat[i] = lwlr(xCopy[i],xArr,yArr,k) return yHat,xCopy #test for LWLR def regression2(): xArr, yArr = loadDataSet(\"db/8.Regression/data.txt\") yHat = lwlrTest(xArr, xArr, yArr, 0.003) xMat = mat(xArr) srtInd = xMat[:,1].argsort(0) # argsort()\u51fd\u6570\u662f\u5c06x\u4e2d\u7684\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u63d0\u53d6\u5176\u5bf9\u5e94\u7684index(\u7d22\u5f15)\uff0c\u7136\u540e\u8f93\u51fa xSort=xMat[srtInd][:,0,:] fig = plt.figure() ax = fig.add_subplot(111) ax.plot(xSort[:,1], yHat[srtInd]) ax.scatter(xMat[:,1].flatten().A[0], mat(yArr).T.flatten().A[0] , s=2, c='red') plt.show() 2.2.3\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u62df\u5408\u6548\u679c \u4e0a\u56fe\u4f7f\u7528\u4e86 3 \u79cd\u4e0d\u540c\u5e73\u6ed1\u503c\u7ed8\u51fa\u7684\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u7684\u7ed3\u679c\u3002\u4e0a\u56fe\u4e2d\u7684\u5e73\u6ed1\u7cfb\u6570 k =1.0\uff0c\u4e2d\u56fe k = 0.01\uff0c\u4e0b\u56fe k = 0.003 \u3002\u53ef\u4ee5\u770b\u5230\uff0ck = 1.0 \u65f6\u7684\u4f7f\u6240\u6709\u6570\u636e\u7b49\u6bd4\u91cd\uff0c\u5176\u6a21\u578b\u6548\u679c\u4e0e\u57fa\u672c\u7684\u7ebf\u6027\u56de\u5f52\u76f8\u540c\uff0ck=0.01\u65f6\u8be5\u6a21\u578b\u53ef\u4ee5\u6316\u51fa\u6570\u636e\u7684\u6f5c\u5728\u89c4\u5f8b\uff0c\u800c k=0.003\u65f6\u5219\u8003\u8651\u4e86\u592a\u591a\u7684\u566a\u58f0\uff0c\u8fdb\u800c\u5bfc\u81f4\u4e86\u8fc7\u62df\u5408\u73b0\u8c61\u3002 2.3\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u6ce8\u610f\u4e8b\u9879 \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u4e5f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u589e\u52a0\u4e86\u8ba1\u7b97\u91cf\uff0c\u56e0\u4e3a\u5b83\u5bf9\u6bcf\u4e2a\u70b9\u505a\u9884\u6d4b\u65f6\u90fd\u5fc5\u987b\u4f7f\u7528\u6574\u4e2a\u6570\u636e\u96c6\u3002 3\u3001\u7ebf\u6027\u56de\u5f52 & \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u627e\u51fa\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u8fd9\u4e9b\u6280\u672f\u6765\u9884\u6d4b\u9c8d\u9c7c\u7684\u5e74\u9f84\u3002 3.1\u3001\u9879\u76ee\u6982\u8ff0 \u6211\u4eec\u6709\u4e00\u4efd\u6765\u81ea UCI \u7684\u6570\u636e\u96c6\u5408\u7684\u6570\u636e\uff0c\u8bb0\u5f55\u4e86\u9c8d\u9c7c\uff08\u4e00\u79cd\u4ecb\u58f3\u7c7b\u6c34\u751f\u52a8\u7269\uff09\u7684\u5e74\u9f84\u3002\u9c8d\u9c7c\u5e74\u9f84\u53ef\u4ee5\u4ece\u9c8d\u9c7c\u58f3\u7684\u5c42\u6570\u63a8\u7b97\u5f97\u5230\u3002 3.2\u3001\u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 rssError()\u51fd\u6570 \u8ba1\u7b97\u9884\u6d4b\u8bef\u5dee\u7684\u5927\u5c0f\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u6570\u636e\u5b58\u50a8\u683c\u5f0f: 1 0.455 0.365 0.095 0.514 0.2245 0.101 0.15 15 1 0.35 0.265 0.09 0.2255 0.0995 0.0485 0.07 7 -1 0.53 0.42 0.135 0.677 0.2565 0.1415 0.21 9 1 0.44 0.365 0.125 0.516 0.2155 0.114 0.155 10 0 0.33 0.255 0.08 0.205 0.0895 0.0395 0.055 7 \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u4f7f\u7528\u4e0a\u9762\u6211\u4eec\u8bb2\u5230\u7684 \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u8bad\u7ec3\u7b97\u6cd5\uff0c\u6c42\u51fa\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 rssError()\u51fd\u6570 \u8ba1\u7b97\u9884\u6d4b\u8bef\u5dee\u7684\u5927\u5c0f\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c def rssError(yArr,yHatArr): ''' Desc: \u8fd4\u56de\u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u8bef\u5dee\u5927\u5c0f Args\uff1a yArr\uff1a\u6837\u672c\u7684\u771f\u5b9e\u503c yHatArr\uff1a\u6837\u672c\u7684\u9884\u6d4b\u503c Returns: \u4e00\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u8bef\u5dee ''' return ((yArr-yHatArr)**2).sum() # test for abloneDataSet def abaloneTest(): ''' Desc: \u9884\u6d4b\u9c8d\u9c7c\u7684\u5e74\u9f84 Args: None Returns: None ''' # \u52a0\u8f7d\u6570\u636e abX, abY = loadDataSet(\"db/8.Regression/abalone.txt\") # \u4f7f\u7528\u4e0d\u540c\u7684\u6838\u8fdb\u884c\u9884\u6d4b oldyHat01 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 0.1) oldyHat1 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 1) oldyHat10 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 10) # \u6253\u5370\u51fa\u4e0d\u540c\u7684\u6838\u9884\u6d4b\u503c\u4e0e\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u7684\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u5927\u5c0f print \"old yHat01 error Size is :\" , rssError(abY[0:99], oldyHat01.T) print \"old yHat1 error Size is :\" , rssError(abY[0:99], oldyHat1.T) print \"old yHat10 error Size is :\" , rssError(abY[0:99], oldyHat10.T) # \u6253\u5370\u51fa \u4e0d\u540c\u7684\u6838\u9884\u6d4b\u503c \u4e0e \u65b0\u6570\u636e\u96c6\uff08\u6d4b\u8bd5\u6570\u636e\u96c6\uff09\u4e0a\u7684\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u5927\u5c0f newyHat01 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 0.1) print \"new yHat01 error Size is :\" , rssError(abY[0:99], newyHat01.T) newyHat1 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 1) print \"new yHat1 error Size is :\" , rssError(abY[0:99], newyHat1.T) newyHat10 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 10) print \"new yHat10 error Size is :\" , rssError(abY[0:99], newyHat10.T) # \u4f7f\u7528\u7b80\u5355\u7684 \u7ebf\u6027\u56de\u5f52 \u8fdb\u884c\u9884\u6d4b\uff0c\u4e0e\u4e0a\u9762\u7684\u8ba1\u7b97\u8fdb\u884c\u6bd4\u8f83 standWs = standRegres(abX[0:99], abY[0:99]) standyHat = mat(abX[100:199]) * standWs print \"standRegress error Size is:\", rssError(abY[100:199], standyHat.T.A) \u6839\u636e\u6211\u4eec\u4e0a\u8fb9\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u770b\u51fa: \u7b80\u5355\u7ebf\u6027\u56de\u5f52\u8fbe\u5230\u4e86\u4e0e\u5c40\u90e8\u52a0\u6743\u73b0\u884c\u56de\u5f52\u7c7b\u4f3c\u7684\u6548\u679c\u3002\u8fd9\u4e5f\u8bf4\u660e\u4e86\u4e00\u70b9\uff0c\u5fc5\u987b\u5728\u672a\u77e5\u6570\u636e\u4e0a\u6bd4\u8f83\u6548\u679c\u624d\u80fd\u9009\u53d6\u5230\u6700\u4f73\u6a21\u578b\u3002\u90a3\u4e48\u6700\u4f73\u7684\u6838\u5927\u5c0f\u662f 10 \u5417\uff1f\u6216\u8bb8\u662f\uff0c\u4f46\u5982\u679c\u60f3\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 10 \u4e2a\u4e0d\u540c\u7684\u6837\u672c\u96c6\u505a 10 \u6b21\u6d4b\u8bd5\u6765\u6bd4\u8f83\u7ed3\u679c\u3002 \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e 4\u3001\u7f29\u51cf\u7cfb\u6570\u6765 \u201c\u7406\u89e3\u201d \u6570\u636e \u5982\u679c\u6570\u636e\u7684\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\u5e94\u8be5\u600e\u4e48\u529e\uff1f\u662f\u5426\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6027\u56de\u5f52\u548c\u4e4b\u524d\u7684\u65b9\u6cd5\u6765\u505a\u9884\u6d4b\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u5373\u6211\u4eec\u4e0d\u80fd\u518d\u4f7f\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u8ba1\u7b97 \u7684\u65f6\u5019\u4f1a\u51fa\u9519\u3002 \u5982\u679c\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a(n > m)\uff0c\u4e5f\u5c31\u662f\u8bf4\u8f93\u5165\u6570\u636e\u7684\u77e9\u9635 x \u4e0d\u662f\u6ee1\u79e9\u77e9\u9635\u3002\u975e\u6ee1\u79e9\u77e9\u9635\u6c42\u9006\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u4e86 \u5cad\u56de\u5f52\uff08ridge regression\uff09 \u8fd9\u79cd\u7f29\u51cf\u65b9\u6cd5\u3002\u63a5\u7740\u662f lasso\u6cd5 \uff0c\u6700\u540e\u4ecb\u7ecd \u524d\u5411\u9010\u6b65\u56de\u5f52 \u3002 4.1\u3001\u5cad\u56de\u5f52 \u7b80\u5355\u6765\u8bf4\uff0c\u5cad\u56de\u5f52\u5c31\u662f\u5728\u77e9\u9635 \u4e0a\u52a0\u4e00\u4e2a \u03bbI \u4ece\u800c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02\uff0c\u8fdb\u800c\u80fd\u5bf9 \u6c42\u9006\u3002\u5176\u4e2d\u77e9\u9635I\u662f\u4e00\u4e2a n * n \uff08\u7b49\u4e8e\u5217\u6570\uff09 \u7684\u5355\u4f4d\u77e9\u9635\uff0c \u5bf9\u89d2\u7ebf\u4e0a\u5143\u7d20\u5168\u4e3a1\uff0c\u5176\u4ed6\u5143\u7d20\u5168\u4e3a0\u3002\u800c\u03bb\u662f\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u6570\u503c\uff0c\u540e\u9762\u4f1a\u505a\u4ecb\u7ecd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56de\u5f52\u7cfb\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\u5c06\u53d8\u6210\uff1a \u5cad\u56de\u5f52\u6700\u5148\u7528\u6765\u5904\u7406\u7279\u5f81\u6570\u591a\u4e8e\u6837\u672c\u6570\u7684\u60c5\u51b5\uff0c\u73b0\u5728\u4e5f\u7528\u4e8e\u5728\u4f30\u8ba1\u4e2d\u52a0\u5165\u504f\u5dee\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u4f30\u8ba1\u3002\u8fd9\u91cc\u901a\u8fc7\u5f15\u5165 \u03bb \u6765\u9650\u5236\u4e86\u6240\u6709 w \u4e4b\u548c\uff0c\u901a\u8fc7\u5f15\u5165\u8be5\u60e9\u7f5a\u9879\uff0c\u80fd\u591f\u51cf\u5c11\u4e0d\u91cd\u8981\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u6280\u672f\u5728\u7edf\u8ba1\u5b66\u4e2d\u4e5f\u53eb\u4f5c \u7f29\u51cf(shrinkage) \u3002 \u7f29\u51cf\u65b9\u6cd5\u53ef\u4ee5\u53bb\u6389\u4e0d\u91cd\u8981\u7684\u53c2\u6570\uff0c\u56e0\u6b64\u80fd\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u3002\u6b64\u5916\uff0c\u4e0e\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\u76f8\u6bd4\uff0c\u7f29\u51cf\u6cd5\u80fd\u53d6\u5f97\u66f4\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002 \u8fd9\u91cc\u901a\u8fc7\u9884\u6d4b\u8bef\u5dee\u6700\u5c0f\u5316\u5f97\u5230 \u03bb: \u6570\u636e\u83b7\u53d6\u4e4b\u540e\uff0c\u9996\u5148\u62bd\u4e00\u90e8\u5206\u6570\u636e\u7528\u4e8e\u6d4b\u8bd5\uff0c\u5269\u4f59\u7684\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u7528\u4e8e\u8bad\u7ec3\u53c2\u6570 w\u3002\u8bad\u7ec3\u5b8c\u6bd5\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u6d4b\u8bd5\u9884\u6d4b\u6027\u80fd\u3002\u901a\u8fc7\u9009\u53d6\u4e0d\u540c\u7684 \u03bb \u6765\u91cd\u590d\u4e0a\u8ff0\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u4f7f\u9884\u6d4b\u8bef\u5dee\u6700\u5c0f\u7684 \u03bb \u3002 4.1.1\u3001\u5cad\u56de\u5f52 \u539f\u59cb\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py def ridgeRegres(xMat,yMat,lam=0.2): ''' Desc\uff1a \u8fd9\u4e2a\u51fd\u6570\u5b9e\u73b0\u4e86\u7ed9\u5b9a lambda \u4e0b\u7684\u5cad\u56de\u5f52\u6c42\u89e3\u3002 \u5982\u679c\u6570\u636e\u7684\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\uff0c\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u7684\u7ebf\u6027\u56de\u5f52\u548c\u5c40\u90e8\u7ebf\u6027\u56de\u5f52\u4e86\uff0c\u56e0\u4e3a\u8ba1\u7b97 (xTx)^(-1)\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u5982\u679c\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\uff08n > m\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8f93\u5165\u6570\u636e\u7684\u77e9\u9635x\u4e0d\u662f\u6ee1\u79e9\u77e9\u9635\u3002\u975e\u6ee1\u79e9\u77e9\u9635\u5728\u6c42\u9006\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e0b\u8fb9\u8bb2\u4e00\u4e0b\uff1a\u5cad\u56de\u5f52\uff0c\u8fd9\u662f\u6211\u4eec\u8981\u8bb2\u7684\u7b2c\u4e00\u79cd\u7f29\u51cf\u65b9\u6cd5\u3002 Args\uff1a xMat\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yMat\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf\uff0c\u5b9e\u9645\u503c lam\uff1a\u5f15\u5165\u7684\u4e00\u4e2a\u03bb\u503c\uff0c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02 Returns\uff1a \u7ecf\u8fc7\u5cad\u56de\u5f52\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230\u7684\u56de\u5f52\u7cfb\u6570 ''' xTx = xMat.T*xMat # \u5cad\u56de\u5f52\u5c31\u662f\u5728\u77e9\u9635 xTx \u4e0a\u52a0\u4e00\u4e2a \u03bbI \u4ece\u800c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02\uff0c\u8fdb\u800c\u80fd\u5bf9 xTx + \u03bbI \u6c42\u9006 denom = xTx + eye(shape(xMat)[1])*lam # \u68c0\u67e5\u884c\u5217\u5f0f\u662f\u5426\u4e3a\u96f6\uff0c\u5373\u77e9\u9635\u662f\u5426\u53ef\u9006\uff0c\u884c\u5217\u5f0f\u4e3a0\u7684\u8bdd\u5c31\u4e0d\u53ef\u9006\uff0c\u4e0d\u4e3a0\u7684\u8bdd\u5c31\u662f\u53ef\u9006\u3002 if linalg.det(denom) == 0.0: print (\"This matrix is singular, cannot do inverse\") return ws = denom.I * (xMat.T*yMat) return ws def ridgeTest(xArr,yArr): ''' Desc\uff1a \u51fd\u6570 ridgeTest() \u7528\u4e8e\u5728\u4e00\u7ec4 \u03bb \u4e0a\u6d4b\u8bd5\u7ed3\u679c Args\uff1a xArr\uff1a\u6837\u672c\u6570\u636e\u7684\u7279\u5f81\uff0c\u5373 feature yArr\uff1a\u6837\u672c\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u771f\u5b9e\u6570\u636e Returns\uff1a wMat\uff1a\u5c06\u6240\u6709\u7684\u56de\u5f52\u7cfb\u6570\u8f93\u51fa\u5230\u4e00\u4e2a\u77e9\u9635\u5e76\u8fd4\u56de ''' xMat = mat(xArr) yMat=mat(yArr).T # \u8ba1\u7b97Y\u7684\u5747\u503c yMean = mean(yMat,0) # Y\u7684\u6240\u6709\u7684\u7279\u5f81\u51cf\u53bb\u5747\u503c yMat = yMat - yMean # \u6807\u51c6\u5316 x\uff0c\u8ba1\u7b97 xMat \u5e73\u5747\u503c xMeans = mean(xMat,0) # \u7136\u540e\u8ba1\u7b97 X\u7684\u65b9\u5dee xVar = var(xMat,0) # \u6240\u6709\u7279\u5f81\u90fd\u51cf\u53bb\u5404\u81ea\u7684\u5747\u503c\u5e76\u9664\u4ee5\u65b9\u5dee xMat = (xMat - xMeans)/xVar # \u53ef\u4ee5\u5728 30 \u4e2a\u4e0d\u540c\u7684 lambda \u4e0b\u8c03\u7528 ridgeRegres() \u51fd\u6570\u3002 numTestPts = 30 # \u521b\u5efa30 * m \u7684\u5168\u90e8\u6570\u636e\u4e3a0 \u7684\u77e9\u9635 wMat = zeros((numTestPts,shape(xMat)[1])) for i in range(numTestPts): # exp() \u8fd4\u56de e^x ws = ridgeRegres(xMat,yMat,exp(i-10)) wMat[i,:]=ws.T return wMat #test for ridgeRegression def regression3(): abX,abY = loadDataSet(\"db/8.Regression/abalone.txt\") ridgeWeights = ridgeTest(abX, abY) fig = plt.figure() ax = fig.add_subplot(111) ax.plot(ridgeWeights) plt.show() 4.1.2\u3001\u5cad\u56de\u5f52\u5728\u9c8d\u9c7c\u6570\u636e\u96c6\u4e0a\u7684\u8fd0\u884c\u6548\u679c \u4e0a\u56fe\u7ed8\u5236\u51fa\u4e86\u56de\u5f52\u7cfb\u6570\u4e0e log(\u03bb) \u7684\u5173\u7cfb\u3002\u5728\u6700\u5de6\u8fb9\uff0c\u5373 \u03bb \u6700\u5c0f\u65f6\uff0c\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7cfb\u6570\u7684\u539f\u59cb\u503c\uff08\u4e0e\u7ebf\u6027\u56de\u5f52\u4e00\u81f4\uff09\uff1b\u800c\u5728\u53f3\u8fb9\uff0c\u7cfb\u6570\u5168\u90e8\u7f29\u51cf\u4e3a0\uff1b\u5728\u4e2d\u95f4\u90e8\u5206\u7684\u67d0\u503c\u5c06\u53ef\u4ee5\u53d6\u5f97\u6700\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002\u4e3a\u4e86\u5b9a\u91cf\u5730\u627e\u5230\u6700\u4f73\u53c2\u6570\u503c\uff0c\u8fd8\u9700\u8981\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\u3002\u53e6\u5916\uff0c\u8981\u5224\u65ad\u54ea\u4e9b\u53d8\u91cf\u5bf9\u7ed3\u679c\u9884\u6d4b\u6700\u5177\u6709\u5f71\u54cd\u529b\uff0c\u5728\u4e0a\u56fe\u4e2d\u89c2\u5bdf\u5b83\u4eec\u5bf9\u5e94\u7684\u7cfb\u6570\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002 4.2\u3001\u5957\u7d22\u65b9\u6cd5(Lasso\uff0cThe Least Absolute Shrinkage and Selection Operator) \u5728\u589e\u52a0\u5982\u4e0b\u7ea6\u675f\u65f6\uff0c\u666e\u901a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u56de\u5f52\u4f1a\u5f97\u5230\u4e0e\u5cad\u56de\u5f52\u4e00\u6837\u7684\u516c\u5f0f: \u4e0a\u5f0f\u9650\u5b9a\u4e86\u6240\u6709\u56de\u5f52\u7cfb\u6570\u7684\u5e73\u65b9\u548c\u4e0d\u80fd\u5927\u4e8e \u03bb \u3002\u4f7f\u7528\u666e\u901a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u56de\u5f52\u5728\u5f53\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u7279\u5f81\u76f8\u5173\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f88\u5927\u7684\u6b63\u7cfb\u6570\u548c\u4e00\u4e2a\u5f88\u5927\u7684\u8d1f\u7cfb\u6570\u3002\u6b63\u662f\u56e0\u4e3a\u4e0a\u8ff0\u9650\u5236\u6761\u4ef6\u7684\u5b58\u5728\uff0c\u4f7f\u7528\u5cad\u56de\u5f52\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e0e\u5cad\u56de\u5f52\u7c7b\u4f3c\uff0c\u53e6\u4e00\u4e2a\u7f29\u51cf\u65b9\u6cd5lasso\u4e5f\u5bf9\u56de\u5f52\u7cfb\u6570\u505a\u4e86\u9650\u5b9a\uff0c\u5bf9\u5e94\u7684\u7ea6\u675f\u6761\u4ef6\u5982\u4e0b: \u552f\u4e00\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u4f7f\u7528\u7edd\u5bf9\u503c\u53d6\u4ee3\u4e86\u5e73\u65b9\u548c\u3002\u867d\u7136\u7ea6\u675f\u5f62\u5f0f\u53ea\u662f\u7a0d\u4f5c\u53d8\u5316\uff0c\u7ed3\u679c\u5374\u5927\u76f8\u5f84\u5ead: \u5728 \u03bb \u8db3\u591f\u5c0f\u7684\u65f6\u5019\uff0c\u4e00\u4e9b\u7cfb\u6570\u4f1a\u56e0\u6b64\u88ab\u8feb\u7f29\u51cf\u5230 0.\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u3002 4.3\u3001\u524d\u5411\u9010\u6b65\u56de\u5f52 \u524d\u5411\u9010\u6b65\u56de\u5f52\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u4e0e lasso \u5dee\u4e0d\u591a\u7684\u6548\u679c\uff0c\u4f46\u66f4\u52a0\u7b80\u5355\u3002\u5b83\u5c5e\u4e8e\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5373\u6bcf\u4e00\u6b65\u90fd\u5c3d\u53ef\u80fd\u51cf\u5c11\u8bef\u5dee\u3002\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u6743\u91cd\u90fd\u8bbe\u7f6e\u4e3a 0\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u6240\u505a\u7684\u51b3\u7b56\u662f\u5bf9\u67d0\u4e2a\u6743\u91cd\u589e\u52a0\u6216\u51cf\u5c11\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\u3002 \u4f2a\u4ee3\u7801\u5982\u4e0b: \u6570\u636e\u6807\u51c6\u5316\uff0c\u4f7f\u5176\u5206\u5e03\u6ee1\u8db3 0 \u5747\u503c \u548c\u5355\u4f4d\u65b9\u5dee \u5728\u6bcf\u8f6e\u8fed\u4ee3\u8fc7\u7a0b\u4e2d: \u8bbe\u7f6e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee lowestError \u4e3a\u6b63\u65e0\u7a77 \u5bf9\u6bcf\u4e2a\u7279\u5f81: \u589e\u5927\u6216\u7f29\u5c0f: \u6539\u53d8\u4e00\u4e2a\u7cfb\u6570\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 w \u8ba1\u7b97\u65b0 w \u4e0b\u7684\u8bef\u5dee \u5982\u679c\u8bef\u5dee Error \u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee lowestError: \u8bbe\u7f6e Wbest \u7b49\u4e8e\u5f53\u524d\u7684 W \u5c06 W \u8bbe\u7f6e\u4e3a\u65b0\u7684 Wbest 4.3.1\u3001\u524d\u5411\u9010\u6b65\u56de\u5f52 \u539f\u59cb\u4ee3\u7801 \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py def stageWise(xArr,yArr,eps=0.01,numIt=100): xMat = mat(xArr); yMat=mat(yArr).T yMean = mean(yMat,0) yMat = yMat - yMean # \u4e5f\u53ef\u4ee5\u89c4\u5219\u5316ys\u4f46\u4f1a\u5f97\u5230\u66f4\u5c0f\u7684coef xMat = regularize(xMat) m,n=shape(xMat) #returnMat = zeros((numIt,n)) # \u6d4b\u8bd5\u4ee3\u7801\u5220\u9664 ws = zeros((n,1)); wsTest = ws.copy(); wsMax = ws.copy() for i in range(numIt): print (ws.T) lowestError = inf; for j in range(n): for sign in [-1,1]: wsTest = ws.copy() wsTest[j] += eps*sign yTest = xMat*wsTest rssE = rssError(yMat.A,yTest.A) if rssE < lowestError: lowestError = rssE wsMax = wsTest ws = wsMax.copy() returnMat[i,:]=ws.T return returnMat #test for stageWise def regression4(): xArr,yArr=loadDataSet(\"db/8.Regression/abalone.txt\") print(stageWise(xArr,yArr,0.01,200)) xMat = mat(xArr) yMat = mat(yArr).T xMat = regularize(xMat) yM = mean(yMat,0) yMat = yMat - yM weights = standRegres(xMat, yMat.T) print (weights.T) 4.3.2\u3001\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u5728\u9c8d\u9c7c\u6570\u636e\u96c6\u4e0a\u7684\u8fd0\u884c\u6548\u679c \u9010\u6b65\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5\u7684\u4e3b\u8981\u4f18\u70b9\u5728\u4e8e\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4eba\u4eec\u7406\u89e3\u73b0\u6709\u7684\u6a21\u578b\u5e76\u4f5c\u51fa\u6539\u8fdb\u3002\u5f53\u6784\u5efa\u4e86\u4e00\u4e2a\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u8fd0\u884c\u8be5\u7b97\u6cd5\u627e\u51fa\u91cd\u8981\u7684\u7279\u5f81\uff0c\u8fd9\u6837\u5c31\u6709\u53ef\u80fd\u53ca\u65f6\u505c\u6b62\u5bf9\u90a3\u4e9b\u4e0d\u91cd\u8981\u7279\u5f81\u7684\u6536\u96c6\u3002\u6700\u540e\uff0c\u5982\u679c\u7528\u4e8e\u6d4b\u8bd5\uff0c\u8be5\u7b97\u6cd5\u6bcf100\u6b21\u8fed\u4ee3\u540e\u5c31\u53ef\u4ee5\u6784\u5efa\u51fa\u4e00\u4e2a\u6a21\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e10\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\u6bd4\u8f83\u8fd9\u4e9b\u6a21\u578b\uff0c\u6700\u7ec8\u9009\u62e9\u4f7f\u8bef\u5dee\u6700\u5c0f\u7684\u6a21\u578b\u3002 4.4\u3001\u5c0f\u7ed3 \u5f53\u5e94\u7528\u7f29\u51cf\u65b9\u6cd5\uff08\u5982\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u6216\u5cad\u56de\u5f52\uff09\u65f6\uff0c\u6a21\u578b\u4e5f\u5c31\u589e\u52a0\u4e86\u504f\u5dee\uff08bias\uff09\uff0c\u4e0e\u6b64\u540c\u65f6\u5374\u51cf\u5c0f\u4e86\u6a21\u578b\u7684\u65b9\u5dee\u3002 5\u3001\u6743\u8861\u504f\u5dee\u548c\u65b9\u5dee \u4efb\u4f55\u65f6\u5019\uff0c\u4e00\u65e6\u53d1\u73b0\u6a21\u578b\u548c\u6d4b\u91cf\u503c\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u5c31\u8bf4\u51fa\u73b0\u4e86\u8bef\u5dee\u3002\u5f53\u8003\u8651\u6a21\u578b\u4e2d\u7684 \u201c\u566a\u58f0\u201d \u6216\u8005\u8bf4\u8bef\u5dee\u65f6\uff0c\u5fc5\u987b\u8003\u8651\u5176\u6765\u6e90\u3002\u4f60\u53ef\u80fd\u4f1a\u5bf9\u590d\u6742\u7684\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5316\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5728\u6a21\u578b\u548c\u6d4b\u91cf\u503c\u4e4b\u95f4\u51fa\u73b0 \u201c\u566a\u58f0\u201d \u6216\u8bef\u5dee\uff0c\u82e5\u65e0\u6cd5\u7406\u89e3\u6570\u636e\u7684\u771f\u5b9e\u751f\u6210\u8fc7\u7a0b\uff0c\u4e5f\u4f1a\u5bfc\u81f4\u5dee\u5f02\u7684\u4ea7\u751f\u3002\u53e6\u5916\uff0c\u6d4b\u91cf\u8fc7\u7a0b\u672c\u8eab\u4e5f\u53ef\u80fd\u4ea7\u751f \u201c\u566a\u58f0\u201d \u6216\u8005\u95ee\u9898\u3002\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528 \u7ebf\u6027\u56de\u5f52 \u548c \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u5904\u7406\u8fc7\u4e00\u4e2a\u4ece\u6587\u4ef6\u5bfc\u5165\u7684\u4e8c\u7ef4\u6570\u636e\u3002 \u5176\u4e2d\u7684 N(0, 1) \u662f\u4e00\u4e2a\u5747\u503c\u4e3a 0\u3001\u65b9\u5dee\u4e3a 1 \u7684\u6b63\u6001\u5206\u5e03\u3002\u6211\u4eec\u5c1d\u8bd5\u8fc7\u4ec5\u7528\u4e00\u6761\u76f4\u7ebf\u6765\u62df\u5408\u4e0a\u8ff0\u6570\u636e\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u76f4\u7ebf\u6240\u80fd\u5f97\u5230\u7684\u6700\u4f73\u62df\u5408\u5e94\u8be5\u662f 3.0+1.7x \u8fd9\u4e00\u90e8\u5206\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bef\u5dee\u90e8\u5206\u5c31\u662f 0.1sin(30x)+0.06N(0, 1) \u3002\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u6765\u8bd5\u56fe\u6355\u6349\u6570\u636e\u80cc\u540e\u7684\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u62df\u5408\u8d77\u6765\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u56e0\u6b64\u6211\u4eec\u6d4b\u8bd5\u4e86\u591a\u7ec4\u4e0d\u540c\u7684\u5c40\u90e8\u6743\u91cd\u6765\u627e\u5230\u5177\u6709\u6700\u5c0f\u6d4b\u8bd5\u8bef\u5dee\u7684\u89e3\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u7684\u66f2\u7ebf\u56fe\uff0c\u4e0a\u9762\u7684\u66f2\u9762\u5c31\u662f\u6d4b\u8bd5\u8bef\u5dee\uff0c\u4e0b\u9762\u7684\u66f2\u7ebf\u662f\u8bad\u7ec3\u8bef\u5dee\u3002\u6211\u4eec\u6839\u636e \u9884\u6d4b\u9c8d\u9c7c\u5e74\u9f84 \u7684\u5b9e\u9a8c\u77e5\u9053: \u5982\u679c\u964d\u4f4e\u6838\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u8bad\u7ec3\u8bef\u5dee\u5c06\u53d8\u5c0f\u3002\u4ece\u4e0b\u56fe\u5f00\u770b\uff0c\u4ece\u5de6\u5230\u53f3\u5c31\u8868\u793a\u4e86\u6838\u9010\u6e10\u51cf\u5c0f\u7684\u8fc7\u7a0b\u3002 \u4e00\u822c\u8ba4\u4e3a\uff0c\u4e0a\u8ff0\u4e24\u79cd\u8bef\u5dee\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210: \u504f\u5dee\u3001\u6d4b\u91cf\u8bef\u5dee\u548c\u968f\u673a\u566a\u58f0\u3002\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u548c \u9884\u6d4b\u9c8d\u9c7c\u5e74\u9f84 \u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5f15\u5165\u4e86\u4e09\u4e2a\u8d8a\u6765\u8d8a\u5c0f\u7684\u6838\u6765\u4e0d\u65ad\u589e\u5927\u6a21\u578b\u7684\u65b9\u5dee\u3002 \u5728\u7f29\u51cf\u7cfb\u6570\u6765\u201c\u7406\u89e3\u201d\u6570\u636e\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u7f29\u51cf\u6cd5\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e9b\u7cfb\u6570\u7f29\u51cf\u6210\u5f88\u5c0f\u7684\u503c\u6216\u76f4\u63a5\u7f29\u51cf\u4e3a 0 \uff0c\u8fd9\u662f\u4e00\u4e2a\u589e\u5927\u6a21\u578b\u504f\u5dee\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u628a\u4e00\u4e9b\u7279\u5f81\u7684\u56de\u5f52\u7cfb\u6570\u7f29\u51cf\u5230 0 \uff0c\u540c\u65f6\u4e5f\u5c31\u51cf\u5c0f\u4e86\u6a21\u578b\u7684\u590d\u6742\u5ea6\u3002\u4f8b\u5b50\u4e2d\u6709 8 \u4e2a\u7279\u5f81\uff0c\u6d88\u9664\u5176\u4e2d\u4e24\u4e2a\u540e\u4e0d\u4ec5\u4f7f\u6a21\u578b\u66f4\u6613\u7406\u89e3\uff0c\u540c\u65f6\u8fd8\u964d\u4f4e\u4e86\u9884\u6d4b\u8bef\u5dee\u3002\u5bf9\u7167\u4e0a\u56fe\uff0c\u5de6\u4fa7\u662f\u53c2\u6570\u7f29\u51cf\u8fc7\u4e8e\u4e25\u5389\u7684\u7ed3\u679c\uff0c\u800c\u53f3\u4fa7\u662f\u65e0\u7f29\u51cf\u7684\u6548\u679c\u3002 \u65b9\u5dee\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5982\u679c\u4ece\u9c8d\u9c7c\u6570\u636e\u4e2d\u53d6\u4e00\u4e2a\u968f\u673a\u6837\u672c\u96c6\uff08\u4f8b\u5982\u53d6\u5176\u4e2d 100 \u4e2a\u6570\u636e\uff09\u5e76\u7528\u7ebf\u6027\u6a21\u578b\u62df\u5408\uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u7ec4\u56de\u5f52\u7cfb\u6570\u3002\u540c\u7406\uff0c\u518d\u53d6\u51fa\u53e6\u4e00\u7ec4\u968f\u673a\u6837\u672c\u96c6\u5e76\u62df\u5408\uff0c\u5c06\u4f1a\u5f97\u5230\u53e6\u4e00\u7ec4\u56de\u5f52\u7cfb\u6570\u3002\u8fd9\u4e9b\u7cfb\u6570\u95f4\u7684\u5dee\u5f02\u5927\u5c0f\u4e5f\u5c31\u662f\u6a21\u578b\u65b9\u5dee\u7684\u53cd\u6620\u3002 6\u3001\u56de\u5f52 \u9879\u76ee\u6848\u4f8b \u9879\u76ee\u6848\u4f8b1: \u9884\u6d4b\u4e50\u9ad8\u73a9\u5177\u5957\u88c5\u7684\u4ef7\u683c \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py \u9879\u76ee\u6982\u8ff0 Dangler \u559c\u6b22\u4e3a\u4e50\u9ad8\u5957\u88c5\u4f30\u4ef7\uff0c\u6211\u4eec\u7528\u56de\u5f52\u6280\u672f\u6765\u5e2e\u52a9\u4ed6\u5efa\u7acb\u4e00\u4e2a\u9884\u6d4b\u6a21\u578b\u3002 \u5f00\u53d1\u6d41\u7a0b (1) \u6536\u96c6\u6570\u636e\uff1a\u7528 Google Shopping \u7684API\u6536\u96c6\u6570\u636e\u3002 (2) \u51c6\u5907\u6570\u636e\uff1a\u4ece\u8fd4\u56de\u7684JSON\u6570\u636e\u4e2d\u62bd\u53d6\u4ef7\u683c\u3002 (3) \u5206\u6790\u6570\u636e\uff1a\u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e\u3002 (4) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u5efa\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u91c7\u7528\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u548c\u76f4\u63a5\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002 (5) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5206\u6790\u54ea\u4e2a\u6548\u679c\u6700\u597d\u3002 (6) \u4f7f\u7528\u7b97\u6cd5\uff1a\u8fd9\u6b21\u7ec3\u4e60\u7684\u76ee\u6807\u5c31\u662f\u751f\u6210\u6570\u636e\u6a21\u578b\u3002 \u6536\u96c6\u6570\u636e: \u4f7f\u7528 Google \u8d2d\u7269\u7684 API \u7531\u4e8e Google \u63d0\u4f9b\u7684 api \u5931\u6548\uff0c\u6211\u4eec\u53ea\u80fd\u81ea\u5df1\u4e0b\u8f7d\u54af\uff0c\u5c06\u6570\u636e\u5b58\u50a8\u5728\u4e86 input \u6587\u4ef6\u5939\u4e0b\u7684 setHtml \u6587\u4ef6\u5939\u4e0b \u51c6\u5907\u6570\u636e: \u4ece\u8fd4\u56de\u7684 JSON \u6570\u636e\u4e2d\u62bd\u53d6\u4ef7\u683c \u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u4e0d\u662f\u5728\u7ebf\u7684\uff0c\u5c31\u4e0d\u518d\u662f JSON \u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u89e3\u6790\u7ebf\u4e0b\u7684\u7f51\u9875\uff0c\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u6570\u636e\u3002 \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u8fd9\u91cc\u6211\u4eec\u5c06\u89e3\u6790\u5f97\u5230\u7684\u6570\u636e\u6253\u5370\u51fa\u6765\uff0c\u7136\u540e\u89c2\u5bdf\u6570\u636e\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u6784\u5efa\u4e0d\u540c\u7684\u6a21\u578b from numpy import * from bs4 import BeautifulSoup # \u4ece\u9875\u9762\u8bfb\u53d6\u6570\u636e\uff0c\u751f\u6210retX\u548cretY\u5217\u8868 def scrapePage(retX, retY, inFile, yr, numPce, origPrc): # \u6253\u5f00\u5e76\u8bfb\u53d6HTML\u6587\u4ef6 fr = open(inFile) soup = BeautifulSoup(fr.read()) i=1 # \u6839\u636eHTML\u9875\u9762\u7ed3\u6784\u8fdb\u884c\u89e3\u6790 currentRow = soup.findAll('table', r=\"%d\" % i) while(len(currentRow)!=0): currentRow = soup.findAll('table', r=\"%d\" % i) title = currentRow[0].findAll('a')[1].text lwrTitle = title.lower() # \u67e5\u627e\u662f\u5426\u6709\u5168\u65b0\u6807\u7b7e if (lwrTitle.find('new') > -1) or (lwrTitle.find('nisb') > -1): newFlag = 1.0 else: newFlag = 0.0 # \u67e5\u627e\u662f\u5426\u5df2\u7ecf\u6807\u5fd7\u51fa\u552e\uff0c\u6211\u4eec\u53ea\u6536\u96c6\u5df2\u51fa\u552e\u7684\u6570\u636e soldUnicde = currentRow[0].findAll('td')[3].findAll('span') if len(soldUnicde)==0: print \"item #%d did not sell\" % i else: # \u89e3\u6790\u9875\u9762\u83b7\u53d6\u5f53\u524d\u4ef7\u683c soldPrice = currentRow[0].findAll('td')[4] priceStr = soldPrice.text priceStr = priceStr.replace('$','') #strips out $ priceStr = priceStr.replace(',','') #strips out , if len(soldPrice)>1: priceStr = priceStr.replace('Free shipping', '') sellingPrice = float(priceStr) # \u53bb\u6389\u4e0d\u5b8c\u6574\u7684\u5957\u88c5\u4ef7\u683c if sellingPrice > origPrc * 0.5: print \"%d\\t%d\\t%d\\t%f\\t%f\" % (yr,numPce,newFlag,origPrc, sellingPrice) retX.append([yr, numPce, newFlag, origPrc]) retY.append(sellingPrice) i += 1 currentRow = soup.findAll('table', r=\"%d\" % i) # \u4f9d\u6b21\u8bfb\u53d6\u516d\u79cd\u4e50\u9ad8\u5957\u88c5\u7684\u6570\u636e\uff0c\u5e76\u751f\u6210\u6570\u636e\u77e9\u9635 def setDataCollect(retX, retY): scrapePage(retX, retY, 'db/8.Regression/setHtml/lego8288.html', 2006, 800, 49.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10030.html', 2002, 3096, 269.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10179.html', 2007, 5195, 499.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10181.html', 2007, 3428, 199.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10189.html', 2008, 5922, 299.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10196.html', 2009, 3263, 249.99) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5206\u6790\u54ea\u4e2a\u6548\u679c\u6700\u597d # \u4ea4\u53c9\u9a8c\u8bc1\u6d4b\u8bd5\u5cad\u56de\u5f52 def crossValidation(xArr,yArr,numVal=10): # \u83b7\u5f97\u6570\u636e\u70b9\u4e2a\u6570\uff0cxArr\u548cyArr\u5177\u6709\u76f8\u540c\u957f\u5ea6 m = len(yArr) indexList = range(m) errorMat = zeros((numVal,30)) # \u4e3b\u5faa\u73af \u4ea4\u53c9\u9a8c\u8bc1\u5faa\u73af for i in range(numVal): # \u968f\u673a\u62c6\u5206\u6570\u636e\uff0c\u5c06\u6570\u636e\u5206\u4e3a\u8bad\u7ec3\u96c6\uff0890%\uff09\u548c\u6d4b\u8bd5\u96c6\uff0810%\uff09 trainX=[]; trainY=[] testX = []; testY = [] # \u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u64cd\u4f5c random.shuffle(indexList) # \u5207\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 for j in range(m): if j < m*0.9: trainX.append(xArr[indexList[j]]) trainY.append(yArr[indexList[j]]) else: testX.append(xArr[indexList[j]]) testY.append(yArr[indexList[j]]) # \u83b7\u5f97\u56de\u5f52\u7cfb\u6570\u77e9\u9635 wMat = ridgeTest(trainX,trainY) # \u5faa\u73af\u904d\u5386\u77e9\u9635\u4e2d\u768430\u7ec4\u56de\u5f52\u7cfb\u6570 for k in range(30): # \u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6570\u636e\u96c6 matTestX = mat(testX); matTrainX=mat(trainX) # \u5bf9\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316 meanTrain = mean(matTrainX,0) varTrain = var(matTrainX,0) matTestX = (matTestX-meanTrain)/varTrain # \u6d4b\u8bd5\u56de\u5f52\u6548\u679c\u5e76\u5b58\u50a8 yEst = matTestX * mat(wMat[k,:]).T + mean(trainY) # \u8ba1\u7b97\u8bef\u5dee errorMat[i,k] = ((yEst.T.A-array(testY))**2).sum() # \u8ba1\u7b97\u8bef\u5dee\u4f30\u8ba1\u503c\u7684\u5747\u503c meanErrors = mean(errorMat,0) minMean = float(min(meanErrors)) bestWeights = wMat[nonzero(meanErrors==minMean)] # \u4e0d\u8981\u4f7f\u7528\u6807\u51c6\u5316\u7684\u6570\u636e\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8fd8\u539f\u6765\u5f97\u5230\u8f93\u51fa\u7ed3\u679c xMat = mat(xArr); yMat=mat(yArr).T meanX = mean(xMat,0); varX = var(xMat,0) unReg = bestWeights/varX # \u8f93\u51fa\u6784\u5efa\u7684\u6a21\u578b print \"the best model from Ridge Regression is:\\n\",unReg print \"with constant term: \",-1*sum(multiply(meanX,unReg)) + mean(yMat) # predict for lego's price def regression5(): lgX = [] lgY = [] setDataCollect(lgX, lgY) crossValidation(lgX, lgY, 10) \u4f7f\u7528\u7b97\u6cd5\uff1a\u8fd9\u6b21\u7ec3\u4e60\u7684\u76ee\u6807\u5c31\u662f\u751f\u6210\u6570\u636e\u6a21\u578b 7\u3001\u9009\u8bfb\u5185\u5bb9 \u6c42\u89e3\u7ebf\u6027\u56de\u5f52\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff08\u6b63\u89c4\u65b9\u7a0b normal equation\uff09\u89e3\u51b3\u4e4b\u5916\uff0c\u8fd8\u6709\u53ef\u4ee5\u5bf9Cost function \u6c42\u5bfc\uff0c\u5176\u4e2d\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002 \u90a3\u4e48\u6b63\u89c4\u65b9\u7a0b\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u51fa\u771f\u5b9e\u503c\u3002\u800c\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ea\u80fd\u7ed9\u51fa\u8fd1\u4f3c\u503c\u3002 \u4ee5\u4e0b\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u548c\u6b63\u89c4\u65b9\u7a0b\u7684\u6bd4\u8f83: \u68af\u5ea6\u4e0b\u964d\u6cd5 \u6b63\u89c4\u65b9\u7a0b \u7ed3\u679c\u4e3a\u771f\u5b9e\u503c\u7684\u8fd1\u4f3c\u503c \u7ed3\u679c\u4e3a\u771f\u5b9e\u503c \u9700\u8981\u5faa\u73af\u591a\u6b21 \u65e0\u9700\u5faa\u73af \u6837\u672c\u6570\u91cf\u5927\u7684\u65f6\u5019\u4e5fok \u6837\u672c\u6570\u91cf\u7279\u522b\u5927\u7684\u65f6\u5019\u4f1a\u5f88\u6162\uff08n>10000\uff09 \u4f5c\u8005\uff1a \u5c0f\u7476 \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c8\u7ae0_\u56de\u5f52"},{"location":"ml/8.Regression/#8","text":"","title":"\u7b2c8\u7ae0 \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52"},{"location":"ml/8.Regression/#regression","text":"\u6211\u4eec\u524d\u8fb9\u63d0\u5230\u7684\u5206\u7c7b\u7684\u76ee\u6807\u53d8\u91cf\u662f\u6807\u79f0\u578b\u6570\u636e\uff0c\u800c\u56de\u5f52\u5219\u662f\u5bf9\u8fde\u7eed\u578b\u7684\u6570\u636e\u505a\u51fa\u5904\u7406\uff0c\u56de\u5f52\u7684\u76ee\u7684\u662f\u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\u7684\u76ee\u6807\u503c\u3002","title":"\u56de\u5f52\uff08Regression\uff09 \u6982\u8ff0"},{"location":"ml/8.Regression/#_1","text":"\u56de\u5f52\u7684\u76ee\u7684\u662f\u9884\u6d4b\u6570\u503c\u578b\u7684\u76ee\u6807\u503c\u3002\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u662f\u4f9d\u636e\u8f93\u5165\u5199\u51fa\u4e00\u4e2a\u76ee\u6807\u503c\u7684\u8ba1\u7b97\u516c\u5f0f\u3002 \u5047\u5982\u4f60\u60f3\u8981\u9884\u6d4b\u5170\u535a\u57fa\u5c3c\u8dd1\u8f66\u7684\u529f\u7387\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u8fd9\u6837\u8ba1\u7b97: HorsePower = 0.0015 * annualSalary - 0.99 * hoursListeningToPublicRadio \u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u56de\u5f52\u65b9\u7a0b(regression equation) \uff0c\u5176\u4e2d\u7684 0.0015 \u548c -0.99 \u79f0\u4f5c \u56de\u5f52\u7cfb\u6570\uff08regression weights\uff09 \uff0c\u6c42\u8fd9\u4e9b\u56de\u5f52\u7cfb\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u56de\u5f52\u3002\u4e00\u65e6\u6709\u4e86\u8fd9\u4e9b\u56de\u5f52\u7cfb\u6570\uff0c\u518d\u7ed9\u5b9a\u8f93\u5165\uff0c\u505a\u9884\u6d4b\u5c31\u975e\u5e38\u5bb9\u6613\u4e86\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\u7528\u56de\u5f52\u7cfb\u6570\u4e58\u4ee5\u8f93\u5165\u503c\uff0c\u518d\u5c06\u7ed3\u679c\u5168\u90e8\u52a0\u5728\u4e00\u8d77\uff0c\u5c31\u5f97\u5230\u4e86\u9884\u6d4b\u503c\u3002\u6211\u4eec\u8fd9\u91cc\u6240\u8bf4\u7684\uff0c\u56de\u5f52\u7cfb\u6570\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u8f93\u5165\u4e5f\u662f\u5411\u91cf\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u4e5f\u5c31\u662f\u6c42\u51fa\u4e8c\u8005\u7684\u5185\u79ef\u3002 \u8bf4\u5230\u56de\u5f52\uff0c\u4e00\u822c\u90fd\u662f\u6307 \u7ebf\u6027\u56de\u5f52(linear regression) \u3002\u7ebf\u6027\u56de\u5f52\u610f\u5473\u7740\u53ef\u4ee5\u5c06\u8f93\u5165\u9879\u5206\u522b\u4e58\u4ee5\u4e00\u4e9b\u5e38\u91cf\uff0c\u518d\u5c06\u7ed3\u679c\u52a0\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u3002 \u8865\u5145\uff1a \u7ebf\u6027\u56de\u5f52\u5047\u8bbe\u7279\u5f81\u548c\u7ed3\u679c\u6ee1\u8db3\u7ebf\u6027\u5173\u7cfb\u3002\u5176\u5b9e\u7ebf\u6027\u5173\u7cfb\u7684\u8868\u8fbe\u80fd\u529b\u975e\u5e38\u5f3a\u5927\uff0c\u6bcf\u4e2a\u7279\u5f81\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u5f3a\u5f31\u53ef\u4ee5\u7531\u524d\u9762\u7684\u53c2\u6570\u4f53\u73b0\uff0c\u800c\u4e14\u6bcf\u4e2a\u7279\u5f81\u53d8\u91cf\u53ef\u4ee5\u9996\u5148\u6620\u5c04\u5230\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u518d\u53c2\u4e0e\u7ebf\u6027\u8ba1\u7b97\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8868\u8fbe\u7279\u5f81\u4e0e\u7ed3\u679c\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u5173\u7cfb\u3002","title":"\u56de\u5f52 \u573a\u666f"},{"location":"ml/8.Regression/#_2","text":"","title":"\u56de\u5f52 \u539f\u7406"},{"location":"ml/8.Regression/#1","text":"\u6211\u4eec\u5e94\u8be5\u600e\u6837\u4ece\u4e00\u5927\u5806\u6570\u636e\u91cc\u6c42\u51fa\u56de\u5f52\u65b9\u7a0b\u5462\uff1f \u5047\u5b9a\u8f93\u5165\u6570\u636e\u5b58\u653e\u5728\u77e9\u9635 x \u4e2d\uff0c\u800c\u56de\u5f52\u7cfb\u6570\u5b58\u653e\u5728\u5411\u91cf w \u4e2d\u3002\u90a3\u4e48\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e X1\uff0c\u9884\u6d4b\u7ed3\u679c\u5c06\u4f1a\u901a\u8fc7 Y = X1^T w \u7ed9\u51fa\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u624b\u91cc\u6709\u4e00\u4e9b X \u548c\u5bf9\u5e94\u7684 y\uff0c\u600e\u6837\u624d\u80fd\u627e\u5230 w \u5462\uff1f\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u627e\u51fa\u4f7f\u8bef\u5dee\u6700\u5c0f\u7684 w \u3002\u8fd9\u91cc\u7684\u8bef\u5dee\u662f\u6307\u9884\u6d4b y \u503c\u548c\u771f\u5b9e y \u503c\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f7f\u7528\u8be5\u8bef\u5dee\u7684\u7b80\u5355\u7d2f\u52a0\u5c06\u4f7f\u5f97\u6b63\u5dee\u503c\u548c\u8d1f\u5dee\u503c\u76f8\u4e92\u62b5\u6d88\uff0c\u6240\u4ee5\u6211\u4eec\u91c7\u7528\u5e73\u65b9\u8bef\u5dee\uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\uff09\u3002 \u5e73\u65b9\u8bef\u5dee\u53ef\u4ee5\u5199\u505a\uff08\u5176\u5b9e\u6211\u4eec\u662f\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u4f5c\u4e3a loss function\uff09: \u7528\u77e9\u9635\u8868\u793a\u8fd8\u53ef\u4ee5\u5199\u505a \u3002\u5982\u679c\u5bf9 w \u6c42\u5bfc\uff0c\u5f97\u5230 \uff0c\u4ee4\u5176\u7b49\u4e8e\u96f6\uff0c\u89e3\u51fa w \u5982\u4e0b\uff08\u5177\u4f53\u6c42\u5bfc\u8fc7\u7a0b\u4e3a: http://blog.csdn.net/nomadlx53/article/details/50849941 \uff09:","title":"1\u3001\u7ebf\u6027\u56de\u5f52"},{"location":"ml/8.Regression/#11","text":"","title":"1.1\u3001\u7ebf\u6027\u56de\u5f52 \u987b\u77e5\u6982\u5ff5"},{"location":"ml/8.Regression/#111","text":"\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u56de\u5f52\u65b9\u7a0b\u7684\u56de\u5f52\u7cfb\u6570\u65f6\uff0c\u7528\u5230\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b: \u9700\u8981\u5bf9\u77e9\u9635\u6c42\u9006\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65b9\u7a0b\u53ea\u5728\u9006\u77e9\u9635\u5b58\u5728\u7684\u65f6\u5019\u9002\u7528\uff0c\u6211\u4eec\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u5bf9\u6b64\u4f5c\u51fa\u5224\u65ad\u3002 \u5224\u65ad\u77e9\u9635\u662f\u5426\u53ef\u9006\u7684\u4e00\u4e2a\u53ef\u9009\u65b9\u6848\u662f: \u5224\u65ad\u77e9\u9635\u7684\u884c\u5217\u5f0f\u662f\u5426\u4e3a 0\uff0c\u82e5\u4e3a 0 \uff0c\u77e9\u9635\u5c31\u4e0d\u5b58\u5728\u9006\u77e9\u9635\uff0c\u4e0d\u4e3a 0 \u7684\u8bdd\uff0c\u77e9\u9635\u624d\u5b58\u5728\u9006\u77e9\u9635\u3002","title":"1.1.1\u3001\u77e9\u9635\u6c42\u9006"},{"location":"ml/8.Regression/#112","text":"\u6700\u5c0f\u4e8c\u4e58\u6cd5\uff08\u53c8\u79f0\u6700\u5c0f\u5e73\u65b9\u6cd5\uff09\u662f\u4e00\u79cd\u6570\u5b66\u4f18\u5316\u6280\u672f\u3002\u5b83\u901a\u8fc7\u6700\u5c0f\u5316\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u5bfb\u627e\u6570\u636e\u7684\u6700\u4f73\u51fd\u6570\u5339\u914d\u3002","title":"1.1.2\u3001\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"ml/8.Regression/#12","text":"\u8bfb\u5165\u6570\u636e\uff0c\u5c06\u6570\u636e\u7279\u5f81x\u3001\u7279\u5f81\u6807\u7b7ey\u5b58\u50a8\u5728\u77e9\u9635x\u3001y\u4e2d \u9a8c\u8bc1 x^Tx \u77e9\u9635\u662f\u5426\u53ef\u9006 \u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u5f97 \u56de\u5f52\u7cfb\u6570 w \u7684\u6700\u4f73\u4f30\u8ba1","title":"1.2\u3001\u7ebf\u6027\u56de\u5f52 \u5de5\u4f5c\u539f\u7406"},{"location":"ml/8.Regression/#13","text":"\u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 R^2 \u6216\u8005\u9884\u6d4b\u503c\u548c\u6570\u636e\u7684\u62df\u5408\u5ea6\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e","title":"1.3\u3001\u7ebf\u6027\u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/8.Regression/#14","text":"\u4f18\u70b9\uff1a\u7ed3\u679c\u6613\u4e8e\u7406\u89e3\uff0c\u8ba1\u7b97\u4e0a\u4e0d\u590d\u6742\u3002 \u7f3a\u70b9\uff1a\u5bf9\u975e\u7ebf\u6027\u7684\u6570\u636e\u62df\u5408\u4e0d\u597d\u3002 \u9002\u7528\u4e8e\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"1.4\u3001\u7ebf\u6027\u56de\u5f52 \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/8.Regression/#15","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py","title":"1.5\u3001\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/8.Regression/#151","text":"\u6839\u636e\u4e0b\u56fe\u4e2d\u7684\u70b9\uff0c\u627e\u51fa\u8be5\u6570\u636e\u7684\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u3002 \u6570\u636e\u683c\u5f0f\u4e3a: x0 x1 y 1.000000 0.067732 3.176513 1.000000 0.427810 3.816464 1.000000 0.995731 4.550095 1.000000 0.738336 4.256571","title":"1.5.1\u3001\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6982\u8ff0"},{"location":"ml/8.Regression/#152","text":"def loadDataSet(fileName): \"\"\" \u52a0\u8f7d\u6570\u636e \u89e3\u6790\u4ee5tab\u952e\u5206\u9694\u7684\u6587\u4ef6\u4e2d\u7684\u6d6e\u70b9\u6570 Returns\uff1a dataMat \uff1a feature \u5bf9\u5e94\u7684\u6570\u636e\u96c6 labelMat \uff1a feature \u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\uff0c\u5373\u7c7b\u522b\u6807\u7b7e \"\"\" # \u83b7\u53d6\u6837\u672c\u7279\u5f81\u7684\u603b\u6570\uff0c\u4e0d\u7b97\u6700\u540e\u7684\u76ee\u6807\u53d8\u91cf numFeat = len(open(fileName).readline().split('\\t')) - 1 dataMat = [] labelMat = [] fr = open(fileName) for line in fr.readlines(): # \u8bfb\u53d6\u6bcf\u4e00\u884c lineArr =[] # \u5220\u9664\u4e00\u884c\u4e2d\u4ee5tab\u5206\u9694\u7684\u6570\u636e\u524d\u540e\u7684\u7a7a\u767d\u7b26\u53f7 curLine = line.strip().split('\\t') # i \u4ece0\u52302\uff0c\u4e0d\u5305\u62ec2 for i in range(numFeat): # \u5c06\u6570\u636e\u6dfb\u52a0\u5230lineArr List\u4e2d\uff0c\u6bcf\u4e00\u884c\u6570\u636e\u6d4b\u8bd5\u6570\u636e\u7ec4\u6210\u4e00\u4e2a\u884c\u5411\u91cf lineArr.append(float(curLine[i])) # \u5c06\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u5165\u6570\u636e\u90e8\u5206\u5b58\u50a8\u5230dataMat \u7684List\u4e2d dataMat.append(lineArr) # \u5c06\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\uff0c\u5373\u7c7b\u522b\uff0c\u6216\u8005\u53eb\u76ee\u6807\u53d8\u91cf\u5b58\u50a8\u5230labelMat List\u4e2d labelMat.append(float(curLine[-1])) return dataMat,labelMat def standRegres(xArr,yArr): ''' Description\uff1a \u7ebf\u6027\u56de\u5f52 Args: xArr \uff1a\u8f93\u5165\u7684\u6837\u672c\u6570\u636e\uff0c\u5305\u542b\u6bcf\u4e2a\u6837\u672c\u6570\u636e\u7684 feature yArr \uff1a\u5bf9\u5e94\u4e8e\u8f93\u5165\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u76ee\u6807\u53d8\u91cf Returns: ws\uff1a\u56de\u5f52\u7cfb\u6570 ''' # mat()\u51fd\u6570\u5c06xArr\uff0cyArr\u8f6c\u6362\u4e3a\u77e9\u9635 mat().T \u4ee3\u8868\u7684\u662f\u5bf9\u77e9\u9635\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c xMat = mat(xArr) yMat = mat(yArr).T # \u77e9\u9635\u4e58\u6cd5\u7684\u6761\u4ef6\u662f\u5de6\u77e9\u9635\u7684\u5217\u6570\u7b49\u4e8e\u53f3\u77e9\u9635\u7684\u884c\u6570 xTx = xMat.T*xMat # \u56e0\u4e3a\u8981\u7528\u5230xTx\u7684\u9006\u77e9\u9635\uff0c\u6240\u4ee5\u4e8b\u5148\u9700\u8981\u786e\u5b9a\u8ba1\u7b97\u5f97\u5230\u7684xTx\u662f\u5426\u53ef\u9006\uff0c\u6761\u4ef6\u662f\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e0d\u4e3a0 # linalg.det() \u51fd\u6570\u662f\u7528\u6765\u6c42\u5f97\u77e9\u9635\u7684\u884c\u5217\u5f0f\u7684\uff0c\u5982\u679c\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e3a0\uff0c\u5219\u8fd9\u4e2a\u77e9\u9635\u662f\u4e0d\u53ef\u9006\u7684\uff0c\u5c31\u65e0\u6cd5\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u8fd0\u7b97 if linalg.det(xTx) == 0.0: print \"This matrix is singular, cannot do inverse\" return # \u6700\u5c0f\u4e8c\u4e58\u6cd5 # http://cwiki.apachecn.org/pages/viewpage.action?pageId=5505133 # \u4e66\u4e2d\u7684\u516c\u5f0f\uff0c\u6c42\u5f97w\u7684\u6700\u4f18\u89e3 ws = xTx.I * (xMat.T*yMat) return ws def regression1(): xArr, yArr = loadDataSet(\"db/8.Regression/data.txt\") xMat = mat(xArr) yMat = mat(yArr) ws = standRegres(xArr, yArr) fig = plt.figure() ax = fig.add_subplot(111) #add_subplot(349)\u51fd\u6570\u7684\u53c2\u6570\u7684\u610f\u601d\u662f\uff0c\u5c06\u753b\u5e03\u5206\u62103\u884c4\u5217\u56fe\u50cf\u753b\u5728\u4ece\u5de6\u5230\u53f3\u4ece\u4e0a\u5230\u4e0b\u7b2c9\u5757 ax.scatter(xMat[:, 1].flatten(), yMat.T[:, 0].flatten().A[0]) #scatter \u7684x\u662fxMat\u4e2d\u7684\u7b2c\u4e8c\u5217\uff0cy\u662fyMat\u7684\u7b2c\u4e00\u5217 xCopy = xMat.copy() xCopy.sort(0) yHat = xCopy * ws ax.plot(xCopy[:, 1], yHat) plt.show()","title":"1.5.2\u3001\u7ebf\u6027\u56de\u5f52 \u7f16\u5199\u4ee3\u7801"},{"location":"ml/8.Regression/#153","text":"","title":"1.5.3\u3001\u7ebf\u6027\u56de\u5f52 \u62df\u5408\u6548\u679c"},{"location":"ml/8.Regression/#2","text":"\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u6b20\u62df\u5408\u73b0\u8c61\uff0c\u56e0\u4e3a\u5b83\u6c42\u7684\u662f\u5177\u6709\u6700\u5c0f\u5747\u65b9\u5dee\u7684\u65e0\u504f\u4f30\u8ba1\u3002\u663e\u800c\u6613\u89c1\uff0c\u5982\u679c\u6a21\u578b\u6b20\u62df\u5408\u5c06\u4e0d\u80fd\u53d6\u5f97\u6700\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002\u6240\u4ee5\u6709\u4e9b\u65b9\u6cd5\u5141\u8bb8\u5728\u4f30\u8ba1\u4e2d\u5f15\u5165\u4e00\u4e9b\u504f\u5dee\uff0c\u4ece\u800c\u964d\u4f4e\u9884\u6d4b\u7684\u5747\u65b9\u8bef\u5dee\u3002 \u4e00\u4e2a\u65b9\u6cd5\u662f\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff08Locally Weighted Linear Regression\uff0cLWLR\uff09\u3002\u5728\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u7ed9\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u4e00\u5b9a\u7684\u6743\u91cd\uff0c\u7136\u540e\u4e0e \u7ebf\u6027\u56de\u5f52 \u7c7b\u4f3c\uff0c\u5728\u8fd9\u4e2a\u5b50\u96c6\u4e0a\u57fa\u4e8e\u6700\u5c0f\u5747\u65b9\u8bef\u5dee\u6765\u8fdb\u884c\u666e\u901a\u7684\u56de\u5f52\u3002\u6211\u4eec\u9700\u8981\u6700\u5c0f\u5316\u7684\u76ee\u6807\u51fd\u6570\u5927\u81f4\u4e3a: \u76ee\u6807\u51fd\u6570\u4e2d w \u4e3a\u6743\u91cd\uff0c\u4e0d\u662f\u56de\u5f52\u7cfb\u6570\u3002\u4e0e kNN \u4e00\u6837\uff0c\u8fd9\u79cd\u7b97\u6cd5\u6bcf\u6b21\u9884\u6d4b\u5747\u9700\u8981\u4e8b\u5148\u9009\u53d6\u51fa\u5bf9\u5e94\u7684\u6570\u636e\u5b50\u96c6\u3002\u8be5\u7b97\u6cd5\u89e3\u51fa\u56de\u5f52\u7cfb\u6570 w \u7684\u5f62\u5f0f\u5982\u4e0b: \u5176\u4e2d W \u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u7528\u6765\u7ed9\u6bcf\u4e2a\u6570\u636e\u70b9\u8d4b\u4e88\u6743\u91cd\u3002$\\hat{w}$ \u5219\u4e3a\u56de\u5f52\u7cfb\u6570\u3002 \u8fd9\u4e24\u4e2a\u662f\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u8bf7\u52ff\u6df7\u7528\u3002 LWLR \u4f7f\u7528 \u201c\u6838\u201d\uff08\u4e0e\u652f\u6301\u5411\u91cf\u673a\u4e2d\u7684\u6838\u7c7b\u4f3c\uff09\u6765\u5bf9\u9644\u8fd1\u7684\u70b9\u8d4b\u4e88\u66f4\u9ad8\u7684\u6743\u91cd\u3002\u6838\u7684\u7c7b\u578b\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\uff0c\u6700\u5e38\u7528\u7684\u6838\u5c31\u662f\u9ad8\u65af\u6838\uff0c\u9ad8\u65af\u6838\u5bf9\u5e94\u7684\u6743\u91cd\u5982\u4e0b: \u8fd9\u6837\u5c31\u6784\u5efa\u4e86\u4e00\u4e2a\u53ea\u542b\u5bf9\u89d2\u5143\u7d20\u7684\u6743\u91cd\u77e9\u9635 w \uff0c\u5e76\u4e14\u70b9 x \u4e0e x(i) \u8d8a\u8fd1\uff0cw(i) \u5c06\u4f1a\u8d8a\u5927\u3002\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u5305\u542b\u4e00\u4e2a\u9700\u8981\u7528\u6237\u6307\u5b9a\u7684\u53c2\u6570 k \uff0c\u5b83\u51b3\u5b9a\u4e86\u5bf9\u9644\u8fd1\u7684\u70b9\u8d4b\u4e88\u591a\u5927\u7684\u6743\u91cd\uff0c\u8fd9\u4e5f\u662f\u4f7f\u7528 LWLR \u65f6\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u53c2\u6570\uff0c\u4e0b\u9762\u7684\u56fe\u7ed9\u51fa\u4e86\u53c2\u6570 k \u4e0e\u6743\u91cd\u7684\u5173\u7cfb\u3002 \u4e0a\u9762\u7684\u56fe\u662f \u6bcf\u4e2a\u70b9\u7684\u6743\u91cd\u56fe\uff08\u5047\u5b9a\u6211\u4eec\u6b63\u9884\u6d4b\u7684\u70b9\u662f x = 0.5\uff09\uff0c\u6700\u4e0a\u9762\u7684\u56fe\u662f\u539f\u59cb\u6570\u636e\u96c6\uff0c\u7b2c\u4e8c\u4e2a\u56fe\u663e\u793a\u4e86\u5f53 k = 0.5 \u65f6\uff0c\u5927\u90e8\u5206\u7684\u6570\u636e\u90fd\u7528\u4e8e\u8bad\u7ec3\u56de\u5f52\u6a21\u578b\uff1b\u800c\u6700\u4e0b\u9762\u7684\u56fe\u663e\u793a\u5f53 k=0.01 \u65f6\uff0c\u4ec5\u6709\u5f88\u5c11\u7684\u5c40\u90e8\u70b9\u88ab\u7528\u4e8e\u8bad\u7ec3\u56de\u5f52\u6a21\u578b\u3002","title":"2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52"},{"location":"ml/8.Regression/#21","text":"\u8bfb\u5165\u6570\u636e\uff0c\u5c06\u6570\u636e\u7279\u5f81x\u3001\u7279\u5f81\u6807\u7b7ey\u5b58\u50a8\u5728\u77e9\u9635x\u3001y\u4e2d \u5229\u7528\u9ad8\u65af\u6838\u6784\u9020\u4e00\u4e2a\u6743\u91cd\u77e9\u9635 W\uff0c\u5bf9\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u70b9\u65bd\u52a0\u6743\u91cd \u9a8c\u8bc1 X^TWX \u77e9\u9635\u662f\u5426\u53ef\u9006 \u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u5f97 \u56de\u5f52\u7cfb\u6570 w \u7684\u6700\u4f73\u4f30\u8ba1","title":"2.1\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u5de5\u4f5c\u539f\u7406"},{"location":"ml/8.Regression/#22","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py","title":"2.2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/8.Regression/#221","text":"\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4e0a\u9762 \u7ebf\u6027\u56de\u5f52 \u7684\u6570\u636e\u96c6\uff0c\u5bf9\u8fd9\u4e9b\u70b9\u8fdb\u884c\u4e00\u4e2a \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u7684\u62df\u5408\u3002 \u6570\u636e\u683c\u5f0f\u4e3a: 1.000000 0.067732 3.176513 1.000000 0.427810 3.816464 1.000000 0.995731 4.550095 1.000000 0.738336 4.256571","title":"2.2.1\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6982\u8ff0"},{"location":"ml/8.Regression/#222","text":"# \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 def lwlr(testPoint,xArr,yArr,k=1.0): ''' Description\uff1a \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5728\u5f85\u9884\u6d4b\u70b9\u9644\u8fd1\u7684\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u4e00\u5b9a\u7684\u6743\u91cd\uff0c\u5728\u5b50\u96c6\u4e0a\u57fa\u4e8e\u6700\u5c0f\u5747\u65b9\u5dee\u6765\u8fdb\u884c\u666e\u901a\u7684\u56de\u5f52\u3002 Args\uff1a testPoint\uff1a\u6837\u672c\u70b9 xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf k:\u5173\u4e8e\u8d4b\u4e88\u6743\u91cd\u77e9\u9635\u7684\u6838\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u4e0e\u6743\u91cd\u7684\u8870\u51cf\u901f\u7387\u6709\u5173 Returns: testPoint * ws\uff1a\u6570\u636e\u70b9\u4e0e\u5177\u6709\u6743\u91cd\u7684\u7cfb\u6570\u76f8\u4e58\u5f97\u5230\u7684\u9884\u6d4b\u70b9 Notes: \u8fd9\u5176\u4e2d\u4f1a\u7528\u5230\u8ba1\u7b97\u6743\u91cd\u7684\u516c\u5f0f\uff0cw = e^((x^((i))-x) / -2k^2) \u7406\u89e3\uff1ax\u4e3a\u67d0\u4e2a\u9884\u6d4b\u70b9\uff0cx^((i))\u4e3a\u6837\u672c\u70b9\uff0c\u6837\u672c\u70b9\u8ddd\u79bb\u9884\u6d4b\u70b9\u8d8a\u8fd1\uff0c\u8d21\u732e\u7684\u8bef\u5dee\u8d8a\u5927\uff08\u6743\u503c\u8d8a\u5927\uff09\uff0c\u8d8a\u8fdc\u5219\u8d21\u732e\u7684\u8bef\u5dee\u8d8a\u5c0f\uff08\u6743\u503c\u8d8a\u5c0f\uff09\u3002 \u5173\u4e8e\u9884\u6d4b\u70b9\u7684\u9009\u53d6\uff0c\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u53d6\u7684\u662f\u6837\u672c\u70b9\u3002\u5176\u4e2dk\u662f\u5e26\u5bbd\u53c2\u6570\uff0c\u63a7\u5236w\uff08\u949f\u5f62\u51fd\u6570\uff09\u7684\u5bbd\u7a84\u7a0b\u5ea6\uff0c\u7c7b\u4f3c\u4e8e\u9ad8\u65af\u51fd\u6570\u7684\u6807\u51c6\u5dee\u3002 \u7b97\u6cd5\u601d\u8def\uff1a\u5047\u8bbe\u9884\u6d4b\u70b9\u53d6\u6837\u672c\u70b9\u4e2d\u7684\u7b2ci\u4e2a\u6837\u672c\u70b9\uff08\u5171m\u4e2a\u6837\u672c\u70b9\uff09\uff0c\u904d\u53861\u5230m\u4e2a\u6837\u672c\u70b9\uff08\u542b\u7b2ci\u4e2a\uff09\uff0c\u7b97\u51fa\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u4e0e\u9884\u6d4b\u70b9\u7684\u8ddd\u79bb\uff0c \u4e5f\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u6837\u672c\u8d21\u732e\u8bef\u5dee\u7684\u6743\u503c\uff0c\u53ef\u4ee5\u770b\u51faw\u662f\u4e00\u4e2a\u6709m\u4e2a\u5143\u7d20\u7684\u5411\u91cf\uff08\u5199\u6210\u5bf9\u89d2\u9635\u5f62\u5f0f\uff09\u3002 ''' # mat() \u51fd\u6570\u662f\u5c06array\u8f6c\u6362\u4e3a\u77e9\u9635\u7684\u51fd\u6570\uff0c mat().T \u662f\u8f6c\u6362\u4e3a\u77e9\u9635\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c xMat = mat(xArr) yMat = mat(yArr).T # \u83b7\u5f97xMat\u77e9\u9635\u7684\u884c\u6570 m = shape(xMat)[0] # eye()\u8fd4\u56de\u4e00\u4e2a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4ed6\u5143\u7d20\u4e3a0\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u521b\u5efa\u6743\u91cd\u77e9\u9635weights\uff0c\u8be5\u77e9\u9635\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u6743\u91cd weights = mat(eye((m))) for j in range(m): # testPoint \u7684\u5f62\u5f0f\u662f \u4e00\u4e2a\u884c\u5411\u91cf\u7684\u5f62\u5f0f # \u8ba1\u7b97 testPoint \u4e0e\u8f93\u5165\u6837\u672c\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u4e0b\u9762\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u6837\u672c\u8d21\u732e\u8bef\u5dee\u7684\u6743\u503c diffMat = testPoint - xMat[j,:] # k\u63a7\u5236\u8870\u51cf\u7684\u901f\u5ea6 weights[j,j] = exp(diffMat*diffMat.T/(-2.0*k**2)) # \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97 xTx \uff0c\u5176\u4e2d\u7684 weights \u77e9\u9635\u662f\u6837\u672c\u70b9\u5bf9\u5e94\u7684\u6743\u91cd\u77e9\u9635 xTx = xMat.T * (weights * xMat) if linalg.det(xTx) == 0.0: print (\"This matrix is singular, cannot do inverse\") return # \u8ba1\u7b97\u51fa\u56de\u5f52\u7cfb\u6570\u7684\u4e00\u4e2a\u4f30\u8ba1 ws = xTx.I * (xMat.T * (weights * yMat)) return testPoint * ws def lwlrTest(testArr,xArr,yArr,k=1.0): ''' Description\uff1a \u6d4b\u8bd5\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5bf9\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a\u70b9\u8c03\u7528 lwlr() \u51fd\u6570 Args\uff1a testArr\uff1a\u6d4b\u8bd5\u6240\u7528\u7684\u6240\u6709\u6837\u672c\u70b9 xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf k\uff1a\u63a7\u5236\u6838\u51fd\u6570\u7684\u8870\u51cf\u901f\u7387 Returns\uff1a yHat\uff1a\u9884\u6d4b\u70b9\u7684\u4f30\u8ba1\u503c ''' # \u5f97\u5230\u6837\u672c\u70b9\u7684\u603b\u6570 m = shape(testArr)[0] # \u6784\u5efa\u4e00\u4e2a\u5168\u90e8\u90fd\u662f 0 \u7684 1 * m \u7684\u77e9\u9635 yHat = zeros(m) # \u5faa\u73af\u6240\u6709\u7684\u6570\u636e\u70b9\uff0c\u5e76\u5c06lwlr\u8fd0\u7528\u4e8e\u6240\u6709\u7684\u6570\u636e\u70b9 for i in range(m): yHat[i] = lwlr(testArr[i],xArr,yArr,k) # \u8fd4\u56de\u4f30\u8ba1\u503c return yHat def lwlrTestPlot(xArr,yArr,k=1.0): ''' Description: \u9996\u5148\u5c06 X \u6392\u5e8f\uff0c\u5176\u4f59\u7684\u90fd\u4e0elwlrTest\u76f8\u540c\uff0c\u8fd9\u6837\u66f4\u5bb9\u6613\u7ed8\u56fe Args\uff1a xArr\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yArr\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf\uff0c\u5b9e\u9645\u503c k\uff1a\u63a7\u5236\u6838\u51fd\u6570\u7684\u8870\u51cf\u901f\u7387\u7684\u6709\u5173\u53c2\u6570\uff0c\u8fd9\u91cc\u8bbe\u5b9a\u7684\u662f\u5e38\u91cf\u503c 1 Return\uff1a yHat\uff1a\u6837\u672c\u70b9\u7684\u4f30\u8ba1\u503c xCopy\uff1axArr\u7684\u590d\u5236 ''' # \u751f\u6210\u4e00\u4e2a\u4e0e\u76ee\u6807\u53d8\u91cf\u6570\u76ee\u76f8\u540c\u7684 0 \u5411\u91cf yHat = zeros(shape(yArr)) # \u5c06 xArr \u8f6c\u6362\u4e3a \u77e9\u9635\u5f62\u5f0f xCopy = mat(xArr) # \u6392\u5e8f xCopy.sort(0) # \u5f00\u59cb\u5faa\u73af\uff0c\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u8fdb\u884c\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u76ee\u6807\u53d8\u91cf\u4f30\u8ba1\u503c for i in range(shape(xArr)[0]): yHat[i] = lwlr(xCopy[i],xArr,yArr,k) return yHat,xCopy #test for LWLR def regression2(): xArr, yArr = loadDataSet(\"db/8.Regression/data.txt\") yHat = lwlrTest(xArr, xArr, yArr, 0.003) xMat = mat(xArr) srtInd = xMat[:,1].argsort(0) # argsort()\u51fd\u6570\u662f\u5c06x\u4e2d\u7684\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u63d0\u53d6\u5176\u5bf9\u5e94\u7684index(\u7d22\u5f15)\uff0c\u7136\u540e\u8f93\u51fa xSort=xMat[srtInd][:,0,:] fig = plt.figure() ax = fig.add_subplot(111) ax.plot(xSort[:,1], yHat[srtInd]) ax.scatter(xMat[:,1].flatten().A[0], mat(yArr).T.flatten().A[0] , s=2, c='red') plt.show()","title":"2.2.2\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u7f16\u5199\u4ee3\u7801"},{"location":"ml/8.Regression/#223","text":"\u4e0a\u56fe\u4f7f\u7528\u4e86 3 \u79cd\u4e0d\u540c\u5e73\u6ed1\u503c\u7ed8\u51fa\u7684\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u7684\u7ed3\u679c\u3002\u4e0a\u56fe\u4e2d\u7684\u5e73\u6ed1\u7cfb\u6570 k =1.0\uff0c\u4e2d\u56fe k = 0.01\uff0c\u4e0b\u56fe k = 0.003 \u3002\u53ef\u4ee5\u770b\u5230\uff0ck = 1.0 \u65f6\u7684\u4f7f\u6240\u6709\u6570\u636e\u7b49\u6bd4\u91cd\uff0c\u5176\u6a21\u578b\u6548\u679c\u4e0e\u57fa\u672c\u7684\u7ebf\u6027\u56de\u5f52\u76f8\u540c\uff0ck=0.01\u65f6\u8be5\u6a21\u578b\u53ef\u4ee5\u6316\u51fa\u6570\u636e\u7684\u6f5c\u5728\u89c4\u5f8b\uff0c\u800c k=0.003\u65f6\u5219\u8003\u8651\u4e86\u592a\u591a\u7684\u566a\u58f0\uff0c\u8fdb\u800c\u5bfc\u81f4\u4e86\u8fc7\u62df\u5408\u73b0\u8c61\u3002","title":"2.2.3\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u62df\u5408\u6548\u679c"},{"location":"ml/8.Regression/#23","text":"\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u4e5f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u589e\u52a0\u4e86\u8ba1\u7b97\u91cf\uff0c\u56e0\u4e3a\u5b83\u5bf9\u6bcf\u4e2a\u70b9\u505a\u9884\u6d4b\u65f6\u90fd\u5fc5\u987b\u4f7f\u7528\u6574\u4e2a\u6570\u636e\u96c6\u3002","title":"2.3\u3001\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u6ce8\u610f\u4e8b\u9879"},{"location":"ml/8.Regression/#3","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u627e\u51fa\u6700\u4f73\u62df\u5408\u76f4\u7ebf\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u8fd9\u4e9b\u6280\u672f\u6765\u9884\u6d4b\u9c8d\u9c7c\u7684\u5e74\u9f84\u3002","title":"3\u3001\u7ebf\u6027\u56de\u5f52 &amp; \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/8.Regression/#31","text":"\u6211\u4eec\u6709\u4e00\u4efd\u6765\u81ea UCI \u7684\u6570\u636e\u96c6\u5408\u7684\u6570\u636e\uff0c\u8bb0\u5f55\u4e86\u9c8d\u9c7c\uff08\u4e00\u79cd\u4ecb\u58f3\u7c7b\u6c34\u751f\u52a8\u7269\uff09\u7684\u5e74\u9f84\u3002\u9c8d\u9c7c\u5e74\u9f84\u53ef\u4ee5\u4ece\u9c8d\u9c7c\u58f3\u7684\u5c42\u6570\u63a8\u7b97\u5f97\u5230\u3002","title":"3.1\u3001\u9879\u76ee\u6982\u8ff0"},{"location":"ml/8.Regression/#32","text":"\u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 rssError()\u51fd\u6570 \u8ba1\u7b97\u9884\u6d4b\u8bef\u5dee\u7684\u5927\u5c0f\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e: \u56de\u5f52\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5c06\u88ab\u8f6c\u6362\u6210\u4e8c\u503c\u578b\u6570\u636e \u6570\u636e\u5b58\u50a8\u683c\u5f0f: 1 0.455 0.365 0.095 0.514 0.2245 0.101 0.15 15 1 0.35 0.265 0.09 0.2255 0.0995 0.0485 0.07 7 -1 0.53 0.42 0.135 0.677 0.2565 0.1415 0.21 9 1 0.44 0.365 0.125 0.516 0.2155 0.114 0.155 10 0 0.33 0.255 0.08 0.205 0.0895 0.0395 0.055 7 \u5206\u6790\u6570\u636e: \u7ed8\u51fa\u6570\u636e\u7684\u53ef\u89c6\u5316\u4e8c\u7ef4\u56fe\u5c06\u6709\u52a9\u4e8e\u5bf9\u6570\u636e\u505a\u51fa\u7406\u89e3\u548c\u5206\u6790\uff0c\u5728\u91c7\u7528\u7f29\u51cf\u6cd5\u6c42\u5f97\u65b0\u56de\u5f52\u7cfb\u6570\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u65b0\u62df\u5408\u7ebf\u7ed8\u5728\u56fe\u4e0a\u4f5c\u4e3a\u5bf9\u6bd4 \u8bad\u7ec3\u7b97\u6cd5: \u627e\u5230\u56de\u5f52\u7cfb\u6570 \u4f7f\u7528\u4e0a\u9762\u6211\u4eec\u8bb2\u5230\u7684 \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u8bad\u7ec3\u7b97\u6cd5\uff0c\u6c42\u51fa\u56de\u5f52\u7cfb\u6570 \u6d4b\u8bd5\u7b97\u6cd5: \u4f7f\u7528 rssError()\u51fd\u6570 \u8ba1\u7b97\u9884\u6d4b\u8bef\u5dee\u7684\u5927\u5c0f\uff0c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c def rssError(yArr,yHatArr): ''' Desc: \u8fd4\u56de\u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u8bef\u5dee\u5927\u5c0f Args\uff1a yArr\uff1a\u6837\u672c\u7684\u771f\u5b9e\u503c yHatArr\uff1a\u6837\u672c\u7684\u9884\u6d4b\u503c Returns: \u4e00\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u8bef\u5dee ''' return ((yArr-yHatArr)**2).sum() # test for abloneDataSet def abaloneTest(): ''' Desc: \u9884\u6d4b\u9c8d\u9c7c\u7684\u5e74\u9f84 Args: None Returns: None ''' # \u52a0\u8f7d\u6570\u636e abX, abY = loadDataSet(\"db/8.Regression/abalone.txt\") # \u4f7f\u7528\u4e0d\u540c\u7684\u6838\u8fdb\u884c\u9884\u6d4b oldyHat01 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 0.1) oldyHat1 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 1) oldyHat10 = lwlrTest(abX[0:99], abX[0:99], abY[0:99], 10) # \u6253\u5370\u51fa\u4e0d\u540c\u7684\u6838\u9884\u6d4b\u503c\u4e0e\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u7684\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u5927\u5c0f print \"old yHat01 error Size is :\" , rssError(abY[0:99], oldyHat01.T) print \"old yHat1 error Size is :\" , rssError(abY[0:99], oldyHat1.T) print \"old yHat10 error Size is :\" , rssError(abY[0:99], oldyHat10.T) # \u6253\u5370\u51fa \u4e0d\u540c\u7684\u6838\u9884\u6d4b\u503c \u4e0e \u65b0\u6570\u636e\u96c6\uff08\u6d4b\u8bd5\u6570\u636e\u96c6\uff09\u4e0a\u7684\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u5927\u5c0f newyHat01 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 0.1) print \"new yHat01 error Size is :\" , rssError(abY[0:99], newyHat01.T) newyHat1 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 1) print \"new yHat1 error Size is :\" , rssError(abY[0:99], newyHat1.T) newyHat10 = lwlrTest(abX[100:199], abX[0:99], abY[0:99], 10) print \"new yHat10 error Size is :\" , rssError(abY[0:99], newyHat10.T) # \u4f7f\u7528\u7b80\u5355\u7684 \u7ebf\u6027\u56de\u5f52 \u8fdb\u884c\u9884\u6d4b\uff0c\u4e0e\u4e0a\u9762\u7684\u8ba1\u7b97\u8fdb\u884c\u6bd4\u8f83 standWs = standRegres(abX[0:99], abY[0:99]) standyHat = mat(abX[100:199]) * standWs print \"standRegress error Size is:\", rssError(abY[100:199], standyHat.T.A) \u6839\u636e\u6211\u4eec\u4e0a\u8fb9\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u770b\u51fa: \u7b80\u5355\u7ebf\u6027\u56de\u5f52\u8fbe\u5230\u4e86\u4e0e\u5c40\u90e8\u52a0\u6743\u73b0\u884c\u56de\u5f52\u7c7b\u4f3c\u7684\u6548\u679c\u3002\u8fd9\u4e5f\u8bf4\u660e\u4e86\u4e00\u70b9\uff0c\u5fc5\u987b\u5728\u672a\u77e5\u6570\u636e\u4e0a\u6bd4\u8f83\u6548\u679c\u624d\u80fd\u9009\u53d6\u5230\u6700\u4f73\u6a21\u578b\u3002\u90a3\u4e48\u6700\u4f73\u7684\u6838\u5927\u5c0f\u662f 10 \u5417\uff1f\u6216\u8bb8\u662f\uff0c\u4f46\u5982\u679c\u60f3\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 10 \u4e2a\u4e0d\u540c\u7684\u6837\u672c\u96c6\u505a 10 \u6b21\u6d4b\u8bd5\u6765\u6bd4\u8f83\u7ed3\u679c\u3002 \u4f7f\u7528\u7b97\u6cd5: \u4f7f\u7528\u56de\u5f52\uff0c\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8f93\u5165\u7684\u65f6\u5019\u9884\u6d4b\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u662f\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u9884\u6d4b\u8fde\u7eed\u578b\u6570\u636e\u800c\u4e0d\u4ec5\u4ec5\u662f\u79bb\u6563\u7684\u7c7b\u522b\u6807\u7b7e","title":"3.2\u3001\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/8.Regression/#4","text":"\u5982\u679c\u6570\u636e\u7684\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\u5e94\u8be5\u600e\u4e48\u529e\uff1f\u662f\u5426\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6027\u56de\u5f52\u548c\u4e4b\u524d\u7684\u65b9\u6cd5\u6765\u505a\u9884\u6d4b\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u5373\u6211\u4eec\u4e0d\u80fd\u518d\u4f7f\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u8ba1\u7b97 \u7684\u65f6\u5019\u4f1a\u51fa\u9519\u3002 \u5982\u679c\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a(n > m)\uff0c\u4e5f\u5c31\u662f\u8bf4\u8f93\u5165\u6570\u636e\u7684\u77e9\u9635 x \u4e0d\u662f\u6ee1\u79e9\u77e9\u9635\u3002\u975e\u6ee1\u79e9\u77e9\u9635\u6c42\u9006\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u4e86 \u5cad\u56de\u5f52\uff08ridge regression\uff09 \u8fd9\u79cd\u7f29\u51cf\u65b9\u6cd5\u3002\u63a5\u7740\u662f lasso\u6cd5 \uff0c\u6700\u540e\u4ecb\u7ecd \u524d\u5411\u9010\u6b65\u56de\u5f52 \u3002","title":"4\u3001\u7f29\u51cf\u7cfb\u6570\u6765 \u201c\u7406\u89e3\u201d \u6570\u636e"},{"location":"ml/8.Regression/#41","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u5cad\u56de\u5f52\u5c31\u662f\u5728\u77e9\u9635 \u4e0a\u52a0\u4e00\u4e2a \u03bbI \u4ece\u800c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02\uff0c\u8fdb\u800c\u80fd\u5bf9 \u6c42\u9006\u3002\u5176\u4e2d\u77e9\u9635I\u662f\u4e00\u4e2a n * n \uff08\u7b49\u4e8e\u5217\u6570\uff09 \u7684\u5355\u4f4d\u77e9\u9635\uff0c \u5bf9\u89d2\u7ebf\u4e0a\u5143\u7d20\u5168\u4e3a1\uff0c\u5176\u4ed6\u5143\u7d20\u5168\u4e3a0\u3002\u800c\u03bb\u662f\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u6570\u503c\uff0c\u540e\u9762\u4f1a\u505a\u4ecb\u7ecd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56de\u5f52\u7cfb\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\u5c06\u53d8\u6210\uff1a \u5cad\u56de\u5f52\u6700\u5148\u7528\u6765\u5904\u7406\u7279\u5f81\u6570\u591a\u4e8e\u6837\u672c\u6570\u7684\u60c5\u51b5\uff0c\u73b0\u5728\u4e5f\u7528\u4e8e\u5728\u4f30\u8ba1\u4e2d\u52a0\u5165\u504f\u5dee\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u4f30\u8ba1\u3002\u8fd9\u91cc\u901a\u8fc7\u5f15\u5165 \u03bb \u6765\u9650\u5236\u4e86\u6240\u6709 w \u4e4b\u548c\uff0c\u901a\u8fc7\u5f15\u5165\u8be5\u60e9\u7f5a\u9879\uff0c\u80fd\u591f\u51cf\u5c11\u4e0d\u91cd\u8981\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u6280\u672f\u5728\u7edf\u8ba1\u5b66\u4e2d\u4e5f\u53eb\u4f5c \u7f29\u51cf(shrinkage) \u3002 \u7f29\u51cf\u65b9\u6cd5\u53ef\u4ee5\u53bb\u6389\u4e0d\u91cd\u8981\u7684\u53c2\u6570\uff0c\u56e0\u6b64\u80fd\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u3002\u6b64\u5916\uff0c\u4e0e\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\u76f8\u6bd4\uff0c\u7f29\u51cf\u6cd5\u80fd\u53d6\u5f97\u66f4\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002 \u8fd9\u91cc\u901a\u8fc7\u9884\u6d4b\u8bef\u5dee\u6700\u5c0f\u5316\u5f97\u5230 \u03bb: \u6570\u636e\u83b7\u53d6\u4e4b\u540e\uff0c\u9996\u5148\u62bd\u4e00\u90e8\u5206\u6570\u636e\u7528\u4e8e\u6d4b\u8bd5\uff0c\u5269\u4f59\u7684\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u7528\u4e8e\u8bad\u7ec3\u53c2\u6570 w\u3002\u8bad\u7ec3\u5b8c\u6bd5\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u6d4b\u8bd5\u9884\u6d4b\u6027\u80fd\u3002\u901a\u8fc7\u9009\u53d6\u4e0d\u540c\u7684 \u03bb \u6765\u91cd\u590d\u4e0a\u8ff0\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u4f7f\u9884\u6d4b\u8bef\u5dee\u6700\u5c0f\u7684 \u03bb \u3002","title":"4.1\u3001\u5cad\u56de\u5f52"},{"location":"ml/8.Regression/#411","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py def ridgeRegres(xMat,yMat,lam=0.2): ''' Desc\uff1a \u8fd9\u4e2a\u51fd\u6570\u5b9e\u73b0\u4e86\u7ed9\u5b9a lambda \u4e0b\u7684\u5cad\u56de\u5f52\u6c42\u89e3\u3002 \u5982\u679c\u6570\u636e\u7684\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\uff0c\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u7684\u7ebf\u6027\u56de\u5f52\u548c\u5c40\u90e8\u7ebf\u6027\u56de\u5f52\u4e86\uff0c\u56e0\u4e3a\u8ba1\u7b97 (xTx)^(-1)\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u5982\u679c\u7279\u5f81\u6bd4\u6837\u672c\u70b9\u8fd8\u591a\uff08n > m\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8f93\u5165\u6570\u636e\u7684\u77e9\u9635x\u4e0d\u662f\u6ee1\u79e9\u77e9\u9635\u3002\u975e\u6ee1\u79e9\u77e9\u9635\u5728\u6c42\u9006\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e0b\u8fb9\u8bb2\u4e00\u4e0b\uff1a\u5cad\u56de\u5f52\uff0c\u8fd9\u662f\u6211\u4eec\u8981\u8bb2\u7684\u7b2c\u4e00\u79cd\u7f29\u51cf\u65b9\u6cd5\u3002 Args\uff1a xMat\uff1a\u6837\u672c\u7684\u7279\u5f81\u6570\u636e\uff0c\u5373 feature yMat\uff1a\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u76ee\u6807\u53d8\u91cf\uff0c\u5b9e\u9645\u503c lam\uff1a\u5f15\u5165\u7684\u4e00\u4e2a\u03bb\u503c\uff0c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02 Returns\uff1a \u7ecf\u8fc7\u5cad\u56de\u5f52\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230\u7684\u56de\u5f52\u7cfb\u6570 ''' xTx = xMat.T*xMat # \u5cad\u56de\u5f52\u5c31\u662f\u5728\u77e9\u9635 xTx \u4e0a\u52a0\u4e00\u4e2a \u03bbI \u4ece\u800c\u4f7f\u5f97\u77e9\u9635\u975e\u5947\u5f02\uff0c\u8fdb\u800c\u80fd\u5bf9 xTx + \u03bbI \u6c42\u9006 denom = xTx + eye(shape(xMat)[1])*lam # \u68c0\u67e5\u884c\u5217\u5f0f\u662f\u5426\u4e3a\u96f6\uff0c\u5373\u77e9\u9635\u662f\u5426\u53ef\u9006\uff0c\u884c\u5217\u5f0f\u4e3a0\u7684\u8bdd\u5c31\u4e0d\u53ef\u9006\uff0c\u4e0d\u4e3a0\u7684\u8bdd\u5c31\u662f\u53ef\u9006\u3002 if linalg.det(denom) == 0.0: print (\"This matrix is singular, cannot do inverse\") return ws = denom.I * (xMat.T*yMat) return ws def ridgeTest(xArr,yArr): ''' Desc\uff1a \u51fd\u6570 ridgeTest() \u7528\u4e8e\u5728\u4e00\u7ec4 \u03bb \u4e0a\u6d4b\u8bd5\u7ed3\u679c Args\uff1a xArr\uff1a\u6837\u672c\u6570\u636e\u7684\u7279\u5f81\uff0c\u5373 feature yArr\uff1a\u6837\u672c\u6570\u636e\u7684\u7c7b\u522b\u6807\u7b7e\uff0c\u5373\u771f\u5b9e\u6570\u636e Returns\uff1a wMat\uff1a\u5c06\u6240\u6709\u7684\u56de\u5f52\u7cfb\u6570\u8f93\u51fa\u5230\u4e00\u4e2a\u77e9\u9635\u5e76\u8fd4\u56de ''' xMat = mat(xArr) yMat=mat(yArr).T # \u8ba1\u7b97Y\u7684\u5747\u503c yMean = mean(yMat,0) # Y\u7684\u6240\u6709\u7684\u7279\u5f81\u51cf\u53bb\u5747\u503c yMat = yMat - yMean # \u6807\u51c6\u5316 x\uff0c\u8ba1\u7b97 xMat \u5e73\u5747\u503c xMeans = mean(xMat,0) # \u7136\u540e\u8ba1\u7b97 X\u7684\u65b9\u5dee xVar = var(xMat,0) # \u6240\u6709\u7279\u5f81\u90fd\u51cf\u53bb\u5404\u81ea\u7684\u5747\u503c\u5e76\u9664\u4ee5\u65b9\u5dee xMat = (xMat - xMeans)/xVar # \u53ef\u4ee5\u5728 30 \u4e2a\u4e0d\u540c\u7684 lambda \u4e0b\u8c03\u7528 ridgeRegres() \u51fd\u6570\u3002 numTestPts = 30 # \u521b\u5efa30 * m \u7684\u5168\u90e8\u6570\u636e\u4e3a0 \u7684\u77e9\u9635 wMat = zeros((numTestPts,shape(xMat)[1])) for i in range(numTestPts): # exp() \u8fd4\u56de e^x ws = ridgeRegres(xMat,yMat,exp(i-10)) wMat[i,:]=ws.T return wMat #test for ridgeRegression def regression3(): abX,abY = loadDataSet(\"db/8.Regression/abalone.txt\") ridgeWeights = ridgeTest(abX, abY) fig = plt.figure() ax = fig.add_subplot(111) ax.plot(ridgeWeights) plt.show()","title":"4.1.1\u3001\u5cad\u56de\u5f52 \u539f\u59cb\u4ee3\u7801"},{"location":"ml/8.Regression/#412","text":"\u4e0a\u56fe\u7ed8\u5236\u51fa\u4e86\u56de\u5f52\u7cfb\u6570\u4e0e log(\u03bb) \u7684\u5173\u7cfb\u3002\u5728\u6700\u5de6\u8fb9\uff0c\u5373 \u03bb \u6700\u5c0f\u65f6\uff0c\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7cfb\u6570\u7684\u539f\u59cb\u503c\uff08\u4e0e\u7ebf\u6027\u56de\u5f52\u4e00\u81f4\uff09\uff1b\u800c\u5728\u53f3\u8fb9\uff0c\u7cfb\u6570\u5168\u90e8\u7f29\u51cf\u4e3a0\uff1b\u5728\u4e2d\u95f4\u90e8\u5206\u7684\u67d0\u503c\u5c06\u53ef\u4ee5\u53d6\u5f97\u6700\u597d\u7684\u9884\u6d4b\u6548\u679c\u3002\u4e3a\u4e86\u5b9a\u91cf\u5730\u627e\u5230\u6700\u4f73\u53c2\u6570\u503c\uff0c\u8fd8\u9700\u8981\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\u3002\u53e6\u5916\uff0c\u8981\u5224\u65ad\u54ea\u4e9b\u53d8\u91cf\u5bf9\u7ed3\u679c\u9884\u6d4b\u6700\u5177\u6709\u5f71\u54cd\u529b\uff0c\u5728\u4e0a\u56fe\u4e2d\u89c2\u5bdf\u5b83\u4eec\u5bf9\u5e94\u7684\u7cfb\u6570\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002","title":"4.1.2\u3001\u5cad\u56de\u5f52\u5728\u9c8d\u9c7c\u6570\u636e\u96c6\u4e0a\u7684\u8fd0\u884c\u6548\u679c"},{"location":"ml/8.Regression/#42lassothe-least-absolute-shrinkage-and-selection-operator","text":"\u5728\u589e\u52a0\u5982\u4e0b\u7ea6\u675f\u65f6\uff0c\u666e\u901a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u56de\u5f52\u4f1a\u5f97\u5230\u4e0e\u5cad\u56de\u5f52\u4e00\u6837\u7684\u516c\u5f0f: \u4e0a\u5f0f\u9650\u5b9a\u4e86\u6240\u6709\u56de\u5f52\u7cfb\u6570\u7684\u5e73\u65b9\u548c\u4e0d\u80fd\u5927\u4e8e \u03bb \u3002\u4f7f\u7528\u666e\u901a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u56de\u5f52\u5728\u5f53\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u7279\u5f81\u76f8\u5173\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f88\u5927\u7684\u6b63\u7cfb\u6570\u548c\u4e00\u4e2a\u5f88\u5927\u7684\u8d1f\u7cfb\u6570\u3002\u6b63\u662f\u56e0\u4e3a\u4e0a\u8ff0\u9650\u5236\u6761\u4ef6\u7684\u5b58\u5728\uff0c\u4f7f\u7528\u5cad\u56de\u5f52\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002 \u4e0e\u5cad\u56de\u5f52\u7c7b\u4f3c\uff0c\u53e6\u4e00\u4e2a\u7f29\u51cf\u65b9\u6cd5lasso\u4e5f\u5bf9\u56de\u5f52\u7cfb\u6570\u505a\u4e86\u9650\u5b9a\uff0c\u5bf9\u5e94\u7684\u7ea6\u675f\u6761\u4ef6\u5982\u4e0b: \u552f\u4e00\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u4f7f\u7528\u7edd\u5bf9\u503c\u53d6\u4ee3\u4e86\u5e73\u65b9\u548c\u3002\u867d\u7136\u7ea6\u675f\u5f62\u5f0f\u53ea\u662f\u7a0d\u4f5c\u53d8\u5316\uff0c\u7ed3\u679c\u5374\u5927\u76f8\u5f84\u5ead: \u5728 \u03bb \u8db3\u591f\u5c0f\u7684\u65f6\u5019\uff0c\u4e00\u4e9b\u7cfb\u6570\u4f1a\u56e0\u6b64\u88ab\u8feb\u7f29\u51cf\u5230 0.\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u6570\u636e\u3002","title":"4.2\u3001\u5957\u7d22\u65b9\u6cd5(Lasso\uff0cThe Least Absolute Shrinkage and Selection Operator)"},{"location":"ml/8.Regression/#43","text":"\u524d\u5411\u9010\u6b65\u56de\u5f52\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u4e0e lasso \u5dee\u4e0d\u591a\u7684\u6548\u679c\uff0c\u4f46\u66f4\u52a0\u7b80\u5355\u3002\u5b83\u5c5e\u4e8e\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5373\u6bcf\u4e00\u6b65\u90fd\u5c3d\u53ef\u80fd\u51cf\u5c11\u8bef\u5dee\u3002\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u6743\u91cd\u90fd\u8bbe\u7f6e\u4e3a 0\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u6240\u505a\u7684\u51b3\u7b56\u662f\u5bf9\u67d0\u4e2a\u6743\u91cd\u589e\u52a0\u6216\u51cf\u5c11\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\u3002 \u4f2a\u4ee3\u7801\u5982\u4e0b: \u6570\u636e\u6807\u51c6\u5316\uff0c\u4f7f\u5176\u5206\u5e03\u6ee1\u8db3 0 \u5747\u503c \u548c\u5355\u4f4d\u65b9\u5dee \u5728\u6bcf\u8f6e\u8fed\u4ee3\u8fc7\u7a0b\u4e2d: \u8bbe\u7f6e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee lowestError \u4e3a\u6b63\u65e0\u7a77 \u5bf9\u6bcf\u4e2a\u7279\u5f81: \u589e\u5927\u6216\u7f29\u5c0f: \u6539\u53d8\u4e00\u4e2a\u7cfb\u6570\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 w \u8ba1\u7b97\u65b0 w \u4e0b\u7684\u8bef\u5dee \u5982\u679c\u8bef\u5dee Error \u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee lowestError: \u8bbe\u7f6e Wbest \u7b49\u4e8e\u5f53\u524d\u7684 W \u5c06 W \u8bbe\u7f6e\u4e3a\u65b0\u7684 Wbest","title":"4.3\u3001\u524d\u5411\u9010\u6b65\u56de\u5f52"},{"location":"ml/8.Regression/#431","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py def stageWise(xArr,yArr,eps=0.01,numIt=100): xMat = mat(xArr); yMat=mat(yArr).T yMean = mean(yMat,0) yMat = yMat - yMean # \u4e5f\u53ef\u4ee5\u89c4\u5219\u5316ys\u4f46\u4f1a\u5f97\u5230\u66f4\u5c0f\u7684coef xMat = regularize(xMat) m,n=shape(xMat) #returnMat = zeros((numIt,n)) # \u6d4b\u8bd5\u4ee3\u7801\u5220\u9664 ws = zeros((n,1)); wsTest = ws.copy(); wsMax = ws.copy() for i in range(numIt): print (ws.T) lowestError = inf; for j in range(n): for sign in [-1,1]: wsTest = ws.copy() wsTest[j] += eps*sign yTest = xMat*wsTest rssE = rssError(yMat.A,yTest.A) if rssE < lowestError: lowestError = rssE wsMax = wsTest ws = wsMax.copy() returnMat[i,:]=ws.T return returnMat #test for stageWise def regression4(): xArr,yArr=loadDataSet(\"db/8.Regression/abalone.txt\") print(stageWise(xArr,yArr,0.01,200)) xMat = mat(xArr) yMat = mat(yArr).T xMat = regularize(xMat) yM = mean(yMat,0) yMat = yMat - yM weights = standRegres(xMat, yMat.T) print (weights.T)","title":"4.3.1\u3001\u524d\u5411\u9010\u6b65\u56de\u5f52 \u539f\u59cb\u4ee3\u7801"},{"location":"ml/8.Regression/#432","text":"\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5\u7684\u4e3b\u8981\u4f18\u70b9\u5728\u4e8e\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4eba\u4eec\u7406\u89e3\u73b0\u6709\u7684\u6a21\u578b\u5e76\u4f5c\u51fa\u6539\u8fdb\u3002\u5f53\u6784\u5efa\u4e86\u4e00\u4e2a\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u8fd0\u884c\u8be5\u7b97\u6cd5\u627e\u51fa\u91cd\u8981\u7684\u7279\u5f81\uff0c\u8fd9\u6837\u5c31\u6709\u53ef\u80fd\u53ca\u65f6\u505c\u6b62\u5bf9\u90a3\u4e9b\u4e0d\u91cd\u8981\u7279\u5f81\u7684\u6536\u96c6\u3002\u6700\u540e\uff0c\u5982\u679c\u7528\u4e8e\u6d4b\u8bd5\uff0c\u8be5\u7b97\u6cd5\u6bcf100\u6b21\u8fed\u4ee3\u540e\u5c31\u53ef\u4ee5\u6784\u5efa\u51fa\u4e00\u4e2a\u6a21\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e10\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\u6bd4\u8f83\u8fd9\u4e9b\u6a21\u578b\uff0c\u6700\u7ec8\u9009\u62e9\u4f7f\u8bef\u5dee\u6700\u5c0f\u7684\u6a21\u578b\u3002","title":"4.3.2\u3001\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u5728\u9c8d\u9c7c\u6570\u636e\u96c6\u4e0a\u7684\u8fd0\u884c\u6548\u679c"},{"location":"ml/8.Regression/#44","text":"\u5f53\u5e94\u7528\u7f29\u51cf\u65b9\u6cd5\uff08\u5982\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u6216\u5cad\u56de\u5f52\uff09\u65f6\uff0c\u6a21\u578b\u4e5f\u5c31\u589e\u52a0\u4e86\u504f\u5dee\uff08bias\uff09\uff0c\u4e0e\u6b64\u540c\u65f6\u5374\u51cf\u5c0f\u4e86\u6a21\u578b\u7684\u65b9\u5dee\u3002","title":"4.4\u3001\u5c0f\u7ed3"},{"location":"ml/8.Regression/#5","text":"\u4efb\u4f55\u65f6\u5019\uff0c\u4e00\u65e6\u53d1\u73b0\u6a21\u578b\u548c\u6d4b\u91cf\u503c\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u5c31\u8bf4\u51fa\u73b0\u4e86\u8bef\u5dee\u3002\u5f53\u8003\u8651\u6a21\u578b\u4e2d\u7684 \u201c\u566a\u58f0\u201d \u6216\u8005\u8bf4\u8bef\u5dee\u65f6\uff0c\u5fc5\u987b\u8003\u8651\u5176\u6765\u6e90\u3002\u4f60\u53ef\u80fd\u4f1a\u5bf9\u590d\u6742\u7684\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5316\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5728\u6a21\u578b\u548c\u6d4b\u91cf\u503c\u4e4b\u95f4\u51fa\u73b0 \u201c\u566a\u58f0\u201d \u6216\u8bef\u5dee\uff0c\u82e5\u65e0\u6cd5\u7406\u89e3\u6570\u636e\u7684\u771f\u5b9e\u751f\u6210\u8fc7\u7a0b\uff0c\u4e5f\u4f1a\u5bfc\u81f4\u5dee\u5f02\u7684\u4ea7\u751f\u3002\u53e6\u5916\uff0c\u6d4b\u91cf\u8fc7\u7a0b\u672c\u8eab\u4e5f\u53ef\u80fd\u4ea7\u751f \u201c\u566a\u58f0\u201d \u6216\u8005\u95ee\u9898\u3002\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528 \u7ebf\u6027\u56de\u5f52 \u548c \u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u5904\u7406\u8fc7\u4e00\u4e2a\u4ece\u6587\u4ef6\u5bfc\u5165\u7684\u4e8c\u7ef4\u6570\u636e\u3002 \u5176\u4e2d\u7684 N(0, 1) \u662f\u4e00\u4e2a\u5747\u503c\u4e3a 0\u3001\u65b9\u5dee\u4e3a 1 \u7684\u6b63\u6001\u5206\u5e03\u3002\u6211\u4eec\u5c1d\u8bd5\u8fc7\u4ec5\u7528\u4e00\u6761\u76f4\u7ebf\u6765\u62df\u5408\u4e0a\u8ff0\u6570\u636e\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u76f4\u7ebf\u6240\u80fd\u5f97\u5230\u7684\u6700\u4f73\u62df\u5408\u5e94\u8be5\u662f 3.0+1.7x \u8fd9\u4e00\u90e8\u5206\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bef\u5dee\u90e8\u5206\u5c31\u662f 0.1sin(30x)+0.06N(0, 1) \u3002\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u6765\u8bd5\u56fe\u6355\u6349\u6570\u636e\u80cc\u540e\u7684\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u62df\u5408\u8d77\u6765\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u56e0\u6b64\u6211\u4eec\u6d4b\u8bd5\u4e86\u591a\u7ec4\u4e0d\u540c\u7684\u5c40\u90e8\u6743\u91cd\u6765\u627e\u5230\u5177\u6709\u6700\u5c0f\u6d4b\u8bd5\u8bef\u5dee\u7684\u89e3\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u7684\u66f2\u7ebf\u56fe\uff0c\u4e0a\u9762\u7684\u66f2\u9762\u5c31\u662f\u6d4b\u8bd5\u8bef\u5dee\uff0c\u4e0b\u9762\u7684\u66f2\u7ebf\u662f\u8bad\u7ec3\u8bef\u5dee\u3002\u6211\u4eec\u6839\u636e \u9884\u6d4b\u9c8d\u9c7c\u5e74\u9f84 \u7684\u5b9e\u9a8c\u77e5\u9053: \u5982\u679c\u964d\u4f4e\u6838\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u8bad\u7ec3\u8bef\u5dee\u5c06\u53d8\u5c0f\u3002\u4ece\u4e0b\u56fe\u5f00\u770b\uff0c\u4ece\u5de6\u5230\u53f3\u5c31\u8868\u793a\u4e86\u6838\u9010\u6e10\u51cf\u5c0f\u7684\u8fc7\u7a0b\u3002 \u4e00\u822c\u8ba4\u4e3a\uff0c\u4e0a\u8ff0\u4e24\u79cd\u8bef\u5dee\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210: \u504f\u5dee\u3001\u6d4b\u91cf\u8bef\u5dee\u548c\u968f\u673a\u566a\u58f0\u3002\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52 \u548c \u9884\u6d4b\u9c8d\u9c7c\u5e74\u9f84 \u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5f15\u5165\u4e86\u4e09\u4e2a\u8d8a\u6765\u8d8a\u5c0f\u7684\u6838\u6765\u4e0d\u65ad\u589e\u5927\u6a21\u578b\u7684\u65b9\u5dee\u3002 \u5728\u7f29\u51cf\u7cfb\u6570\u6765\u201c\u7406\u89e3\u201d\u6570\u636e\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u7f29\u51cf\u6cd5\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e9b\u7cfb\u6570\u7f29\u51cf\u6210\u5f88\u5c0f\u7684\u503c\u6216\u76f4\u63a5\u7f29\u51cf\u4e3a 0 \uff0c\u8fd9\u662f\u4e00\u4e2a\u589e\u5927\u6a21\u578b\u504f\u5dee\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u628a\u4e00\u4e9b\u7279\u5f81\u7684\u56de\u5f52\u7cfb\u6570\u7f29\u51cf\u5230 0 \uff0c\u540c\u65f6\u4e5f\u5c31\u51cf\u5c0f\u4e86\u6a21\u578b\u7684\u590d\u6742\u5ea6\u3002\u4f8b\u5b50\u4e2d\u6709 8 \u4e2a\u7279\u5f81\uff0c\u6d88\u9664\u5176\u4e2d\u4e24\u4e2a\u540e\u4e0d\u4ec5\u4f7f\u6a21\u578b\u66f4\u6613\u7406\u89e3\uff0c\u540c\u65f6\u8fd8\u964d\u4f4e\u4e86\u9884\u6d4b\u8bef\u5dee\u3002\u5bf9\u7167\u4e0a\u56fe\uff0c\u5de6\u4fa7\u662f\u53c2\u6570\u7f29\u51cf\u8fc7\u4e8e\u4e25\u5389\u7684\u7ed3\u679c\uff0c\u800c\u53f3\u4fa7\u662f\u65e0\u7f29\u51cf\u7684\u6548\u679c\u3002 \u65b9\u5dee\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5982\u679c\u4ece\u9c8d\u9c7c\u6570\u636e\u4e2d\u53d6\u4e00\u4e2a\u968f\u673a\u6837\u672c\u96c6\uff08\u4f8b\u5982\u53d6\u5176\u4e2d 100 \u4e2a\u6570\u636e\uff09\u5e76\u7528\u7ebf\u6027\u6a21\u578b\u62df\u5408\uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u7ec4\u56de\u5f52\u7cfb\u6570\u3002\u540c\u7406\uff0c\u518d\u53d6\u51fa\u53e6\u4e00\u7ec4\u968f\u673a\u6837\u672c\u96c6\u5e76\u62df\u5408\uff0c\u5c06\u4f1a\u5f97\u5230\u53e6\u4e00\u7ec4\u56de\u5f52\u7cfb\u6570\u3002\u8fd9\u4e9b\u7cfb\u6570\u95f4\u7684\u5dee\u5f02\u5927\u5c0f\u4e5f\u5c31\u662f\u6a21\u578b\u65b9\u5dee\u7684\u53cd\u6620\u3002","title":"5\u3001\u6743\u8861\u504f\u5dee\u548c\u65b9\u5dee"},{"location":"ml/8.Regression/#6","text":"","title":"6\u3001\u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/8.Regression/#1_1","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/8.Regression/regression.py","title":"\u9879\u76ee\u6848\u4f8b1: \u9884\u6d4b\u4e50\u9ad8\u73a9\u5177\u5957\u88c5\u7684\u4ef7\u683c"},{"location":"ml/8.Regression/#_3","text":"Dangler \u559c\u6b22\u4e3a\u4e50\u9ad8\u5957\u88c5\u4f30\u4ef7\uff0c\u6211\u4eec\u7528\u56de\u5f52\u6280\u672f\u6765\u5e2e\u52a9\u4ed6\u5efa\u7acb\u4e00\u4e2a\u9884\u6d4b\u6a21\u578b\u3002","title":"\u9879\u76ee\u6982\u8ff0"},{"location":"ml/8.Regression/#_4","text":"(1) \u6536\u96c6\u6570\u636e\uff1a\u7528 Google Shopping \u7684API\u6536\u96c6\u6570\u636e\u3002 (2) \u51c6\u5907\u6570\u636e\uff1a\u4ece\u8fd4\u56de\u7684JSON\u6570\u636e\u4e2d\u62bd\u53d6\u4ef7\u683c\u3002 (3) \u5206\u6790\u6570\u636e\uff1a\u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e\u3002 (4) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6784\u5efa\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u91c7\u7528\u9010\u6b65\u7ebf\u6027\u56de\u5f52\u548c\u76f4\u63a5\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002 (5) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5206\u6790\u54ea\u4e2a\u6548\u679c\u6700\u597d\u3002 (6) \u4f7f\u7528\u7b97\u6cd5\uff1a\u8fd9\u6b21\u7ec3\u4e60\u7684\u76ee\u6807\u5c31\u662f\u751f\u6210\u6570\u636e\u6a21\u578b\u3002 \u6536\u96c6\u6570\u636e: \u4f7f\u7528 Google \u8d2d\u7269\u7684 API \u7531\u4e8e Google \u63d0\u4f9b\u7684 api \u5931\u6548\uff0c\u6211\u4eec\u53ea\u80fd\u81ea\u5df1\u4e0b\u8f7d\u54af\uff0c\u5c06\u6570\u636e\u5b58\u50a8\u5728\u4e86 input \u6587\u4ef6\u5939\u4e0b\u7684 setHtml \u6587\u4ef6\u5939\u4e0b \u51c6\u5907\u6570\u636e: \u4ece\u8fd4\u56de\u7684 JSON \u6570\u636e\u4e2d\u62bd\u53d6\u4ef7\u683c \u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u4e0d\u662f\u5728\u7ebf\u7684\uff0c\u5c31\u4e0d\u518d\u662f JSON \u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u89e3\u6790\u7ebf\u4e0b\u7684\u7f51\u9875\uff0c\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u6570\u636e\u3002 \u5206\u6790\u6570\u636e: \u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e \u8fd9\u91cc\u6211\u4eec\u5c06\u89e3\u6790\u5f97\u5230\u7684\u6570\u636e\u6253\u5370\u51fa\u6765\uff0c\u7136\u540e\u89c2\u5bdf\u6570\u636e\u3002 \u8bad\u7ec3\u7b97\u6cd5: \u6784\u5efa\u4e0d\u540c\u7684\u6a21\u578b from numpy import * from bs4 import BeautifulSoup # \u4ece\u9875\u9762\u8bfb\u53d6\u6570\u636e\uff0c\u751f\u6210retX\u548cretY\u5217\u8868 def scrapePage(retX, retY, inFile, yr, numPce, origPrc): # \u6253\u5f00\u5e76\u8bfb\u53d6HTML\u6587\u4ef6 fr = open(inFile) soup = BeautifulSoup(fr.read()) i=1 # \u6839\u636eHTML\u9875\u9762\u7ed3\u6784\u8fdb\u884c\u89e3\u6790 currentRow = soup.findAll('table', r=\"%d\" % i) while(len(currentRow)!=0): currentRow = soup.findAll('table', r=\"%d\" % i) title = currentRow[0].findAll('a')[1].text lwrTitle = title.lower() # \u67e5\u627e\u662f\u5426\u6709\u5168\u65b0\u6807\u7b7e if (lwrTitle.find('new') > -1) or (lwrTitle.find('nisb') > -1): newFlag = 1.0 else: newFlag = 0.0 # \u67e5\u627e\u662f\u5426\u5df2\u7ecf\u6807\u5fd7\u51fa\u552e\uff0c\u6211\u4eec\u53ea\u6536\u96c6\u5df2\u51fa\u552e\u7684\u6570\u636e soldUnicde = currentRow[0].findAll('td')[3].findAll('span') if len(soldUnicde)==0: print \"item #%d did not sell\" % i else: # \u89e3\u6790\u9875\u9762\u83b7\u53d6\u5f53\u524d\u4ef7\u683c soldPrice = currentRow[0].findAll('td')[4] priceStr = soldPrice.text priceStr = priceStr.replace('$','') #strips out $ priceStr = priceStr.replace(',','') #strips out , if len(soldPrice)>1: priceStr = priceStr.replace('Free shipping', '') sellingPrice = float(priceStr) # \u53bb\u6389\u4e0d\u5b8c\u6574\u7684\u5957\u88c5\u4ef7\u683c if sellingPrice > origPrc * 0.5: print \"%d\\t%d\\t%d\\t%f\\t%f\" % (yr,numPce,newFlag,origPrc, sellingPrice) retX.append([yr, numPce, newFlag, origPrc]) retY.append(sellingPrice) i += 1 currentRow = soup.findAll('table', r=\"%d\" % i) # \u4f9d\u6b21\u8bfb\u53d6\u516d\u79cd\u4e50\u9ad8\u5957\u88c5\u7684\u6570\u636e\uff0c\u5e76\u751f\u6210\u6570\u636e\u77e9\u9635 def setDataCollect(retX, retY): scrapePage(retX, retY, 'db/8.Regression/setHtml/lego8288.html', 2006, 800, 49.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10030.html', 2002, 3096, 269.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10179.html', 2007, 5195, 499.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10181.html', 2007, 3428, 199.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10189.html', 2008, 5922, 299.99) scrapePage(retX, retY, 'db/8.Regression/setHtml/lego10196.html', 2009, 3263, 249.99) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u5206\u6790\u54ea\u4e2a\u6548\u679c\u6700\u597d # \u4ea4\u53c9\u9a8c\u8bc1\u6d4b\u8bd5\u5cad\u56de\u5f52 def crossValidation(xArr,yArr,numVal=10): # \u83b7\u5f97\u6570\u636e\u70b9\u4e2a\u6570\uff0cxArr\u548cyArr\u5177\u6709\u76f8\u540c\u957f\u5ea6 m = len(yArr) indexList = range(m) errorMat = zeros((numVal,30)) # \u4e3b\u5faa\u73af \u4ea4\u53c9\u9a8c\u8bc1\u5faa\u73af for i in range(numVal): # \u968f\u673a\u62c6\u5206\u6570\u636e\uff0c\u5c06\u6570\u636e\u5206\u4e3a\u8bad\u7ec3\u96c6\uff0890%\uff09\u548c\u6d4b\u8bd5\u96c6\uff0810%\uff09 trainX=[]; trainY=[] testX = []; testY = [] # \u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u64cd\u4f5c random.shuffle(indexList) # \u5207\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 for j in range(m): if j < m*0.9: trainX.append(xArr[indexList[j]]) trainY.append(yArr[indexList[j]]) else: testX.append(xArr[indexList[j]]) testY.append(yArr[indexList[j]]) # \u83b7\u5f97\u56de\u5f52\u7cfb\u6570\u77e9\u9635 wMat = ridgeTest(trainX,trainY) # \u5faa\u73af\u904d\u5386\u77e9\u9635\u4e2d\u768430\u7ec4\u56de\u5f52\u7cfb\u6570 for k in range(30): # \u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6570\u636e\u96c6 matTestX = mat(testX); matTrainX=mat(trainX) # \u5bf9\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316 meanTrain = mean(matTrainX,0) varTrain = var(matTrainX,0) matTestX = (matTestX-meanTrain)/varTrain # \u6d4b\u8bd5\u56de\u5f52\u6548\u679c\u5e76\u5b58\u50a8 yEst = matTestX * mat(wMat[k,:]).T + mean(trainY) # \u8ba1\u7b97\u8bef\u5dee errorMat[i,k] = ((yEst.T.A-array(testY))**2).sum() # \u8ba1\u7b97\u8bef\u5dee\u4f30\u8ba1\u503c\u7684\u5747\u503c meanErrors = mean(errorMat,0) minMean = float(min(meanErrors)) bestWeights = wMat[nonzero(meanErrors==minMean)] # \u4e0d\u8981\u4f7f\u7528\u6807\u51c6\u5316\u7684\u6570\u636e\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8fd8\u539f\u6765\u5f97\u5230\u8f93\u51fa\u7ed3\u679c xMat = mat(xArr); yMat=mat(yArr).T meanX = mean(xMat,0); varX = var(xMat,0) unReg = bestWeights/varX # \u8f93\u51fa\u6784\u5efa\u7684\u6a21\u578b print \"the best model from Ridge Regression is:\\n\",unReg print \"with constant term: \",-1*sum(multiply(meanX,unReg)) + mean(yMat) # predict for lego's price def regression5(): lgX = [] lgY = [] setDataCollect(lgX, lgY) crossValidation(lgX, lgY, 10) \u4f7f\u7528\u7b97\u6cd5\uff1a\u8fd9\u6b21\u7ec3\u4e60\u7684\u76ee\u6807\u5c31\u662f\u751f\u6210\u6570\u636e\u6a21\u578b","title":"\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/8.Regression/#7","text":"\u6c42\u89e3\u7ebf\u6027\u56de\u5f52\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff08\u6b63\u89c4\u65b9\u7a0b normal equation\uff09\u89e3\u51b3\u4e4b\u5916\uff0c\u8fd8\u6709\u53ef\u4ee5\u5bf9Cost function \u6c42\u5bfc\uff0c\u5176\u4e2d\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002 \u90a3\u4e48\u6b63\u89c4\u65b9\u7a0b\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u51fa\u771f\u5b9e\u503c\u3002\u800c\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ea\u80fd\u7ed9\u51fa\u8fd1\u4f3c\u503c\u3002 \u4ee5\u4e0b\u662f\u68af\u5ea6\u4e0b\u964d\u6cd5\u548c\u6b63\u89c4\u65b9\u7a0b\u7684\u6bd4\u8f83: \u68af\u5ea6\u4e0b\u964d\u6cd5 \u6b63\u89c4\u65b9\u7a0b \u7ed3\u679c\u4e3a\u771f\u5b9e\u503c\u7684\u8fd1\u4f3c\u503c \u7ed3\u679c\u4e3a\u771f\u5b9e\u503c \u9700\u8981\u5faa\u73af\u591a\u6b21 \u65e0\u9700\u5faa\u73af \u6837\u672c\u6570\u91cf\u5927\u7684\u65f6\u5019\u4e5fok \u6837\u672c\u6570\u91cf\u7279\u522b\u5927\u7684\u65f6\u5019\u4f1a\u5f88\u6162\uff08n>10000\uff09 \u4f5c\u8005\uff1a \u5c0f\u7476 \u7247\u523b GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"7\u3001\u9009\u8bfb\u5185\u5bb9"},{"location":"ml/9.TreeRegression/","text":"\u7b2c9\u7ae0 \u6811\u56de\u5f52 \u6811\u56de\u5f52 \u6982\u8ff0 \u6211\u4eec\u672c\u7ae0\u4ecb\u7ecd CART(Classification And Regression Trees\uff0c \u5206\u7c7b\u56de\u5f52\u6811) \u7684\u6811\u6784\u5efa\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u65e2\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u8fd8\u53ef\u4ee5\u7528\u4e8e\u56de\u5f52\u3002 \u6811\u56de\u5f52 \u573a\u666f \u6211\u4eec\u5728\u7b2c 8 \u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u4e9b\u5f3a\u5927\u7684\u65b9\u6cd5\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6cd5\u521b\u5efa\u7684\u6a21\u578b\u9700\u8981\u62df\u5408\u6240\u6709\u7684\u6837\u672c\u70b9\uff08\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u9664\u5916\uff09\u3002\u5f53\u6570\u636e\u62e5\u6709\u4f17\u591a\u7279\u5f81\u5e76\u4e14\u7279\u5f81\u4e4b\u95f4\u5173\u7cfb\u5341\u5206\u590d\u6742\u65f6\uff0c\u6784\u5efa\u5168\u5c40\u6a21\u578b\u7684\u60f3\u6cd5\u5c31\u663e\u5f97\u592a\u96be\u4e86\uff0c\u4e5f\u7565\u663e\u7b28\u62d9\u3002\u800c\u4e14\uff0c\u5b9e\u9645\u751f\u6d3b\u4e2d\u5f88\u591a\u95ee\u9898\u90fd\u662f\u975e\u7ebf\u6027\u7684\uff0c\u4e0d\u53ef\u80fd\u4f7f\u7528\u5168\u5c40\u7ebf\u6027\u6a21\u578b\u6765\u62df\u5408\u4efb\u4f55\u6570\u636e\u3002 \u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u96c6\u5207\u5206\u6210\u5f88\u591a\u4efd\u6613\u5efa\u6a21\u7684\u6570\u636e\uff0c\u7136\u540e\u5229\u7528\u6211\u4eec\u7684\u7ebf\u6027\u56de\u5f52\u6280\u672f\u6765\u5efa\u6a21\u3002\u5982\u679c\u9996\u6b21\u5207\u5206\u540e\u4ecd\u7136\u96be\u4ee5\u62df\u5408\u7ebf\u6027\u6a21\u578b\u5c31\u7ee7\u7eed\u5207\u5206\u3002\u5728\u8fd9\u79cd\u5207\u5206\u65b9\u5f0f\u4e0b\uff0c\u6811\u56de\u5f52\u548c\u56de\u5f52\u6cd5\u5c31\u76f8\u5f53\u6709\u7528\u3002 \u9664\u4e86\u6211\u4eec\u5728 \u7b2c3\u7ae0 \u4e2d\u4ecb\u7ecd\u7684 \u51b3\u7b56\u6811\u7b97\u6cd5\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e2a\u65b0\u7684\u53eb\u505a CART(Classification And Regression Trees, \u5206\u7c7b\u56de\u5f52\u6811) \u7684\u6811\u6784\u5efa\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u65e2\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u8fd8\u53ef\u4ee5\u7528\u4e8e\u56de\u5f52\u3002 1\u3001\u6811\u56de\u5f52 \u539f\u7406 1.1\u3001\u6811\u56de\u5f52 \u539f\u7406\u6982\u8ff0 \u4e3a\u6210\u529f\u6784\u5efa\u4ee5\u5206\u6bb5\u5e38\u6570\u4e3a\u53f6\u8282\u70b9\u7684\u6811\uff0c\u9700\u8981\u5ea6\u91cf\u51fa\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u7b2c3\u7ae0\u4f7f\u7528\u6811\u8fdb\u884c\u5206\u7c7b\uff0c\u4f1a\u5728\u7ed9\u5b9a\u8282\u70b9\u65f6\u8ba1\u7b97\u6570\u636e\u7684\u6df7\u4e71\u5ea6\u3002\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u8fde\u7eed\u578b\u6570\u503c\u7684\u6df7\u4e71\u5ea6\u5462\uff1f \u5728\u8fd9\u91cc\uff0c\u8ba1\u7b97\u8fde\u7eed\u578b\u6570\u503c\u7684\u6df7\u4e71\u5ea6\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u9996\u5148\u8ba1\u7b97\u6240\u6709\u6570\u636e\u7684\u5747\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u6761\u6570\u636e\u7684\u503c\u5230\u5747\u503c\u7684\u5dee\u503c\u3002\u4e3a\u4e86\u5bf9\u6b63\u8d1f\u5dee\u503c\u540c\u7b49\u770b\u5f85\uff0c\u4e00\u822c\u4f7f\u7528\u7edd\u5bf9\u503c\u6216\u5e73\u65b9\u503c\u6765\u4ee3\u66ff\u4e0a\u8ff0\u5dee\u503c\u3002 \u4e0a\u8ff0\u505a\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u524d\u9762\u4ecb\u7ecd\u8fc7\u7684\u7edf\u8ba1\u5b66\u4e2d\u5e38\u7528\u7684\u65b9\u5dee\u8ba1\u7b97\u3002\u552f\u4e00\u4e0d\u540c\u5c31\u662f\uff0c\u65b9\u5dee\u662f\u5e73\u65b9\u8bef\u5dee\u7684\u5747\u503c(\u5747\u65b9\u5dee)\uff0c\u800c\u8fd9\u91cc\u9700\u8981\u7684\u662f\u5e73\u65b9\u8bef\u5dee\u7684\u603b\u503c(\u603b\u65b9\u5dee)\u3002\u603b\u65b9\u5dee\u53ef\u4ee5\u901a\u8fc7\u5747\u65b9\u5dee\u4e58\u4ee5\u6570\u636e\u96c6\u4e2d\u6837\u672c\u70b9\u7684\u4e2a\u6570\u6765\u5f97\u5230\u3002 1.2\u3001\u6811\u6784\u5efa\u7b97\u6cd5 \u6bd4\u8f83 \u6211\u4eec\u5728 \u7b2c3\u7ae0 \u4e2d\u4f7f\u7528\u7684\u6811\u6784\u5efa\u7b97\u6cd5\u662f ID3 \u3002ID3 \u7684\u505a\u6cd5\u662f\u6bcf\u6b21\u9009\u53d6\u5f53\u524d\u6700\u4f73\u7684\u7279\u5f81\u6765\u5206\u5272\u6570\u636e\uff0c\u5e76\u6309\u7167\u8be5\u7279\u5f81\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\u6765\u5207\u5206\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u7279\u5f81\u6709 4 \u79cd\u53d6\u503c\uff0c\u90a3\u4e48\u6570\u636e\u5c06\u88ab\u5207\u5206\u6210 4 \u4efd\u3002\u4e00\u65e6\u6309\u7167\u67d0\u7279\u5f81\u5207\u5206\u540e\uff0c\u8be5\u7279\u5f81\u5728\u4e4b\u540e\u7684\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u4f1a\u518d\u8d77\u4f5c\u7528\uff0c\u6240\u4ee5\u6709\u89c2\u70b9\u8ba4\u4e3a\u8fd9\u79cd\u5207\u5206\u65b9\u5f0f\u8fc7\u4e8e\u8fc5\u901f\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4e8c\u5143\u5207\u5206\u6cd5\uff0c\u5373\u6bcf\u6b21\u628a\u6570\u636e\u96c6\u5207\u5206\u6210\u4e24\u4efd\u3002\u5982\u679c\u6570\u636e\u7684\u67d0\u7279\u5f81\u503c\u7b49\u4e8e\u5207\u5206\u6240\u8981\u6c42\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u636e\u5c31\u8fdb\u5165\u6811\u7684\u5de6\u5b50\u6811\uff0c\u53cd\u4e4b\u5219\u8fdb\u5165\u6811\u7684\u53f3\u5b50\u6811\u3002 \u9664\u4e86\u5207\u5206\u8fc7\u4e8e\u8fc5\u901f\u5916\uff0c ID3 \u7b97\u6cd5\u8fd8\u5b58\u5728\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u4e0d\u80fd\u76f4\u63a5\u5904\u7406\u8fde\u7eed\u578b\u7279\u5f81\u3002\u53ea\u6709\u4e8b\u5148\u5c06\u8fde\u7eed\u578b\u7279\u5f81\u8f6c\u6362\u6210\u79bb\u6563\u578b\uff0c\u624d\u80fd\u5728 ID3 \u7b97\u6cd5\u4e2d\u4f7f\u7528\u3002\u4f46\u8fd9\u79cd\u8f6c\u6362\u8fc7\u7a0b\u4f1a\u7834\u574f\u8fde\u7eed\u578b\u53d8\u91cf\u7684\u5185\u5728\u6027\u8d28\u3002\u800c\u4f7f\u7528\u4e8c\u5143\u5207\u5206\u6cd5\u5219\u6613\u4e8e\u5bf9\u6811\u6784\u9020\u8fc7\u7a0b\u8fdb\u884c\u8c03\u6574\u4ee5\u5904\u7406\u8fde\u7eed\u578b\u7279\u5f81\u3002\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u662f: \u5982\u679c\u7279\u5f81\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u5c31\u8d70\u5de6\u5b50\u6811\uff0c\u5426\u5219\u5c31\u8d70\u53f3\u5b50\u6811\u3002\u53e6\u5916\uff0c\u4e8c\u5143\u5207\u5206\u6cd5\u4e5f\u8282\u7701\u4e86\u6811\u7684\u6784\u5efa\u65f6\u95f4\uff0c\u4f46\u8fd9\u70b9\u610f\u4e49\u4e5f\u4e0d\u662f\u7279\u522b\u5927\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6811\u6784\u5efa\u4e00\u822c\u662f\u79bb\u7ebf\u5b8c\u6210\uff0c\u65f6\u95f4\u5e76\u975e\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u7684\u56e0\u7d20\u3002 CART \u662f\u5341\u5206\u8457\u540d\u4e14\u5e7f\u6cdb\u8bb0\u8f7d\u7684\u6811\u6784\u5efa\u7b97\u6cd5\uff0c\u5b83\u4f7f\u7528\u4e8c\u5143\u5207\u5206\u6765\u5904\u7406\u8fde\u7eed\u578b\u53d8\u91cf\u3002\u5bf9 CART \u7a0d\u4f5c\u4fee\u6539\u5c31\u53ef\u4ee5\u5904\u7406\u56de\u5f52\u95ee\u9898\u3002\u7b2c 3 \u7ae0\u4e2d\u4f7f\u7528\u9999\u519c\u71b5\u6765\u5ea6\u91cf\u96c6\u5408\u7684\u65e0\u7ec4\u7ec7\u7a0b\u5ea6\u3002\u5982\u679c\u9009\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u4ee3\u66ff\u9999\u519c\u71b5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6811\u6784\u5efa\u7b97\u6cd5\u6765\u5b8c\u6210\u56de\u5f52\u3002 \u56de\u5f52\u6811\u4e0e\u5206\u7c7b\u6811\u7684\u601d\u8def\u7c7b\u4f3c\uff0c\u4f46\u662f\u53f6\u8282\u70b9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u79bb\u6563\u578b\uff0c\u800c\u662f\u8fde\u7eed\u578b\u3002 1.2.1\u3001\u9644\u52a0 \u5404\u5e38\u89c1\u6811\u6784\u9020\u7b97\u6cd5\u7684\u5212\u5206\u5206\u652f\u65b9\u5f0f \u8fd8\u6709\u4e00\u70b9\u8981\u8bf4\u660e\uff0c\u6784\u5efa\u51b3\u7b56\u6811\u7b97\u6cd5\uff0c\u5e38\u7528\u5230\u7684\u662f\u4e09\u4e2a\u65b9\u6cd5: ID3, C4.5, CART. \u4e09\u79cd\u65b9\u6cd5\u533a\u522b\u662f\u5212\u5206\u6811\u7684\u5206\u652f\u7684\u65b9\u5f0f: 1. ID3 \u662f\u4fe1\u606f\u589e\u76ca\u5206\u652f 2. C4.5 \u662f\u4fe1\u606f\u589e\u76ca\u7387\u5206\u652f 3. CART \u505a\u5206\u7c7b\u5de5\u4f5c\u65f6\uff0c\u91c7\u7528 GINI \u503c\u4f5c\u4e3a\u8282\u70b9\u5206\u88c2\u7684\u4f9d\u636e\uff1b\u56de\u5f52\u65f6\uff0c\u91c7\u7528\u6837\u672c\u7684\u6700\u5c0f\u65b9\u5dee\u4f5c\u4e3a\u8282\u70b9\u7684\u5206\u88c2\u4f9d\u636e\u3002 \u5de5\u7a0b\u4e0a\u603b\u7684\u6765\u8bf4: CART \u548c C4.5 \u4e4b\u95f4\u4e3b\u8981\u5dee\u5f02\u5728\u4e8e\u5206\u7c7b\u7ed3\u679c\u4e0a\uff0cCART \u53ef\u4ee5\u56de\u5f52\u5206\u6790\u4e5f\u53ef\u4ee5\u5206\u7c7b\uff0cC4.5 \u53ea\u80fd\u505a\u5206\u7c7b\uff1bC4.5 \u5b50\u8282\u70b9\u662f\u53ef\u4ee5\u591a\u5206\u7684\uff0c\u800c CART \u662f\u65e0\u6570\u4e2a\u4e8c\u53c9\u5b50\u8282\u70b9\uff1b \u4ee5\u6b64\u62d3\u5c55\u51fa\u4ee5 CART \u4e3a\u57fa\u7840\u7684 \u201c\u6811\u7fa4\u201d Random forest \uff0c \u4ee5 \u56de\u5f52\u6811 \u4e3a\u57fa\u7840\u7684 \u201c\u6811\u7fa4\u201d GBDT \u3002 1.3\u3001\u6811\u56de\u5f52 \u5de5\u4f5c\u539f\u7406 1\u3001\u627e\u5230\u6570\u636e\u96c6\u5207\u5206\u7684\u6700\u4f73\u4f4d\u7f6e\uff0c\u51fd\u6570 chooseBestSplit() \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b: \u5bf9\u6bcf\u4e2a\u7279\u5f81: \u5bf9\u6bcf\u4e2a\u7279\u5f81\u503c: \u5c06\u6570\u636e\u96c6\u5207\u5206\u6210\u4e24\u4efd\uff08\u5c0f\u4e8e\u8be5\u7279\u5f81\u503c\u7684\u6570\u636e\u6837\u672c\u653e\u5728\u5de6\u5b50\u6811\uff0c\u5426\u5219\u653e\u5728\u53f3\u5b50\u6811\uff09 \u8ba1\u7b97\u5207\u5206\u7684\u8bef\u5dee \u5982\u679c\u5f53\u524d\u8bef\u5dee\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee\uff0c\u90a3\u4e48\u5c06\u5f53\u524d\u5207\u5206\u8bbe\u5b9a\u4e3a\u6700\u4f73\u5207\u5206\u5e76\u66f4\u65b0\u6700\u5c0f\u8bef\u5dee \u8fd4\u56de\u6700\u4f73\u5207\u5206\u7684\u7279\u5f81\u548c\u9608\u503c 2\u3001\u6811\u6784\u5efa\u7b97\u6cd5\uff0c\u51fd\u6570 createTree() \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b: \u627e\u5230\u6700\u4f73\u7684\u5f85\u5207\u5206\u7279\u5f81: \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u80fd\u518d\u5206\uff0c\u5c06\u8be5\u8282\u70b9\u5b58\u4e3a\u53f6\u8282\u70b9 \u6267\u884c\u4e8c\u5143\u5207\u5206 \u5728\u53f3\u5b50\u6811\u8c03\u7528 createTree() \u65b9\u6cd5 \u5728\u5de6\u5b50\u6811\u8c03\u7528 createTree() \u65b9\u6cd5 1.4\u3001\u6811\u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b (1) \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e\u3002 (2) \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e\u3002 (3) \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811\u3002 (4) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u8d39\u5728\u53f6\u8282\u70b9\u6811\u6a21\u578b\u7684\u6784\u5efa\u4e0a\u3002 (5) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c\u3002 (6) \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u5904\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5\u3002 1.5\u3001\u6811\u56de\u5f52 \u7b97\u6cd5\u7279\u70b9 \u4f18\u70b9\uff1a\u53ef\u4ee5\u5bf9\u590d\u6742\u548c\u975e\u7ebf\u6027\u7684\u6570\u636e\u5efa\u6a21\u3002 \u7f3a\u70b9\uff1a\u7ed3\u679c\u4e0d\u6613\u7406\u89e3\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002 1.6\u3001\u56de\u5f52\u6811 \u9879\u76ee\u6848\u4f8b 1.6.1\u3001\u9879\u76ee\u6982\u8ff0 \u5728\u7b80\u5355\u6570\u636e\u96c6\u4e0a\u751f\u6210\u4e00\u68f5\u56de\u5f52\u6811\u3002 1.6.2\u3001\u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u8d39\u5728\u53f6\u8282\u70b9\u6811\u6a21\u578b\u7684\u6784\u5efa\u4e0a \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e data1.txt \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b: 0.036098 0.155096 0.993349 1.077553 0.530897 0.893462 0.712386 0.564858 0.343554 -0.371700 0.098016 -0.332760 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u57fa\u4e8e CART \u7b97\u6cd5\u6784\u5efa\u56de\u5f52\u6811\u7684\u7b80\u5355\u6570\u636e\u96c6 \u7528\u4e8e\u6d4b\u8bd5\u56de\u5f52\u6811\u7684\u5206\u6bb5\u5e38\u6570\u6570\u636e\u96c6 \u8bad\u7ec3\u7b97\u6cd5: \u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784 def binSplitDataSet(dataSet, feature, value): \"\"\"binSplitDataSet(\u5c06\u6570\u636e\u96c6\uff0c\u6309\u7167feature\u5217\u7684value\u8fdb\u884c \u4e8c\u5143\u5207\u5206) Description\uff1a\u5728\u7ed9\u5b9a\u7279\u5f81\u548c\u7279\u5f81\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u51fd\u6570\u901a\u8fc7\u6570\u7ec4\u8fc7\u6ee4\u65b9\u5f0f\u5c06\u4e0a\u8ff0\u6570\u636e\u96c6\u5408\u5207\u5206\u5f97\u5230\u4e24\u4e2a\u5b50\u96c6\u5e76\u8fd4\u56de\u3002 Args: dataMat \u6570\u636e\u96c6 feature \u5f85\u5207\u5206\u7684\u7279\u5f81\u5217 value \u7279\u5f81\u5217\u8981\u6bd4\u8f83\u7684\u503c Returns: mat0 \u5c0f\u4e8e\u7b49\u4e8e value \u7684\u6570\u636e\u96c6\u5728\u5de6\u8fb9 mat1 \u5927\u4e8e value \u7684\u6570\u636e\u96c6\u5728\u53f3\u8fb9 Raises: \"\"\" # # \u6d4b\u8bd5\u6848\u4f8b # print 'dataSet[:, feature]=', dataSet[:, feature] # print 'nonzero(dataSet[:, feature] > value)[0]=', nonzero(dataSet[:, feature] > value)[0] # print 'nonzero(dataSet[:, feature] <= value)[0]=', nonzero(dataSet[:, feature] <= value)[0] # dataSet[:, feature] \u53d6\u53bb\u6bcf\u4e00\u884c\u4e2d\uff0c\u7b2c1\u5217\u7684\u503c(\u4ece0\u5f00\u59cb\u7b97) # nonzero(dataSet[:, feature] > value) \u8fd4\u56de\u7ed3\u679c\u4e3atrue\u884c\u7684index\u4e0b\u6807 mat0 = dataSet[nonzero(dataSet[:, feature] <= value)[0], :] mat1 = dataSet[nonzero(dataSet[:, feature] > value)[0], :] return mat0, mat1 # 1.\u7528\u6700\u4f73\u65b9\u5f0f\u5207\u5206\u6570\u636e\u96c6 # 2.\u751f\u6210\u76f8\u5e94\u7684\u53f6\u8282\u70b9 def chooseBestSplit(dataSet, leafType=regLeaf, errType=regErr, ops=(1, 4)): \"\"\"chooseBestSplit(\u7528\u6700\u4f73\u65b9\u5f0f\u5207\u5206\u6570\u636e\u96c6 \u548c \u751f\u6210\u76f8\u5e94\u7684\u53f6\u8282\u70b9) Args: dataSet \u52a0\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6 leafType \u5efa\u7acb\u53f6\u5b50\u70b9\u7684\u51fd\u6570 errType \u8bef\u5dee\u8ba1\u7b97\u51fd\u6570(\u6c42\u603b\u65b9\u5dee) ops [\u5bb9\u8bb8\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5207\u5206\u7684\u6700\u5c11\u6837\u672c\u6570]\u3002 Returns: bestIndex feature\u7684index\u5750\u6807 bestValue \u5207\u5206\u7684\u6700\u4f18\u503c Raises: \"\"\" # ops=(1,4)\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u51b3\u5b9a\u4e86\u51b3\u7b56\u6811\u5212\u5206\u505c\u6b62\u7684threshold\u503c\uff0c\u88ab\u79f0\u4e3a\u9884\u526a\u679d\uff08prepruning\uff09\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u7528\u4e8e\u63a7\u5236\u51fd\u6570\u7684\u505c\u6b62\u65f6\u673a\u3002 # \u4e4b\u6240\u4ee5\u8fd9\u6837\u8bf4\uff0c\u662f\u56e0\u4e3a\u5b83\u9632\u6b62\u51b3\u7b56\u6811\u7684\u8fc7\u62df\u5408\uff0c\u6240\u4ee5\u5f53\u8bef\u5dee\u7684\u4e0b\u964d\u503c\u5c0f\u4e8etolS\uff0c\u6216\u5212\u5206\u540e\u7684\u96c6\u5408size\u5c0f\u4e8etolN\u65f6\uff0c\u9009\u62e9\u505c\u6b62\u7ee7\u7eed\u5212\u5206\u3002 # \u6700\u5c0f\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5212\u5206\u540e\u7684\u8bef\u5dee\u51cf\u5c0f\u5c0f\u4e8e\u8fd9\u4e2a\u5dee\u503c\uff0c\u5c31\u4e0d\u7528\u7ee7\u7eed\u5212\u5206 tolS = ops[0] # \u5212\u5206\u6700\u5c0f size \u5c0f\u4e8e\uff0c\u5c31\u4e0d\u7ee7\u7eed\u5212\u5206\u4e86 tolN = ops[1] # \u5982\u679c\u7ed3\u679c\u96c6(\u6700\u540e\u4e00\u5217\u4e3a1\u4e2a\u53d8\u91cf)\uff0c\u5c31\u8fd4\u56de\u9000\u51fa # .T \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u8f6c\u7f6e # .tolist()[0] \u8f6c\u5316\u4e3a\u6570\u7ec4\u5e76\u53d6\u7b2c0\u5217 if len(set(dataSet[:, -1].T.tolist()[0])) == 1: # \u5982\u679c\u96c6\u5408size\u4e3a1\uff0c\u4e0d\u7528\u7ee7\u7eed\u5212\u5206\u3002 # exit cond 1 return None, leafType(dataSet) # \u8ba1\u7b97\u884c\u5217\u503c m, n = shape(dataSet) # \u65e0\u5206\u7c7b\u8bef\u5dee\u7684\u603b\u65b9\u5dee\u548c # the choice of the best feature is driven by Reduction in RSS error from mean S = errType(dataSet) # inf \u6b63\u65e0\u7a77\u5927 bestS, bestIndex, bestValue = inf, 0, 0 # \u5faa\u73af\u5904\u7406\u6bcf\u4e00\u5217\u5bf9\u5e94\u7684feature\u503c for featIndex in range(n-1): # \u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81 # [0]\u8868\u793a\u8fd9\u4e00\u5217\u7684[\u6240\u6709\u884c]\uff0c\u4e0d\u8981[0]\u5c31\u662f\u4e00\u4e2aarray[[\u6240\u6709\u884c]] for splitVal in set(dataSet[:, featIndex].T.tolist()[0]): # \u5bf9\u8be5\u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u7ec4\u5185\u7684\u6210\u5458\u7684val\u503c\u8fdb\u884c \u4e8c\u5143\u5207\u5206 mat0, mat1 = binSplitDataSet(dataSet, featIndex, splitVal) # \u5224\u65ad\u4e8c\u5143\u5207\u5206\u7684\u65b9\u5f0f\u7684\u5143\u7d20\u6570\u91cf\u662f\u5426\u7b26\u5408\u9884\u671f if (shape(mat0)[0] < tolN) or (shape(mat1)[0] < tolN): continue newS = errType(mat0) + errType(mat1) # \u5982\u679c\u4e8c\u5143\u5207\u5206\uff0c\u7b97\u51fa\u6765\u7684\u8bef\u5dee\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u5207\u5206\u70b9\uff0c\u5e76\u8bb0\u5f55\u6700\u5c0f\u8bef\u5dee # \u5982\u679c\u5212\u5206\u540e\u8bef\u5dee\u5c0f\u4e8e bestS\uff0c\u5219\u8bf4\u660e\u627e\u5230\u4e86\u65b0\u7684bestS if newS < bestS: bestIndex = featIndex bestValue = splitVal bestS = newS # \u5224\u65ad\u4e8c\u5143\u5207\u5206\u7684\u65b9\u5f0f\u7684\u5143\u7d20\u8bef\u5dee\u662f\u5426\u7b26\u5408\u9884\u671f # if the decrease (S-bestS) is less than a threshold don't do the split if (S - bestS) < tolS: return None, leafType(dataSet) mat0, mat1 = binSplitDataSet(dataSet, bestIndex, bestValue) # \u5bf9\u6574\u4f53\u7684\u6210\u5458\u8fdb\u884c\u5224\u65ad\uff0c\u662f\u5426\u7b26\u5408\u9884\u671f # \u5982\u679c\u96c6\u5408\u7684 size \u5c0f\u4e8e tolN if (shape(mat0)[0] < tolN) or (shape(mat1)[0] < tolN): # \u5f53\u6700\u4f73\u5212\u5206\u540e\uff0c\u96c6\u5408\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u5212\u5206\uff0c\u4ea7\u751f\u53f6\u8282\u70b9 return None, leafType(dataSet) return bestIndex, bestValue # assume dataSet is NumPy Mat so we can array filtering # \u5047\u8bbe dataSet \u662f NumPy Mat \u7c7b\u578b\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c array \u8fc7\u6ee4 def createTree(dataSet, leafType=regLeaf, errType=regErr, ops=(1, 4)): \"\"\"createTree(\u83b7\u53d6\u56de\u5f52\u6811) Description\uff1a\u9012\u5f52\u51fd\u6570\uff1a\u5982\u679c\u6784\u5efa\u7684\u662f\u56de\u5f52\u6811\uff0c\u8be5\u6a21\u578b\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u5982\u679c\u662f\u6a21\u578b\u6811\uff0c\u5176\u6a21\u578b\u5e08\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u3002 Args: dataSet \u52a0\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6 leafType \u5efa\u7acb\u53f6\u5b50\u70b9\u7684\u51fd\u6570 errType \u8bef\u5dee\u8ba1\u7b97\u51fd\u6570 ops=(1, 4) [\u5bb9\u8bb8\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5207\u5206\u7684\u6700\u5c11\u6837\u672c\u6570] Returns: retTree \u51b3\u7b56\u6811\u6700\u540e\u7684\u7ed3\u679c \"\"\" # \u9009\u62e9\u6700\u597d\u7684\u5207\u5206\u65b9\u5f0f\uff1a feature\u7d22\u5f15\u503c\uff0c\u6700\u4f18\u5207\u5206\u503c # choose the best split feat, val = chooseBestSplit(dataSet, leafType, errType, ops) # if the splitting hit a stop condition return val # \u5982\u679c splitting \u8fbe\u5230\u4e00\u4e2a\u505c\u6b62\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd4\u56de val if feat is None: return val retTree = {} retTree['spInd'] = feat retTree['spVal'] = val # \u5927\u4e8e\u5728\u53f3\u8fb9\uff0c\u5c0f\u4e8e\u5728\u5de6\u8fb9\uff0c\u5206\u4e3a2\u4e2a\u6570\u636e\u96c6 lSet, rSet = binSplitDataSet(dataSet, feat, val) # \u9012\u5f52\u7684\u8fdb\u884c\u8c03\u7528\uff0c\u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u9012\u5f52\u751f\u6210\u6811 retTree['left'] = createTree(lSet, leafType, errType, ops) retTree['right'] = createTree(rSet, leafType, errType, ops) return retTree \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 2\u3001\u6811\u526a\u679d \u4e00\u68f5\u6811\u5982\u679c\u8282\u70b9\u8fc7\u591a\uff0c\u8868\u660e\u8be5\u6a21\u578b\u53ef\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u4e86 \u201c\u8fc7\u62df\u5408\u201d\u3002 \u901a\u8fc7\u964d\u4f4e\u51b3\u7b56\u6811\u7684\u590d\u6742\u5ea6\u6765\u907f\u514d\u8fc7\u62df\u5408\u7684\u8fc7\u7a0b\u79f0\u4e3a \u526a\u679d\uff08pruning\uff09 \u3002\u5728\u51fd\u6570 chooseBestSplit() \u4e2d\u63d0\u524d\u7ec8\u6b62\u6761\u4ef6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u8fdb\u884c\u4e00\u79cd\u6240\u8c13\u7684 \u9884\u526a\u679d\uff08prepruning\uff09 \u64cd\u4f5c\u3002\u53e6\u4e00\u4e2a\u5f62\u5f0f\u7684\u526a\u679d\u9700\u8981\u4f7f\u7528\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\uff0c\u79f0\u4f5c \u540e\u526a\u679d\uff08postpruning\uff09 \u3002 2.1\u3001\u9884\u526a\u679d(prepruning) \u987e\u540d\u601d\u4e49\uff0c\u9884\u526a\u679d\u5c31\u662f\u53ca\u65e9\u7684\u505c\u6b62\u6811\u589e\u957f\uff0c\u5728\u6784\u9020\u51b3\u7b56\u6811\u7684\u540c\u65f6\u8fdb\u884c\u526a\u679d\u3002 \u6240\u6709\u51b3\u7b56\u6811\u7684\u6784\u5efa\u65b9\u6cd5\uff0c\u90fd\u662f\u5728\u65e0\u6cd5\u8fdb\u4e00\u6b65\u964d\u4f4e\u71b5\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u505c\u6b62\u521b\u5efa\u5206\u652f\u7684\u8fc7\u7a0b\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u62df\u5408\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c\uff0c\u71b5\u51cf\u5c0f\u7684\u6570\u91cf\u5c0f\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u5373\u4f7f\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u964d\u4f4e\u71b5\uff0c\u4e5f\u505c\u6b62\u7ee7\u7eed\u521b\u5efa\u5206\u652f\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u5b9e\u9645\u4e2d\u7684\u6548\u679c\u5e76\u4e0d\u597d\u3002 2.2\u3001\u540e\u526a\u679d(postpruning) \u51b3\u7b56\u6811\u6784\u9020\u5b8c\u6210\u540e\u8fdb\u884c\u526a\u679d\u3002\u526a\u679d\u7684\u8fc7\u7a0b\u662f\u5bf9\u62e5\u6709\u540c\u6837\u7236\u8282\u70b9\u7684\u4e00\u7ec4\u8282\u70b9\u8fdb\u884c\u68c0\u67e5\uff0c\u5224\u65ad\u5982\u679c\u5c06\u5176\u5408\u5e76\uff0c\u71b5\u7684\u589e\u52a0\u91cf\u662f\u5426\u5c0f\u4e8e\u67d0\u4e00\u9608\u503c\u3002\u5982\u679c\u786e\u5b9e\u5c0f\uff0c\u5219\u8fd9\u4e00\u7ec4\u8282\u70b9\u53ef\u4ee5\u5408\u5e76\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u5408\u5e76\u4e5f\u88ab\u79f0\u4f5c \u584c\u9677\u5904\u7406 \uff0c\u5728\u56de\u5f52\u6811\u4e2d\u4e00\u822c\u91c7\u7528\u53d6\u9700\u8981\u5408\u5e76\u7684\u6240\u6709\u5b50\u6811\u7684\u5e73\u5747\u503c\u3002\u540e\u526a\u679d\u662f\u76ee\u524d\u6700\u666e\u904d\u7684\u505a\u6cd5\u3002 \u540e\u526a\u679d prune() \u7684\u4f2a\u4ee3\u7801\u5982\u4e0b: \u57fa\u4e8e\u5df2\u6709\u7684\u6811\u5207\u5206\u6d4b\u8bd5\u6570\u636e: \u5982\u679c\u5b58\u5728\u4efb\u4e00\u5b50\u96c6\u662f\u4e00\u68f5\u6811\uff0c\u5219\u5728\u8be5\u5b50\u96c6\u9012\u5f52\u526a\u679d\u8fc7\u7a0b \u8ba1\u7b97\u5c06\u5f53\u524d\u4e24\u4e2a\u53f6\u8282\u70b9\u5408\u5e76\u540e\u7684\u8bef\u5dee \u8ba1\u7b97\u4e0d\u5408\u5e76\u7684\u8bef\u5dee \u5982\u679c\u5408\u5e76\u4f1a\u964d\u4f4e\u8bef\u5dee\u7684\u8bdd\uff0c\u5c31\u5c06\u53f6\u8282\u70b9\u5408\u5e76 2.3\u3001\u526a\u679d \u4ee3\u7801 \u56de\u5f52\u6811\u526a\u679d\u51fd\u6570 # \u5224\u65ad\u8282\u70b9\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178 def isTree(obj): \"\"\" Desc: \u6d4b\u8bd5\u8f93\u5165\u53d8\u91cf\u662f\u5426\u662f\u4e00\u68f5\u6811,\u5373\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178 Args: obj -- \u8f93\u5165\u53d8\u91cf Returns: \u8fd4\u56de\u5e03\u5c14\u7c7b\u578b\u7684\u7ed3\u679c\u3002\u5982\u679c obj \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56de false \"\"\" return (type(obj).__name__ == 'dict') # \u8ba1\u7b97\u5de6\u53f3\u679d\u4e2b\u7684\u5747\u503c def getMean(tree): \"\"\" Desc: \u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\u6811\u76f4\u5230\u53f6\u8282\u70b9\u4e3a\u6b62\uff0c\u5982\u679c\u627e\u5230\u4e24\u4e2a\u53f6\u8282\u70b9\u5219\u8ba1\u7b97\u5b83\u4eec\u7684\u5e73\u5747\u503c\u3002 \u5bf9 tree \u8fdb\u884c\u584c\u9677\u5904\u7406\uff0c\u5373\u8fd4\u56de\u6811\u5e73\u5747\u503c\u3002 Args: tree -- \u8f93\u5165\u7684\u6811 Returns: \u8fd4\u56de tree \u8282\u70b9\u7684\u5e73\u5747\u503c \"\"\" if isTree(tree['right']): tree['right'] = getMean(tree['right']) if isTree(tree['left']): tree['left'] = getMean(tree['left']) return (tree['left']+tree['right'])/2.0 # \u68c0\u67e5\u662f\u5426\u9002\u5408\u5408\u5e76\u5206\u679d def prune(tree, testData): \"\"\" Desc: \u4ece\u4e0a\u800c\u4e0b\u627e\u5230\u53f6\u8282\u70b9\uff0c\u7528\u6d4b\u8bd5\u6570\u636e\u96c6\u6765\u5224\u65ad\u5c06\u8fd9\u4e9b\u53f6\u8282\u70b9\u5408\u5e76\u662f\u5426\u80fd\u964d\u4f4e\u6d4b\u8bd5\u8bef\u5dee Args: tree -- \u5f85\u526a\u679d\u7684\u6811 testData -- \u526a\u679d\u6240\u9700\u8981\u7684\u6d4b\u8bd5\u6570\u636e testData Returns: tree -- \u526a\u679d\u5b8c\u6210\u7684\u6811 \"\"\" # \u5224\u65ad\u662f\u5426\u6d4b\u8bd5\u6570\u636e\u96c6\u6ca1\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u76f4\u63a5\u8fd4\u56detree\u672c\u8eab\u7684\u5747\u503c if shape(testData)[0] == 0: return getMean(tree) # \u5224\u65ad\u5206\u679d\u662f\u5426\u662fdict\u5b57\u5178\uff0c\u5982\u679c\u662f\u5c31\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u8fdb\u884c\u5207\u5206 if (isTree(tree['right']) or isTree(tree['left'])): lSet, rSet = binSplitDataSet(testData, tree['spInd'], tree['spVal']) # \u5982\u679c\u662f\u5de6\u8fb9\u5206\u679d\u662f\u5b57\u5178\uff0c\u5c31\u4f20\u5165\u5de6\u8fb9\u7684\u6570\u636e\u96c6\u548c\u5de6\u8fb9\u7684\u5206\u679d\uff0c\u8fdb\u884c\u9012\u5f52 if isTree(tree['left']): tree['left'] = prune(tree['left'], lSet) # \u5982\u679c\u662f\u53f3\u8fb9\u5206\u679d\u662f\u5b57\u5178\uff0c\u5c31\u4f20\u5165\u5de6\u8fb9\u7684\u6570\u636e\u96c6\u548c\u5de6\u8fb9\u7684\u5206\u679d\uff0c\u8fdb\u884c\u9012\u5f52 if isTree(tree['right']): tree['right'] = prune(tree['right'], rSet) # \u4e0a\u9762\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u672c\u8d28\u4e0a\u5c31\u662f\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6309\u7167\u8bad\u7ec3\u5b8c\u6210\u7684\u6811\u62c6\u5206\u597d\uff0c\u5bf9\u5e94\u7684\u503c\u653e\u5230\u5bf9\u5e94\u7684\u8282\u70b9 # \u5982\u679c\u5de6\u53f3\u4e24\u8fb9\u540c\u65f6\u90fd\u4e0d\u662fdict\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u90fd\u662f\u53f6\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u5b50\u6811\u4e86\uff0c\u90a3\u4e48\u5206\u5272\u6d4b\u8bd5\u6570\u636e\u96c6\u3002 # 1. \u5982\u679c\u6b63\u786e # * \u90a3\u4e48\u8ba1\u7b97\u4e00\u4e0b\u603b\u65b9\u5dee \u548c \u8be5\u7ed3\u679c\u96c6\u7684\u672c\u8eab\u4e0d\u5206\u679d\u7684\u603b\u65b9\u5dee\u6bd4\u8f83 # * \u5982\u679c \u5408\u5e76\u7684\u603b\u65b9\u5dee < \u4e0d\u5408\u5e76\u7684\u603b\u65b9\u5dee\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u5408\u5e76 # \u6ce8\u610f\u8fd4\u56de\u7684\u7ed3\u679c\uff1a \u5982\u679c\u53ef\u4ee5\u5408\u5e76\uff0c\u539f\u6765\u7684dict\u5c31\u53d8\u4e3a\u4e86 \u6570\u503c if not isTree(tree['left']) and not isTree(tree['right']): lSet, rSet = binSplitDataSet(testData, tree['spInd'], tree['spVal']) # power(x, y)\u8868\u793ax\u7684y\u6b21\u65b9 errorNoMerge = sum(power(lSet[:, -1] - tree['left'], 2)) + sum(power(rSet[:, -1] - tree['right'], 2)) treeMean = (tree['left'] + tree['right'])/2.0 errorMerge = sum(power(testData[:, -1] - treeMean, 2)) # \u5982\u679c \u5408\u5e76\u7684\u603b\u65b9\u5dee < \u4e0d\u5408\u5e76\u7684\u603b\u65b9\u5dee\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u5408\u5e76 if errorMerge < errorNoMerge: print \"merging\" return treeMean else: return tree else: return tree \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py 3\u3001\u6a21\u578b\u6811 3.1\u3001\u6a21\u578b\u6811 \u7b80\u4ecb \u7528\u6811\u6765\u5bf9\u6570\u636e\u5efa\u6a21\uff0c\u9664\u4e86\u628a\u53f6\u8282\u70b9\u7b80\u5355\u5730\u8bbe\u5b9a\u4e3a\u5e38\u6570\u503c\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u53f6\u8282\u70b9\u8bbe\u5b9a\u4e3a\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\uff0c\u8fd9\u91cc\u6240\u8c13\u7684 \u5206\u6bb5\u7ebf\u6027\uff08piecewise linear\uff09 \u662f\u6307\u6a21\u578b\u7531\u591a\u4e2a\u7ebf\u6027\u7247\u6bb5\u7ec4\u6210\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u56fe 9-4 \u4e2d\u7684\u6570\u636e\uff0c\u5982\u679c\u4f7f\u7528\u4e24\u6761\u76f4\u7ebf\u62df\u5408\u662f\u5426\u6bd4\u4f7f\u7528\u4e00\u7ec4\u5e38\u6570\u6765\u5efa\u6a21\u597d\u5462\uff1f\u7b54\u6848\u663e\u800c\u6613\u89c1\u3002\u53ef\u4ee5\u8bbe\u8ba1\u4e24\u6761\u5206\u522b\u4ece 0.0~0.3\u3001\u4ece 0.3~1.0 \u7684\u76f4\u7ebf\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u7ebf\u6027\u6a21\u578b\u3002\u56e0\u4e3a\u6570\u636e\u96c6\u91cc\u7684\u4e00\u90e8\u5206\u6570\u636e\uff080.0~0.3\uff09\u4ee5\u67d0\u4e2a\u7ebf\u6027\u6a21\u578b\u5efa\u6a21\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u6570\u636e\uff080.3~1.0\uff09\u5219\u4ee5\u53e6\u4e00\u4e2a\u7ebf\u6027\u6a21\u578b\u5efa\u6a21\uff0c\u56e0\u6b64\u6211\u4eec\u8bf4\u91c7\u7528\u4e86\u6240\u8c13\u7684\u5206\u6bb5\u7ebf\u6027\u6a21\u578b\u3002 \u51b3\u7b56\u6811\u76f8\u6bd4\u4e8e\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u4f18\u52bf\u4e4b\u4e00\u5728\u4e8e\u7ed3\u679c\u66f4\u6613\u7406\u89e3\u3002\u5f88\u663e\u7136\uff0c\u4e24\u6761\u76f4\u7ebf\u6bd4\u5f88\u591a\u8282\u70b9\u7ec4\u6210\u4e00\u68f5\u5927\u6811\u66f4\u5bb9\u6613\u89e3\u91ca\u3002\u6a21\u578b\u6811\u7684\u53ef\u89e3\u91ca\u6027\u662f\u5b83\u4f18\u4e8e\u56de\u5f52\u6811\u7684\u7279\u70b9\u4e4b\u4e00\u3002\u53e6\u5916\uff0c\u6a21\u578b\u6811\u4e5f\u5177\u6709\u66f4\u9ad8\u7684\u9884\u6d4b\u51c6\u786e\u5ea6\u3002 \u5c06\u4e4b\u524d\u7684\u56de\u5f52\u6811\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5728\u53f6\u8282\u70b9\u751f\u6210\u7ebf\u6027\u6a21\u578b\u800c\u4e0d\u662f\u5e38\u6570\u503c\u3002\u4e0b\u9762\u5c06\u5229\u7528\u6811\u751f\u6210\u7b97\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5212\u5206\uff0c\u4e14\u6bcf\u4efd\u5207\u5206\u6570\u636e\u90fd\u80fd\u5f88\u5bb9\u6613\u88ab\u7ebf\u6027\u6a21\u578b\u6240\u8868\u793a\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u8bef\u5dee\u7684\u8ba1\u7b97\u3002 \u90a3\u4e48\u4e3a\u4e86\u627e\u5230\u6700\u4f73\u5207\u5206\uff0c\u5e94\u8be5\u600e\u6837\u8ba1\u7b97\u8bef\u5dee\u5462\uff1f\u524d\u9762\u7528\u4e8e\u56de\u5f52\u6811\u7684\u8bef\u5dee\u8ba1\u7b97\u65b9\u6cd5\u8fd9\u91cc\u4e0d\u80fd\u518d\u7528\u3002\u7a0d\u52a0\u53d8\u5316\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\uff0c\u5e94\u8be5\u5148\u7528\u6a21\u578b\u6765\u5bf9\u5b83\u8fdb\u884c\u62df\u5408\uff0c\u7136\u540e\u8ba1\u7b97\u771f\u5b9e\u7684\u76ee\u6807\u503c\u4e0e\u6a21\u578b\u9884\u6d4b\u503c\u95f4\u7684\u5dee\u503c\u3002\u6700\u540e\u5c06\u8fd9\u4e9b\u5dee\u503c\u7684\u5e73\u65b9\u6c42\u548c\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u8bef\u5dee\u3002 3.2\u3001\u6a21\u578b\u6811 \u4ee3\u7801 \u6a21\u578b\u6811\u7684\u53f6\u8282\u70b9\u751f\u6210\u51fd\u6570 # \u5f97\u5230\u6a21\u578b\u7684ws\u7cfb\u6570\uff1af(x) = x0 + x1*featrue1+ x3*featrue2 ... # create linear model and return coeficients def modelLeaf(dataSet): \"\"\" Desc: \u5f53\u6570\u636e\u4e0d\u518d\u9700\u8981\u5207\u5206\u7684\u65f6\u5019\uff0c\u751f\u6210\u53f6\u8282\u70b9\u7684\u6a21\u578b\u3002 Args: dataSet -- \u8f93\u5165\u6570\u636e\u96c6 Returns: \u8c03\u7528 linearSolve \u51fd\u6570\uff0c\u8fd4\u56de\u5f97\u5230\u7684 \u56de\u5f52\u7cfb\u6570ws \"\"\" ws, X, Y = linearSolve(dataSet) return ws # \u8ba1\u7b97\u7ebf\u6027\u6a21\u578b\u7684\u8bef\u5dee\u503c def modelErr(dataSet): \"\"\" Desc: \u5728\u7ed9\u5b9a\u6570\u636e\u96c6\u4e0a\u8ba1\u7b97\u8bef\u5dee\u3002 Args: dataSet -- \u8f93\u5165\u6570\u636e\u96c6 Returns: \u8c03\u7528 linearSolve \u51fd\u6570\uff0c\u8fd4\u56de yHat \u548c Y \u4e4b\u95f4\u7684\u5e73\u65b9\u8bef\u5dee\u3002 \"\"\" ws, X, Y = linearSolve(dataSet) yHat = X * ws # print corrcoef(yHat, Y, rowvar=0) return sum(power(Y - yHat, 2)) # helper function used in two places def linearSolve(dataSet): \"\"\" Desc: \u5c06\u6570\u636e\u96c6\u683c\u5f0f\u5316\u6210\u76ee\u6807\u53d8\u91cfY\u548c\u81ea\u53d8\u91cfX\uff0c\u6267\u884c\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\uff0c\u5f97\u5230ws Args: dataSet -- \u8f93\u5165\u6570\u636e Returns: ws -- \u6267\u884c\u7ebf\u6027\u56de\u5f52\u7684\u56de\u5f52\u7cfb\u6570 X -- \u683c\u5f0f\u5316\u81ea\u53d8\u91cfX Y -- \u683c\u5f0f\u5316\u76ee\u6807\u53d8\u91cfY \"\"\" m, n = shape(dataSet) # \u4ea7\u751f\u4e00\u4e2a\u5173\u4e8e1\u7684\u77e9\u9635 X = mat(ones((m, n))) Y = mat(ones((m, 1))) # X\u76840\u5217\u4e3a1\uff0c\u5e38\u6570\u9879\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u8861\u8bef\u5dee X[:, 1: n] = dataSet[:, 0: n-1] Y = dataSet[:, -1] # \u8f6c\u7f6e\u77e9\u9635*\u77e9\u9635 xTx = X.T * X # \u5982\u679c\u77e9\u9635\u7684\u9006\u4e0d\u5b58\u5728\uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u5f02\u5e38 if linalg.det(xTx) == 0.0: raise NameError('This matrix is singular, cannot do inverse,\\ntry increasing the second value of ops') # \u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u6700\u4f18\u89e3: w0*1+w1*x1=y ws = xTx.I * (X.T * Y) return ws, X, Y \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py 3.3\u3001\u6a21\u578b\u6811 \u8fd0\u884c\u7ed3\u679c 4\u3001\u6811\u56de\u5f52 \u9879\u76ee\u6848\u4f8b 4.1\u3001\u9879\u76ee\u6848\u4f8b1: \u6811\u56de\u5f52\u4e0e\u6807\u51c6\u56de\u5f52\u7684\u6bd4\u8f83 4.1.1\u3001\u9879\u76ee\u6982\u8ff0 \u524d\u9762\u4ecb\u7ecd\u4e86\u6a21\u578b\u6811\u3001\u56de\u5f52\u6811\u548c\u4e00\u822c\u7684\u56de\u5f52\u65b9\u6cd5\uff0c\u4e0b\u9762\u6d4b\u8bd5\u4e00\u4e0b\u54ea\u4e2a\u6a21\u578b\u6700\u597d\u3002 \u8fd9\u4e9b\u6a21\u578b\u5c06\u5728\u67d0\u4e2a\u6570\u636e\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8be5\u6570\u636e\u6d89\u53ca\u4eba\u7684\u667a\u529b\u6c34\u5e73\u548c\u81ea\u884c\u8f66\u7684\u901f\u5ea6\u7684\u5173\u7cfb\u3002\u5f53\u7136\uff0c\u6570\u636e\u662f\u5047\u7684\u3002 4.1.2\u3001\u5f00\u53d1\u6d41\u7a0b \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6a21\u578b\u6811\u7684\u6784\u5efa \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u6570\u636e\u5b58\u50a8\u683c\u5f0f: 3.000000 46.852122 23.000000 178.676107 0.000000 86.154024 6.000000 68.707614 15.000000 139.737693 \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6a21\u578b\u6811\u7684\u6784\u5efa \u7528\u6811\u56de\u5f52\u8fdb\u884c\u9884\u6d4b\u7684\u4ee3\u7801 # \u56de\u5f52\u6811\u6d4b\u8bd5\u6848\u4f8b # \u4e3a\u4e86\u548c modelTreeEval() \u4fdd\u6301\u4e00\u81f4\uff0c\u4fdd\u7559\u4e24\u4e2a\u8f93\u5165\u53c2\u6570 def regTreeEval(model, inDat): \"\"\" Desc: \u5bf9 \u56de\u5f52\u6811 \u8fdb\u884c\u9884\u6d4b Args: model -- \u6307\u5b9a\u6a21\u578b\uff0c\u53ef\u9009\u503c\u4e3a \u56de\u5f52\u6811\u6a21\u578b \u6216\u8005 \u6a21\u578b\u6811\u6a21\u578b\uff0c\u8fd9\u91cc\u4e3a\u56de\u5f52\u6811 inDat -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e Returns: float(model) -- \u5c06\u8f93\u5165\u7684\u6a21\u578b\u6570\u636e\u8f6c\u6362\u4e3a \u6d6e\u70b9\u6570 \u8fd4\u56de \"\"\" return float(model) # \u6a21\u578b\u6811\u6d4b\u8bd5\u6848\u4f8b # \u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406\uff0c\u5728\u539f\u6570\u636e\u77e9\u9635\u4e0a\u589e\u52a0\u7b2c0\u5217\uff0c\u5143\u7d20\u7684\u503c\u90fd\u662f1\uff0c # \u4e5f\u5c31\u662f\u589e\u52a0\u504f\u79fb\u503c\uff0c\u548c\u6211\u4eec\u4e4b\u524d\u7684\u7b80\u5355\u7ebf\u6027\u56de\u5f52\u662f\u4e00\u4e2a\u5957\u8def\uff0c\u589e\u52a0\u4e00\u4e2a\u504f\u79fb\u91cf def modelTreeEval(model, inDat): \"\"\" Desc: \u5bf9 \u6a21\u578b\u6811 \u8fdb\u884c\u9884\u6d4b Args: model -- \u8f93\u5165\u6a21\u578b\uff0c\u53ef\u9009\u503c\u4e3a \u56de\u5f52\u6811\u6a21\u578b \u6216\u8005 \u6a21\u578b\u6811\u6a21\u578b\uff0c\u8fd9\u91cc\u4e3a\u6a21\u578b\u6811\u6a21\u578b inDat -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e Returns: float(X * model) -- \u5c06\u6d4b\u8bd5\u6570\u636e\u4e58\u4ee5 \u56de\u5f52\u7cfb\u6570 \u5f97\u5230\u4e00\u4e2a\u9884\u6d4b\u503c \uff0c\u8f6c\u5316\u4e3a \u6d6e\u70b9\u6570 \u8fd4\u56de \"\"\" n = shape(inDat)[1] X = mat(ones((1, n+1))) X[:, 1: n+1] = inDat # print X, model return float(X * model) # \u8ba1\u7b97\u9884\u6d4b\u7684\u7ed3\u679c # \u5728\u7ed9\u5b9a\u6811\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u5355\u4e2a\u6570\u636e\u70b9\uff0c\u8be5\u51fd\u6570\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9884\u6d4b\u503c\u3002 # modelEval\u662f\u5bf9\u53f6\u8282\u70b9\u8fdb\u884c\u9884\u6d4b\u7684\u51fd\u6570\u5f15\u7528\uff0c\u6307\u5b9a\u6811\u7684\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5728\u53f6\u8282\u70b9\u4e0a\u8c03\u7528\u5408\u9002\u7684\u6a21\u578b\u3002 # \u6b64\u51fd\u6570\u81ea\u9876\u5411\u4e0b\u904d\u5386\u6574\u68f5\u6811\uff0c\u76f4\u5230\u547d\u4e2d\u53f6\u8282\u70b9\u4e3a\u6b62\uff0c\u4e00\u65e6\u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u5b83\u5c31\u4f1a\u5728\u8f93\u5165\u6570\u636e\u4e0a # \u8c03\u7528modelEval()\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u9ed8\u8ba4\u503c\u4e3aregTreeEval() def treeForeCast(tree, inData, modelEval=regTreeEval): \"\"\" Desc: \u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u6811\u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u662f \u56de\u5f52\u6811 \u4e5f\u53ef\u4ee5\u662f \u6a21\u578b\u6811 Args: tree -- \u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6811\u7684\u6a21\u578b inData -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e modelEval -- \u9884\u6d4b\u7684\u6811\u7684\u6a21\u578b\u7c7b\u578b\uff0c\u53ef\u9009\u503c\u4e3a regTreeEval\uff08\u56de\u5f52\u6811\uff09 \u6216 modelTreeEval\uff08\u6a21\u578b\u6811\uff09\uff0c\u9ed8\u8ba4\u4e3a\u56de\u5f52\u6811 Returns: \u8fd4\u56de\u9884\u6d4b\u503c \"\"\" if not isTree(tree): return modelEval(tree, inData) if inData[tree['spInd']] <= tree['spVal']: if isTree(tree['left']): return treeForeCast(tree['left'], inData, modelEval) else: return modelEval(tree['left'], inData) else: if isTree(tree['right']): return treeForeCast(tree['right'], inData, modelEval) else: return modelEval(tree['right'], inData) # \u9884\u6d4b\u7ed3\u679c def createForeCast(tree, testData, modelEval=regTreeEval): \"\"\" Desc: \u8c03\u7528 treeForeCast \uff0c\u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u6811\u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u662f \u56de\u5f52\u6811 \u4e5f\u53ef\u4ee5\u662f \u6a21\u578b\u6811 Args: tree -- \u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6811\u7684\u6a21\u578b inData -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e modelEval -- \u9884\u6d4b\u7684\u6811\u7684\u6a21\u578b\u7c7b\u578b\uff0c\u53ef\u9009\u503c\u4e3a regTreeEval\uff08\u56de\u5f52\u6811\uff09 \u6216 modelTreeEval\uff08\u6a21\u578b\u6811\uff09\uff0c\u9ed8\u8ba4\u4e3a\u56de\u5f52\u6811 Returns: \u8fd4\u56de\u9884\u6d4b\u503c\u77e9\u9635 \"\"\" m = len(testData) yHat = mat(zeros((m, 1))) # print yHat for i in range(m): yHat[i, 0] = treeForeCast(tree, mat(testData[i]), modelEval) # print \"yHat==>\", yHat[i, 0] return yHat \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c R^2 \u5224\u5b9a\u7cfb\u6570\u5c31\u662f\u62df\u5408\u4f18\u5ea6\u5224\u5b9a\u7cfb\u6570\uff0c\u5b83\u4f53\u73b0\u4e86\u56de\u5f52\u6a21\u578b\u4e2d\u81ea\u53d8\u91cf\u7684\u53d8\u5f02\u5728\u56e0\u53d8\u91cf\u7684\u53d8\u5f02\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u5982 R^2=0.99999 \u8868\u793a\u5728\u56e0\u53d8\u91cf y \u7684\u53d8\u5f02\u4e2d\u6709 99.999% \u662f\u7531\u4e8e\u53d8\u91cf x \u5f15\u8d77\u3002\u5f53 R^2=1 \u65f6\u8868\u793a\uff0c\u6240\u6709\u89c2\u6d4b\u70b9\u90fd\u843d\u5728\u62df\u5408\u7684\u76f4\u7ebf\u6216\u66f2\u7ebf\u4e0a\uff1b\u5f53 R^2=0 \u65f6\uff0c\u8868\u793a\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u4e0d\u5b58\u5728\u76f4\u7ebf\u6216\u66f2\u7ebf\u5173\u7cfb\u3002 \u6240\u4ee5\u6211\u4eec\u770b\u51fa\uff0c R^2 \u7684\u503c\u8d8a\u63a5\u8fd1 1.0 \u8d8a\u597d\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 5\u3001\u9644\u52a0 Python \u4e2d GUI \u7684\u4f7f\u7528 5.1\u3001\u4f7f\u7528 Python \u7684 Tkinter \u5e93\u521b\u5efa GUI \u5982\u679c\u80fd\u8ba9\u7528\u6237\u4e0d\u9700\u8981\u4efb\u4f55\u6307\u4ee4\u5c31\u53ef\u4ee5\u6309\u7167\u4ed6\u4eec\u81ea\u5df1\u7684\u65b9\u5f0f\u6765\u5206\u6790\u6570\u636e\uff0c\u5c31\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u505a\u51fa\u8fc7\u591a\u89e3\u91ca\u3002\u5176\u4e2d\u4e00\u4e2a\u80fd\u540c\u65f6\u652f\u6301\u6570\u636e\u5448\u73b0\u548c\u7528\u6237\u4ea4\u4e92\u7684\u65b9\u5f0f\u5c31\u662f\u6784\u5efa\u4e00\u4e2a\u56fe\u5f62\u7528\u6237\u754c\u9762(GUI\uff0cGraphical User Interface)\uff0c\u5982\u56fe9-7\u6240\u793a\u3002 5.2\u3001\u7528 Tkinter \u521b\u5efa GUI Python \u6709\u5f88\u591a GUI \u6846\u67b6\uff0c\u5176\u4e2d\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684 Tkinter\uff0c\u662f\u968f Python \u7684\u6807\u51c6\u7248\u7f16\u8bd1\u7248\u672c\u53d1\u5e03\u7684\u3002Tkinter \u53ef\u4ee5\u5728 Windows\u3001Mac OS\u548c\u5927\u591a\u6570\u7684 Linux \u5e73\u53f0\u4e0a\u4f7f\u7528\u3002 5.3\u3001\u96c6\u6210 Matplotlib \u548c Tkinter MatPlotlib \u7684\u6784\u5efa\u7a0b\u5e8f\u5305\u542b\u4e00\u4e2a\u524d\u7aef\uff0c\u4e5f\u5c31\u662f\u9762\u5411\u7528\u6237\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982 plot() \u548c scatter() \u65b9\u6cd5\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u540c\u65f6\u521b\u5efa\u4e86\u4e00\u4e2a\u540e\u7aef\uff0c\u7528\u4e8e\u5b9e\u73b0\u7ed8\u56fe\u548c\u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\u63a5\u53e3\u3002 \u901a\u8fc7\u6539\u53d8\u540e\u7aef\u53ef\u4ee5\u5c06\u56fe\u50cf\u7ed8\u5236\u5728PNG\u3001PDF\u3001SVG\u7b49\u683c\u5f0f\u7684\u6587\u4ef6\u4e0a\u3002\u4e0b\u9762\u5c06\u8bbe\u7f6e\u540e\u7aef\u4e3a TkAgg (Agg \u662f\u4e00\u4e2a C++ \u7684\u5e93\uff0c\u53ef\u4ee5\u4ece\u56fe\u50cf\u521b\u5efa\u5149\u6805\u56fe)\u3002TkAgg\u53ef\u4ee5\u5728\u6240\u9009GUI\u6846\u67b6\u4e0a\u8c03\u7528Agg\uff0c\u628a Agg \u5448\u73b0\u5728\u753b\u5e03\u4e0a\u3002\u6211\u4eec\u53ef\u4ee5\u5728Tk\u7684GUI\u4e0a\u653e\u7f6e\u4e00\u4e2a\u753b\u5e03\uff0c\u5e76\u7528 .grid()\u6765\u8c03\u6574\u5e03\u5c40\u3002 5.4\u3001\u7528treeExplore \u7684GUI\u6784\u5efa\u7684\u6a21\u578b\u6811\u793a\u4f8b\u56fe \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/treeExplore.py 6\u3001\u6811\u56de\u5f52 \u5c0f\u7ed3 \u6570\u636e\u96c6\u4e2d\u7ecf\u5e38\u5305\u542b\u4e00\u4e9b\u590d\u6742\u7684\u76f8\u5173\u5173\u7cfb\uff0c\u4f7f\u5f97\u8f93\u5165\u6570\u636e\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u5448\u73b0\u975e\u7ebf\u6027\u5173\u7cfb\u3002\u5bf9\u8fd9\u4e9b\u590d\u6742\u7684\u5173\u7cfb\u5efa\u6a21\uff0c\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u6811\u6765\u5bf9\u9884\u6d4b\u503c\u5206\u6bb5\uff0c\u5305\u62ec\u5206\u6bb5\u5e38\u6570\u6216\u5206\u6bb5\u76f4\u7ebf\u3002\u4e00\u822c\u91c7\u7528\u6811\u7ed3\u6784\u6765\u5bf9\u8fd9\u79cd\u6570\u636e\u5efa\u6a21\u3002\u76f8\u5e94\u5730\uff0c\u82e5\u53f6\u8282\u70b9\u4f7f\u7528\u7684\u6a21\u578b\u662f\u5206\u6bb5\u5e38\u6570\u5219\u79f0\u4e3a\u56de\u5f52\u6811\uff0c\u82e5\u53f6\u8282\u70b9\u4f7f\u7528\u7684\u6a21\u578b\u5e08\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u5219\u79f0\u4e3a\u6a21\u578b\u6811\u3002 CART \u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u4e8c\u5143\u6811\u5e76\u5904\u7406\u79bb\u6563\u578b\u6216\u8fde\u7eed\u578b\u6570\u636e\u7684\u5207\u5206\u3002\u82e5\u4f7f\u7528\u4e0d\u540c\u7684\u8bef\u5dee\u51c6\u5219\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7CART \u7b97\u6cd5\u6784\u5efa\u6a21\u578b\u6811\u548c\u56de\u5f52\u6811\u3002\u8be5\u7b97\u6cd5\u6784\u5efa\u51fa\u7684\u6811\u4f1a\u503e\u5411\u4e8e\u5bf9\u6570\u636e\u8fc7\u62df\u5408\u3002\u4e00\u68f5\u8fc7\u62df\u5408\u7684\u6811\u5e38\u5e38\u5341\u5206\u590d\u6742\uff0c\u526a\u679d\u6280\u672f\u7684\u51fa\u73b0\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4e24\u79cd\u526a\u679d\u65b9\u6cd5\u5206\u522b\u662f\u9884\u526a\u679d\uff08\u5728\u6811\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5c31\u8fdb\u884c\u526a\u679d\uff09\u548c\u540e\u526a\u679d\uff08\u5f53\u6811\u6784\u5efa\u5b8c\u6bd5\u518d\u8fdb\u884c\u526a\u679d\uff09\uff0c\u9884\u526a\u679d\u66f4\u6709\u6548\u4f46\u9700\u8981\u7528\u6237\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u3002 Tkinter \u662f Python \u7684\u4e00\u4e2a GUI \u5de5\u5177\u5305\u3002\u867d\u7136\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u5305\uff0c\u4f46\u5b83\u6700\u5e38\u7528\u3002\u5229\u7528 Tkinter \uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u8f7b\u677e\u677e\u7ed8\u5236\u5404\u79cd\u90e8\u4ef6\u5e76\u5b89\u6392\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4e3a Tkinter \u6784\u9020\u4e00\u4e2a\u7279\u6b8a\u7684\u90e8\u4ef6\u6765\u663e\u793a Matplotlib \u7ed8\u51fa\u7684\u56fe\u3002\u6240\u4ee5\uff0cMatplotlib \u548c Tkinter \u7684\u96c6\u6210\u53ef\u4ee5\u6784\u5efa\u51fa\u66f4\u5f3a\u5927\u7684 GUI \uff0c\u7528\u6237\u53ef\u4ee5\u4ee5\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u6765\u63a2\u7d22\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5965\u5999\u3002 \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"\u7b2c9\u7ae0_\u6811\u56de\u5f52"},{"location":"ml/9.TreeRegression/#9","text":"","title":"\u7b2c9\u7ae0 \u6811\u56de\u5f52"},{"location":"ml/9.TreeRegression/#_1","text":"\u6211\u4eec\u672c\u7ae0\u4ecb\u7ecd CART(Classification And Regression Trees\uff0c \u5206\u7c7b\u56de\u5f52\u6811) \u7684\u6811\u6784\u5efa\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u65e2\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u8fd8\u53ef\u4ee5\u7528\u4e8e\u56de\u5f52\u3002","title":"\u6811\u56de\u5f52 \u6982\u8ff0"},{"location":"ml/9.TreeRegression/#_2","text":"\u6211\u4eec\u5728\u7b2c 8 \u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u4e9b\u5f3a\u5927\u7684\u65b9\u6cd5\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6cd5\u521b\u5efa\u7684\u6a21\u578b\u9700\u8981\u62df\u5408\u6240\u6709\u7684\u6837\u672c\u70b9\uff08\u5c40\u90e8\u52a0\u6743\u7ebf\u6027\u56de\u5f52\u9664\u5916\uff09\u3002\u5f53\u6570\u636e\u62e5\u6709\u4f17\u591a\u7279\u5f81\u5e76\u4e14\u7279\u5f81\u4e4b\u95f4\u5173\u7cfb\u5341\u5206\u590d\u6742\u65f6\uff0c\u6784\u5efa\u5168\u5c40\u6a21\u578b\u7684\u60f3\u6cd5\u5c31\u663e\u5f97\u592a\u96be\u4e86\uff0c\u4e5f\u7565\u663e\u7b28\u62d9\u3002\u800c\u4e14\uff0c\u5b9e\u9645\u751f\u6d3b\u4e2d\u5f88\u591a\u95ee\u9898\u90fd\u662f\u975e\u7ebf\u6027\u7684\uff0c\u4e0d\u53ef\u80fd\u4f7f\u7528\u5168\u5c40\u7ebf\u6027\u6a21\u578b\u6765\u62df\u5408\u4efb\u4f55\u6570\u636e\u3002 \u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u96c6\u5207\u5206\u6210\u5f88\u591a\u4efd\u6613\u5efa\u6a21\u7684\u6570\u636e\uff0c\u7136\u540e\u5229\u7528\u6211\u4eec\u7684\u7ebf\u6027\u56de\u5f52\u6280\u672f\u6765\u5efa\u6a21\u3002\u5982\u679c\u9996\u6b21\u5207\u5206\u540e\u4ecd\u7136\u96be\u4ee5\u62df\u5408\u7ebf\u6027\u6a21\u578b\u5c31\u7ee7\u7eed\u5207\u5206\u3002\u5728\u8fd9\u79cd\u5207\u5206\u65b9\u5f0f\u4e0b\uff0c\u6811\u56de\u5f52\u548c\u56de\u5f52\u6cd5\u5c31\u76f8\u5f53\u6709\u7528\u3002 \u9664\u4e86\u6211\u4eec\u5728 \u7b2c3\u7ae0 \u4e2d\u4ecb\u7ecd\u7684 \u51b3\u7b56\u6811\u7b97\u6cd5\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e2a\u65b0\u7684\u53eb\u505a CART(Classification And Regression Trees, \u5206\u7c7b\u56de\u5f52\u6811) \u7684\u6811\u6784\u5efa\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u65e2\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u8fd8\u53ef\u4ee5\u7528\u4e8e\u56de\u5f52\u3002","title":"\u6811\u56de\u5f52 \u573a\u666f"},{"location":"ml/9.TreeRegression/#1","text":"","title":"1\u3001\u6811\u56de\u5f52 \u539f\u7406"},{"location":"ml/9.TreeRegression/#11","text":"\u4e3a\u6210\u529f\u6784\u5efa\u4ee5\u5206\u6bb5\u5e38\u6570\u4e3a\u53f6\u8282\u70b9\u7684\u6811\uff0c\u9700\u8981\u5ea6\u91cf\u51fa\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u7b2c3\u7ae0\u4f7f\u7528\u6811\u8fdb\u884c\u5206\u7c7b\uff0c\u4f1a\u5728\u7ed9\u5b9a\u8282\u70b9\u65f6\u8ba1\u7b97\u6570\u636e\u7684\u6df7\u4e71\u5ea6\u3002\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u8fde\u7eed\u578b\u6570\u503c\u7684\u6df7\u4e71\u5ea6\u5462\uff1f \u5728\u8fd9\u91cc\uff0c\u8ba1\u7b97\u8fde\u7eed\u578b\u6570\u503c\u7684\u6df7\u4e71\u5ea6\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u9996\u5148\u8ba1\u7b97\u6240\u6709\u6570\u636e\u7684\u5747\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u6761\u6570\u636e\u7684\u503c\u5230\u5747\u503c\u7684\u5dee\u503c\u3002\u4e3a\u4e86\u5bf9\u6b63\u8d1f\u5dee\u503c\u540c\u7b49\u770b\u5f85\uff0c\u4e00\u822c\u4f7f\u7528\u7edd\u5bf9\u503c\u6216\u5e73\u65b9\u503c\u6765\u4ee3\u66ff\u4e0a\u8ff0\u5dee\u503c\u3002 \u4e0a\u8ff0\u505a\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u524d\u9762\u4ecb\u7ecd\u8fc7\u7684\u7edf\u8ba1\u5b66\u4e2d\u5e38\u7528\u7684\u65b9\u5dee\u8ba1\u7b97\u3002\u552f\u4e00\u4e0d\u540c\u5c31\u662f\uff0c\u65b9\u5dee\u662f\u5e73\u65b9\u8bef\u5dee\u7684\u5747\u503c(\u5747\u65b9\u5dee)\uff0c\u800c\u8fd9\u91cc\u9700\u8981\u7684\u662f\u5e73\u65b9\u8bef\u5dee\u7684\u603b\u503c(\u603b\u65b9\u5dee)\u3002\u603b\u65b9\u5dee\u53ef\u4ee5\u901a\u8fc7\u5747\u65b9\u5dee\u4e58\u4ee5\u6570\u636e\u96c6\u4e2d\u6837\u672c\u70b9\u7684\u4e2a\u6570\u6765\u5f97\u5230\u3002","title":"1.1\u3001\u6811\u56de\u5f52 \u539f\u7406\u6982\u8ff0"},{"location":"ml/9.TreeRegression/#12","text":"\u6211\u4eec\u5728 \u7b2c3\u7ae0 \u4e2d\u4f7f\u7528\u7684\u6811\u6784\u5efa\u7b97\u6cd5\u662f ID3 \u3002ID3 \u7684\u505a\u6cd5\u662f\u6bcf\u6b21\u9009\u53d6\u5f53\u524d\u6700\u4f73\u7684\u7279\u5f81\u6765\u5206\u5272\u6570\u636e\uff0c\u5e76\u6309\u7167\u8be5\u7279\u5f81\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\u6765\u5207\u5206\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u7279\u5f81\u6709 4 \u79cd\u53d6\u503c\uff0c\u90a3\u4e48\u6570\u636e\u5c06\u88ab\u5207\u5206\u6210 4 \u4efd\u3002\u4e00\u65e6\u6309\u7167\u67d0\u7279\u5f81\u5207\u5206\u540e\uff0c\u8be5\u7279\u5f81\u5728\u4e4b\u540e\u7684\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u4f1a\u518d\u8d77\u4f5c\u7528\uff0c\u6240\u4ee5\u6709\u89c2\u70b9\u8ba4\u4e3a\u8fd9\u79cd\u5207\u5206\u65b9\u5f0f\u8fc7\u4e8e\u8fc5\u901f\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4e8c\u5143\u5207\u5206\u6cd5\uff0c\u5373\u6bcf\u6b21\u628a\u6570\u636e\u96c6\u5207\u5206\u6210\u4e24\u4efd\u3002\u5982\u679c\u6570\u636e\u7684\u67d0\u7279\u5f81\u503c\u7b49\u4e8e\u5207\u5206\u6240\u8981\u6c42\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u636e\u5c31\u8fdb\u5165\u6811\u7684\u5de6\u5b50\u6811\uff0c\u53cd\u4e4b\u5219\u8fdb\u5165\u6811\u7684\u53f3\u5b50\u6811\u3002 \u9664\u4e86\u5207\u5206\u8fc7\u4e8e\u8fc5\u901f\u5916\uff0c ID3 \u7b97\u6cd5\u8fd8\u5b58\u5728\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u4e0d\u80fd\u76f4\u63a5\u5904\u7406\u8fde\u7eed\u578b\u7279\u5f81\u3002\u53ea\u6709\u4e8b\u5148\u5c06\u8fde\u7eed\u578b\u7279\u5f81\u8f6c\u6362\u6210\u79bb\u6563\u578b\uff0c\u624d\u80fd\u5728 ID3 \u7b97\u6cd5\u4e2d\u4f7f\u7528\u3002\u4f46\u8fd9\u79cd\u8f6c\u6362\u8fc7\u7a0b\u4f1a\u7834\u574f\u8fde\u7eed\u578b\u53d8\u91cf\u7684\u5185\u5728\u6027\u8d28\u3002\u800c\u4f7f\u7528\u4e8c\u5143\u5207\u5206\u6cd5\u5219\u6613\u4e8e\u5bf9\u6811\u6784\u9020\u8fc7\u7a0b\u8fdb\u884c\u8c03\u6574\u4ee5\u5904\u7406\u8fde\u7eed\u578b\u7279\u5f81\u3002\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u662f: \u5982\u679c\u7279\u5f81\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u5c31\u8d70\u5de6\u5b50\u6811\uff0c\u5426\u5219\u5c31\u8d70\u53f3\u5b50\u6811\u3002\u53e6\u5916\uff0c\u4e8c\u5143\u5207\u5206\u6cd5\u4e5f\u8282\u7701\u4e86\u6811\u7684\u6784\u5efa\u65f6\u95f4\uff0c\u4f46\u8fd9\u70b9\u610f\u4e49\u4e5f\u4e0d\u662f\u7279\u522b\u5927\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6811\u6784\u5efa\u4e00\u822c\u662f\u79bb\u7ebf\u5b8c\u6210\uff0c\u65f6\u95f4\u5e76\u975e\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u7684\u56e0\u7d20\u3002 CART \u662f\u5341\u5206\u8457\u540d\u4e14\u5e7f\u6cdb\u8bb0\u8f7d\u7684\u6811\u6784\u5efa\u7b97\u6cd5\uff0c\u5b83\u4f7f\u7528\u4e8c\u5143\u5207\u5206\u6765\u5904\u7406\u8fde\u7eed\u578b\u53d8\u91cf\u3002\u5bf9 CART \u7a0d\u4f5c\u4fee\u6539\u5c31\u53ef\u4ee5\u5904\u7406\u56de\u5f52\u95ee\u9898\u3002\u7b2c 3 \u7ae0\u4e2d\u4f7f\u7528\u9999\u519c\u71b5\u6765\u5ea6\u91cf\u96c6\u5408\u7684\u65e0\u7ec4\u7ec7\u7a0b\u5ea6\u3002\u5982\u679c\u9009\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u4ee3\u66ff\u9999\u519c\u71b5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6811\u6784\u5efa\u7b97\u6cd5\u6765\u5b8c\u6210\u56de\u5f52\u3002 \u56de\u5f52\u6811\u4e0e\u5206\u7c7b\u6811\u7684\u601d\u8def\u7c7b\u4f3c\uff0c\u4f46\u662f\u53f6\u8282\u70b9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u79bb\u6563\u578b\uff0c\u800c\u662f\u8fde\u7eed\u578b\u3002","title":"1.2\u3001\u6811\u6784\u5efa\u7b97\u6cd5 \u6bd4\u8f83"},{"location":"ml/9.TreeRegression/#121","text":"\u8fd8\u6709\u4e00\u70b9\u8981\u8bf4\u660e\uff0c\u6784\u5efa\u51b3\u7b56\u6811\u7b97\u6cd5\uff0c\u5e38\u7528\u5230\u7684\u662f\u4e09\u4e2a\u65b9\u6cd5: ID3, C4.5, CART. \u4e09\u79cd\u65b9\u6cd5\u533a\u522b\u662f\u5212\u5206\u6811\u7684\u5206\u652f\u7684\u65b9\u5f0f: 1. ID3 \u662f\u4fe1\u606f\u589e\u76ca\u5206\u652f 2. C4.5 \u662f\u4fe1\u606f\u589e\u76ca\u7387\u5206\u652f 3. CART \u505a\u5206\u7c7b\u5de5\u4f5c\u65f6\uff0c\u91c7\u7528 GINI \u503c\u4f5c\u4e3a\u8282\u70b9\u5206\u88c2\u7684\u4f9d\u636e\uff1b\u56de\u5f52\u65f6\uff0c\u91c7\u7528\u6837\u672c\u7684\u6700\u5c0f\u65b9\u5dee\u4f5c\u4e3a\u8282\u70b9\u7684\u5206\u88c2\u4f9d\u636e\u3002 \u5de5\u7a0b\u4e0a\u603b\u7684\u6765\u8bf4: CART \u548c C4.5 \u4e4b\u95f4\u4e3b\u8981\u5dee\u5f02\u5728\u4e8e\u5206\u7c7b\u7ed3\u679c\u4e0a\uff0cCART \u53ef\u4ee5\u56de\u5f52\u5206\u6790\u4e5f\u53ef\u4ee5\u5206\u7c7b\uff0cC4.5 \u53ea\u80fd\u505a\u5206\u7c7b\uff1bC4.5 \u5b50\u8282\u70b9\u662f\u53ef\u4ee5\u591a\u5206\u7684\uff0c\u800c CART \u662f\u65e0\u6570\u4e2a\u4e8c\u53c9\u5b50\u8282\u70b9\uff1b \u4ee5\u6b64\u62d3\u5c55\u51fa\u4ee5 CART \u4e3a\u57fa\u7840\u7684 \u201c\u6811\u7fa4\u201d Random forest \uff0c \u4ee5 \u56de\u5f52\u6811 \u4e3a\u57fa\u7840\u7684 \u201c\u6811\u7fa4\u201d GBDT \u3002","title":"1.2.1\u3001\u9644\u52a0 \u5404\u5e38\u89c1\u6811\u6784\u9020\u7b97\u6cd5\u7684\u5212\u5206\u5206\u652f\u65b9\u5f0f"},{"location":"ml/9.TreeRegression/#13","text":"1\u3001\u627e\u5230\u6570\u636e\u96c6\u5207\u5206\u7684\u6700\u4f73\u4f4d\u7f6e\uff0c\u51fd\u6570 chooseBestSplit() \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b: \u5bf9\u6bcf\u4e2a\u7279\u5f81: \u5bf9\u6bcf\u4e2a\u7279\u5f81\u503c: \u5c06\u6570\u636e\u96c6\u5207\u5206\u6210\u4e24\u4efd\uff08\u5c0f\u4e8e\u8be5\u7279\u5f81\u503c\u7684\u6570\u636e\u6837\u672c\u653e\u5728\u5de6\u5b50\u6811\uff0c\u5426\u5219\u653e\u5728\u53f3\u5b50\u6811\uff09 \u8ba1\u7b97\u5207\u5206\u7684\u8bef\u5dee \u5982\u679c\u5f53\u524d\u8bef\u5dee\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u8bef\u5dee\uff0c\u90a3\u4e48\u5c06\u5f53\u524d\u5207\u5206\u8bbe\u5b9a\u4e3a\u6700\u4f73\u5207\u5206\u5e76\u66f4\u65b0\u6700\u5c0f\u8bef\u5dee \u8fd4\u56de\u6700\u4f73\u5207\u5206\u7684\u7279\u5f81\u548c\u9608\u503c 2\u3001\u6811\u6784\u5efa\u7b97\u6cd5\uff0c\u51fd\u6570 createTree() \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b: \u627e\u5230\u6700\u4f73\u7684\u5f85\u5207\u5206\u7279\u5f81: \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u80fd\u518d\u5206\uff0c\u5c06\u8be5\u8282\u70b9\u5b58\u4e3a\u53f6\u8282\u70b9 \u6267\u884c\u4e8c\u5143\u5207\u5206 \u5728\u53f3\u5b50\u6811\u8c03\u7528 createTree() \u65b9\u6cd5 \u5728\u5de6\u5b50\u6811\u8c03\u7528 createTree() \u65b9\u6cd5","title":"1.3\u3001\u6811\u56de\u5f52 \u5de5\u4f5c\u539f\u7406"},{"location":"ml/9.TreeRegression/#14","text":"(1) \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e\u3002 (2) \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e\u3002 (3) \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811\u3002 (4) \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u8d39\u5728\u53f6\u8282\u70b9\u6811\u6a21\u578b\u7684\u6784\u5efa\u4e0a\u3002 (5) \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c\u3002 (6) \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u5904\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5\u3002","title":"1.4\u3001\u6811\u56de\u5f52 \u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/9.TreeRegression/#15","text":"\u4f18\u70b9\uff1a\u53ef\u4ee5\u5bf9\u590d\u6742\u548c\u975e\u7ebf\u6027\u7684\u6570\u636e\u5efa\u6a21\u3002 \u7f3a\u70b9\uff1a\u7ed3\u679c\u4e0d\u6613\u7406\u89e3\u3002 \u9002\u7528\u6570\u636e\u7c7b\u578b\uff1a\u6570\u503c\u578b\u548c\u6807\u79f0\u578b\u6570\u636e\u3002","title":"1.5\u3001\u6811\u56de\u5f52 \u7b97\u6cd5\u7279\u70b9"},{"location":"ml/9.TreeRegression/#16","text":"","title":"1.6\u3001\u56de\u5f52\u6811 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/9.TreeRegression/#161","text":"\u5728\u7b80\u5355\u6570\u636e\u96c6\u4e0a\u751f\u6210\u4e00\u68f5\u56de\u5f52\u6811\u3002","title":"1.6.1\u3001\u9879\u76ee\u6982\u8ff0"},{"location":"ml/9.TreeRegression/#162","text":"\u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u8d39\u5728\u53f6\u8282\u70b9\u6811\u6a21\u578b\u7684\u6784\u5efa\u4e0a \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 \u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e data1.txt \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b: 0.036098 0.155096 0.993349 1.077553 0.530897 0.893462 0.712386 0.564858 0.343554 -0.371700 0.098016 -0.332760 \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u57fa\u4e8e CART \u7b97\u6cd5\u6784\u5efa\u56de\u5f52\u6811\u7684\u7b80\u5355\u6570\u636e\u96c6 \u7528\u4e8e\u6d4b\u8bd5\u56de\u5f52\u6811\u7684\u5206\u6bb5\u5e38\u6570\u6570\u636e\u96c6 \u8bad\u7ec3\u7b97\u6cd5: \u6784\u9020\u6811\u7684\u6570\u636e\u7ed3\u6784 def binSplitDataSet(dataSet, feature, value): \"\"\"binSplitDataSet(\u5c06\u6570\u636e\u96c6\uff0c\u6309\u7167feature\u5217\u7684value\u8fdb\u884c \u4e8c\u5143\u5207\u5206) Description\uff1a\u5728\u7ed9\u5b9a\u7279\u5f81\u548c\u7279\u5f81\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u51fd\u6570\u901a\u8fc7\u6570\u7ec4\u8fc7\u6ee4\u65b9\u5f0f\u5c06\u4e0a\u8ff0\u6570\u636e\u96c6\u5408\u5207\u5206\u5f97\u5230\u4e24\u4e2a\u5b50\u96c6\u5e76\u8fd4\u56de\u3002 Args: dataMat \u6570\u636e\u96c6 feature \u5f85\u5207\u5206\u7684\u7279\u5f81\u5217 value \u7279\u5f81\u5217\u8981\u6bd4\u8f83\u7684\u503c Returns: mat0 \u5c0f\u4e8e\u7b49\u4e8e value \u7684\u6570\u636e\u96c6\u5728\u5de6\u8fb9 mat1 \u5927\u4e8e value \u7684\u6570\u636e\u96c6\u5728\u53f3\u8fb9 Raises: \"\"\" # # \u6d4b\u8bd5\u6848\u4f8b # print 'dataSet[:, feature]=', dataSet[:, feature] # print 'nonzero(dataSet[:, feature] > value)[0]=', nonzero(dataSet[:, feature] > value)[0] # print 'nonzero(dataSet[:, feature] <= value)[0]=', nonzero(dataSet[:, feature] <= value)[0] # dataSet[:, feature] \u53d6\u53bb\u6bcf\u4e00\u884c\u4e2d\uff0c\u7b2c1\u5217\u7684\u503c(\u4ece0\u5f00\u59cb\u7b97) # nonzero(dataSet[:, feature] > value) \u8fd4\u56de\u7ed3\u679c\u4e3atrue\u884c\u7684index\u4e0b\u6807 mat0 = dataSet[nonzero(dataSet[:, feature] <= value)[0], :] mat1 = dataSet[nonzero(dataSet[:, feature] > value)[0], :] return mat0, mat1 # 1.\u7528\u6700\u4f73\u65b9\u5f0f\u5207\u5206\u6570\u636e\u96c6 # 2.\u751f\u6210\u76f8\u5e94\u7684\u53f6\u8282\u70b9 def chooseBestSplit(dataSet, leafType=regLeaf, errType=regErr, ops=(1, 4)): \"\"\"chooseBestSplit(\u7528\u6700\u4f73\u65b9\u5f0f\u5207\u5206\u6570\u636e\u96c6 \u548c \u751f\u6210\u76f8\u5e94\u7684\u53f6\u8282\u70b9) Args: dataSet \u52a0\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6 leafType \u5efa\u7acb\u53f6\u5b50\u70b9\u7684\u51fd\u6570 errType \u8bef\u5dee\u8ba1\u7b97\u51fd\u6570(\u6c42\u603b\u65b9\u5dee) ops [\u5bb9\u8bb8\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5207\u5206\u7684\u6700\u5c11\u6837\u672c\u6570]\u3002 Returns: bestIndex feature\u7684index\u5750\u6807 bestValue \u5207\u5206\u7684\u6700\u4f18\u503c Raises: \"\"\" # ops=(1,4)\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u51b3\u5b9a\u4e86\u51b3\u7b56\u6811\u5212\u5206\u505c\u6b62\u7684threshold\u503c\uff0c\u88ab\u79f0\u4e3a\u9884\u526a\u679d\uff08prepruning\uff09\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u7528\u4e8e\u63a7\u5236\u51fd\u6570\u7684\u505c\u6b62\u65f6\u673a\u3002 # \u4e4b\u6240\u4ee5\u8fd9\u6837\u8bf4\uff0c\u662f\u56e0\u4e3a\u5b83\u9632\u6b62\u51b3\u7b56\u6811\u7684\u8fc7\u62df\u5408\uff0c\u6240\u4ee5\u5f53\u8bef\u5dee\u7684\u4e0b\u964d\u503c\u5c0f\u4e8etolS\uff0c\u6216\u5212\u5206\u540e\u7684\u96c6\u5408size\u5c0f\u4e8etolN\u65f6\uff0c\u9009\u62e9\u505c\u6b62\u7ee7\u7eed\u5212\u5206\u3002 # \u6700\u5c0f\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5212\u5206\u540e\u7684\u8bef\u5dee\u51cf\u5c0f\u5c0f\u4e8e\u8fd9\u4e2a\u5dee\u503c\uff0c\u5c31\u4e0d\u7528\u7ee7\u7eed\u5212\u5206 tolS = ops[0] # \u5212\u5206\u6700\u5c0f size \u5c0f\u4e8e\uff0c\u5c31\u4e0d\u7ee7\u7eed\u5212\u5206\u4e86 tolN = ops[1] # \u5982\u679c\u7ed3\u679c\u96c6(\u6700\u540e\u4e00\u5217\u4e3a1\u4e2a\u53d8\u91cf)\uff0c\u5c31\u8fd4\u56de\u9000\u51fa # .T \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u8f6c\u7f6e # .tolist()[0] \u8f6c\u5316\u4e3a\u6570\u7ec4\u5e76\u53d6\u7b2c0\u5217 if len(set(dataSet[:, -1].T.tolist()[0])) == 1: # \u5982\u679c\u96c6\u5408size\u4e3a1\uff0c\u4e0d\u7528\u7ee7\u7eed\u5212\u5206\u3002 # exit cond 1 return None, leafType(dataSet) # \u8ba1\u7b97\u884c\u5217\u503c m, n = shape(dataSet) # \u65e0\u5206\u7c7b\u8bef\u5dee\u7684\u603b\u65b9\u5dee\u548c # the choice of the best feature is driven by Reduction in RSS error from mean S = errType(dataSet) # inf \u6b63\u65e0\u7a77\u5927 bestS, bestIndex, bestValue = inf, 0, 0 # \u5faa\u73af\u5904\u7406\u6bcf\u4e00\u5217\u5bf9\u5e94\u7684feature\u503c for featIndex in range(n-1): # \u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81 # [0]\u8868\u793a\u8fd9\u4e00\u5217\u7684[\u6240\u6709\u884c]\uff0c\u4e0d\u8981[0]\u5c31\u662f\u4e00\u4e2aarray[[\u6240\u6709\u884c]] for splitVal in set(dataSet[:, featIndex].T.tolist()[0]): # \u5bf9\u8be5\u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u7ec4\u5185\u7684\u6210\u5458\u7684val\u503c\u8fdb\u884c \u4e8c\u5143\u5207\u5206 mat0, mat1 = binSplitDataSet(dataSet, featIndex, splitVal) # \u5224\u65ad\u4e8c\u5143\u5207\u5206\u7684\u65b9\u5f0f\u7684\u5143\u7d20\u6570\u91cf\u662f\u5426\u7b26\u5408\u9884\u671f if (shape(mat0)[0] < tolN) or (shape(mat1)[0] < tolN): continue newS = errType(mat0) + errType(mat1) # \u5982\u679c\u4e8c\u5143\u5207\u5206\uff0c\u7b97\u51fa\u6765\u7684\u8bef\u5dee\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u5207\u5206\u70b9\uff0c\u5e76\u8bb0\u5f55\u6700\u5c0f\u8bef\u5dee # \u5982\u679c\u5212\u5206\u540e\u8bef\u5dee\u5c0f\u4e8e bestS\uff0c\u5219\u8bf4\u660e\u627e\u5230\u4e86\u65b0\u7684bestS if newS < bestS: bestIndex = featIndex bestValue = splitVal bestS = newS # \u5224\u65ad\u4e8c\u5143\u5207\u5206\u7684\u65b9\u5f0f\u7684\u5143\u7d20\u8bef\u5dee\u662f\u5426\u7b26\u5408\u9884\u671f # if the decrease (S-bestS) is less than a threshold don't do the split if (S - bestS) < tolS: return None, leafType(dataSet) mat0, mat1 = binSplitDataSet(dataSet, bestIndex, bestValue) # \u5bf9\u6574\u4f53\u7684\u6210\u5458\u8fdb\u884c\u5224\u65ad\uff0c\u662f\u5426\u7b26\u5408\u9884\u671f # \u5982\u679c\u96c6\u5408\u7684 size \u5c0f\u4e8e tolN if (shape(mat0)[0] < tolN) or (shape(mat1)[0] < tolN): # \u5f53\u6700\u4f73\u5212\u5206\u540e\uff0c\u96c6\u5408\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u5212\u5206\uff0c\u4ea7\u751f\u53f6\u8282\u70b9 return None, leafType(dataSet) return bestIndex, bestValue # assume dataSet is NumPy Mat so we can array filtering # \u5047\u8bbe dataSet \u662f NumPy Mat \u7c7b\u578b\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c array \u8fc7\u6ee4 def createTree(dataSet, leafType=regLeaf, errType=regErr, ops=(1, 4)): \"\"\"createTree(\u83b7\u53d6\u56de\u5f52\u6811) Description\uff1a\u9012\u5f52\u51fd\u6570\uff1a\u5982\u679c\u6784\u5efa\u7684\u662f\u56de\u5f52\u6811\uff0c\u8be5\u6a21\u578b\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u5982\u679c\u662f\u6a21\u578b\u6811\uff0c\u5176\u6a21\u578b\u5e08\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u3002 Args: dataSet \u52a0\u8f7d\u7684\u539f\u59cb\u6570\u636e\u96c6 leafType \u5efa\u7acb\u53f6\u5b50\u70b9\u7684\u51fd\u6570 errType \u8bef\u5dee\u8ba1\u7b97\u51fd\u6570 ops=(1, 4) [\u5bb9\u8bb8\u8bef\u5dee\u4e0b\u964d\u503c\uff0c\u5207\u5206\u7684\u6700\u5c11\u6837\u672c\u6570] Returns: retTree \u51b3\u7b56\u6811\u6700\u540e\u7684\u7ed3\u679c \"\"\" # \u9009\u62e9\u6700\u597d\u7684\u5207\u5206\u65b9\u5f0f\uff1a feature\u7d22\u5f15\u503c\uff0c\u6700\u4f18\u5207\u5206\u503c # choose the best split feat, val = chooseBestSplit(dataSet, leafType, errType, ops) # if the splitting hit a stop condition return val # \u5982\u679c splitting \u8fbe\u5230\u4e00\u4e2a\u505c\u6b62\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd4\u56de val if feat is None: return val retTree = {} retTree['spInd'] = feat retTree['spVal'] = val # \u5927\u4e8e\u5728\u53f3\u8fb9\uff0c\u5c0f\u4e8e\u5728\u5de6\u8fb9\uff0c\u5206\u4e3a2\u4e2a\u6570\u636e\u96c6 lSet, rSet = binSplitDataSet(dataSet, feat, val) # \u9012\u5f52\u7684\u8fdb\u884c\u8c03\u7528\uff0c\u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u9012\u5f52\u751f\u6210\u6811 retTree['left'] = createTree(lSet, leafType, errType, ops) retTree['right'] = createTree(rSet, leafType, errType, ops) return retTree \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5","title":"1.6.2\u3001\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/9.TreeRegression/#2","text":"\u4e00\u68f5\u6811\u5982\u679c\u8282\u70b9\u8fc7\u591a\uff0c\u8868\u660e\u8be5\u6a21\u578b\u53ef\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u4e86 \u201c\u8fc7\u62df\u5408\u201d\u3002 \u901a\u8fc7\u964d\u4f4e\u51b3\u7b56\u6811\u7684\u590d\u6742\u5ea6\u6765\u907f\u514d\u8fc7\u62df\u5408\u7684\u8fc7\u7a0b\u79f0\u4e3a \u526a\u679d\uff08pruning\uff09 \u3002\u5728\u51fd\u6570 chooseBestSplit() \u4e2d\u63d0\u524d\u7ec8\u6b62\u6761\u4ef6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u8fdb\u884c\u4e00\u79cd\u6240\u8c13\u7684 \u9884\u526a\u679d\uff08prepruning\uff09 \u64cd\u4f5c\u3002\u53e6\u4e00\u4e2a\u5f62\u5f0f\u7684\u526a\u679d\u9700\u8981\u4f7f\u7528\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\uff0c\u79f0\u4f5c \u540e\u526a\u679d\uff08postpruning\uff09 \u3002","title":"2\u3001\u6811\u526a\u679d"},{"location":"ml/9.TreeRegression/#21prepruning","text":"\u987e\u540d\u601d\u4e49\uff0c\u9884\u526a\u679d\u5c31\u662f\u53ca\u65e9\u7684\u505c\u6b62\u6811\u589e\u957f\uff0c\u5728\u6784\u9020\u51b3\u7b56\u6811\u7684\u540c\u65f6\u8fdb\u884c\u526a\u679d\u3002 \u6240\u6709\u51b3\u7b56\u6811\u7684\u6784\u5efa\u65b9\u6cd5\uff0c\u90fd\u662f\u5728\u65e0\u6cd5\u8fdb\u4e00\u6b65\u964d\u4f4e\u71b5\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u505c\u6b62\u521b\u5efa\u5206\u652f\u7684\u8fc7\u7a0b\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u62df\u5408\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c\uff0c\u71b5\u51cf\u5c0f\u7684\u6570\u91cf\u5c0f\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u5373\u4f7f\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u964d\u4f4e\u71b5\uff0c\u4e5f\u505c\u6b62\u7ee7\u7eed\u521b\u5efa\u5206\u652f\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u5b9e\u9645\u4e2d\u7684\u6548\u679c\u5e76\u4e0d\u597d\u3002","title":"2.1\u3001\u9884\u526a\u679d(prepruning)"},{"location":"ml/9.TreeRegression/#22postpruning","text":"\u51b3\u7b56\u6811\u6784\u9020\u5b8c\u6210\u540e\u8fdb\u884c\u526a\u679d\u3002\u526a\u679d\u7684\u8fc7\u7a0b\u662f\u5bf9\u62e5\u6709\u540c\u6837\u7236\u8282\u70b9\u7684\u4e00\u7ec4\u8282\u70b9\u8fdb\u884c\u68c0\u67e5\uff0c\u5224\u65ad\u5982\u679c\u5c06\u5176\u5408\u5e76\uff0c\u71b5\u7684\u589e\u52a0\u91cf\u662f\u5426\u5c0f\u4e8e\u67d0\u4e00\u9608\u503c\u3002\u5982\u679c\u786e\u5b9e\u5c0f\uff0c\u5219\u8fd9\u4e00\u7ec4\u8282\u70b9\u53ef\u4ee5\u5408\u5e76\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u5408\u5e76\u4e5f\u88ab\u79f0\u4f5c \u584c\u9677\u5904\u7406 \uff0c\u5728\u56de\u5f52\u6811\u4e2d\u4e00\u822c\u91c7\u7528\u53d6\u9700\u8981\u5408\u5e76\u7684\u6240\u6709\u5b50\u6811\u7684\u5e73\u5747\u503c\u3002\u540e\u526a\u679d\u662f\u76ee\u524d\u6700\u666e\u904d\u7684\u505a\u6cd5\u3002 \u540e\u526a\u679d prune() \u7684\u4f2a\u4ee3\u7801\u5982\u4e0b: \u57fa\u4e8e\u5df2\u6709\u7684\u6811\u5207\u5206\u6d4b\u8bd5\u6570\u636e: \u5982\u679c\u5b58\u5728\u4efb\u4e00\u5b50\u96c6\u662f\u4e00\u68f5\u6811\uff0c\u5219\u5728\u8be5\u5b50\u96c6\u9012\u5f52\u526a\u679d\u8fc7\u7a0b \u8ba1\u7b97\u5c06\u5f53\u524d\u4e24\u4e2a\u53f6\u8282\u70b9\u5408\u5e76\u540e\u7684\u8bef\u5dee \u8ba1\u7b97\u4e0d\u5408\u5e76\u7684\u8bef\u5dee \u5982\u679c\u5408\u5e76\u4f1a\u964d\u4f4e\u8bef\u5dee\u7684\u8bdd\uff0c\u5c31\u5c06\u53f6\u8282\u70b9\u5408\u5e76","title":"2.2\u3001\u540e\u526a\u679d(postpruning)"},{"location":"ml/9.TreeRegression/#23","text":"\u56de\u5f52\u6811\u526a\u679d\u51fd\u6570 # \u5224\u65ad\u8282\u70b9\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178 def isTree(obj): \"\"\" Desc: \u6d4b\u8bd5\u8f93\u5165\u53d8\u91cf\u662f\u5426\u662f\u4e00\u68f5\u6811,\u5373\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178 Args: obj -- \u8f93\u5165\u53d8\u91cf Returns: \u8fd4\u56de\u5e03\u5c14\u7c7b\u578b\u7684\u7ed3\u679c\u3002\u5982\u679c obj \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56de false \"\"\" return (type(obj).__name__ == 'dict') # \u8ba1\u7b97\u5de6\u53f3\u679d\u4e2b\u7684\u5747\u503c def getMean(tree): \"\"\" Desc: \u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\u6811\u76f4\u5230\u53f6\u8282\u70b9\u4e3a\u6b62\uff0c\u5982\u679c\u627e\u5230\u4e24\u4e2a\u53f6\u8282\u70b9\u5219\u8ba1\u7b97\u5b83\u4eec\u7684\u5e73\u5747\u503c\u3002 \u5bf9 tree \u8fdb\u884c\u584c\u9677\u5904\u7406\uff0c\u5373\u8fd4\u56de\u6811\u5e73\u5747\u503c\u3002 Args: tree -- \u8f93\u5165\u7684\u6811 Returns: \u8fd4\u56de tree \u8282\u70b9\u7684\u5e73\u5747\u503c \"\"\" if isTree(tree['right']): tree['right'] = getMean(tree['right']) if isTree(tree['left']): tree['left'] = getMean(tree['left']) return (tree['left']+tree['right'])/2.0 # \u68c0\u67e5\u662f\u5426\u9002\u5408\u5408\u5e76\u5206\u679d def prune(tree, testData): \"\"\" Desc: \u4ece\u4e0a\u800c\u4e0b\u627e\u5230\u53f6\u8282\u70b9\uff0c\u7528\u6d4b\u8bd5\u6570\u636e\u96c6\u6765\u5224\u65ad\u5c06\u8fd9\u4e9b\u53f6\u8282\u70b9\u5408\u5e76\u662f\u5426\u80fd\u964d\u4f4e\u6d4b\u8bd5\u8bef\u5dee Args: tree -- \u5f85\u526a\u679d\u7684\u6811 testData -- \u526a\u679d\u6240\u9700\u8981\u7684\u6d4b\u8bd5\u6570\u636e testData Returns: tree -- \u526a\u679d\u5b8c\u6210\u7684\u6811 \"\"\" # \u5224\u65ad\u662f\u5426\u6d4b\u8bd5\u6570\u636e\u96c6\u6ca1\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u76f4\u63a5\u8fd4\u56detree\u672c\u8eab\u7684\u5747\u503c if shape(testData)[0] == 0: return getMean(tree) # \u5224\u65ad\u5206\u679d\u662f\u5426\u662fdict\u5b57\u5178\uff0c\u5982\u679c\u662f\u5c31\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u8fdb\u884c\u5207\u5206 if (isTree(tree['right']) or isTree(tree['left'])): lSet, rSet = binSplitDataSet(testData, tree['spInd'], tree['spVal']) # \u5982\u679c\u662f\u5de6\u8fb9\u5206\u679d\u662f\u5b57\u5178\uff0c\u5c31\u4f20\u5165\u5de6\u8fb9\u7684\u6570\u636e\u96c6\u548c\u5de6\u8fb9\u7684\u5206\u679d\uff0c\u8fdb\u884c\u9012\u5f52 if isTree(tree['left']): tree['left'] = prune(tree['left'], lSet) # \u5982\u679c\u662f\u53f3\u8fb9\u5206\u679d\u662f\u5b57\u5178\uff0c\u5c31\u4f20\u5165\u5de6\u8fb9\u7684\u6570\u636e\u96c6\u548c\u5de6\u8fb9\u7684\u5206\u679d\uff0c\u8fdb\u884c\u9012\u5f52 if isTree(tree['right']): tree['right'] = prune(tree['right'], rSet) # \u4e0a\u9762\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u672c\u8d28\u4e0a\u5c31\u662f\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6309\u7167\u8bad\u7ec3\u5b8c\u6210\u7684\u6811\u62c6\u5206\u597d\uff0c\u5bf9\u5e94\u7684\u503c\u653e\u5230\u5bf9\u5e94\u7684\u8282\u70b9 # \u5982\u679c\u5de6\u53f3\u4e24\u8fb9\u540c\u65f6\u90fd\u4e0d\u662fdict\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u90fd\u662f\u53f6\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u5b50\u6811\u4e86\uff0c\u90a3\u4e48\u5206\u5272\u6d4b\u8bd5\u6570\u636e\u96c6\u3002 # 1. \u5982\u679c\u6b63\u786e # * \u90a3\u4e48\u8ba1\u7b97\u4e00\u4e0b\u603b\u65b9\u5dee \u548c \u8be5\u7ed3\u679c\u96c6\u7684\u672c\u8eab\u4e0d\u5206\u679d\u7684\u603b\u65b9\u5dee\u6bd4\u8f83 # * \u5982\u679c \u5408\u5e76\u7684\u603b\u65b9\u5dee < \u4e0d\u5408\u5e76\u7684\u603b\u65b9\u5dee\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u5408\u5e76 # \u6ce8\u610f\u8fd4\u56de\u7684\u7ed3\u679c\uff1a \u5982\u679c\u53ef\u4ee5\u5408\u5e76\uff0c\u539f\u6765\u7684dict\u5c31\u53d8\u4e3a\u4e86 \u6570\u503c if not isTree(tree['left']) and not isTree(tree['right']): lSet, rSet = binSplitDataSet(testData, tree['spInd'], tree['spVal']) # power(x, y)\u8868\u793ax\u7684y\u6b21\u65b9 errorNoMerge = sum(power(lSet[:, -1] - tree['left'], 2)) + sum(power(rSet[:, -1] - tree['right'], 2)) treeMean = (tree['left'] + tree['right'])/2.0 errorMerge = sum(power(testData[:, -1] - treeMean, 2)) # \u5982\u679c \u5408\u5e76\u7684\u603b\u65b9\u5dee < \u4e0d\u5408\u5e76\u7684\u603b\u65b9\u5dee\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u5408\u5e76 if errorMerge < errorNoMerge: print \"merging\" return treeMean else: return tree else: return tree \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py","title":"2.3\u3001\u526a\u679d \u4ee3\u7801"},{"location":"ml/9.TreeRegression/#3","text":"","title":"3\u3001\u6a21\u578b\u6811"},{"location":"ml/9.TreeRegression/#31","text":"\u7528\u6811\u6765\u5bf9\u6570\u636e\u5efa\u6a21\uff0c\u9664\u4e86\u628a\u53f6\u8282\u70b9\u7b80\u5355\u5730\u8bbe\u5b9a\u4e3a\u5e38\u6570\u503c\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u53f6\u8282\u70b9\u8bbe\u5b9a\u4e3a\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\uff0c\u8fd9\u91cc\u6240\u8c13\u7684 \u5206\u6bb5\u7ebf\u6027\uff08piecewise linear\uff09 \u662f\u6307\u6a21\u578b\u7531\u591a\u4e2a\u7ebf\u6027\u7247\u6bb5\u7ec4\u6210\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u56fe 9-4 \u4e2d\u7684\u6570\u636e\uff0c\u5982\u679c\u4f7f\u7528\u4e24\u6761\u76f4\u7ebf\u62df\u5408\u662f\u5426\u6bd4\u4f7f\u7528\u4e00\u7ec4\u5e38\u6570\u6765\u5efa\u6a21\u597d\u5462\uff1f\u7b54\u6848\u663e\u800c\u6613\u89c1\u3002\u53ef\u4ee5\u8bbe\u8ba1\u4e24\u6761\u5206\u522b\u4ece 0.0~0.3\u3001\u4ece 0.3~1.0 \u7684\u76f4\u7ebf\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u7ebf\u6027\u6a21\u578b\u3002\u56e0\u4e3a\u6570\u636e\u96c6\u91cc\u7684\u4e00\u90e8\u5206\u6570\u636e\uff080.0~0.3\uff09\u4ee5\u67d0\u4e2a\u7ebf\u6027\u6a21\u578b\u5efa\u6a21\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u6570\u636e\uff080.3~1.0\uff09\u5219\u4ee5\u53e6\u4e00\u4e2a\u7ebf\u6027\u6a21\u578b\u5efa\u6a21\uff0c\u56e0\u6b64\u6211\u4eec\u8bf4\u91c7\u7528\u4e86\u6240\u8c13\u7684\u5206\u6bb5\u7ebf\u6027\u6a21\u578b\u3002 \u51b3\u7b56\u6811\u76f8\u6bd4\u4e8e\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u4f18\u52bf\u4e4b\u4e00\u5728\u4e8e\u7ed3\u679c\u66f4\u6613\u7406\u89e3\u3002\u5f88\u663e\u7136\uff0c\u4e24\u6761\u76f4\u7ebf\u6bd4\u5f88\u591a\u8282\u70b9\u7ec4\u6210\u4e00\u68f5\u5927\u6811\u66f4\u5bb9\u6613\u89e3\u91ca\u3002\u6a21\u578b\u6811\u7684\u53ef\u89e3\u91ca\u6027\u662f\u5b83\u4f18\u4e8e\u56de\u5f52\u6811\u7684\u7279\u70b9\u4e4b\u4e00\u3002\u53e6\u5916\uff0c\u6a21\u578b\u6811\u4e5f\u5177\u6709\u66f4\u9ad8\u7684\u9884\u6d4b\u51c6\u786e\u5ea6\u3002 \u5c06\u4e4b\u524d\u7684\u56de\u5f52\u6811\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5728\u53f6\u8282\u70b9\u751f\u6210\u7ebf\u6027\u6a21\u578b\u800c\u4e0d\u662f\u5e38\u6570\u503c\u3002\u4e0b\u9762\u5c06\u5229\u7528\u6811\u751f\u6210\u7b97\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u5212\u5206\uff0c\u4e14\u6bcf\u4efd\u5207\u5206\u6570\u636e\u90fd\u80fd\u5f88\u5bb9\u6613\u88ab\u7ebf\u6027\u6a21\u578b\u6240\u8868\u793a\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u8bef\u5dee\u7684\u8ba1\u7b97\u3002 \u90a3\u4e48\u4e3a\u4e86\u627e\u5230\u6700\u4f73\u5207\u5206\uff0c\u5e94\u8be5\u600e\u6837\u8ba1\u7b97\u8bef\u5dee\u5462\uff1f\u524d\u9762\u7528\u4e8e\u56de\u5f52\u6811\u7684\u8bef\u5dee\u8ba1\u7b97\u65b9\u6cd5\u8fd9\u91cc\u4e0d\u80fd\u518d\u7528\u3002\u7a0d\u52a0\u53d8\u5316\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\uff0c\u5e94\u8be5\u5148\u7528\u6a21\u578b\u6765\u5bf9\u5b83\u8fdb\u884c\u62df\u5408\uff0c\u7136\u540e\u8ba1\u7b97\u771f\u5b9e\u7684\u76ee\u6807\u503c\u4e0e\u6a21\u578b\u9884\u6d4b\u503c\u95f4\u7684\u5dee\u503c\u3002\u6700\u540e\u5c06\u8fd9\u4e9b\u5dee\u503c\u7684\u5e73\u65b9\u6c42\u548c\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u8bef\u5dee\u3002","title":"3.1\u3001\u6a21\u578b\u6811 \u7b80\u4ecb"},{"location":"ml/9.TreeRegression/#32","text":"\u6a21\u578b\u6811\u7684\u53f6\u8282\u70b9\u751f\u6210\u51fd\u6570 # \u5f97\u5230\u6a21\u578b\u7684ws\u7cfb\u6570\uff1af(x) = x0 + x1*featrue1+ x3*featrue2 ... # create linear model and return coeficients def modelLeaf(dataSet): \"\"\" Desc: \u5f53\u6570\u636e\u4e0d\u518d\u9700\u8981\u5207\u5206\u7684\u65f6\u5019\uff0c\u751f\u6210\u53f6\u8282\u70b9\u7684\u6a21\u578b\u3002 Args: dataSet -- \u8f93\u5165\u6570\u636e\u96c6 Returns: \u8c03\u7528 linearSolve \u51fd\u6570\uff0c\u8fd4\u56de\u5f97\u5230\u7684 \u56de\u5f52\u7cfb\u6570ws \"\"\" ws, X, Y = linearSolve(dataSet) return ws # \u8ba1\u7b97\u7ebf\u6027\u6a21\u578b\u7684\u8bef\u5dee\u503c def modelErr(dataSet): \"\"\" Desc: \u5728\u7ed9\u5b9a\u6570\u636e\u96c6\u4e0a\u8ba1\u7b97\u8bef\u5dee\u3002 Args: dataSet -- \u8f93\u5165\u6570\u636e\u96c6 Returns: \u8c03\u7528 linearSolve \u51fd\u6570\uff0c\u8fd4\u56de yHat \u548c Y \u4e4b\u95f4\u7684\u5e73\u65b9\u8bef\u5dee\u3002 \"\"\" ws, X, Y = linearSolve(dataSet) yHat = X * ws # print corrcoef(yHat, Y, rowvar=0) return sum(power(Y - yHat, 2)) # helper function used in two places def linearSolve(dataSet): \"\"\" Desc: \u5c06\u6570\u636e\u96c6\u683c\u5f0f\u5316\u6210\u76ee\u6807\u53d8\u91cfY\u548c\u81ea\u53d8\u91cfX\uff0c\u6267\u884c\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\uff0c\u5f97\u5230ws Args: dataSet -- \u8f93\u5165\u6570\u636e Returns: ws -- \u6267\u884c\u7ebf\u6027\u56de\u5f52\u7684\u56de\u5f52\u7cfb\u6570 X -- \u683c\u5f0f\u5316\u81ea\u53d8\u91cfX Y -- \u683c\u5f0f\u5316\u76ee\u6807\u53d8\u91cfY \"\"\" m, n = shape(dataSet) # \u4ea7\u751f\u4e00\u4e2a\u5173\u4e8e1\u7684\u77e9\u9635 X = mat(ones((m, n))) Y = mat(ones((m, 1))) # X\u76840\u5217\u4e3a1\uff0c\u5e38\u6570\u9879\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u8861\u8bef\u5dee X[:, 1: n] = dataSet[:, 0: n-1] Y = dataSet[:, -1] # \u8f6c\u7f6e\u77e9\u9635*\u77e9\u9635 xTx = X.T * X # \u5982\u679c\u77e9\u9635\u7684\u9006\u4e0d\u5b58\u5728\uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u5f02\u5e38 if linalg.det(xTx) == 0.0: raise NameError('This matrix is singular, cannot do inverse,\\ntry increasing the second value of ops') # \u6700\u5c0f\u4e8c\u4e58\u6cd5\u6c42\u6700\u4f18\u89e3: w0*1+w1*x1=y ws = xTx.I * (X.T * Y) return ws, X, Y \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py","title":"3.2\u3001\u6a21\u578b\u6811 \u4ee3\u7801"},{"location":"ml/9.TreeRegression/#33","text":"","title":"3.3\u3001\u6a21\u578b\u6811 \u8fd0\u884c\u7ed3\u679c"},{"location":"ml/9.TreeRegression/#4","text":"","title":"4\u3001\u6811\u56de\u5f52 \u9879\u76ee\u6848\u4f8b"},{"location":"ml/9.TreeRegression/#411","text":"","title":"4.1\u3001\u9879\u76ee\u6848\u4f8b1: \u6811\u56de\u5f52\u4e0e\u6807\u51c6\u56de\u5f52\u7684\u6bd4\u8f83"},{"location":"ml/9.TreeRegression/#411_1","text":"\u524d\u9762\u4ecb\u7ecd\u4e86\u6a21\u578b\u6811\u3001\u56de\u5f52\u6811\u548c\u4e00\u822c\u7684\u56de\u5f52\u65b9\u6cd5\uff0c\u4e0b\u9762\u6d4b\u8bd5\u4e00\u4e0b\u54ea\u4e2a\u6a21\u578b\u6700\u597d\u3002 \u8fd9\u4e9b\u6a21\u578b\u5c06\u5728\u67d0\u4e2a\u6570\u636e\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8be5\u6570\u636e\u6d89\u53ca\u4eba\u7684\u667a\u529b\u6c34\u5e73\u548c\u81ea\u884c\u8f66\u7684\u901f\u5ea6\u7684\u5173\u7cfb\u3002\u5f53\u7136\uff0c\u6570\u636e\u662f\u5047\u7684\u3002","title":"4.1.1\u3001\u9879\u76ee\u6982\u8ff0"},{"location":"ml/9.TreeRegression/#412","text":"\u6536\u96c6\u6570\u636e\uff1a\u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6a21\u578b\u6811\u7684\u6784\u5efa \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5 \u6536\u96c6\u6570\u636e: \u91c7\u7528\u4efb\u610f\u65b9\u6cd5\u6536\u96c6\u6570\u636e \u51c6\u5907\u6570\u636e\uff1a\u9700\u8981\u6570\u503c\u578b\u6570\u636e\uff0c\u6807\u79f0\u578b\u6570\u636e\u5e94\u8be5\u6620\u5c04\u6210\u4e8c\u503c\u578b\u6570\u636e \u6570\u636e\u5b58\u50a8\u683c\u5f0f: 3.000000 46.852122 23.000000 178.676107 0.000000 86.154024 6.000000 68.707614 15.000000 139.737693 \u5206\u6790\u6570\u636e\uff1a\u7ed8\u51fa\u6570\u636e\u7684\u4e8c\u7ef4\u53ef\u89c6\u5316\u663e\u793a\u7ed3\u679c\uff0c\u4ee5\u5b57\u5178\u65b9\u5f0f\u751f\u6210\u6811 \u8bad\u7ec3\u7b97\u6cd5\uff1a\u6a21\u578b\u6811\u7684\u6784\u5efa \u7528\u6811\u56de\u5f52\u8fdb\u884c\u9884\u6d4b\u7684\u4ee3\u7801 # \u56de\u5f52\u6811\u6d4b\u8bd5\u6848\u4f8b # \u4e3a\u4e86\u548c modelTreeEval() \u4fdd\u6301\u4e00\u81f4\uff0c\u4fdd\u7559\u4e24\u4e2a\u8f93\u5165\u53c2\u6570 def regTreeEval(model, inDat): \"\"\" Desc: \u5bf9 \u56de\u5f52\u6811 \u8fdb\u884c\u9884\u6d4b Args: model -- \u6307\u5b9a\u6a21\u578b\uff0c\u53ef\u9009\u503c\u4e3a \u56de\u5f52\u6811\u6a21\u578b \u6216\u8005 \u6a21\u578b\u6811\u6a21\u578b\uff0c\u8fd9\u91cc\u4e3a\u56de\u5f52\u6811 inDat -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e Returns: float(model) -- \u5c06\u8f93\u5165\u7684\u6a21\u578b\u6570\u636e\u8f6c\u6362\u4e3a \u6d6e\u70b9\u6570 \u8fd4\u56de \"\"\" return float(model) # \u6a21\u578b\u6811\u6d4b\u8bd5\u6848\u4f8b # \u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u683c\u5f0f\u5316\u5904\u7406\uff0c\u5728\u539f\u6570\u636e\u77e9\u9635\u4e0a\u589e\u52a0\u7b2c0\u5217\uff0c\u5143\u7d20\u7684\u503c\u90fd\u662f1\uff0c # \u4e5f\u5c31\u662f\u589e\u52a0\u504f\u79fb\u503c\uff0c\u548c\u6211\u4eec\u4e4b\u524d\u7684\u7b80\u5355\u7ebf\u6027\u56de\u5f52\u662f\u4e00\u4e2a\u5957\u8def\uff0c\u589e\u52a0\u4e00\u4e2a\u504f\u79fb\u91cf def modelTreeEval(model, inDat): \"\"\" Desc: \u5bf9 \u6a21\u578b\u6811 \u8fdb\u884c\u9884\u6d4b Args: model -- \u8f93\u5165\u6a21\u578b\uff0c\u53ef\u9009\u503c\u4e3a \u56de\u5f52\u6811\u6a21\u578b \u6216\u8005 \u6a21\u578b\u6811\u6a21\u578b\uff0c\u8fd9\u91cc\u4e3a\u6a21\u578b\u6811\u6a21\u578b inDat -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e Returns: float(X * model) -- \u5c06\u6d4b\u8bd5\u6570\u636e\u4e58\u4ee5 \u56de\u5f52\u7cfb\u6570 \u5f97\u5230\u4e00\u4e2a\u9884\u6d4b\u503c \uff0c\u8f6c\u5316\u4e3a \u6d6e\u70b9\u6570 \u8fd4\u56de \"\"\" n = shape(inDat)[1] X = mat(ones((1, n+1))) X[:, 1: n+1] = inDat # print X, model return float(X * model) # \u8ba1\u7b97\u9884\u6d4b\u7684\u7ed3\u679c # \u5728\u7ed9\u5b9a\u6811\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u5355\u4e2a\u6570\u636e\u70b9\uff0c\u8be5\u51fd\u6570\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9884\u6d4b\u503c\u3002 # modelEval\u662f\u5bf9\u53f6\u8282\u70b9\u8fdb\u884c\u9884\u6d4b\u7684\u51fd\u6570\u5f15\u7528\uff0c\u6307\u5b9a\u6811\u7684\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5728\u53f6\u8282\u70b9\u4e0a\u8c03\u7528\u5408\u9002\u7684\u6a21\u578b\u3002 # \u6b64\u51fd\u6570\u81ea\u9876\u5411\u4e0b\u904d\u5386\u6574\u68f5\u6811\uff0c\u76f4\u5230\u547d\u4e2d\u53f6\u8282\u70b9\u4e3a\u6b62\uff0c\u4e00\u65e6\u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u5b83\u5c31\u4f1a\u5728\u8f93\u5165\u6570\u636e\u4e0a # \u8c03\u7528modelEval()\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u9ed8\u8ba4\u503c\u4e3aregTreeEval() def treeForeCast(tree, inData, modelEval=regTreeEval): \"\"\" Desc: \u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u6811\u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u662f \u56de\u5f52\u6811 \u4e5f\u53ef\u4ee5\u662f \u6a21\u578b\u6811 Args: tree -- \u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6811\u7684\u6a21\u578b inData -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e modelEval -- \u9884\u6d4b\u7684\u6811\u7684\u6a21\u578b\u7c7b\u578b\uff0c\u53ef\u9009\u503c\u4e3a regTreeEval\uff08\u56de\u5f52\u6811\uff09 \u6216 modelTreeEval\uff08\u6a21\u578b\u6811\uff09\uff0c\u9ed8\u8ba4\u4e3a\u56de\u5f52\u6811 Returns: \u8fd4\u56de\u9884\u6d4b\u503c \"\"\" if not isTree(tree): return modelEval(tree, inData) if inData[tree['spInd']] <= tree['spVal']: if isTree(tree['left']): return treeForeCast(tree['left'], inData, modelEval) else: return modelEval(tree['left'], inData) else: if isTree(tree['right']): return treeForeCast(tree['right'], inData, modelEval) else: return modelEval(tree['right'], inData) # \u9884\u6d4b\u7ed3\u679c def createForeCast(tree, testData, modelEval=regTreeEval): \"\"\" Desc: \u8c03\u7528 treeForeCast \uff0c\u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u6811\u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u662f \u56de\u5f52\u6811 \u4e5f\u53ef\u4ee5\u662f \u6a21\u578b\u6811 Args: tree -- \u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6811\u7684\u6a21\u578b inData -- \u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e modelEval -- \u9884\u6d4b\u7684\u6811\u7684\u6a21\u578b\u7c7b\u578b\uff0c\u53ef\u9009\u503c\u4e3a regTreeEval\uff08\u56de\u5f52\u6811\uff09 \u6216 modelTreeEval\uff08\u6a21\u578b\u6811\uff09\uff0c\u9ed8\u8ba4\u4e3a\u56de\u5f52\u6811 Returns: \u8fd4\u56de\u9884\u6d4b\u503c\u77e9\u9635 \"\"\" m = len(testData) yHat = mat(zeros((m, 1))) # print yHat for i in range(m): yHat[i, 0] = treeForeCast(tree, mat(testData[i]), modelEval) # print \"yHat==>\", yHat[i, 0] return yHat \u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/regTrees.py \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684R^2\u503c\u6765\u5206\u6790\u6a21\u578b\u7684\u6548\u679c R^2 \u5224\u5b9a\u7cfb\u6570\u5c31\u662f\u62df\u5408\u4f18\u5ea6\u5224\u5b9a\u7cfb\u6570\uff0c\u5b83\u4f53\u73b0\u4e86\u56de\u5f52\u6a21\u578b\u4e2d\u81ea\u53d8\u91cf\u7684\u53d8\u5f02\u5728\u56e0\u53d8\u91cf\u7684\u53d8\u5f02\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u5982 R^2=0.99999 \u8868\u793a\u5728\u56e0\u53d8\u91cf y \u7684\u53d8\u5f02\u4e2d\u6709 99.999% \u662f\u7531\u4e8e\u53d8\u91cf x \u5f15\u8d77\u3002\u5f53 R^2=1 \u65f6\u8868\u793a\uff0c\u6240\u6709\u89c2\u6d4b\u70b9\u90fd\u843d\u5728\u62df\u5408\u7684\u76f4\u7ebf\u6216\u66f2\u7ebf\u4e0a\uff1b\u5f53 R^2=0 \u65f6\uff0c\u8868\u793a\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u4e0d\u5b58\u5728\u76f4\u7ebf\u6216\u66f2\u7ebf\u5173\u7cfb\u3002 \u6240\u4ee5\u6211\u4eec\u770b\u51fa\uff0c R^2 \u7684\u503c\u8d8a\u63a5\u8fd1 1.0 \u8d8a\u597d\u3002 \u4f7f\u7528\u7b97\u6cd5\uff1a\u4f7f\u7528\u8bad\u7ec3\u51fa\u7684\u6811\u505a\u9884\u6d4b\uff0c\u9884\u6d4b\u7ed3\u679c\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u5f88\u591a\u4e8b\u60c5","title":"4.1.2\u3001\u5f00\u53d1\u6d41\u7a0b"},{"location":"ml/9.TreeRegression/#5-python-gui","text":"","title":"5\u3001\u9644\u52a0 Python \u4e2d GUI \u7684\u4f7f\u7528"},{"location":"ml/9.TreeRegression/#51-python-tkinter-gui","text":"\u5982\u679c\u80fd\u8ba9\u7528\u6237\u4e0d\u9700\u8981\u4efb\u4f55\u6307\u4ee4\u5c31\u53ef\u4ee5\u6309\u7167\u4ed6\u4eec\u81ea\u5df1\u7684\u65b9\u5f0f\u6765\u5206\u6790\u6570\u636e\uff0c\u5c31\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u505a\u51fa\u8fc7\u591a\u89e3\u91ca\u3002\u5176\u4e2d\u4e00\u4e2a\u80fd\u540c\u65f6\u652f\u6301\u6570\u636e\u5448\u73b0\u548c\u7528\u6237\u4ea4\u4e92\u7684\u65b9\u5f0f\u5c31\u662f\u6784\u5efa\u4e00\u4e2a\u56fe\u5f62\u7528\u6237\u754c\u9762(GUI\uff0cGraphical User Interface)\uff0c\u5982\u56fe9-7\u6240\u793a\u3002","title":"5.1\u3001\u4f7f\u7528 Python \u7684 Tkinter \u5e93\u521b\u5efa GUI"},{"location":"ml/9.TreeRegression/#52-tkinter-gui","text":"Python \u6709\u5f88\u591a GUI \u6846\u67b6\uff0c\u5176\u4e2d\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684 Tkinter\uff0c\u662f\u968f Python \u7684\u6807\u51c6\u7248\u7f16\u8bd1\u7248\u672c\u53d1\u5e03\u7684\u3002Tkinter \u53ef\u4ee5\u5728 Windows\u3001Mac OS\u548c\u5927\u591a\u6570\u7684 Linux \u5e73\u53f0\u4e0a\u4f7f\u7528\u3002","title":"5.2\u3001\u7528 Tkinter \u521b\u5efa GUI"},{"location":"ml/9.TreeRegression/#53-matplotlib-tkinter","text":"MatPlotlib \u7684\u6784\u5efa\u7a0b\u5e8f\u5305\u542b\u4e00\u4e2a\u524d\u7aef\uff0c\u4e5f\u5c31\u662f\u9762\u5411\u7528\u6237\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982 plot() \u548c scatter() \u65b9\u6cd5\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u540c\u65f6\u521b\u5efa\u4e86\u4e00\u4e2a\u540e\u7aef\uff0c\u7528\u4e8e\u5b9e\u73b0\u7ed8\u56fe\u548c\u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\u63a5\u53e3\u3002 \u901a\u8fc7\u6539\u53d8\u540e\u7aef\u53ef\u4ee5\u5c06\u56fe\u50cf\u7ed8\u5236\u5728PNG\u3001PDF\u3001SVG\u7b49\u683c\u5f0f\u7684\u6587\u4ef6\u4e0a\u3002\u4e0b\u9762\u5c06\u8bbe\u7f6e\u540e\u7aef\u4e3a TkAgg (Agg \u662f\u4e00\u4e2a C++ \u7684\u5e93\uff0c\u53ef\u4ee5\u4ece\u56fe\u50cf\u521b\u5efa\u5149\u6805\u56fe)\u3002TkAgg\u53ef\u4ee5\u5728\u6240\u9009GUI\u6846\u67b6\u4e0a\u8c03\u7528Agg\uff0c\u628a Agg \u5448\u73b0\u5728\u753b\u5e03\u4e0a\u3002\u6211\u4eec\u53ef\u4ee5\u5728Tk\u7684GUI\u4e0a\u653e\u7f6e\u4e00\u4e2a\u753b\u5e03\uff0c\u5e76\u7528 .grid()\u6765\u8c03\u6574\u5e03\u5c40\u3002","title":"5.3\u3001\u96c6\u6210 Matplotlib \u548c Tkinter"},{"location":"ml/9.TreeRegression/#54treeexplore-gui","text":"\u5b8c\u6574\u4ee3\u7801\u5730\u5740 : https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/9.RegTrees/treeExplore.py","title":"5.4\u3001\u7528treeExplore \u7684GUI\u6784\u5efa\u7684\u6a21\u578b\u6811\u793a\u4f8b\u56fe"},{"location":"ml/9.TreeRegression/#6","text":"\u6570\u636e\u96c6\u4e2d\u7ecf\u5e38\u5305\u542b\u4e00\u4e9b\u590d\u6742\u7684\u76f8\u5173\u5173\u7cfb\uff0c\u4f7f\u5f97\u8f93\u5165\u6570\u636e\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u5448\u73b0\u975e\u7ebf\u6027\u5173\u7cfb\u3002\u5bf9\u8fd9\u4e9b\u590d\u6742\u7684\u5173\u7cfb\u5efa\u6a21\uff0c\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u6811\u6765\u5bf9\u9884\u6d4b\u503c\u5206\u6bb5\uff0c\u5305\u62ec\u5206\u6bb5\u5e38\u6570\u6216\u5206\u6bb5\u76f4\u7ebf\u3002\u4e00\u822c\u91c7\u7528\u6811\u7ed3\u6784\u6765\u5bf9\u8fd9\u79cd\u6570\u636e\u5efa\u6a21\u3002\u76f8\u5e94\u5730\uff0c\u82e5\u53f6\u8282\u70b9\u4f7f\u7528\u7684\u6a21\u578b\u662f\u5206\u6bb5\u5e38\u6570\u5219\u79f0\u4e3a\u56de\u5f52\u6811\uff0c\u82e5\u53f6\u8282\u70b9\u4f7f\u7528\u7684\u6a21\u578b\u5e08\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\u5219\u79f0\u4e3a\u6a21\u578b\u6811\u3002 CART \u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u4e8c\u5143\u6811\u5e76\u5904\u7406\u79bb\u6563\u578b\u6216\u8fde\u7eed\u578b\u6570\u636e\u7684\u5207\u5206\u3002\u82e5\u4f7f\u7528\u4e0d\u540c\u7684\u8bef\u5dee\u51c6\u5219\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7CART \u7b97\u6cd5\u6784\u5efa\u6a21\u578b\u6811\u548c\u56de\u5f52\u6811\u3002\u8be5\u7b97\u6cd5\u6784\u5efa\u51fa\u7684\u6811\u4f1a\u503e\u5411\u4e8e\u5bf9\u6570\u636e\u8fc7\u62df\u5408\u3002\u4e00\u68f5\u8fc7\u62df\u5408\u7684\u6811\u5e38\u5e38\u5341\u5206\u590d\u6742\uff0c\u526a\u679d\u6280\u672f\u7684\u51fa\u73b0\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4e24\u79cd\u526a\u679d\u65b9\u6cd5\u5206\u522b\u662f\u9884\u526a\u679d\uff08\u5728\u6811\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5c31\u8fdb\u884c\u526a\u679d\uff09\u548c\u540e\u526a\u679d\uff08\u5f53\u6811\u6784\u5efa\u5b8c\u6bd5\u518d\u8fdb\u884c\u526a\u679d\uff09\uff0c\u9884\u526a\u679d\u66f4\u6709\u6548\u4f46\u9700\u8981\u7528\u6237\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u3002 Tkinter \u662f Python \u7684\u4e00\u4e2a GUI \u5de5\u5177\u5305\u3002\u867d\u7136\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u5305\uff0c\u4f46\u5b83\u6700\u5e38\u7528\u3002\u5229\u7528 Tkinter \uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u8f7b\u677e\u677e\u7ed8\u5236\u5404\u79cd\u90e8\u4ef6\u5e76\u5b89\u6392\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4e3a Tkinter \u6784\u9020\u4e00\u4e2a\u7279\u6b8a\u7684\u90e8\u4ef6\u6765\u663e\u793a Matplotlib \u7ed8\u51fa\u7684\u56fe\u3002\u6240\u4ee5\uff0cMatplotlib \u548c Tkinter \u7684\u96c6\u6210\u53ef\u4ee5\u6784\u5efa\u51fa\u66f4\u5f3a\u5927\u7684 GUI \uff0c\u7528\u6237\u53ef\u4ee5\u4ee5\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u6765\u63a2\u7d22\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5965\u5999\u3002 \u4f5c\u8005\uff1a \u7247\u523b \u5c0f\u7476 GitHub\u5730\u5740 : https://github.com/apachecn/AiLearning \u7248\u6743\u58f0\u660e\uff1a\u6b22\u8fce\u8f6c\u8f7d\u5b66\u4e60 => \u8bf7\u6807\u6ce8\u4fe1\u606f\u6765\u6e90\u4e8e ApacheCN","title":"6\u3001\u6811\u56de\u5f52 \u5c0f\u7ed3"}]}